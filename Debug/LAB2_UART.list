
LAB2_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fc8  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080091a0  080091a0  0000a1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091e0  080091e0  0000b00c  2**0
                  CONTENTS
  4 .ARM          00000008  080091e0  080091e0  0000a1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091e8  080091e8  0000b00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091e8  080091e8  0000a1e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080091ec  080091ec  0000a1ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080091f0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000010  080091fc  0000b010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002c4  080091fc  0000b2c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178f8  00000000  00000000  0000b03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a8d  00000000  00000000  00022934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  000253c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001018  00000000  00000000  00026860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000284e7  00000000  00000000  00027878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001770a  00000000  00000000  0004fd5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112223  00000000  00000000  00067469  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017968c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005acc  00000000  00000000  001796d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  0017f19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009188 	.word	0x08009188

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08009188 	.word	0x08009188

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2f>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a0c:	bf24      	itt	cs
 8000a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a16:	d90d      	bls.n	8000a34 <__aeabi_d2f+0x30>
 8000a18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a2c:	bf08      	it	eq
 8000a2e:	f020 0001 	biceq.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a38:	d121      	bne.n	8000a7e <__aeabi_d2f+0x7a>
 8000a3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a3e:	bfbc      	itt	lt
 8000a40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a44:	4770      	bxlt	lr
 8000a46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4e:	f1c2 0218 	rsb	r2, r2, #24
 8000a52:	f1c2 0c20 	rsb	ip, r2, #32
 8000a56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5e:	bf18      	it	ne
 8000a60:	f040 0001 	orrne.w	r0, r0, #1
 8000a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a70:	ea40 000c 	orr.w	r0, r0, ip
 8000a74:	fa23 f302 	lsr.w	r3, r3, r2
 8000a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a7c:	e7cc      	b.n	8000a18 <__aeabi_d2f+0x14>
 8000a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a82:	d107      	bne.n	8000a94 <__aeabi_d2f+0x90>
 8000a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a88:	bf1e      	ittt	ne
 8000a8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a92:	4770      	bxne	lr
 8000a94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_uldivmod>:
 8000aa4:	b953      	cbnz	r3, 8000abc <__aeabi_uldivmod+0x18>
 8000aa6:	b94a      	cbnz	r2, 8000abc <__aeabi_uldivmod+0x18>
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	bf08      	it	eq
 8000aac:	2800      	cmpeq	r0, #0
 8000aae:	bf1c      	itt	ne
 8000ab0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ab4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab8:	f000 b96a 	b.w	8000d90 <__aeabi_idiv0>
 8000abc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac4:	f000 f806 	bl	8000ad4 <__udivmoddi4>
 8000ac8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad0:	b004      	add	sp, #16
 8000ad2:	4770      	bx	lr

08000ad4 <__udivmoddi4>:
 8000ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad8:	9d08      	ldr	r5, [sp, #32]
 8000ada:	460c      	mov	r4, r1
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d14e      	bne.n	8000b7e <__udivmoddi4+0xaa>
 8000ae0:	4694      	mov	ip, r2
 8000ae2:	458c      	cmp	ip, r1
 8000ae4:	4686      	mov	lr, r0
 8000ae6:	fab2 f282 	clz	r2, r2
 8000aea:	d962      	bls.n	8000bb2 <__udivmoddi4+0xde>
 8000aec:	b14a      	cbz	r2, 8000b02 <__udivmoddi4+0x2e>
 8000aee:	f1c2 0320 	rsb	r3, r2, #32
 8000af2:	4091      	lsls	r1, r2
 8000af4:	fa20 f303 	lsr.w	r3, r0, r3
 8000af8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000afc:	4319      	orrs	r1, r3
 8000afe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b06:	fa1f f68c 	uxth.w	r6, ip
 8000b0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b12:	fb07 1114 	mls	r1, r7, r4, r1
 8000b16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b1a:	fb04 f106 	mul.w	r1, r4, r6
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	d90a      	bls.n	8000b38 <__udivmoddi4+0x64>
 8000b22:	eb1c 0303 	adds.w	r3, ip, r3
 8000b26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b2a:	f080 8112 	bcs.w	8000d52 <__udivmoddi4+0x27e>
 8000b2e:	4299      	cmp	r1, r3
 8000b30:	f240 810f 	bls.w	8000d52 <__udivmoddi4+0x27e>
 8000b34:	3c02      	subs	r4, #2
 8000b36:	4463      	add	r3, ip
 8000b38:	1a59      	subs	r1, r3, r1
 8000b3a:	fa1f f38e 	uxth.w	r3, lr
 8000b3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b42:	fb07 1110 	mls	r1, r7, r0, r1
 8000b46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4a:	fb00 f606 	mul.w	r6, r0, r6
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	d90a      	bls.n	8000b68 <__udivmoddi4+0x94>
 8000b52:	eb1c 0303 	adds.w	r3, ip, r3
 8000b56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b5a:	f080 80fc 	bcs.w	8000d56 <__udivmoddi4+0x282>
 8000b5e:	429e      	cmp	r6, r3
 8000b60:	f240 80f9 	bls.w	8000d56 <__udivmoddi4+0x282>
 8000b64:	4463      	add	r3, ip
 8000b66:	3802      	subs	r0, #2
 8000b68:	1b9b      	subs	r3, r3, r6
 8000b6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b6e:	2100      	movs	r1, #0
 8000b70:	b11d      	cbz	r5, 8000b7a <__udivmoddi4+0xa6>
 8000b72:	40d3      	lsrs	r3, r2
 8000b74:	2200      	movs	r2, #0
 8000b76:	e9c5 3200 	strd	r3, r2, [r5]
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d905      	bls.n	8000b8e <__udivmoddi4+0xba>
 8000b82:	b10d      	cbz	r5, 8000b88 <__udivmoddi4+0xb4>
 8000b84:	e9c5 0100 	strd	r0, r1, [r5]
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	e7f5      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000b8e:	fab3 f183 	clz	r1, r3
 8000b92:	2900      	cmp	r1, #0
 8000b94:	d146      	bne.n	8000c24 <__udivmoddi4+0x150>
 8000b96:	42a3      	cmp	r3, r4
 8000b98:	d302      	bcc.n	8000ba0 <__udivmoddi4+0xcc>
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	f0c0 80f0 	bcc.w	8000d80 <__udivmoddi4+0x2ac>
 8000ba0:	1a86      	subs	r6, r0, r2
 8000ba2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	2d00      	cmp	r5, #0
 8000baa:	d0e6      	beq.n	8000b7a <__udivmoddi4+0xa6>
 8000bac:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb0:	e7e3      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000bb2:	2a00      	cmp	r2, #0
 8000bb4:	f040 8090 	bne.w	8000cd8 <__udivmoddi4+0x204>
 8000bb8:	eba1 040c 	sub.w	r4, r1, ip
 8000bbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc0:	fa1f f78c 	uxth.w	r7, ip
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bce:	fb08 4416 	mls	r4, r8, r6, r4
 8000bd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bd6:	fb07 f006 	mul.w	r0, r7, r6
 8000bda:	4298      	cmp	r0, r3
 8000bdc:	d908      	bls.n	8000bf0 <__udivmoddi4+0x11c>
 8000bde:	eb1c 0303 	adds.w	r3, ip, r3
 8000be2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x11a>
 8000be8:	4298      	cmp	r0, r3
 8000bea:	f200 80cd 	bhi.w	8000d88 <__udivmoddi4+0x2b4>
 8000bee:	4626      	mov	r6, r4
 8000bf0:	1a1c      	subs	r4, r3, r0
 8000bf2:	fa1f f38e 	uxth.w	r3, lr
 8000bf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c02:	fb00 f707 	mul.w	r7, r0, r7
 8000c06:	429f      	cmp	r7, r3
 8000c08:	d908      	bls.n	8000c1c <__udivmoddi4+0x148>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c12:	d202      	bcs.n	8000c1a <__udivmoddi4+0x146>
 8000c14:	429f      	cmp	r7, r3
 8000c16:	f200 80b0 	bhi.w	8000d7a <__udivmoddi4+0x2a6>
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	1bdb      	subs	r3, r3, r7
 8000c1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c22:	e7a5      	b.n	8000b70 <__udivmoddi4+0x9c>
 8000c24:	f1c1 0620 	rsb	r6, r1, #32
 8000c28:	408b      	lsls	r3, r1
 8000c2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c2e:	431f      	orrs	r7, r3
 8000c30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c34:	fa04 f301 	lsl.w	r3, r4, r1
 8000c38:	ea43 030c 	orr.w	r3, r3, ip
 8000c3c:	40f4      	lsrs	r4, r6
 8000c3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c42:	0c38      	lsrs	r0, r7, #16
 8000c44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c48:	fbb4 fef0 	udiv	lr, r4, r0
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fb00 441e 	mls	r4, r0, lr, r4
 8000c54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c58:	fb0e f90c 	mul.w	r9, lr, ip
 8000c5c:	45a1      	cmp	r9, r4
 8000c5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x1a6>
 8000c64:	193c      	adds	r4, r7, r4
 8000c66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c6a:	f080 8084 	bcs.w	8000d76 <__udivmoddi4+0x2a2>
 8000c6e:	45a1      	cmp	r9, r4
 8000c70:	f240 8081 	bls.w	8000d76 <__udivmoddi4+0x2a2>
 8000c74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	eba4 0409 	sub.w	r4, r4, r9
 8000c7e:	fa1f f983 	uxth.w	r9, r3
 8000c82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c86:	fb00 4413 	mls	r4, r0, r3, r4
 8000c8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	d907      	bls.n	8000ca6 <__udivmoddi4+0x1d2>
 8000c96:	193c      	adds	r4, r7, r4
 8000c98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c9c:	d267      	bcs.n	8000d6e <__udivmoddi4+0x29a>
 8000c9e:	45a4      	cmp	ip, r4
 8000ca0:	d965      	bls.n	8000d6e <__udivmoddi4+0x29a>
 8000ca2:	3b02      	subs	r3, #2
 8000ca4:	443c      	add	r4, r7
 8000ca6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000caa:	fba0 9302 	umull	r9, r3, r0, r2
 8000cae:	eba4 040c 	sub.w	r4, r4, ip
 8000cb2:	429c      	cmp	r4, r3
 8000cb4:	46ce      	mov	lr, r9
 8000cb6:	469c      	mov	ip, r3
 8000cb8:	d351      	bcc.n	8000d5e <__udivmoddi4+0x28a>
 8000cba:	d04e      	beq.n	8000d5a <__udivmoddi4+0x286>
 8000cbc:	b155      	cbz	r5, 8000cd4 <__udivmoddi4+0x200>
 8000cbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000cc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cca:	40cb      	lsrs	r3, r1
 8000ccc:	431e      	orrs	r6, r3
 8000cce:	40cc      	lsrs	r4, r1
 8000cd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	e750      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000cd8:	f1c2 0320 	rsb	r3, r2, #32
 8000cdc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ce8:	4094      	lsls	r4, r2
 8000cea:	430c      	orrs	r4, r1
 8000cec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000d00:	0c23      	lsrs	r3, r4, #16
 8000d02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d06:	fb00 f107 	mul.w	r1, r0, r7
 8000d0a:	4299      	cmp	r1, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x24c>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d16:	d22c      	bcs.n	8000d72 <__udivmoddi4+0x29e>
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	d92a      	bls.n	8000d72 <__udivmoddi4+0x29e>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	4463      	add	r3, ip
 8000d20:	1a5b      	subs	r3, r3, r1
 8000d22:	b2a4      	uxth	r4, r4
 8000d24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d28:	fb08 3311 	mls	r3, r8, r1, r3
 8000d2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d30:	fb01 f307 	mul.w	r3, r1, r7
 8000d34:	42a3      	cmp	r3, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x276>
 8000d38:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d40:	d213      	bcs.n	8000d6a <__udivmoddi4+0x296>
 8000d42:	42a3      	cmp	r3, r4
 8000d44:	d911      	bls.n	8000d6a <__udivmoddi4+0x296>
 8000d46:	3902      	subs	r1, #2
 8000d48:	4464      	add	r4, ip
 8000d4a:	1ae4      	subs	r4, r4, r3
 8000d4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d50:	e739      	b.n	8000bc6 <__udivmoddi4+0xf2>
 8000d52:	4604      	mov	r4, r0
 8000d54:	e6f0      	b.n	8000b38 <__udivmoddi4+0x64>
 8000d56:	4608      	mov	r0, r1
 8000d58:	e706      	b.n	8000b68 <__udivmoddi4+0x94>
 8000d5a:	45c8      	cmp	r8, r9
 8000d5c:	d2ae      	bcs.n	8000cbc <__udivmoddi4+0x1e8>
 8000d5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d66:	3801      	subs	r0, #1
 8000d68:	e7a8      	b.n	8000cbc <__udivmoddi4+0x1e8>
 8000d6a:	4631      	mov	r1, r6
 8000d6c:	e7ed      	b.n	8000d4a <__udivmoddi4+0x276>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	e799      	b.n	8000ca6 <__udivmoddi4+0x1d2>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e7d4      	b.n	8000d20 <__udivmoddi4+0x24c>
 8000d76:	46d6      	mov	lr, sl
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1a6>
 8000d7a:	4463      	add	r3, ip
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	e74d      	b.n	8000c1c <__udivmoddi4+0x148>
 8000d80:	4606      	mov	r6, r0
 8000d82:	4623      	mov	r3, r4
 8000d84:	4608      	mov	r0, r1
 8000d86:	e70f      	b.n	8000ba8 <__udivmoddi4+0xd4>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	e730      	b.n	8000bf0 <__udivmoddi4+0x11c>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_idiv0>:
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	0000      	movs	r0, r0
	...

08000d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d98:	b5b0      	push	{r4, r5, r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d9e:	f000 fee6 	bl	8001b6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da2:	f000 f913 	bl	8000fcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da6:	f000 fb63 	bl	8001470 <MX_GPIO_Init>
  MX_DMA_Init();
 8000daa:	f000 fb37 	bl	800141c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000dae:	f000 f9e1 	bl	8001174 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000db2:	f000 f957 	bl	8001064 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000db6:	f000 fa27 	bl	8001208 <MX_TIM1_Init>
  MX_TIM5_Init();
 8000dba:	f000 fae1 	bl	8001380 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000dbe:	217f      	movs	r1, #127	@ 0x7f
 8000dc0:	486f      	ldr	r0, [pc, #444]	@ (8000f80 <main+0x1e8>)
 8000dc2:	f002 fa53 	bl	800326c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 40);
 8000dc6:	2228      	movs	r2, #40	@ 0x28
 8000dc8:	496e      	ldr	r1, [pc, #440]	@ (8000f84 <main+0x1ec>)
 8000dca:	486d      	ldr	r0, [pc, #436]	@ (8000f80 <main+0x1e8>)
 8000dcc:	f001 fb40 	bl	8002450 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim1);
 8000dd0:	486d      	ldr	r0, [pc, #436]	@ (8000f88 <main+0x1f0>)
 8000dd2:	f004 fa3d 	bl	8005250 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	486b      	ldr	r0, [pc, #428]	@ (8000f88 <main+0x1f0>)
 8000dda:	f004 fb83 	bl	80054e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000dde:	2104      	movs	r1, #4
 8000de0:	4869      	ldr	r0, [pc, #420]	@ (8000f88 <main+0x1f0>)
 8000de2:	f004 fb7f 	bl	80054e4 <HAL_TIM_PWM_Start>
  UARTInterruptConfig();
 8000de6:	f000 fc3d 	bl	8001664 <UARTInterruptConfig>
  HAL_TIM_Base_Start_IT(&htim5);
 8000dea:	4868      	ldr	r0, [pc, #416]	@ (8000f8c <main+0x1f4>)
 8000dec:	f004 faa0 	bl	8005330 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  error = setposition - position;
 8000df0:	4b67      	ldr	r3, [pc, #412]	@ (8000f90 <main+0x1f8>)
 8000df2:	ed93 7a00 	vldr	s14, [r3]
 8000df6:	4b67      	ldr	r3, [pc, #412]	@ (8000f94 <main+0x1fc>)
 8000df8:	edd3 7a00 	vldr	s15, [r3]
 8000dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e00:	4b65      	ldr	r3, [pc, #404]	@ (8000f98 <main+0x200>)
 8000e02:	edc3 7a00 	vstr	s15, [r3]
	  ADC_avg[0] = error;
 8000e06:	4b64      	ldr	r3, [pc, #400]	@ (8000f98 <main+0x200>)
 8000e08:	edd3 7a00 	vldr	s15, [r3]
 8000e0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e10:	ee17 3a90 	vmov	r3, s15
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	4b61      	ldr	r3, [pc, #388]	@ (8000f9c <main+0x204>)
 8000e18:	801a      	strh	r2, [r3, #0]
	  avg();
 8000e1a:	f000 fb99 	bl	8001550 <avg>
	  static uint64_t timestamp = 0;
	  uint64_t currentTime = micros();
 8000e1e:	f000 fc61 	bl	80016e4 <micros>
 8000e22:	e9c7 0100 	strd	r0, r1, [r7]

	  if(currentTime > timestamp)
 8000e26:	4b5e      	ldr	r3, [pc, #376]	@ (8000fa0 <main+0x208>)
 8000e28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e30:	4290      	cmp	r0, r2
 8000e32:	eb71 0303 	sbcs.w	r3, r1, r3
 8000e36:	d225      	bcs.n	8000e84 <main+0xec>
	  {
		  timestamp = currentTime + 5000; //us 200 Hz
 8000e38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e3c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000e40:	1854      	adds	r4, r2, r1
 8000e42:	f143 0500 	adc.w	r5, r3, #0
 8000e46:	4b56      	ldr	r3, [pc, #344]	@ (8000fa0 <main+0x208>)
 8000e48:	e9c3 4500 	strd	r4, r5, [r3]
		  datasend = ADC_avg[0];
 8000e4c:	4b53      	ldr	r3, [pc, #332]	@ (8000f9c <main+0x204>)
 8000e4e:	881a      	ldrh	r2, [r3, #0]
 8000e50:	4b54      	ldr	r3, [pc, #336]	@ (8000fa4 <main+0x20c>)
 8000e52:	801a      	strh	r2, [r3, #0]

		  ADCBytes[0] = 0x69; //Header
 8000e54:	4b54      	ldr	r3, [pc, #336]	@ (8000fa8 <main+0x210>)
 8000e56:	2269      	movs	r2, #105	@ 0x69
 8000e58:	701a      	strb	r2, [r3, #0]
		  ADCBytes[1] = (uint8_t)(datasend & 0xFF); // Lower byte
 8000e5a:	4b52      	ldr	r3, [pc, #328]	@ (8000fa4 <main+0x20c>)
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	4b51      	ldr	r3, [pc, #324]	@ (8000fa8 <main+0x210>)
 8000e62:	705a      	strb	r2, [r3, #1]
		  ADCBytes[2] = (uint8_t)((datasend >> 8) & 0xFF); // Upper byte
 8000e64:	4b4f      	ldr	r3, [pc, #316]	@ (8000fa4 <main+0x20c>)
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	0a1b      	lsrs	r3, r3, #8
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4b4e      	ldr	r3, [pc, #312]	@ (8000fa8 <main+0x210>)
 8000e70:	709a      	strb	r2, [r3, #2]
		  ADCBytes[3] = 0x0A; //Terminater
 8000e72:	4b4d      	ldr	r3, [pc, #308]	@ (8000fa8 <main+0x210>)
 8000e74:	220a      	movs	r2, #10
 8000e76:	70da      	strb	r2, [r3, #3]

		  HAL_UART_Transmit(&hlpuart1, ADCBytes , sizeof(ADCBytes), 10);
 8000e78:	230a      	movs	r3, #10
 8000e7a:	2204      	movs	r2, #4
 8000e7c:	494a      	ldr	r1, [pc, #296]	@ (8000fa8 <main+0x210>)
 8000e7e:	484b      	ldr	r0, [pc, #300]	@ (8000fac <main+0x214>)
 8000e80:	f005 fe44 	bl	8006b0c <HAL_UART_Transmit>
	  }

	  Degree_position = (datasend*360.0)/4095.0;
 8000e84:	4b47      	ldr	r3, [pc, #284]	@ (8000fa4 <main+0x20c>)
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fb17 	bl	80004bc <__aeabi_i2d>
 8000e8e:	f04f 0200 	mov.w	r2, #0
 8000e92:	4b47      	ldr	r3, [pc, #284]	@ (8000fb0 <main+0x218>)
 8000e94:	f7ff fb7c 	bl	8000590 <__aeabi_dmul>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	a333      	add	r3, pc, #204	@ (adr r3, 8000f70 <main+0x1d8>)
 8000ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea6:	f7ff fc9d 	bl	80007e4 <__aeabi_ddiv>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	4610      	mov	r0, r2
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f7ff fd7f 	bl	80009b4 <__aeabi_d2iz>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	4a3e      	ldr	r2, [pc, #248]	@ (8000fb4 <main+0x21c>)
 8000eba:	6013      	str	r3, [r2, #0]
	  Rad_position = (datasend*3.14)/4095.0;
 8000ebc:	4b39      	ldr	r3, [pc, #228]	@ (8000fa4 <main+0x20c>)
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fafb 	bl	80004bc <__aeabi_i2d>
 8000ec6:	a32c      	add	r3, pc, #176	@ (adr r3, 8000f78 <main+0x1e0>)
 8000ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ecc:	f7ff fb60 	bl	8000590 <__aeabi_dmul>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	a325      	add	r3, pc, #148	@ (adr r3, 8000f70 <main+0x1d8>)
 8000eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ede:	f7ff fc81 	bl	80007e4 <__aeabi_ddiv>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f7ff fd63 	bl	80009b4 <__aeabi_d2iz>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	4a31      	ldr	r2, [pc, #196]	@ (8000fb8 <main+0x220>)
 8000ef2:	6013      	str	r3, [r2, #0]
	  PWM1 = (int16_t)(Recieve_PWM[2]<< 8) + Recieve_PWM[1];
 8000ef4:	4b31      	ldr	r3, [pc, #196]	@ (8000fbc <main+0x224>)
 8000ef6:	789b      	ldrb	r3, [r3, #2]
 8000ef8:	021b      	lsls	r3, r3, #8
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	4a2f      	ldr	r2, [pc, #188]	@ (8000fbc <main+0x224>)
 8000efe:	7852      	ldrb	r2, [r2, #1]
 8000f00:	4413      	add	r3, r2
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	b21a      	sxth	r2, r3
 8000f06:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc0 <main+0x228>)
 8000f08:	801a      	strh	r2, [r3, #0]
	  PWM2 = (int16_t)((PWM1*65535)/4095);
 8000f0a:	4b2d      	ldr	r3, [pc, #180]	@ (8000fc0 <main+0x228>)
 8000f0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4613      	mov	r3, r2
 8000f14:	041b      	lsls	r3, r3, #16
 8000f16:	1a9b      	subs	r3, r3, r2
 8000f18:	4a2a      	ldr	r2, [pc, #168]	@ (8000fc4 <main+0x22c>)
 8000f1a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f1e:	441a      	add	r2, r3
 8000f20:	12d2      	asrs	r2, r2, #11
 8000f22:	17db      	asrs	r3, r3, #31
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	b21b      	sxth	r3, r3
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b27      	ldr	r3, [pc, #156]	@ (8000fc8 <main+0x230>)
 8000f2c:	601a      	str	r2, [r3, #0]
	  if(PWM1 > 0)
 8000f2e:	4b24      	ldr	r3, [pc, #144]	@ (8000fc0 <main+0x228>)
 8000f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	dd09      	ble.n	8000f4c <main+0x1b4>
	  {
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000f38:	4b13      	ldr	r3, [pc, #76]	@ (8000f88 <main+0x1f0>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM2);
 8000f40:	4b21      	ldr	r3, [pc, #132]	@ (8000fc8 <main+0x230>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b10      	ldr	r3, [pc, #64]	@ (8000f88 <main+0x1f0>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f4a:	e751      	b.n	8000df0 <main+0x58>
	  }
	  else if(PWM1 < 0)
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc0 <main+0x228>)
 8000f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f6bf af4c 	bge.w	8000df0 <main+0x58>
	  {
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM2);
 8000f58:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc8 <main+0x230>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f88 <main+0x1f0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000f62:	4b09      	ldr	r3, [pc, #36]	@ (8000f88 <main+0x1f0>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2200      	movs	r2, #0
 8000f68:	639a      	str	r2, [r3, #56]	@ 0x38
  {
 8000f6a:	e741      	b.n	8000df0 <main+0x58>
 8000f6c:	f3af 8000 	nop.w
 8000f70:	00000000 	.word	0x00000000
 8000f74:	40affe00 	.word	0x40affe00
 8000f78:	51eb851f 	.word	0x51eb851f
 8000f7c:	40091eb8 	.word	0x40091eb8
 8000f80:	2000002c 	.word	0x2000002c
 8000f84:	20000224 	.word	0x20000224
 8000f88:	2000018c 	.word	0x2000018c
 8000f8c:	200001d8 	.word	0x200001d8
 8000f90:	200002a0 	.word	0x200002a0
 8000f94:	200002ac 	.word	0x200002ac
 8000f98:	200002b0 	.word	0x200002b0
 8000f9c:	20000274 	.word	0x20000274
 8000fa0:	200002b8 	.word	0x200002b8
 8000fa4:	2000027c 	.word	0x2000027c
 8000fa8:	20000278 	.word	0x20000278
 8000fac:	200000f8 	.word	0x200000f8
 8000fb0:	40768000 	.word	0x40768000
 8000fb4:	20000280 	.word	0x20000280
 8000fb8:	20000284 	.word	0x20000284
 8000fbc:	20000288 	.word	0x20000288
 8000fc0:	2000028e 	.word	0x2000028e
 8000fc4:	80080081 	.word	0x80080081
 8000fc8:	20000290 	.word	0x20000290

08000fcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b094      	sub	sp, #80	@ 0x50
 8000fd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd2:	f107 0318 	add.w	r3, r7, #24
 8000fd6:	2238      	movs	r2, #56	@ 0x38
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f008 f8a8 	bl	8009130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f003 f8a6 	bl	8004140 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ffe:	2340      	movs	r3, #64	@ 0x40
 8001000:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001002:	2302      	movs	r3, #2
 8001004:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001006:	2302      	movs	r3, #2
 8001008:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800100a:	2304      	movs	r3, #4
 800100c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800100e:	2355      	movs	r3, #85	@ 0x55
 8001010:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001012:	2302      	movs	r3, #2
 8001014:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001016:	2302      	movs	r3, #2
 8001018:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800101a:	2302      	movs	r3, #2
 800101c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101e:	f107 0318 	add.w	r3, r7, #24
 8001022:	4618      	mov	r0, r3
 8001024:	f003 f940 	bl	80042a8 <HAL_RCC_OscConfig>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800102e:	f000 fb73 	bl	8001718 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001032:	230f      	movs	r3, #15
 8001034:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001036:	2303      	movs	r3, #3
 8001038:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2104      	movs	r1, #4
 800104a:	4618      	mov	r0, r3
 800104c:	f003 fc3e 	bl	80048cc <HAL_RCC_ClockConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001056:	f000 fb5f 	bl	8001718 <Error_Handler>
  }
}
 800105a:	bf00      	nop
 800105c:	3750      	adds	r7, #80	@ 0x50
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08c      	sub	sp, #48	@ 0x30
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800106a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	2220      	movs	r2, #32
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f008 f857 	bl	8009130 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001082:	4b39      	ldr	r3, [pc, #228]	@ (8001168 <MX_ADC1_Init+0x104>)
 8001084:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001088:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800108a:	4b37      	ldr	r3, [pc, #220]	@ (8001168 <MX_ADC1_Init+0x104>)
 800108c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001090:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001092:	4b35      	ldr	r3, [pc, #212]	@ (8001168 <MX_ADC1_Init+0x104>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001098:	4b33      	ldr	r3, [pc, #204]	@ (8001168 <MX_ADC1_Init+0x104>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800109e:	4b32      	ldr	r3, [pc, #200]	@ (8001168 <MX_ADC1_Init+0x104>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010a4:	4b30      	ldr	r3, [pc, #192]	@ (8001168 <MX_ADC1_Init+0x104>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001168 <MX_ADC1_Init+0x104>)
 80010ac:	2204      	movs	r2, #4
 80010ae:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001168 <MX_ADC1_Init+0x104>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001168 <MX_ADC1_Init+0x104>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80010bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001168 <MX_ADC1_Init+0x104>)
 80010be:	2202      	movs	r2, #2
 80010c0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010c2:	4b29      	ldr	r3, [pc, #164]	@ (8001168 <MX_ADC1_Init+0x104>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ca:	4b27      	ldr	r3, [pc, #156]	@ (8001168 <MX_ADC1_Init+0x104>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010d0:	4b25      	ldr	r3, [pc, #148]	@ (8001168 <MX_ADC1_Init+0x104>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010d6:	4b24      	ldr	r3, [pc, #144]	@ (8001168 <MX_ADC1_Init+0x104>)
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010de:	4b22      	ldr	r3, [pc, #136]	@ (8001168 <MX_ADC1_Init+0x104>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010e4:	4b20      	ldr	r3, [pc, #128]	@ (8001168 <MX_ADC1_Init+0x104>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ec:	481e      	ldr	r0, [pc, #120]	@ (8001168 <MX_ADC1_Init+0x104>)
 80010ee:	f000 fff3 	bl	80020d8 <HAL_ADC_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80010f8:	f000 fb0e 	bl	8001718 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010fc:	2300      	movs	r3, #0
 80010fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001100:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001104:	4619      	mov	r1, r3
 8001106:	4818      	ldr	r0, [pc, #96]	@ (8001168 <MX_ADC1_Init+0x104>)
 8001108:	f002 f912 	bl	8003330 <HAL_ADCEx_MultiModeConfigChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001112:	f000 fb01 	bl	8001718 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001116:	4b15      	ldr	r3, [pc, #84]	@ (800116c <MX_ADC1_Init+0x108>)
 8001118:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800111a:	2306      	movs	r3, #6
 800111c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800111e:	2307      	movs	r3, #7
 8001120:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001122:	237f      	movs	r3, #127	@ 0x7f
 8001124:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001126:	2304      	movs	r3, #4
 8001128:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	4619      	mov	r1, r3
 8001132:	480d      	ldr	r0, [pc, #52]	@ (8001168 <MX_ADC1_Init+0x104>)
 8001134:	f001 fa7e 	bl	8002634 <HAL_ADC_ConfigChannel>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800113e:	f000 faeb 	bl	8001718 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001142:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <MX_ADC1_Init+0x10c>)
 8001144:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001146:	230c      	movs	r3, #12
 8001148:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	4619      	mov	r1, r3
 800114e:	4806      	ldr	r0, [pc, #24]	@ (8001168 <MX_ADC1_Init+0x104>)
 8001150:	f001 fa70 	bl	8002634 <HAL_ADC_ConfigChannel>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800115a:	f000 fadd 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	3730      	adds	r7, #48	@ 0x30
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	2000002c 	.word	0x2000002c
 800116c:	04300002 	.word	0x04300002
 8001170:	08600004 	.word	0x08600004

08001174 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001178:	4b21      	ldr	r3, [pc, #132]	@ (8001200 <MX_LPUART1_UART_Init+0x8c>)
 800117a:	4a22      	ldr	r2, [pc, #136]	@ (8001204 <MX_LPUART1_UART_Init+0x90>)
 800117c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800117e:	4b20      	ldr	r3, [pc, #128]	@ (8001200 <MX_LPUART1_UART_Init+0x8c>)
 8001180:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001184:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001186:	4b1e      	ldr	r3, [pc, #120]	@ (8001200 <MX_LPUART1_UART_Init+0x8c>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800118c:	4b1c      	ldr	r3, [pc, #112]	@ (8001200 <MX_LPUART1_UART_Init+0x8c>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001192:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <MX_LPUART1_UART_Init+0x8c>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001198:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <MX_LPUART1_UART_Init+0x8c>)
 800119a:	220c      	movs	r2, #12
 800119c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119e:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <MX_LPUART1_UART_Init+0x8c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011a4:	4b16      	ldr	r3, [pc, #88]	@ (8001200 <MX_LPUART1_UART_Init+0x8c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011aa:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <MX_LPUART1_UART_Init+0x8c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011b0:	4b13      	ldr	r3, [pc, #76]	@ (8001200 <MX_LPUART1_UART_Init+0x8c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80011b6:	4812      	ldr	r0, [pc, #72]	@ (8001200 <MX_LPUART1_UART_Init+0x8c>)
 80011b8:	f005 fc58 	bl	8006a6c <HAL_UART_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80011c2:	f000 faa9 	bl	8001718 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011c6:	2100      	movs	r1, #0
 80011c8:	480d      	ldr	r0, [pc, #52]	@ (8001200 <MX_LPUART1_UART_Init+0x8c>)
 80011ca:	f007 fee6 	bl	8008f9a <HAL_UARTEx_SetTxFifoThreshold>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80011d4:	f000 faa0 	bl	8001718 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011d8:	2100      	movs	r1, #0
 80011da:	4809      	ldr	r0, [pc, #36]	@ (8001200 <MX_LPUART1_UART_Init+0x8c>)
 80011dc:	f007 ff1b 	bl	8009016 <HAL_UARTEx_SetRxFifoThreshold>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80011e6:	f000 fa97 	bl	8001718 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80011ea:	4805      	ldr	r0, [pc, #20]	@ (8001200 <MX_LPUART1_UART_Init+0x8c>)
 80011ec:	f007 fe9c 	bl	8008f28 <HAL_UARTEx_DisableFifoMode>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80011f6:	f000 fa8f 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200000f8 	.word	0x200000f8
 8001204:	40008000 	.word	0x40008000

08001208 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b09c      	sub	sp, #112	@ 0x70
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001228:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
 8001238:	615a      	str	r2, [r3, #20]
 800123a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	2234      	movs	r2, #52	@ 0x34
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f007 ff74 	bl	8009130 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001248:	4b4b      	ldr	r3, [pc, #300]	@ (8001378 <MX_TIM1_Init+0x170>)
 800124a:	4a4c      	ldr	r2, [pc, #304]	@ (800137c <MX_TIM1_Init+0x174>)
 800124c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 800124e:	4b4a      	ldr	r3, [pc, #296]	@ (8001378 <MX_TIM1_Init+0x170>)
 8001250:	22a9      	movs	r2, #169	@ 0xa9
 8001252:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001254:	4b48      	ldr	r3, [pc, #288]	@ (8001378 <MX_TIM1_Init+0x170>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800125a:	4b47      	ldr	r3, [pc, #284]	@ (8001378 <MX_TIM1_Init+0x170>)
 800125c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001260:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001262:	4b45      	ldr	r3, [pc, #276]	@ (8001378 <MX_TIM1_Init+0x170>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001268:	4b43      	ldr	r3, [pc, #268]	@ (8001378 <MX_TIM1_Init+0x170>)
 800126a:	2200      	movs	r2, #0
 800126c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126e:	4b42      	ldr	r3, [pc, #264]	@ (8001378 <MX_TIM1_Init+0x170>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001274:	4840      	ldr	r0, [pc, #256]	@ (8001378 <MX_TIM1_Init+0x170>)
 8001276:	f003 ff93 	bl	80051a0 <HAL_TIM_Base_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001280:	f000 fa4a 	bl	8001718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001284:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001288:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800128a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800128e:	4619      	mov	r1, r3
 8001290:	4839      	ldr	r0, [pc, #228]	@ (8001378 <MX_TIM1_Init+0x170>)
 8001292:	f004 fc9d 	bl	8005bd0 <HAL_TIM_ConfigClockSource>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800129c:	f000 fa3c 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012a0:	4835      	ldr	r0, [pc, #212]	@ (8001378 <MX_TIM1_Init+0x170>)
 80012a2:	f004 f8bd 	bl	8005420 <HAL_TIM_PWM_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80012ac:	f000 fa34 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b0:	2300      	movs	r3, #0
 80012b2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012c0:	4619      	mov	r1, r3
 80012c2:	482d      	ldr	r0, [pc, #180]	@ (8001378 <MX_TIM1_Init+0x170>)
 80012c4:	f005 fa62 	bl	800678c <HAL_TIMEx_MasterConfigSynchronization>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80012ce:	f000 fa23 	bl	8001718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d2:	2360      	movs	r3, #96	@ 0x60
 80012d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012da:	2300      	movs	r3, #0
 80012dc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012de:	2300      	movs	r3, #0
 80012e0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012e6:	2300      	movs	r3, #0
 80012e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012f2:	2200      	movs	r2, #0
 80012f4:	4619      	mov	r1, r3
 80012f6:	4820      	ldr	r0, [pc, #128]	@ (8001378 <MX_TIM1_Init+0x170>)
 80012f8:	f004 fb56 	bl	80059a8 <HAL_TIM_PWM_ConfigChannel>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001302:	f000 fa09 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001306:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800130a:	2204      	movs	r2, #4
 800130c:	4619      	mov	r1, r3
 800130e:	481a      	ldr	r0, [pc, #104]	@ (8001378 <MX_TIM1_Init+0x170>)
 8001310:	f004 fb4a 	bl	80059a8 <HAL_TIM_PWM_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800131a:	f000 f9fd 	bl	8001718 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001332:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001336:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800133c:	2300      	movs	r3, #0
 800133e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001344:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001348:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800134e:	2300      	movs	r3, #0
 8001350:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	4619      	mov	r1, r3
 800135a:	4807      	ldr	r0, [pc, #28]	@ (8001378 <MX_TIM1_Init+0x170>)
 800135c:	f005 faac 	bl	80068b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8001366:	f000 f9d7 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800136a:	4803      	ldr	r0, [pc, #12]	@ (8001378 <MX_TIM1_Init+0x170>)
 800136c:	f000 fb36 	bl	80019dc <HAL_TIM_MspPostInit>

}
 8001370:	bf00      	nop
 8001372:	3770      	adds	r7, #112	@ 0x70
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2000018c 	.word	0x2000018c
 800137c:	40012c00 	.word	0x40012c00

08001380 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001386:	f107 0310 	add.w	r3, r7, #16
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800139e:	4b1d      	ldr	r3, [pc, #116]	@ (8001414 <MX_TIM5_Init+0x94>)
 80013a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001418 <MX_TIM5_Init+0x98>)
 80013a2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001414 <MX_TIM5_Init+0x94>)
 80013a6:	22a9      	movs	r2, #169	@ 0xa9
 80013a8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001414 <MX_TIM5_Init+0x94>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80013b0:	4b18      	ldr	r3, [pc, #96]	@ (8001414 <MX_TIM5_Init+0x94>)
 80013b2:	f04f 32ff 	mov.w	r2, #4294967295
 80013b6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b8:	4b16      	ldr	r3, [pc, #88]	@ (8001414 <MX_TIM5_Init+0x94>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013be:	4b15      	ldr	r3, [pc, #84]	@ (8001414 <MX_TIM5_Init+0x94>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80013c4:	4813      	ldr	r0, [pc, #76]	@ (8001414 <MX_TIM5_Init+0x94>)
 80013c6:	f003 feeb 	bl	80051a0 <HAL_TIM_Base_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80013d0:	f000 f9a2 	bl	8001718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80013da:	f107 0310 	add.w	r3, r7, #16
 80013de:	4619      	mov	r1, r3
 80013e0:	480c      	ldr	r0, [pc, #48]	@ (8001414 <MX_TIM5_Init+0x94>)
 80013e2:	f004 fbf5 	bl	8005bd0 <HAL_TIM_ConfigClockSource>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80013ec:	f000 f994 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f0:	2300      	movs	r3, #0
 80013f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	4619      	mov	r1, r3
 80013fc:	4805      	ldr	r0, [pc, #20]	@ (8001414 <MX_TIM5_Init+0x94>)
 80013fe:	f005 f9c5 	bl	800678c <HAL_TIMEx_MasterConfigSynchronization>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001408:	f000 f986 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	3720      	adds	r7, #32
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200001d8 	.word	0x200001d8
 8001418:	40000c00 	.word	0x40000c00

0800141c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001422:	4b12      	ldr	r3, [pc, #72]	@ (800146c <MX_DMA_Init+0x50>)
 8001424:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001426:	4a11      	ldr	r2, [pc, #68]	@ (800146c <MX_DMA_Init+0x50>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	6493      	str	r3, [r2, #72]	@ 0x48
 800142e:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <MX_DMA_Init+0x50>)
 8001430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800143a:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <MX_DMA_Init+0x50>)
 800143c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800143e:	4a0b      	ldr	r2, [pc, #44]	@ (800146c <MX_DMA_Init+0x50>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6493      	str	r3, [r2, #72]	@ 0x48
 8001446:	4b09      	ldr	r3, [pc, #36]	@ (800146c <MX_DMA_Init+0x50>)
 8001448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	200b      	movs	r0, #11
 8001458:	f002 f94d 	bl	80036f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800145c:	200b      	movs	r0, #11
 800145e:	f002 f964 	bl	800372a <HAL_NVIC_EnableIRQ>

}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40021000 	.word	0x40021000

08001470 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	@ 0x28
 8001474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001486:	4b2f      	ldr	r3, [pc, #188]	@ (8001544 <MX_GPIO_Init+0xd4>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148a:	4a2e      	ldr	r2, [pc, #184]	@ (8001544 <MX_GPIO_Init+0xd4>)
 800148c:	f043 0304 	orr.w	r3, r3, #4
 8001490:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001492:	4b2c      	ldr	r3, [pc, #176]	@ (8001544 <MX_GPIO_Init+0xd4>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001496:	f003 0304 	and.w	r3, r3, #4
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800149e:	4b29      	ldr	r3, [pc, #164]	@ (8001544 <MX_GPIO_Init+0xd4>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a2:	4a28      	ldr	r2, [pc, #160]	@ (8001544 <MX_GPIO_Init+0xd4>)
 80014a4:	f043 0320 	orr.w	r3, r3, #32
 80014a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014aa:	4b26      	ldr	r3, [pc, #152]	@ (8001544 <MX_GPIO_Init+0xd4>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ae:	f003 0320 	and.w	r3, r3, #32
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	4b23      	ldr	r3, [pc, #140]	@ (8001544 <MX_GPIO_Init+0xd4>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ba:	4a22      	ldr	r2, [pc, #136]	@ (8001544 <MX_GPIO_Init+0xd4>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014c2:	4b20      	ldr	r3, [pc, #128]	@ (8001544 <MX_GPIO_Init+0xd4>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001544 <MX_GPIO_Init+0xd4>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001544 <MX_GPIO_Init+0xd4>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014da:	4b1a      	ldr	r3, [pc, #104]	@ (8001544 <MX_GPIO_Init+0xd4>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2120      	movs	r1, #32
 80014ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014ee:	f002 fdeb 	bl	80040c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	480f      	ldr	r0, [pc, #60]	@ (8001548 <MX_GPIO_Init+0xd8>)
 800150a:	f002 fc5b 	bl	8003dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800150e:	2320      	movs	r3, #32
 8001510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001512:	2301      	movs	r3, #1
 8001514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001528:	f002 fc4c 	bl	8003dc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800152c:	2200      	movs	r2, #0
 800152e:	2100      	movs	r1, #0
 8001530:	2028      	movs	r0, #40	@ 0x28
 8001532:	f002 f8e0 	bl	80036f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001536:	2028      	movs	r0, #40	@ 0x28
 8001538:	f002 f8f7 	bl	800372a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800153c:	bf00      	nop
 800153e:	3728      	adds	r7, #40	@ 0x28
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40021000 	.word	0x40021000
 8001548:	48000800 	.word	0x48000800
 800154c:	00000000 	.word	0x00000000

08001550 <avg>:

/* USER CODE BEGIN 4 */

void avg()
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
	 poten1=0;
 8001556:	4b3c      	ldr	r3, [pc, #240]	@ (8001648 <avg+0xf8>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
	 poten2=0;
 800155c:	4b3b      	ldr	r3, [pc, #236]	@ (800164c <avg+0xfc>)
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
	for (int i = 0; i <= 38; i+=2){
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	e017      	b.n	8001598 <avg+0x48>

		poten1 += ADC_RawRead[i];
 8001568:	4a39      	ldr	r2, [pc, #228]	@ (8001650 <avg+0x100>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001570:	461a      	mov	r2, r3
 8001572:	4b35      	ldr	r3, [pc, #212]	@ (8001648 <avg+0xf8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4413      	add	r3, r2
 8001578:	4a33      	ldr	r2, [pc, #204]	@ (8001648 <avg+0xf8>)
 800157a:	6013      	str	r3, [r2, #0]
		poten2 += ADC_RawRead[i+1];
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3301      	adds	r3, #1
 8001580:	4a33      	ldr	r2, [pc, #204]	@ (8001650 <avg+0x100>)
 8001582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001586:	461a      	mov	r2, r3
 8001588:	4b30      	ldr	r3, [pc, #192]	@ (800164c <avg+0xfc>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4413      	add	r3, r2
 800158e:	4a2f      	ldr	r2, [pc, #188]	@ (800164c <avg+0xfc>)
 8001590:	6013      	str	r3, [r2, #0]
	for (int i = 0; i <= 38; i+=2){
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3302      	adds	r3, #2
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b26      	cmp	r3, #38	@ 0x26
 800159c:	dde4      	ble.n	8001568 <avg+0x18>
		}

         setposition =((poten2/20.0)/4095.0)*360.0;
 800159e:	4b2b      	ldr	r3, [pc, #172]	@ (800164c <avg+0xfc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe ff8a 	bl	80004bc <__aeabi_i2d>
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	4b29      	ldr	r3, [pc, #164]	@ (8001654 <avg+0x104>)
 80015ae:	f7ff f919 	bl	80007e4 <__aeabi_ddiv>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4610      	mov	r0, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	a321      	add	r3, pc, #132	@ (adr r3, 8001640 <avg+0xf0>)
 80015bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c0:	f7ff f910 	bl	80007e4 <__aeabi_ddiv>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	4b21      	ldr	r3, [pc, #132]	@ (8001658 <avg+0x108>)
 80015d2:	f7fe ffdd 	bl	8000590 <__aeabi_dmul>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	f7ff fa11 	bl	8000a04 <__aeabi_d2f>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4a1d      	ldr	r2, [pc, #116]	@ (800165c <avg+0x10c>)
 80015e6:	6013      	str	r3, [r2, #0]
         position= ((poten1/20.0)/4095.0)*360.0;
 80015e8:	4b17      	ldr	r3, [pc, #92]	@ (8001648 <avg+0xf8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe ff65 	bl	80004bc <__aeabi_i2d>
 80015f2:	f04f 0200 	mov.w	r2, #0
 80015f6:	4b17      	ldr	r3, [pc, #92]	@ (8001654 <avg+0x104>)
 80015f8:	f7ff f8f4 	bl	80007e4 <__aeabi_ddiv>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4610      	mov	r0, r2
 8001602:	4619      	mov	r1, r3
 8001604:	a30e      	add	r3, pc, #56	@ (adr r3, 8001640 <avg+0xf0>)
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	f7ff f8eb 	bl	80007e4 <__aeabi_ddiv>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4610      	mov	r0, r2
 8001614:	4619      	mov	r1, r3
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <avg+0x108>)
 800161c:	f7fe ffb8 	bl	8000590 <__aeabi_dmul>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	4610      	mov	r0, r2
 8001626:	4619      	mov	r1, r3
 8001628:	f7ff f9ec 	bl	8000a04 <__aeabi_d2f>
 800162c:	4603      	mov	r3, r0
 800162e:	4a0c      	ldr	r2, [pc, #48]	@ (8001660 <avg+0x110>)
 8001630:	6013      	str	r3, [r2, #0]

}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	f3af 8000 	nop.w
 8001640:	00000000 	.word	0x00000000
 8001644:	40affe00 	.word	0x40affe00
 8001648:	200002a4 	.word	0x200002a4
 800164c:	200002a8 	.word	0x200002a8
 8001650:	20000224 	.word	0x20000224
 8001654:	40340000 	.word	0x40340000
 8001658:	40768000 	.word	0x40768000
 800165c:	200002a0 	.word	0x200002a0
 8001660:	200002ac 	.word	0x200002ac

08001664 <UARTInterruptConfig>:
void UARTInterruptConfig()
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&hlpuart1, Recieve_PWM, 4);
 8001668:	2204      	movs	r2, #4
 800166a:	4903      	ldr	r1, [pc, #12]	@ (8001678 <UARTInterruptConfig+0x14>)
 800166c:	4803      	ldr	r0, [pc, #12]	@ (800167c <UARTInterruptConfig+0x18>)
 800166e:	f005 fb6f 	bl	8006d50 <HAL_UART_Receive_IT>
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000288 	.word	0x20000288
 800167c:	200000f8 	.word	0x200000f8

08001680 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	if(huart == &hlpuart1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a07      	ldr	r2, [pc, #28]	@ (80016a8 <HAL_UART_RxCpltCallback+0x28>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d107      	bne.n	80016a0 <HAL_UART_RxCpltCallback+0x20>
	{
		Recieve_PWM[4] = '\0';
 8001690:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <HAL_UART_RxCpltCallback+0x2c>)
 8001692:	2200      	movs	r2, #0
 8001694:	711a      	strb	r2, [r3, #4]
		HAL_UART_Transmit_IT(&hlpuart1, Recieve_PWM, 4);
 8001696:	2204      	movs	r2, #4
 8001698:	4904      	ldr	r1, [pc, #16]	@ (80016ac <HAL_UART_RxCpltCallback+0x2c>)
 800169a:	4803      	ldr	r0, [pc, #12]	@ (80016a8 <HAL_UART_RxCpltCallback+0x28>)
 800169c:	f005 fac4 	bl	8006c28 <HAL_UART_Transmit_IT>
	}
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200000f8 	.word	0x200000f8
 80016ac:	20000288 	.word	0x20000288

080016b0 <HAL_TIM_PeriodElapsedCallback>:
//MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016b0:	b4b0      	push	{r4, r5, r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a08      	ldr	r2, [pc, #32]	@ (80016dc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d108      	bne.n	80016d2 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += UINT32_MAX;
 80016c0:	4b07      	ldr	r3, [pc, #28]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80016c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c6:	1e54      	subs	r4, r2, #1
 80016c8:	f143 0500 	adc.w	r5, r3, #0
 80016cc:	4b04      	ldr	r3, [pc, #16]	@ (80016e0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80016ce:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bcb0      	pop	{r4, r5, r7}
 80016da:	4770      	bx	lr
 80016dc:	200001d8 	.word	0x200001d8
 80016e0:	20000298 	.word	0x20000298

080016e4 <micros>:
uint64_t micros()
{
 80016e4:	b4b0      	push	{r4, r5, r7}
 80016e6:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 80016e8:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <micros+0x2c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ee:	2200      	movs	r2, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	4611      	mov	r1, r2
 80016f4:	4b07      	ldr	r3, [pc, #28]	@ (8001714 <micros+0x30>)
 80016f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fa:	1884      	adds	r4, r0, r2
 80016fc:	eb41 0503 	adc.w	r5, r1, r3
 8001700:	4622      	mov	r2, r4
 8001702:	462b      	mov	r3, r5
}
 8001704:	4610      	mov	r0, r2
 8001706:	4619      	mov	r1, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	bcb0      	pop	{r4, r5, r7}
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	200001d8 	.word	0x200001d8
 8001714:	20000298 	.word	0x20000298

08001718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800171c:	b672      	cpsid	i
}
 800171e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <Error_Handler+0x8>

08001724 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172a:	4b0f      	ldr	r3, [pc, #60]	@ (8001768 <HAL_MspInit+0x44>)
 800172c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800172e:	4a0e      	ldr	r2, [pc, #56]	@ (8001768 <HAL_MspInit+0x44>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6613      	str	r3, [r2, #96]	@ 0x60
 8001736:	4b0c      	ldr	r3, [pc, #48]	@ (8001768 <HAL_MspInit+0x44>)
 8001738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001742:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <HAL_MspInit+0x44>)
 8001744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001746:	4a08      	ldr	r2, [pc, #32]	@ (8001768 <HAL_MspInit+0x44>)
 8001748:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800174c:	6593      	str	r3, [r2, #88]	@ 0x58
 800174e:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <HAL_MspInit+0x44>)
 8001750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800175a:	f002 fd95 	bl	8004288 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000

0800176c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b0a0      	sub	sp, #128	@ 0x80
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001784:	f107 0318 	add.w	r3, r7, #24
 8001788:	2254      	movs	r2, #84	@ 0x54
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f007 fccf 	bl	8009130 <memset>
  if(hadc->Instance==ADC1)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800179a:	d178      	bne.n	800188e <HAL_ADC_MspInit+0x122>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800179c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80017a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80017a2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80017a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a8:	f107 0318 	add.w	r3, r7, #24
 80017ac:	4618      	mov	r0, r3
 80017ae:	f003 faa9 	bl	8004d04 <HAL_RCCEx_PeriphCLKConfig>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80017b8:	f7ff ffae 	bl	8001718 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80017bc:	4b36      	ldr	r3, [pc, #216]	@ (8001898 <HAL_ADC_MspInit+0x12c>)
 80017be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c0:	4a35      	ldr	r2, [pc, #212]	@ (8001898 <HAL_ADC_MspInit+0x12c>)
 80017c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017c8:	4b33      	ldr	r3, [pc, #204]	@ (8001898 <HAL_ADC_MspInit+0x12c>)
 80017ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d4:	4b30      	ldr	r3, [pc, #192]	@ (8001898 <HAL_ADC_MspInit+0x12c>)
 80017d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d8:	4a2f      	ldr	r2, [pc, #188]	@ (8001898 <HAL_ADC_MspInit+0x12c>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001898 <HAL_ADC_MspInit+0x12c>)
 80017e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001898 <HAL_ADC_MspInit+0x12c>)
 80017ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f0:	4a29      	ldr	r2, [pc, #164]	@ (8001898 <HAL_ADC_MspInit+0x12c>)
 80017f2:	f043 0302 	orr.w	r3, r3, #2
 80017f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017f8:	4b27      	ldr	r3, [pc, #156]	@ (8001898 <HAL_ADC_MspInit+0x12c>)
 80017fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001804:	2303      	movs	r3, #3
 8001806:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001808:	2303      	movs	r3, #3
 800180a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001810:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001814:	4619      	mov	r1, r3
 8001816:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800181a:	f002 fad3 	bl	8003dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800181e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001822:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001824:	2303      	movs	r3, #3
 8001826:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001830:	4619      	mov	r1, r3
 8001832:	481a      	ldr	r0, [pc, #104]	@ (800189c <HAL_ADC_MspInit+0x130>)
 8001834:	f002 fac6 	bl	8003dc4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001838:	4b19      	ldr	r3, [pc, #100]	@ (80018a0 <HAL_ADC_MspInit+0x134>)
 800183a:	4a1a      	ldr	r2, [pc, #104]	@ (80018a4 <HAL_ADC_MspInit+0x138>)
 800183c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800183e:	4b18      	ldr	r3, [pc, #96]	@ (80018a0 <HAL_ADC_MspInit+0x134>)
 8001840:	2205      	movs	r2, #5
 8001842:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001844:	4b16      	ldr	r3, [pc, #88]	@ (80018a0 <HAL_ADC_MspInit+0x134>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800184a:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <HAL_ADC_MspInit+0x134>)
 800184c:	2200      	movs	r2, #0
 800184e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001850:	4b13      	ldr	r3, [pc, #76]	@ (80018a0 <HAL_ADC_MspInit+0x134>)
 8001852:	2280      	movs	r2, #128	@ 0x80
 8001854:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001856:	4b12      	ldr	r3, [pc, #72]	@ (80018a0 <HAL_ADC_MspInit+0x134>)
 8001858:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800185c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800185e:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <HAL_ADC_MspInit+0x134>)
 8001860:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001864:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001866:	4b0e      	ldr	r3, [pc, #56]	@ (80018a0 <HAL_ADC_MspInit+0x134>)
 8001868:	2220      	movs	r2, #32
 800186a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800186c:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <HAL_ADC_MspInit+0x134>)
 800186e:	2200      	movs	r2, #0
 8001870:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001872:	480b      	ldr	r0, [pc, #44]	@ (80018a0 <HAL_ADC_MspInit+0x134>)
 8001874:	f001 ff74 	bl	8003760 <HAL_DMA_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_ADC_MspInit+0x116>
    {
      Error_Handler();
 800187e:	f7ff ff4b 	bl	8001718 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a06      	ldr	r2, [pc, #24]	@ (80018a0 <HAL_ADC_MspInit+0x134>)
 8001886:	655a      	str	r2, [r3, #84]	@ 0x54
 8001888:	4a05      	ldr	r2, [pc, #20]	@ (80018a0 <HAL_ADC_MspInit+0x134>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800188e:	bf00      	nop
 8001890:	3780      	adds	r7, #128	@ 0x80
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000
 800189c:	48000400 	.word	0x48000400
 80018a0:	20000098 	.word	0x20000098
 80018a4:	40020008 	.word	0x40020008

080018a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b09e      	sub	sp, #120	@ 0x78
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	2254      	movs	r2, #84	@ 0x54
 80018c6:	2100      	movs	r1, #0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f007 fc31 	bl	8009130 <memset>
  if(huart->Instance==LPUART1)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a23      	ldr	r2, [pc, #140]	@ (8001960 <HAL_UART_MspInit+0xb8>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d13e      	bne.n	8001956 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80018d8:	2320      	movs	r3, #32
 80018da:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80018dc:	2300      	movs	r3, #0
 80018de:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018e0:	f107 0310 	add.w	r3, r7, #16
 80018e4:	4618      	mov	r0, r3
 80018e6:	f003 fa0d 	bl	8004d04 <HAL_RCCEx_PeriphCLKConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018f0:	f7ff ff12 	bl	8001718 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80018f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001964 <HAL_UART_MspInit+0xbc>)
 80018f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018f8:	4a1a      	ldr	r2, [pc, #104]	@ (8001964 <HAL_UART_MspInit+0xbc>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001900:	4b18      	ldr	r3, [pc, #96]	@ (8001964 <HAL_UART_MspInit+0xbc>)
 8001902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190c:	4b15      	ldr	r3, [pc, #84]	@ (8001964 <HAL_UART_MspInit+0xbc>)
 800190e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001910:	4a14      	ldr	r2, [pc, #80]	@ (8001964 <HAL_UART_MspInit+0xbc>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001918:	4b12      	ldr	r3, [pc, #72]	@ (8001964 <HAL_UART_MspInit+0xbc>)
 800191a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001924:	230c      	movs	r3, #12
 8001926:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001930:	2300      	movs	r3, #0
 8001932:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001934:	230c      	movs	r3, #12
 8001936:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001938:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800193c:	4619      	mov	r1, r3
 800193e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001942:	f002 fa3f 	bl	8003dc4 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	205b      	movs	r0, #91	@ 0x5b
 800194c:	f001 fed3 	bl	80036f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001950:	205b      	movs	r0, #91	@ 0x5b
 8001952:	f001 feea 	bl	800372a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001956:	bf00      	nop
 8001958:	3778      	adds	r7, #120	@ 0x78
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40008000 	.word	0x40008000
 8001964:	40021000 	.word	0x40021000

08001968 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a16      	ldr	r2, [pc, #88]	@ (80019d0 <HAL_TIM_Base_MspInit+0x68>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d10c      	bne.n	8001994 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800197a:	4b16      	ldr	r3, [pc, #88]	@ (80019d4 <HAL_TIM_Base_MspInit+0x6c>)
 800197c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800197e:	4a15      	ldr	r2, [pc, #84]	@ (80019d4 <HAL_TIM_Base_MspInit+0x6c>)
 8001980:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001984:	6613      	str	r3, [r2, #96]	@ 0x60
 8001986:	4b13      	ldr	r3, [pc, #76]	@ (80019d4 <HAL_TIM_Base_MspInit+0x6c>)
 8001988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800198a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001992:	e018      	b.n	80019c6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0f      	ldr	r2, [pc, #60]	@ (80019d8 <HAL_TIM_Base_MspInit+0x70>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d113      	bne.n	80019c6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800199e:	4b0d      	ldr	r3, [pc, #52]	@ (80019d4 <HAL_TIM_Base_MspInit+0x6c>)
 80019a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a2:	4a0c      	ldr	r2, [pc, #48]	@ (80019d4 <HAL_TIM_Base_MspInit+0x6c>)
 80019a4:	f043 0308 	orr.w	r3, r3, #8
 80019a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80019aa:	4b0a      	ldr	r3, [pc, #40]	@ (80019d4 <HAL_TIM_Base_MspInit+0x6c>)
 80019ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2100      	movs	r1, #0
 80019ba:	2032      	movs	r0, #50	@ 0x32
 80019bc:	f001 fe9b 	bl	80036f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80019c0:	2032      	movs	r0, #50	@ 0x32
 80019c2:	f001 feb2 	bl	800372a <HAL_NVIC_EnableIRQ>
}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40012c00 	.word	0x40012c00
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40000c00 	.word	0x40000c00

080019dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a11      	ldr	r2, [pc, #68]	@ (8001a40 <HAL_TIM_MspPostInit+0x64>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d11b      	bne.n	8001a36 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fe:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <HAL_TIM_MspPostInit+0x68>)
 8001a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a02:	4a10      	ldr	r2, [pc, #64]	@ (8001a44 <HAL_TIM_MspPostInit+0x68>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a44 <HAL_TIM_MspPostInit+0x68>)
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a16:	2303      	movs	r3, #3
 8001a18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001a26:	2302      	movs	r3, #2
 8001a28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2a:	f107 030c 	add.w	r3, r7, #12
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4805      	ldr	r0, [pc, #20]	@ (8001a48 <HAL_TIM_MspPostInit+0x6c>)
 8001a32:	f002 f9c7 	bl	8003dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a36:	bf00      	nop
 8001a38:	3720      	adds	r7, #32
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40012c00 	.word	0x40012c00
 8001a44:	40021000 	.word	0x40021000
 8001a48:	48000800 	.word	0x48000800

08001a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <NMI_Handler+0x4>

08001a54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a58:	bf00      	nop
 8001a5a:	e7fd      	b.n	8001a58 <HardFault_Handler+0x4>

08001a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a60:	bf00      	nop
 8001a62:	e7fd      	b.n	8001a60 <MemManage_Handler+0x4>

08001a64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a68:	bf00      	nop
 8001a6a:	e7fd      	b.n	8001a68 <BusFault_Handler+0x4>

08001a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <UsageFault_Handler+0x4>

08001a74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa2:	f000 f8b7 	bl	8001c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ab0:	4802      	ldr	r0, [pc, #8]	@ (8001abc <DMA1_Channel1_IRQHandler+0x10>)
 8001ab2:	f002 f838 	bl	8003b26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000098 	.word	0x20000098

08001ac0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001ac4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ac8:	f002 fb16 	bl	80040f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001ad4:	4802      	ldr	r0, [pc, #8]	@ (8001ae0 <TIM5_IRQHandler+0x10>)
 8001ad6:	f003 fe17 	bl	8005708 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200001d8 	.word	0x200001d8

08001ae4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001ae8:	4802      	ldr	r0, [pc, #8]	@ (8001af4 <LPUART1_IRQHandler+0x10>)
 8001aea:	f005 f97d 	bl	8006de8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200000f8 	.word	0x200000f8

08001af8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001afc:	4b06      	ldr	r3, [pc, #24]	@ (8001b18 <SystemInit+0x20>)
 8001afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b02:	4a05      	ldr	r2, [pc, #20]	@ (8001b18 <SystemInit+0x20>)
 8001b04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b1c:	480d      	ldr	r0, [pc, #52]	@ (8001b54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b1e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b20:	f7ff ffea 	bl	8001af8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b24:	480c      	ldr	r0, [pc, #48]	@ (8001b58 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b26:	490d      	ldr	r1, [pc, #52]	@ (8001b5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b28:	4a0d      	ldr	r2, [pc, #52]	@ (8001b60 <LoopForever+0xe>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b2c:	e002      	b.n	8001b34 <LoopCopyDataInit>

08001b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b32:	3304      	adds	r3, #4

08001b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b38:	d3f9      	bcc.n	8001b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b3c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b68 <LoopForever+0x16>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b40:	e001      	b.n	8001b46 <LoopFillZerobss>

08001b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b44:	3204      	adds	r2, #4

08001b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b48:	d3fb      	bcc.n	8001b42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b4a:	f007 faf9 	bl	8009140 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b4e:	f7ff f923 	bl	8000d98 <main>

08001b52 <LoopForever>:

LoopForever:
    b LoopForever
 8001b52:	e7fe      	b.n	8001b52 <LoopForever>
  ldr   r0, =_estack
 8001b54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b60:	080091f0 	.word	0x080091f0
  ldr r2, =_sbss
 8001b64:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001b68:	200002c4 	.word	0x200002c4

08001b6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b6c:	e7fe      	b.n	8001b6c <ADC1_2_IRQHandler>

08001b6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b78:	2003      	movs	r0, #3
 8001b7a:	f001 fdb1 	bl	80036e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f000 f80e 	bl	8001ba0 <HAL_InitTick>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	71fb      	strb	r3, [r7, #7]
 8001b8e:	e001      	b.n	8001b94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b90:	f7ff fdc8 	bl	8001724 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b94:	79fb      	ldrb	r3, [r7, #7]

}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001bac:	4b16      	ldr	r3, [pc, #88]	@ (8001c08 <HAL_InitTick+0x68>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d022      	beq.n	8001bfa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001bb4:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <HAL_InitTick+0x6c>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b13      	ldr	r3, [pc, #76]	@ (8001c08 <HAL_InitTick+0x68>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001bc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f001 fdbc 	bl	8003746 <HAL_SYSTICK_Config>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10f      	bne.n	8001bf4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b0f      	cmp	r3, #15
 8001bd8:	d809      	bhi.n	8001bee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	f04f 30ff 	mov.w	r0, #4294967295
 8001be2:	f001 fd88 	bl	80036f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001be6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c10 <HAL_InitTick+0x70>)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	e007      	b.n	8001bfe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	73fb      	strb	r3, [r7, #15]
 8001bf2:	e004      	b.n	8001bfe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	73fb      	strb	r3, [r7, #15]
 8001bf8:	e001      	b.n	8001bfe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000008 	.word	0x20000008
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	20000004 	.word	0x20000004

08001c14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c18:	4b05      	ldr	r3, [pc, #20]	@ (8001c30 <HAL_IncTick+0x1c>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b05      	ldr	r3, [pc, #20]	@ (8001c34 <HAL_IncTick+0x20>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4413      	add	r3, r2
 8001c22:	4a03      	ldr	r2, [pc, #12]	@ (8001c30 <HAL_IncTick+0x1c>)
 8001c24:	6013      	str	r3, [r2, #0]
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	200002c0 	.word	0x200002c0
 8001c34:	20000008 	.word	0x20000008

08001c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	@ (8001c4c <HAL_GetTick+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	200002c0 	.word	0x200002c0

08001c50 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	609a      	str	r2, [r3, #8]
}
 8001c6a:	bf00      	nop
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
 8001cc4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	3360      	adds	r3, #96	@ 0x60
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b08      	ldr	r3, [pc, #32]	@ (8001cfc <LL_ADC_SetOffset+0x44>)
 8001cda:	4013      	ands	r3, r2
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001cf0:	bf00      	nop
 8001cf2:	371c      	adds	r7, #28
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	03fff000 	.word	0x03fff000

08001d00 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	3360      	adds	r3, #96	@ 0x60
 8001d0e:	461a      	mov	r2, r3
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	3360      	adds	r3, #96	@ 0x60
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	431a      	orrs	r2, r3
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d56:	bf00      	nop
 8001d58:	371c      	adds	r7, #28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b087      	sub	sp, #28
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	60f8      	str	r0, [r7, #12]
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	3360      	adds	r3, #96	@ 0x60
 8001d72:	461a      	mov	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	431a      	orrs	r2, r3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001d8c:	bf00      	nop
 8001d8e:	371c      	adds	r7, #28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	3360      	adds	r3, #96	@ 0x60
 8001da8:	461a      	mov	r2, r3
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001dc2:	bf00      	nop
 8001dc4:	371c      	adds	r7, #28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	615a      	str	r2, [r3, #20]
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b087      	sub	sp, #28
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	3330      	adds	r3, #48	@ 0x30
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	0a1b      	lsrs	r3, r3, #8
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	4413      	add	r3, r2
 8001e38:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	f003 031f 	and.w	r3, r3, #31
 8001e44:	211f      	movs	r1, #31
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	401a      	ands	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	0e9b      	lsrs	r3, r3, #26
 8001e52:	f003 011f 	and.w	r1, r3, #31
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	f003 031f 	and.w	r3, r3, #31
 8001e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e60:	431a      	orrs	r2, r3
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e66:	bf00      	nop
 8001e68:	371c      	adds	r7, #28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b087      	sub	sp, #28
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	60f8      	str	r0, [r7, #12]
 8001e7a:	60b9      	str	r1, [r7, #8]
 8001e7c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	3314      	adds	r3, #20
 8001e82:	461a      	mov	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	0e5b      	lsrs	r3, r3, #25
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	4413      	add	r3, r2
 8001e90:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	0d1b      	lsrs	r3, r3, #20
 8001e9a:	f003 031f 	and.w	r3, r3, #31
 8001e9e:	2107      	movs	r1, #7
 8001ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	0d1b      	lsrs	r3, r3, #20
 8001eac:	f003 031f 	and.w	r3, r3, #31
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ebc:	bf00      	nop
 8001ebe:	371c      	adds	r7, #28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f003 0318 	and.w	r3, r3, #24
 8001eea:	4908      	ldr	r1, [pc, #32]	@ (8001f0c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001eec:	40d9      	lsrs	r1, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	400b      	ands	r3, r1
 8001ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001efe:	bf00      	nop
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	0007ffff 	.word	0x0007ffff

08001f10 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 031f 	and.w	r3, r3, #31
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001f3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6093      	str	r3, [r2, #8]
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f64:	d101      	bne.n	8001f6a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001f88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f8c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001fb4:	d101      	bne.n	8001fba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fdc:	f043 0201 	orr.w	r2, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002000:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002004:	f043 0202 	orr.w	r2, r3, #2
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b01      	cmp	r3, #1
 800202a:	d101      	bne.n	8002030 <LL_ADC_IsEnabled+0x18>
 800202c:	2301      	movs	r3, #1
 800202e:	e000      	b.n	8002032 <LL_ADC_IsEnabled+0x1a>
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b02      	cmp	r3, #2
 8002050:	d101      	bne.n	8002056 <LL_ADC_IsDisableOngoing+0x18>
 8002052:	2301      	movs	r3, #1
 8002054:	e000      	b.n	8002058 <LL_ADC_IsDisableOngoing+0x1a>
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002074:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002078:	f043 0204 	orr.w	r2, r3, #4
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b04      	cmp	r3, #4
 800209e:	d101      	bne.n	80020a4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020a0:	2301      	movs	r3, #1
 80020a2:	e000      	b.n	80020a6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b083      	sub	sp, #12
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d101      	bne.n	80020ca <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020d8:	b590      	push	{r4, r7, lr}
 80020da:	b089      	sub	sp, #36	@ 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e1a9      	b.n	8002446 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d109      	bne.n	8002114 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff fb33 	bl	800176c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff19 	bl	8001f50 <LL_ADC_IsDeepPowerDownEnabled>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d004      	beq.n	800212e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff feff 	bl	8001f2c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff ff34 	bl	8001fa0 <LL_ADC_IsInternalRegulatorEnabled>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d115      	bne.n	800216a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff ff18 	bl	8001f78 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002148:	4b9c      	ldr	r3, [pc, #624]	@ (80023bc <HAL_ADC_Init+0x2e4>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	099b      	lsrs	r3, r3, #6
 800214e:	4a9c      	ldr	r2, [pc, #624]	@ (80023c0 <HAL_ADC_Init+0x2e8>)
 8002150:	fba2 2303 	umull	r2, r3, r2, r3
 8002154:	099b      	lsrs	r3, r3, #6
 8002156:	3301      	adds	r3, #1
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800215c:	e002      	b.n	8002164 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3b01      	subs	r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f9      	bne.n	800215e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff ff16 	bl	8001fa0 <LL_ADC_IsInternalRegulatorEnabled>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10d      	bne.n	8002196 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800217e:	f043 0210 	orr.w	r2, r3, #16
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800218a:	f043 0201 	orr.w	r2, r3, #1
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff ff76 	bl	800208c <LL_ADC_REG_IsConversionOngoing>
 80021a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f040 8142 	bne.w	8002434 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f040 813e 	bne.w	8002434 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021bc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80021c0:	f043 0202 	orr.w	r2, r3, #2
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ff23 	bl	8002018 <LL_ADC_IsEnabled>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d141      	bne.n	800225c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021e0:	d004      	beq.n	80021ec <HAL_ADC_Init+0x114>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a77      	ldr	r2, [pc, #476]	@ (80023c4 <HAL_ADC_Init+0x2ec>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d10f      	bne.n	800220c <HAL_ADC_Init+0x134>
 80021ec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80021f0:	f7ff ff12 	bl	8002018 <LL_ADC_IsEnabled>
 80021f4:	4604      	mov	r4, r0
 80021f6:	4873      	ldr	r0, [pc, #460]	@ (80023c4 <HAL_ADC_Init+0x2ec>)
 80021f8:	f7ff ff0e 	bl	8002018 <LL_ADC_IsEnabled>
 80021fc:	4603      	mov	r3, r0
 80021fe:	4323      	orrs	r3, r4
 8002200:	2b00      	cmp	r3, #0
 8002202:	bf0c      	ite	eq
 8002204:	2301      	moveq	r3, #1
 8002206:	2300      	movne	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	e012      	b.n	8002232 <HAL_ADC_Init+0x15a>
 800220c:	486e      	ldr	r0, [pc, #440]	@ (80023c8 <HAL_ADC_Init+0x2f0>)
 800220e:	f7ff ff03 	bl	8002018 <LL_ADC_IsEnabled>
 8002212:	4604      	mov	r4, r0
 8002214:	486d      	ldr	r0, [pc, #436]	@ (80023cc <HAL_ADC_Init+0x2f4>)
 8002216:	f7ff feff 	bl	8002018 <LL_ADC_IsEnabled>
 800221a:	4603      	mov	r3, r0
 800221c:	431c      	orrs	r4, r3
 800221e:	486c      	ldr	r0, [pc, #432]	@ (80023d0 <HAL_ADC_Init+0x2f8>)
 8002220:	f7ff fefa 	bl	8002018 <LL_ADC_IsEnabled>
 8002224:	4603      	mov	r3, r0
 8002226:	4323      	orrs	r3, r4
 8002228:	2b00      	cmp	r3, #0
 800222a:	bf0c      	ite	eq
 800222c:	2301      	moveq	r3, #1
 800222e:	2300      	movne	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d012      	beq.n	800225c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800223e:	d004      	beq.n	800224a <HAL_ADC_Init+0x172>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a5f      	ldr	r2, [pc, #380]	@ (80023c4 <HAL_ADC_Init+0x2ec>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d101      	bne.n	800224e <HAL_ADC_Init+0x176>
 800224a:	4a62      	ldr	r2, [pc, #392]	@ (80023d4 <HAL_ADC_Init+0x2fc>)
 800224c:	e000      	b.n	8002250 <HAL_ADC_Init+0x178>
 800224e:	4a62      	ldr	r2, [pc, #392]	@ (80023d8 <HAL_ADC_Init+0x300>)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	4619      	mov	r1, r3
 8002256:	4610      	mov	r0, r2
 8002258:	f7ff fcfa 	bl	8001c50 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	7f5b      	ldrb	r3, [r3, #29]
 8002260:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002266:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800226c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002272:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800227a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002286:	2b01      	cmp	r3, #1
 8002288:	d106      	bne.n	8002298 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800228e:	3b01      	subs	r3, #1
 8002290:	045b      	lsls	r3, r3, #17
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800229c:	2b00      	cmp	r3, #0
 800229e:	d009      	beq.n	80022b4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ac:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	4b48      	ldr	r3, [pc, #288]	@ (80023dc <HAL_ADC_Init+0x304>)
 80022bc:	4013      	ands	r3, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6812      	ldr	r2, [r2, #0]
 80022c2:	69b9      	ldr	r1, [r7, #24]
 80022c4:	430b      	orrs	r3, r1
 80022c6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fee5 	bl	80020b2 <LL_ADC_INJ_IsConversionOngoing>
 80022e8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d17f      	bne.n	80023f0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d17c      	bne.n	80023f0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022fa:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002302:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002312:	f023 0302 	bic.w	r3, r3, #2
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6812      	ldr	r2, [r2, #0]
 800231a:	69b9      	ldr	r1, [r7, #24]
 800231c:	430b      	orrs	r3, r1
 800231e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d017      	beq.n	8002358 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691a      	ldr	r2, [r3, #16]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002336:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002340:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002344:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6911      	ldr	r1, [r2, #16]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	430b      	orrs	r3, r1
 8002352:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002356:	e013      	b.n	8002380 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691a      	ldr	r2, [r3, #16]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002366:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002378:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800237c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002386:	2b01      	cmp	r3, #1
 8002388:	d12a      	bne.n	80023e0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002394:	f023 0304 	bic.w	r3, r3, #4
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023a0:	4311      	orrs	r1, r2
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80023a6:	4311      	orrs	r1, r2
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80023ac:	430a      	orrs	r2, r1
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f042 0201 	orr.w	r2, r2, #1
 80023b8:	611a      	str	r2, [r3, #16]
 80023ba:	e019      	b.n	80023f0 <HAL_ADC_Init+0x318>
 80023bc:	20000000 	.word	0x20000000
 80023c0:	053e2d63 	.word	0x053e2d63
 80023c4:	50000100 	.word	0x50000100
 80023c8:	50000400 	.word	0x50000400
 80023cc:	50000500 	.word	0x50000500
 80023d0:	50000600 	.word	0x50000600
 80023d4:	50000300 	.word	0x50000300
 80023d8:	50000700 	.word	0x50000700
 80023dc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691a      	ldr	r2, [r3, #16]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0201 	bic.w	r2, r2, #1
 80023ee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d10c      	bne.n	8002412 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fe:	f023 010f 	bic.w	r1, r3, #15
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	1e5a      	subs	r2, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002410:	e007      	b.n	8002422 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 020f 	bic.w	r2, r2, #15
 8002420:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002426:	f023 0303 	bic.w	r3, r3, #3
 800242a:	f043 0201 	orr.w	r2, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002432:	e007      	b.n	8002444 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002438:	f043 0210 	orr.w	r2, r3, #16
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002444:	7ffb      	ldrb	r3, [r7, #31]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3724      	adds	r7, #36	@ 0x24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd90      	pop	{r4, r7, pc}
 800244e:	bf00      	nop

08002450 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002464:	d004      	beq.n	8002470 <HAL_ADC_Start_DMA+0x20>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a5a      	ldr	r2, [pc, #360]	@ (80025d4 <HAL_ADC_Start_DMA+0x184>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d101      	bne.n	8002474 <HAL_ADC_Start_DMA+0x24>
 8002470:	4b59      	ldr	r3, [pc, #356]	@ (80025d8 <HAL_ADC_Start_DMA+0x188>)
 8002472:	e000      	b.n	8002476 <HAL_ADC_Start_DMA+0x26>
 8002474:	4b59      	ldr	r3, [pc, #356]	@ (80025dc <HAL_ADC_Start_DMA+0x18c>)
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fd4a 	bl	8001f10 <LL_ADC_GetMultimode>
 800247c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fe02 	bl	800208c <LL_ADC_REG_IsConversionOngoing>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	f040 809b 	bne.w	80025c6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_ADC_Start_DMA+0x4e>
 800249a:	2302      	movs	r3, #2
 800249c:	e096      	b.n	80025cc <HAL_ADC_Start_DMA+0x17c>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a4d      	ldr	r2, [pc, #308]	@ (80025e0 <HAL_ADC_Start_DMA+0x190>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d008      	beq.n	80024c2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d005      	beq.n	80024c2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	2b05      	cmp	r3, #5
 80024ba:	d002      	beq.n	80024c2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	2b09      	cmp	r3, #9
 80024c0:	d17a      	bne.n	80025b8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 fcf6 	bl	8002eb4 <ADC_Enable>
 80024c8:	4603      	mov	r3, r0
 80024ca:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80024cc:	7dfb      	ldrb	r3, [r7, #23]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d16d      	bne.n	80025ae <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024d6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80024da:	f023 0301 	bic.w	r3, r3, #1
 80024de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a3a      	ldr	r2, [pc, #232]	@ (80025d4 <HAL_ADC_Start_DMA+0x184>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d009      	beq.n	8002504 <HAL_ADC_Start_DMA+0xb4>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a3b      	ldr	r2, [pc, #236]	@ (80025e4 <HAL_ADC_Start_DMA+0x194>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d002      	beq.n	8002500 <HAL_ADC_Start_DMA+0xb0>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	e003      	b.n	8002508 <HAL_ADC_Start_DMA+0xb8>
 8002500:	4b39      	ldr	r3, [pc, #228]	@ (80025e8 <HAL_ADC_Start_DMA+0x198>)
 8002502:	e001      	b.n	8002508 <HAL_ADC_Start_DMA+0xb8>
 8002504:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	4293      	cmp	r3, r2
 800250e:	d002      	beq.n	8002516 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d105      	bne.n	8002522 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800251a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002526:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d006      	beq.n	800253c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002532:	f023 0206 	bic.w	r2, r3, #6
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	661a      	str	r2, [r3, #96]	@ 0x60
 800253a:	e002      	b.n	8002542 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002546:	4a29      	ldr	r2, [pc, #164]	@ (80025ec <HAL_ADC_Start_DMA+0x19c>)
 8002548:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800254e:	4a28      	ldr	r2, [pc, #160]	@ (80025f0 <HAL_ADC_Start_DMA+0x1a0>)
 8002550:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002556:	4a27      	ldr	r2, [pc, #156]	@ (80025f4 <HAL_ADC_Start_DMA+0x1a4>)
 8002558:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	221c      	movs	r2, #28
 8002560:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f042 0210 	orr.w	r2, r2, #16
 8002578:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68da      	ldr	r2, [r3, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f042 0201 	orr.w	r2, r2, #1
 8002588:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	3340      	adds	r3, #64	@ 0x40
 8002594:	4619      	mov	r1, r3
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f001 f989 	bl	80038b0 <HAL_DMA_Start_IT>
 800259e:	4603      	mov	r3, r0
 80025a0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fd5c 	bl	8002064 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80025ac:	e00d      	b.n	80025ca <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80025b6:	e008      	b.n	80025ca <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80025c4:	e001      	b.n	80025ca <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025c6:	2302      	movs	r3, #2
 80025c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80025ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	50000100 	.word	0x50000100
 80025d8:	50000300 	.word	0x50000300
 80025dc:	50000700 	.word	0x50000700
 80025e0:	50000600 	.word	0x50000600
 80025e4:	50000500 	.word	0x50000500
 80025e8:	50000400 	.word	0x50000400
 80025ec:	0800309f 	.word	0x0800309f
 80025f0:	08003177 	.word	0x08003177
 80025f4:	08003193 	.word	0x08003193

080025f8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b0b6      	sub	sp, #216	@ 0xd8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800264e:	2b01      	cmp	r3, #1
 8002650:	d102      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x24>
 8002652:	2302      	movs	r3, #2
 8002654:	f000 bc13 	b.w	8002e7e <HAL_ADC_ConfigChannel+0x84a>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff fd11 	bl	800208c <LL_ADC_REG_IsConversionOngoing>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	f040 83f3 	bne.w	8002e58 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6818      	ldr	r0, [r3, #0]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	6859      	ldr	r1, [r3, #4]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	f7ff fbcb 	bl	8001e1a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fcff 	bl	800208c <LL_ADC_REG_IsConversionOngoing>
 800268e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff fd0b 	bl	80020b2 <LL_ADC_INJ_IsConversionOngoing>
 800269c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f040 81d9 	bne.w	8002a5c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f040 81d4 	bne.w	8002a5c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026bc:	d10f      	bne.n	80026de <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2200      	movs	r2, #0
 80026c8:	4619      	mov	r1, r3
 80026ca:	f7ff fbd2 	bl	8001e72 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff fb79 	bl	8001dce <LL_ADC_SetSamplingTimeCommonConfig>
 80026dc:	e00e      	b.n	80026fc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	6819      	ldr	r1, [r3, #0]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	461a      	mov	r2, r3
 80026ec:	f7ff fbc1 	bl	8001e72 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2100      	movs	r1, #0
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fb69 	bl	8001dce <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	695a      	ldr	r2, [r3, #20]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	08db      	lsrs	r3, r3, #3
 8002708:	f003 0303 	and.w	r3, r3, #3
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	2b04      	cmp	r3, #4
 800271c:	d022      	beq.n	8002764 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6919      	ldr	r1, [r3, #16]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800272e:	f7ff fac3 	bl	8001cb8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	6919      	ldr	r1, [r3, #16]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	461a      	mov	r2, r3
 8002740:	f7ff fb0f 	bl	8001d62 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002750:	2b01      	cmp	r3, #1
 8002752:	d102      	bne.n	800275a <HAL_ADC_ConfigChannel+0x126>
 8002754:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002758:	e000      	b.n	800275c <HAL_ADC_ConfigChannel+0x128>
 800275a:	2300      	movs	r3, #0
 800275c:	461a      	mov	r2, r3
 800275e:	f7ff fb1b 	bl	8001d98 <LL_ADC_SetOffsetSaturation>
 8002762:	e17b      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2100      	movs	r1, #0
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fac8 	bl	8001d00 <LL_ADC_GetOffsetChannel>
 8002770:	4603      	mov	r3, r0
 8002772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10a      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x15c>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff fabd 	bl	8001d00 <LL_ADC_GetOffsetChannel>
 8002786:	4603      	mov	r3, r0
 8002788:	0e9b      	lsrs	r3, r3, #26
 800278a:	f003 021f 	and.w	r2, r3, #31
 800278e:	e01e      	b.n	80027ce <HAL_ADC_ConfigChannel+0x19a>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2100      	movs	r1, #0
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fab2 	bl	8001d00 <LL_ADC_GetOffsetChannel>
 800279c:	4603      	mov	r3, r0
 800279e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80027be:	2320      	movs	r3, #32
 80027c0:	e004      	b.n	80027cc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80027c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d105      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x1b2>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	0e9b      	lsrs	r3, r3, #26
 80027e0:	f003 031f 	and.w	r3, r3, #31
 80027e4:	e018      	b.n	8002818 <HAL_ADC_ConfigChannel+0x1e4>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80027fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002802:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800280a:	2320      	movs	r3, #32
 800280c:	e004      	b.n	8002818 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800280e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002818:	429a      	cmp	r2, r3
 800281a:	d106      	bne.n	800282a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2200      	movs	r2, #0
 8002822:	2100      	movs	r1, #0
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fa81 	bl	8001d2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2101      	movs	r1, #1
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fa65 	bl	8001d00 <LL_ADC_GetOffsetChannel>
 8002836:	4603      	mov	r3, r0
 8002838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10a      	bne.n	8002856 <HAL_ADC_ConfigChannel+0x222>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2101      	movs	r1, #1
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fa5a 	bl	8001d00 <LL_ADC_GetOffsetChannel>
 800284c:	4603      	mov	r3, r0
 800284e:	0e9b      	lsrs	r3, r3, #26
 8002850:	f003 021f 	and.w	r2, r3, #31
 8002854:	e01e      	b.n	8002894 <HAL_ADC_ConfigChannel+0x260>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2101      	movs	r1, #1
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fa4f 	bl	8001d00 <LL_ADC_GetOffsetChannel>
 8002862:	4603      	mov	r3, r0
 8002864:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002868:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800286c:	fa93 f3a3 	rbit	r3, r3
 8002870:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002874:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002878:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800287c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002884:	2320      	movs	r3, #32
 8002886:	e004      	b.n	8002892 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002888:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800288c:	fab3 f383 	clz	r3, r3
 8002890:	b2db      	uxtb	r3, r3
 8002892:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289c:	2b00      	cmp	r3, #0
 800289e:	d105      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x278>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	0e9b      	lsrs	r3, r3, #26
 80028a6:	f003 031f 	and.w	r3, r3, #31
 80028aa:	e018      	b.n	80028de <HAL_ADC_ConfigChannel+0x2aa>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028b8:	fa93 f3a3 	rbit	r3, r3
 80028bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80028c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80028c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80028c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80028d0:	2320      	movs	r3, #32
 80028d2:	e004      	b.n	80028de <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80028d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028d8:	fab3 f383 	clz	r3, r3
 80028dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028de:	429a      	cmp	r2, r3
 80028e0:	d106      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2200      	movs	r2, #0
 80028e8:	2101      	movs	r1, #1
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff fa1e 	bl	8001d2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2102      	movs	r1, #2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff fa02 	bl	8001d00 <LL_ADC_GetOffsetChannel>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10a      	bne.n	800291c <HAL_ADC_ConfigChannel+0x2e8>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2102      	movs	r1, #2
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff f9f7 	bl	8001d00 <LL_ADC_GetOffsetChannel>
 8002912:	4603      	mov	r3, r0
 8002914:	0e9b      	lsrs	r3, r3, #26
 8002916:	f003 021f 	and.w	r2, r3, #31
 800291a:	e01e      	b.n	800295a <HAL_ADC_ConfigChannel+0x326>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2102      	movs	r1, #2
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff f9ec 	bl	8001d00 <LL_ADC_GetOffsetChannel>
 8002928:	4603      	mov	r3, r0
 800292a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800293a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800293e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002942:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800294a:	2320      	movs	r3, #32
 800294c:	e004      	b.n	8002958 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800294e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002962:	2b00      	cmp	r3, #0
 8002964:	d105      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x33e>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	0e9b      	lsrs	r3, r3, #26
 800296c:	f003 031f 	and.w	r3, r3, #31
 8002970:	e016      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x36c>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002984:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002986:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800298a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002992:	2320      	movs	r3, #32
 8002994:	e004      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002996:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800299a:	fab3 f383 	clz	r3, r3
 800299e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d106      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2200      	movs	r2, #0
 80029aa:	2102      	movs	r1, #2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff f9bd 	bl	8001d2c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2103      	movs	r1, #3
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff f9a1 	bl	8001d00 <LL_ADC_GetOffsetChannel>
 80029be:	4603      	mov	r3, r0
 80029c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10a      	bne.n	80029de <HAL_ADC_ConfigChannel+0x3aa>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2103      	movs	r1, #3
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff f996 	bl	8001d00 <LL_ADC_GetOffsetChannel>
 80029d4:	4603      	mov	r3, r0
 80029d6:	0e9b      	lsrs	r3, r3, #26
 80029d8:	f003 021f 	and.w	r2, r3, #31
 80029dc:	e017      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x3da>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2103      	movs	r1, #3
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff f98b 	bl	8001d00 <LL_ADC_GetOffsetChannel>
 80029ea:	4603      	mov	r3, r0
 80029ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029f0:	fa93 f3a3 	rbit	r3, r3
 80029f4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80029f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029f8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80029fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002a00:	2320      	movs	r3, #32
 8002a02:	e003      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002a04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d105      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x3f2>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	0e9b      	lsrs	r3, r3, #26
 8002a20:	f003 031f 	and.w	r3, r3, #31
 8002a24:	e011      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x416>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a2e:	fa93 f3a3 	rbit	r3, r3
 8002a32:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002a34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a36:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002a38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002a3e:	2320      	movs	r3, #32
 8002a40:	e003      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002a42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a44:	fab3 f383 	clz	r3, r3
 8002a48:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d106      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2200      	movs	r2, #0
 8002a54:	2103      	movs	r1, #3
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff f968 	bl	8001d2c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff fad9 	bl	8002018 <LL_ADC_IsEnabled>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f040 813d 	bne.w	8002ce8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	6819      	ldr	r1, [r3, #0]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f7ff fa24 	bl	8001ec8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4aa2      	ldr	r2, [pc, #648]	@ (8002d10 <HAL_ADC_ConfigChannel+0x6dc>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	f040 812e 	bne.w	8002ce8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10b      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x480>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	0e9b      	lsrs	r3, r3, #26
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	f003 031f 	and.w	r3, r3, #31
 8002aa8:	2b09      	cmp	r3, #9
 8002aaa:	bf94      	ite	ls
 8002aac:	2301      	movls	r3, #1
 8002aae:	2300      	movhi	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	e019      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x4b4>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002abc:	fa93 f3a3 	rbit	r3, r3
 8002ac0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002ac2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ac4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002ac6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002acc:	2320      	movs	r3, #32
 8002ace:	e003      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002ad0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ad2:	fab3 f383 	clz	r3, r3
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	3301      	adds	r3, #1
 8002ada:	f003 031f 	and.w	r3, r3, #31
 8002ade:	2b09      	cmp	r3, #9
 8002ae0:	bf94      	ite	ls
 8002ae2:	2301      	movls	r3, #1
 8002ae4:	2300      	movhi	r3, #0
 8002ae6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d079      	beq.n	8002be0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d107      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x4d4>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	0e9b      	lsrs	r3, r3, #26
 8002afe:	3301      	adds	r3, #1
 8002b00:	069b      	lsls	r3, r3, #26
 8002b02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b06:	e015      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x500>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b10:	fa93 f3a3 	rbit	r3, r3
 8002b14:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002b16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b18:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002b20:	2320      	movs	r3, #32
 8002b22:	e003      	b.n	8002b2c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002b24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b26:	fab3 f383 	clz	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	069b      	lsls	r3, r3, #26
 8002b30:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d109      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x520>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	0e9b      	lsrs	r3, r3, #26
 8002b46:	3301      	adds	r3, #1
 8002b48:	f003 031f 	and.w	r3, r3, #31
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b52:	e017      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x550>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b5c:	fa93 f3a3 	rbit	r3, r3
 8002b60:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002b62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b64:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002b66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002b6c:	2320      	movs	r3, #32
 8002b6e:	e003      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002b70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b72:	fab3 f383 	clz	r3, r3
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	3301      	adds	r3, #1
 8002b7a:	f003 031f 	and.w	r3, r3, #31
 8002b7e:	2101      	movs	r1, #1
 8002b80:	fa01 f303 	lsl.w	r3, r1, r3
 8002b84:	ea42 0103 	orr.w	r1, r2, r3
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10a      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x576>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	0e9b      	lsrs	r3, r3, #26
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	f003 021f 	and.w	r2, r3, #31
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	4413      	add	r3, r2
 8002ba6:	051b      	lsls	r3, r3, #20
 8002ba8:	e018      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x5a8>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bb2:	fa93 f3a3 	rbit	r3, r3
 8002bb6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002bbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002bc2:	2320      	movs	r3, #32
 8002bc4:	e003      	b.n	8002bce <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002bc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bc8:	fab3 f383 	clz	r3, r3
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	3301      	adds	r3, #1
 8002bd0:	f003 021f 	and.w	r2, r3, #31
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	4413      	add	r3, r2
 8002bda:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bdc:	430b      	orrs	r3, r1
 8002bde:	e07e      	b.n	8002cde <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d107      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x5c8>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	0e9b      	lsrs	r3, r3, #26
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	069b      	lsls	r3, r3, #26
 8002bf6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002bfa:	e015      	b.n	8002c28 <HAL_ADC_ConfigChannel+0x5f4>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c04:	fa93 f3a3 	rbit	r3, r3
 8002c08:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c0c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d101      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002c14:	2320      	movs	r3, #32
 8002c16:	e003      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c1a:	fab3 f383 	clz	r3, r3
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	3301      	adds	r3, #1
 8002c22:	069b      	lsls	r3, r3, #26
 8002c24:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d109      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0x614>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	0e9b      	lsrs	r3, r3, #26
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	f003 031f 	and.w	r3, r3, #31
 8002c40:	2101      	movs	r1, #1
 8002c42:	fa01 f303 	lsl.w	r3, r1, r3
 8002c46:	e017      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x644>
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	fa93 f3a3 	rbit	r3, r3
 8002c54:	61fb      	str	r3, [r7, #28]
  return result;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002c60:	2320      	movs	r3, #32
 8002c62:	e003      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c66:	fab3 f383 	clz	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	f003 031f 	and.w	r3, r3, #31
 8002c72:	2101      	movs	r1, #1
 8002c74:	fa01 f303 	lsl.w	r3, r1, r3
 8002c78:	ea42 0103 	orr.w	r1, r2, r3
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10d      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x670>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	0e9b      	lsrs	r3, r3, #26
 8002c8e:	3301      	adds	r3, #1
 8002c90:	f003 021f 	and.w	r2, r3, #31
 8002c94:	4613      	mov	r3, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	4413      	add	r3, r2
 8002c9a:	3b1e      	subs	r3, #30
 8002c9c:	051b      	lsls	r3, r3, #20
 8002c9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ca2:	e01b      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x6a8>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	fa93 f3a3 	rbit	r3, r3
 8002cb0:	613b      	str	r3, [r7, #16]
  return result;
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002cbc:	2320      	movs	r3, #32
 8002cbe:	e003      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	fab3 f383 	clz	r3, r3
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	3301      	adds	r3, #1
 8002cca:	f003 021f 	and.w	r2, r3, #31
 8002cce:	4613      	mov	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3b1e      	subs	r3, #30
 8002cd6:	051b      	lsls	r3, r3, #20
 8002cd8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cdc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	f7ff f8c5 	bl	8001e72 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	4b09      	ldr	r3, [pc, #36]	@ (8002d14 <HAL_ADC_ConfigChannel+0x6e0>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 80be 	beq.w	8002e72 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cfe:	d004      	beq.n	8002d0a <HAL_ADC_ConfigChannel+0x6d6>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a04      	ldr	r2, [pc, #16]	@ (8002d18 <HAL_ADC_ConfigChannel+0x6e4>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d10a      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x6ec>
 8002d0a:	4b04      	ldr	r3, [pc, #16]	@ (8002d1c <HAL_ADC_ConfigChannel+0x6e8>)
 8002d0c:	e009      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x6ee>
 8002d0e:	bf00      	nop
 8002d10:	407f0000 	.word	0x407f0000
 8002d14:	80080000 	.word	0x80080000
 8002d18:	50000100 	.word	0x50000100
 8002d1c:	50000300 	.word	0x50000300
 8002d20:	4b59      	ldr	r3, [pc, #356]	@ (8002e88 <HAL_ADC_ConfigChannel+0x854>)
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fe ffba 	bl	8001c9c <LL_ADC_GetCommonPathInternalCh>
 8002d28:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a56      	ldr	r2, [pc, #344]	@ (8002e8c <HAL_ADC_ConfigChannel+0x858>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d004      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x70c>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a55      	ldr	r2, [pc, #340]	@ (8002e90 <HAL_ADC_ConfigChannel+0x85c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d13a      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d134      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d54:	d005      	beq.n	8002d62 <HAL_ADC_ConfigChannel+0x72e>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a4e      	ldr	r2, [pc, #312]	@ (8002e94 <HAL_ADC_ConfigChannel+0x860>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	f040 8085 	bne.w	8002e6c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d6a:	d004      	beq.n	8002d76 <HAL_ADC_ConfigChannel+0x742>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a49      	ldr	r2, [pc, #292]	@ (8002e98 <HAL_ADC_ConfigChannel+0x864>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d101      	bne.n	8002d7a <HAL_ADC_ConfigChannel+0x746>
 8002d76:	4a49      	ldr	r2, [pc, #292]	@ (8002e9c <HAL_ADC_ConfigChannel+0x868>)
 8002d78:	e000      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x748>
 8002d7a:	4a43      	ldr	r2, [pc, #268]	@ (8002e88 <HAL_ADC_ConfigChannel+0x854>)
 8002d7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d84:	4619      	mov	r1, r3
 8002d86:	4610      	mov	r0, r2
 8002d88:	f7fe ff75 	bl	8001c76 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d8c:	4b44      	ldr	r3, [pc, #272]	@ (8002ea0 <HAL_ADC_ConfigChannel+0x86c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	099b      	lsrs	r3, r3, #6
 8002d92:	4a44      	ldr	r2, [pc, #272]	@ (8002ea4 <HAL_ADC_ConfigChannel+0x870>)
 8002d94:	fba2 2303 	umull	r2, r3, r2, r3
 8002d98:	099b      	lsrs	r3, r3, #6
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	005b      	lsls	r3, r3, #1
 8002da0:	4413      	add	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002da6:	e002      	b.n	8002dae <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1f9      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002db4:	e05a      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a3b      	ldr	r2, [pc, #236]	@ (8002ea8 <HAL_ADC_ConfigChannel+0x874>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d125      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002dc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d11f      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a31      	ldr	r2, [pc, #196]	@ (8002e98 <HAL_ADC_ConfigChannel+0x864>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d104      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x7ac>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a34      	ldr	r2, [pc, #208]	@ (8002eac <HAL_ADC_ConfigChannel+0x878>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d047      	beq.n	8002e70 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002de8:	d004      	beq.n	8002df4 <HAL_ADC_ConfigChannel+0x7c0>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a2a      	ldr	r2, [pc, #168]	@ (8002e98 <HAL_ADC_ConfigChannel+0x864>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d101      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x7c4>
 8002df4:	4a29      	ldr	r2, [pc, #164]	@ (8002e9c <HAL_ADC_ConfigChannel+0x868>)
 8002df6:	e000      	b.n	8002dfa <HAL_ADC_ConfigChannel+0x7c6>
 8002df8:	4a23      	ldr	r2, [pc, #140]	@ (8002e88 <HAL_ADC_ConfigChannel+0x854>)
 8002dfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dfe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e02:	4619      	mov	r1, r3
 8002e04:	4610      	mov	r0, r2
 8002e06:	f7fe ff36 	bl	8001c76 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e0a:	e031      	b.n	8002e70 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a27      	ldr	r2, [pc, #156]	@ (8002eb0 <HAL_ADC_ConfigChannel+0x87c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d12d      	bne.n	8002e72 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d127      	bne.n	8002e72 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a1c      	ldr	r2, [pc, #112]	@ (8002e98 <HAL_ADC_ConfigChannel+0x864>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d022      	beq.n	8002e72 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e34:	d004      	beq.n	8002e40 <HAL_ADC_ConfigChannel+0x80c>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a17      	ldr	r2, [pc, #92]	@ (8002e98 <HAL_ADC_ConfigChannel+0x864>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d101      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x810>
 8002e40:	4a16      	ldr	r2, [pc, #88]	@ (8002e9c <HAL_ADC_ConfigChannel+0x868>)
 8002e42:	e000      	b.n	8002e46 <HAL_ADC_ConfigChannel+0x812>
 8002e44:	4a10      	ldr	r2, [pc, #64]	@ (8002e88 <HAL_ADC_ConfigChannel+0x854>)
 8002e46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e4a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4610      	mov	r0, r2
 8002e52:	f7fe ff10 	bl	8001c76 <LL_ADC_SetCommonPathInternalCh>
 8002e56:	e00c      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5c:	f043 0220 	orr.w	r2, r3, #32
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002e6a:	e002      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e6c:	bf00      	nop
 8002e6e:	e000      	b.n	8002e72 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e70:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e7a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	37d8      	adds	r7, #216	@ 0xd8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	50000700 	.word	0x50000700
 8002e8c:	c3210000 	.word	0xc3210000
 8002e90:	90c00010 	.word	0x90c00010
 8002e94:	50000600 	.word	0x50000600
 8002e98:	50000100 	.word	0x50000100
 8002e9c:	50000300 	.word	0x50000300
 8002ea0:	20000000 	.word	0x20000000
 8002ea4:	053e2d63 	.word	0x053e2d63
 8002ea8:	c7520000 	.word	0xc7520000
 8002eac:	50000500 	.word	0x50000500
 8002eb0:	cb840000 	.word	0xcb840000

08002eb4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff f8a7 	bl	8002018 <LL_ADC_IsEnabled>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d176      	bne.n	8002fbe <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	4b3c      	ldr	r3, [pc, #240]	@ (8002fc8 <ADC_Enable+0x114>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00d      	beq.n	8002efa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee2:	f043 0210 	orr.w	r2, r3, #16
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eee:	f043 0201 	orr.w	r2, r3, #1
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e062      	b.n	8002fc0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff f862 	bl	8001fc8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f0c:	d004      	beq.n	8002f18 <ADC_Enable+0x64>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a2e      	ldr	r2, [pc, #184]	@ (8002fcc <ADC_Enable+0x118>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d101      	bne.n	8002f1c <ADC_Enable+0x68>
 8002f18:	4b2d      	ldr	r3, [pc, #180]	@ (8002fd0 <ADC_Enable+0x11c>)
 8002f1a:	e000      	b.n	8002f1e <ADC_Enable+0x6a>
 8002f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8002fd4 <ADC_Enable+0x120>)
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe febc 	bl	8001c9c <LL_ADC_GetCommonPathInternalCh>
 8002f24:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d013      	beq.n	8002f56 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f2e:	4b2a      	ldr	r3, [pc, #168]	@ (8002fd8 <ADC_Enable+0x124>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	099b      	lsrs	r3, r3, #6
 8002f34:	4a29      	ldr	r2, [pc, #164]	@ (8002fdc <ADC_Enable+0x128>)
 8002f36:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3a:	099b      	lsrs	r3, r3, #6
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	4613      	mov	r3, r2
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	4413      	add	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f48:	e002      	b.n	8002f50 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f9      	bne.n	8002f4a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f56:	f7fe fe6f 	bl	8001c38 <HAL_GetTick>
 8002f5a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f5c:	e028      	b.n	8002fb0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff f858 	bl	8002018 <LL_ADC_IsEnabled>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d104      	bne.n	8002f78 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff f828 	bl	8001fc8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f78:	f7fe fe5e 	bl	8001c38 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d914      	bls.n	8002fb0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d00d      	beq.n	8002fb0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f98:	f043 0210 	orr.w	r2, r3, #16
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fa4:	f043 0201 	orr.w	r2, r3, #1
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e007      	b.n	8002fc0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d1cf      	bne.n	8002f5e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	8000003f 	.word	0x8000003f
 8002fcc:	50000100 	.word	0x50000100
 8002fd0:	50000300 	.word	0x50000300
 8002fd4:	50000700 	.word	0x50000700
 8002fd8:	20000000 	.word	0x20000000
 8002fdc:	053e2d63 	.word	0x053e2d63

08002fe0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff f826 	bl	800203e <LL_ADC_IsDisableOngoing>
 8002ff2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff f80d 	bl	8002018 <LL_ADC_IsEnabled>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d047      	beq.n	8003094 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d144      	bne.n	8003094 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 030d 	and.w	r3, r3, #13
 8003014:	2b01      	cmp	r3, #1
 8003016:	d10c      	bne.n	8003032 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4618      	mov	r0, r3
 800301e:	f7fe ffe7 	bl	8001ff0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2203      	movs	r2, #3
 8003028:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800302a:	f7fe fe05 	bl	8001c38 <HAL_GetTick>
 800302e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003030:	e029      	b.n	8003086 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003036:	f043 0210 	orr.w	r2, r3, #16
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003042:	f043 0201 	orr.w	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e023      	b.n	8003096 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800304e:	f7fe fdf3 	bl	8001c38 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d914      	bls.n	8003086 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00d      	beq.n	8003086 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800306e:	f043 0210 	orr.w	r2, r3, #16
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800307a:	f043 0201 	orr.w	r2, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e007      	b.n	8003096 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1dc      	bne.n	800304e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b084      	sub	sp, #16
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030aa:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d14b      	bne.n	8003150 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030bc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d021      	beq.n	8003116 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fe fe8c 	bl	8001df4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d032      	beq.n	8003148 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d12b      	bne.n	8003148 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003100:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d11f      	bne.n	8003148 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310c:	f043 0201 	orr.w	r2, r3, #1
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003114:	e018      	b.n	8003148 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d111      	bne.n	8003148 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003128:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003134:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d105      	bne.n	8003148 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003140:	f043 0201 	orr.w	r2, r3, #1
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f7ff fa55 	bl	80025f8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800314e:	e00e      	b.n	800316e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003154:	f003 0310 	and.w	r3, r3, #16
 8003158:	2b00      	cmp	r3, #0
 800315a:	d003      	beq.n	8003164 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f7ff fa5f 	bl	8002620 <HAL_ADC_ErrorCallback>
}
 8003162:	e004      	b.n	800316e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	4798      	blx	r3
}
 800316e:	bf00      	nop
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003182:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f7ff fa41 	bl	800260c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800318a:	bf00      	nop
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b084      	sub	sp, #16
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800319e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031b0:	f043 0204 	orr.w	r2, r3, #4
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f7ff fa31 	bl	8002620 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031be:	bf00      	nop
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <LL_ADC_IsEnabled>:
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d101      	bne.n	80031de <LL_ADC_IsEnabled+0x18>
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <LL_ADC_IsEnabled+0x1a>
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <LL_ADC_StartCalibration>:
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80031fe:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003208:	4313      	orrs	r3, r2
 800320a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	609a      	str	r2, [r3, #8]
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <LL_ADC_IsCalibrationOnGoing>:
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800322e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003232:	d101      	bne.n	8003238 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <LL_ADC_REG_IsConversionOngoing>:
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	2b04      	cmp	r3, #4
 8003258:	d101      	bne.n	800325e <LL_ADC_REG_IsConversionOngoing+0x18>
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_ADCEx_Calibration_Start+0x1c>
 8003284:	2302      	movs	r3, #2
 8003286:	e04d      	b.n	8003324 <HAL_ADCEx_Calibration_Start+0xb8>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7ff fea5 	bl	8002fe0 <ADC_Disable>
 8003296:	4603      	mov	r3, r0
 8003298:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800329a:	7bfb      	ldrb	r3, [r7, #15]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d136      	bne.n	800330e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80032a8:	f023 0302 	bic.w	r3, r3, #2
 80032ac:	f043 0202 	orr.w	r2, r3, #2
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6839      	ldr	r1, [r7, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff ff96 	bl	80031ec <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80032c0:	e014      	b.n	80032ec <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	3301      	adds	r3, #1
 80032c6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	4a18      	ldr	r2, [pc, #96]	@ (800332c <HAL_ADCEx_Calibration_Start+0xc0>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d90d      	bls.n	80032ec <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d4:	f023 0312 	bic.w	r3, r3, #18
 80032d8:	f043 0210 	orr.w	r2, r3, #16
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e01b      	b.n	8003324 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff ff94 	bl	800321e <LL_ADC_IsCalibrationOnGoing>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1e2      	bne.n	80032c2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003300:	f023 0303 	bic.w	r3, r3, #3
 8003304:	f043 0201 	orr.w	r2, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800330c:	e005      	b.n	800331a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003312:	f043 0210 	orr.w	r2, r3, #16
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003322:	7bfb      	ldrb	r3, [r7, #15]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	0004de01 	.word	0x0004de01

08003330 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003330:	b590      	push	{r4, r7, lr}
 8003332:	b0a1      	sub	sp, #132	@ 0x84
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003346:	2b01      	cmp	r3, #1
 8003348:	d101      	bne.n	800334e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800334a:	2302      	movs	r3, #2
 800334c:	e0e7      	b.n	800351e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003356:	2300      	movs	r3, #0
 8003358:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800335a:	2300      	movs	r3, #0
 800335c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003366:	d102      	bne.n	800336e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003368:	4b6f      	ldr	r3, [pc, #444]	@ (8003528 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800336a:	60bb      	str	r3, [r7, #8]
 800336c:	e009      	b.n	8003382 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a6e      	ldr	r2, [pc, #440]	@ (800352c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d102      	bne.n	800337e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003378:	4b6d      	ldr	r3, [pc, #436]	@ (8003530 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800337a:	60bb      	str	r3, [r7, #8]
 800337c:	e001      	b.n	8003382 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800337e:	2300      	movs	r3, #0
 8003380:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10b      	bne.n	80033a0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800338c:	f043 0220 	orr.w	r2, r3, #32
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e0be      	b.n	800351e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff ff4f 	bl	8003246 <LL_ADC_REG_IsConversionOngoing>
 80033a8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff ff49 	bl	8003246 <LL_ADC_REG_IsConversionOngoing>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f040 80a0 	bne.w	80034fc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80033bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f040 809c 	bne.w	80034fc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033cc:	d004      	beq.n	80033d8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a55      	ldr	r2, [pc, #340]	@ (8003528 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d101      	bne.n	80033dc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80033d8:	4b56      	ldr	r3, [pc, #344]	@ (8003534 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80033da:	e000      	b.n	80033de <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80033dc:	4b56      	ldr	r3, [pc, #344]	@ (8003538 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80033de:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d04b      	beq.n	8003480 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80033e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	6859      	ldr	r1, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80033fa:	035b      	lsls	r3, r3, #13
 80033fc:	430b      	orrs	r3, r1
 80033fe:	431a      	orrs	r2, r3
 8003400:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003402:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800340c:	d004      	beq.n	8003418 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a45      	ldr	r2, [pc, #276]	@ (8003528 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d10f      	bne.n	8003438 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003418:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800341c:	f7ff fed3 	bl	80031c6 <LL_ADC_IsEnabled>
 8003420:	4604      	mov	r4, r0
 8003422:	4841      	ldr	r0, [pc, #260]	@ (8003528 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003424:	f7ff fecf 	bl	80031c6 <LL_ADC_IsEnabled>
 8003428:	4603      	mov	r3, r0
 800342a:	4323      	orrs	r3, r4
 800342c:	2b00      	cmp	r3, #0
 800342e:	bf0c      	ite	eq
 8003430:	2301      	moveq	r3, #1
 8003432:	2300      	movne	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	e012      	b.n	800345e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003438:	483c      	ldr	r0, [pc, #240]	@ (800352c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800343a:	f7ff fec4 	bl	80031c6 <LL_ADC_IsEnabled>
 800343e:	4604      	mov	r4, r0
 8003440:	483b      	ldr	r0, [pc, #236]	@ (8003530 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003442:	f7ff fec0 	bl	80031c6 <LL_ADC_IsEnabled>
 8003446:	4603      	mov	r3, r0
 8003448:	431c      	orrs	r4, r3
 800344a:	483c      	ldr	r0, [pc, #240]	@ (800353c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800344c:	f7ff febb 	bl	80031c6 <LL_ADC_IsEnabled>
 8003450:	4603      	mov	r3, r0
 8003452:	4323      	orrs	r3, r4
 8003454:	2b00      	cmp	r3, #0
 8003456:	bf0c      	ite	eq
 8003458:	2301      	moveq	r3, #1
 800345a:	2300      	movne	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d056      	beq.n	8003510 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003462:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800346a:	f023 030f 	bic.w	r3, r3, #15
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	6811      	ldr	r1, [r2, #0]
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	6892      	ldr	r2, [r2, #8]
 8003476:	430a      	orrs	r2, r1
 8003478:	431a      	orrs	r2, r3
 800347a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800347c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800347e:	e047      	b.n	8003510 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003480:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003488:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800348a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003494:	d004      	beq.n	80034a0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a23      	ldr	r2, [pc, #140]	@ (8003528 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d10f      	bne.n	80034c0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80034a0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80034a4:	f7ff fe8f 	bl	80031c6 <LL_ADC_IsEnabled>
 80034a8:	4604      	mov	r4, r0
 80034aa:	481f      	ldr	r0, [pc, #124]	@ (8003528 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80034ac:	f7ff fe8b 	bl	80031c6 <LL_ADC_IsEnabled>
 80034b0:	4603      	mov	r3, r0
 80034b2:	4323      	orrs	r3, r4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	bf0c      	ite	eq
 80034b8:	2301      	moveq	r3, #1
 80034ba:	2300      	movne	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	e012      	b.n	80034e6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80034c0:	481a      	ldr	r0, [pc, #104]	@ (800352c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80034c2:	f7ff fe80 	bl	80031c6 <LL_ADC_IsEnabled>
 80034c6:	4604      	mov	r4, r0
 80034c8:	4819      	ldr	r0, [pc, #100]	@ (8003530 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80034ca:	f7ff fe7c 	bl	80031c6 <LL_ADC_IsEnabled>
 80034ce:	4603      	mov	r3, r0
 80034d0:	431c      	orrs	r4, r3
 80034d2:	481a      	ldr	r0, [pc, #104]	@ (800353c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80034d4:	f7ff fe77 	bl	80031c6 <LL_ADC_IsEnabled>
 80034d8:	4603      	mov	r3, r0
 80034da:	4323      	orrs	r3, r4
 80034dc:	2b00      	cmp	r3, #0
 80034de:	bf0c      	ite	eq
 80034e0:	2301      	moveq	r3, #1
 80034e2:	2300      	movne	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d012      	beq.n	8003510 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80034ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80034f2:	f023 030f 	bic.w	r3, r3, #15
 80034f6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80034f8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034fa:	e009      	b.n	8003510 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003500:	f043 0220 	orr.w	r2, r3, #32
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800350e:	e000      	b.n	8003512 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003510:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800351a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800351e:	4618      	mov	r0, r3
 8003520:	3784      	adds	r7, #132	@ 0x84
 8003522:	46bd      	mov	sp, r7
 8003524:	bd90      	pop	{r4, r7, pc}
 8003526:	bf00      	nop
 8003528:	50000100 	.word	0x50000100
 800352c:	50000400 	.word	0x50000400
 8003530:	50000500 	.word	0x50000500
 8003534:	50000300 	.word	0x50000300
 8003538:	50000700 	.word	0x50000700
 800353c:	50000600 	.word	0x50000600

08003540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003550:	4b0c      	ldr	r3, [pc, #48]	@ (8003584 <__NVIC_SetPriorityGrouping+0x44>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800355c:	4013      	ands	r3, r2
 800355e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003568:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800356c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003572:	4a04      	ldr	r2, [pc, #16]	@ (8003584 <__NVIC_SetPriorityGrouping+0x44>)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	60d3      	str	r3, [r2, #12]
}
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	e000ed00 	.word	0xe000ed00

08003588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800358c:	4b04      	ldr	r3, [pc, #16]	@ (80035a0 <__NVIC_GetPriorityGrouping+0x18>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	0a1b      	lsrs	r3, r3, #8
 8003592:	f003 0307 	and.w	r3, r3, #7
}
 8003596:	4618      	mov	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	e000ed00 	.word	0xe000ed00

080035a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	db0b      	blt.n	80035ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	f003 021f 	and.w	r2, r3, #31
 80035bc:	4907      	ldr	r1, [pc, #28]	@ (80035dc <__NVIC_EnableIRQ+0x38>)
 80035be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	2001      	movs	r0, #1
 80035c6:	fa00 f202 	lsl.w	r2, r0, r2
 80035ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	e000e100 	.word	0xe000e100

080035e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	4603      	mov	r3, r0
 80035e8:	6039      	str	r1, [r7, #0]
 80035ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	db0a      	blt.n	800360a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	490c      	ldr	r1, [pc, #48]	@ (800362c <__NVIC_SetPriority+0x4c>)
 80035fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fe:	0112      	lsls	r2, r2, #4
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	440b      	add	r3, r1
 8003604:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003608:	e00a      	b.n	8003620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	b2da      	uxtb	r2, r3
 800360e:	4908      	ldr	r1, [pc, #32]	@ (8003630 <__NVIC_SetPriority+0x50>)
 8003610:	79fb      	ldrb	r3, [r7, #7]
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	3b04      	subs	r3, #4
 8003618:	0112      	lsls	r2, r2, #4
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	440b      	add	r3, r1
 800361e:	761a      	strb	r2, [r3, #24]
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	e000e100 	.word	0xe000e100
 8003630:	e000ed00 	.word	0xe000ed00

08003634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003634:	b480      	push	{r7}
 8003636:	b089      	sub	sp, #36	@ 0x24
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	f1c3 0307 	rsb	r3, r3, #7
 800364e:	2b04      	cmp	r3, #4
 8003650:	bf28      	it	cs
 8003652:	2304      	movcs	r3, #4
 8003654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	3304      	adds	r3, #4
 800365a:	2b06      	cmp	r3, #6
 800365c:	d902      	bls.n	8003664 <NVIC_EncodePriority+0x30>
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	3b03      	subs	r3, #3
 8003662:	e000      	b.n	8003666 <NVIC_EncodePriority+0x32>
 8003664:	2300      	movs	r3, #0
 8003666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003668:	f04f 32ff 	mov.w	r2, #4294967295
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	43da      	mvns	r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	401a      	ands	r2, r3
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800367c:	f04f 31ff 	mov.w	r1, #4294967295
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	fa01 f303 	lsl.w	r3, r1, r3
 8003686:	43d9      	mvns	r1, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800368c:	4313      	orrs	r3, r2
         );
}
 800368e:	4618      	mov	r0, r3
 8003690:	3724      	adds	r7, #36	@ 0x24
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
	...

0800369c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036ac:	d301      	bcc.n	80036b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ae:	2301      	movs	r3, #1
 80036b0:	e00f      	b.n	80036d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036b2:	4a0a      	ldr	r2, [pc, #40]	@ (80036dc <SysTick_Config+0x40>)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ba:	210f      	movs	r1, #15
 80036bc:	f04f 30ff 	mov.w	r0, #4294967295
 80036c0:	f7ff ff8e 	bl	80035e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036c4:	4b05      	ldr	r3, [pc, #20]	@ (80036dc <SysTick_Config+0x40>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036ca:	4b04      	ldr	r3, [pc, #16]	@ (80036dc <SysTick_Config+0x40>)
 80036cc:	2207      	movs	r2, #7
 80036ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	e000e010 	.word	0xe000e010

080036e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff ff29 	bl	8003540 <__NVIC_SetPriorityGrouping>
}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b086      	sub	sp, #24
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	4603      	mov	r3, r0
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	607a      	str	r2, [r7, #4]
 8003702:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003704:	f7ff ff40 	bl	8003588 <__NVIC_GetPriorityGrouping>
 8003708:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	68b9      	ldr	r1, [r7, #8]
 800370e:	6978      	ldr	r0, [r7, #20]
 8003710:	f7ff ff90 	bl	8003634 <NVIC_EncodePriority>
 8003714:	4602      	mov	r2, r0
 8003716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800371a:	4611      	mov	r1, r2
 800371c:	4618      	mov	r0, r3
 800371e:	f7ff ff5f 	bl	80035e0 <__NVIC_SetPriority>
}
 8003722:	bf00      	nop
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b082      	sub	sp, #8
 800372e:	af00      	add	r7, sp, #0
 8003730:	4603      	mov	r3, r0
 8003732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff ff33 	bl	80035a4 <__NVIC_EnableIRQ>
}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b082      	sub	sp, #8
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7ff ffa4 	bl	800369c <SysTick_Config>
 8003754:	4603      	mov	r3, r0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e08d      	b.n	800388e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	4b47      	ldr	r3, [pc, #284]	@ (8003898 <HAL_DMA_Init+0x138>)
 800377a:	429a      	cmp	r2, r3
 800377c:	d80f      	bhi.n	800379e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	4b45      	ldr	r3, [pc, #276]	@ (800389c <HAL_DMA_Init+0x13c>)
 8003786:	4413      	add	r3, r2
 8003788:	4a45      	ldr	r2, [pc, #276]	@ (80038a0 <HAL_DMA_Init+0x140>)
 800378a:	fba2 2303 	umull	r2, r3, r2, r3
 800378e:	091b      	lsrs	r3, r3, #4
 8003790:	009a      	lsls	r2, r3, #2
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a42      	ldr	r2, [pc, #264]	@ (80038a4 <HAL_DMA_Init+0x144>)
 800379a:	641a      	str	r2, [r3, #64]	@ 0x40
 800379c:	e00e      	b.n	80037bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	4b40      	ldr	r3, [pc, #256]	@ (80038a8 <HAL_DMA_Init+0x148>)
 80037a6:	4413      	add	r3, r2
 80037a8:	4a3d      	ldr	r2, [pc, #244]	@ (80038a0 <HAL_DMA_Init+0x140>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	091b      	lsrs	r3, r3, #4
 80037b0:	009a      	lsls	r2, r3, #2
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a3c      	ldr	r2, [pc, #240]	@ (80038ac <HAL_DMA_Init+0x14c>)
 80037ba:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80037d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80037e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fa76 	bl	8003d00 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800381c:	d102      	bne.n	8003824 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003838:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d010      	beq.n	8003864 <HAL_DMA_Init+0x104>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b04      	cmp	r3, #4
 8003848:	d80c      	bhi.n	8003864 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fa96 	bl	8003d7c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003860:	605a      	str	r2, [r3, #4]
 8003862:	e008      	b.n	8003876 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40020407 	.word	0x40020407
 800389c:	bffdfff8 	.word	0xbffdfff8
 80038a0:	cccccccd 	.word	0xcccccccd
 80038a4:	40020000 	.word	0x40020000
 80038a8:	bffdfbf8 	.word	0xbffdfbf8
 80038ac:	40020400 	.word	0x40020400

080038b0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
 80038bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038be:	2300      	movs	r3, #0
 80038c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d101      	bne.n	80038d0 <HAL_DMA_Start_IT+0x20>
 80038cc:	2302      	movs	r3, #2
 80038ce:	e066      	b.n	800399e <HAL_DMA_Start_IT+0xee>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d155      	bne.n	8003990 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0201 	bic.w	r2, r2, #1
 8003900:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	68b9      	ldr	r1, [r7, #8]
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 f9bb 	bl	8003c84 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003912:	2b00      	cmp	r3, #0
 8003914:	d008      	beq.n	8003928 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f042 020e 	orr.w	r2, r2, #14
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	e00f      	b.n	8003948 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0204 	bic.w	r2, r2, #4
 8003936:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 020a 	orr.w	r2, r2, #10
 8003946:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d007      	beq.n	8003966 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003960:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003964:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800396a:	2b00      	cmp	r3, #0
 800396c:	d007      	beq.n	800397e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003978:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800397c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f042 0201 	orr.w	r2, r2, #1
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	e005      	b.n	800399c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003998:	2302      	movs	r3, #2
 800399a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800399c:	7dfb      	ldrb	r3, [r7, #23]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3718      	adds	r7, #24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b085      	sub	sp, #20
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d005      	beq.n	80039ca <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2204      	movs	r2, #4
 80039c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	73fb      	strb	r3, [r7, #15]
 80039c8:	e037      	b.n	8003a3a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 020e 	bic.w	r2, r2, #14
 80039d8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039e8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0201 	bic.w	r2, r2, #1
 80039f8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fe:	f003 021f 	and.w	r2, r3, #31
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a06:	2101      	movs	r1, #1
 8003a08:	fa01 f202 	lsl.w	r2, r1, r2
 8003a0c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a16:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00c      	beq.n	8003a3a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a2a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a2e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a38:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a60:	2300      	movs	r3, #0
 8003a62:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d00d      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2204      	movs	r2, #4
 8003a74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	73fb      	strb	r3, [r7, #15]
 8003a8a:	e047      	b.n	8003b1c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 020e 	bic.w	r2, r2, #14
 8003a9a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0201 	bic.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ab6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003aba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac0:	f003 021f 	and.w	r2, r3, #31
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac8:	2101      	movs	r1, #1
 8003aca:	fa01 f202 	lsl.w	r2, r1, r2
 8003ace:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003ad8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00c      	beq.n	8003afc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003af0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003afa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	4798      	blx	r3
    }
  }
  return status;
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b084      	sub	sp, #16
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b42:	f003 031f 	and.w	r3, r3, #31
 8003b46:	2204      	movs	r2, #4
 8003b48:	409a      	lsls	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d026      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x7a>
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f003 0304 	and.w	r3, r3, #4
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d021      	beq.n	8003ba0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d107      	bne.n	8003b7a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0204 	bic.w	r2, r2, #4
 8003b78:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b7e:	f003 021f 	and.w	r2, r3, #31
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b86:	2104      	movs	r1, #4
 8003b88:	fa01 f202 	lsl.w	r2, r1, r2
 8003b8c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d071      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003b9e:	e06c      	b.n	8003c7a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba4:	f003 031f 	and.w	r3, r3, #31
 8003ba8:	2202      	movs	r2, #2
 8003baa:	409a      	lsls	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d02e      	beq.n	8003c12 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d029      	beq.n	8003c12 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0320 	and.w	r3, r3, #32
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d10b      	bne.n	8003be4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 020a 	bic.w	r2, r2, #10
 8003bda:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be8:	f003 021f 	and.w	r2, r3, #31
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf0:	2102      	movs	r1, #2
 8003bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d038      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003c10:	e033      	b.n	8003c7a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c16:	f003 031f 	and.w	r3, r3, #31
 8003c1a:	2208      	movs	r2, #8
 8003c1c:	409a      	lsls	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4013      	ands	r3, r2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d02a      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d025      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 020e 	bic.w	r2, r2, #14
 8003c3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c44:	f003 021f 	and.w	r2, r3, #31
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c52:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d004      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c7a:	bf00      	nop
 8003c7c:	bf00      	nop
}
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c9a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d004      	beq.n	8003cae <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003cac:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb2:	f003 021f 	and.w	r2, r3, #31
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cba:	2101      	movs	r1, #1
 8003cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8003cc0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	2b10      	cmp	r3, #16
 8003cd0:	d108      	bne.n	8003ce4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ce2:	e007      	b.n	8003cf4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	60da      	str	r2, [r3, #12]
}
 8003cf4:	bf00      	nop
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4b16      	ldr	r3, [pc, #88]	@ (8003d68 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d802      	bhi.n	8003d1a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003d14:	4b15      	ldr	r3, [pc, #84]	@ (8003d6c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	e001      	b.n	8003d1e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003d1a:	4b15      	ldr	r3, [pc, #84]	@ (8003d70 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003d1c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	3b08      	subs	r3, #8
 8003d2a:	4a12      	ldr	r2, [pc, #72]	@ (8003d74 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d38:	089b      	lsrs	r3, r3, #2
 8003d3a:	009a      	lsls	r2, r3, #2
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	4413      	add	r3, r2
 8003d40:	461a      	mov	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a0b      	ldr	r2, [pc, #44]	@ (8003d78 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003d4a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f003 031f 	and.w	r3, r3, #31
 8003d52:	2201      	movs	r2, #1
 8003d54:	409a      	lsls	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d5a:	bf00      	nop
 8003d5c:	371c      	adds	r7, #28
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40020407 	.word	0x40020407
 8003d6c:	40020800 	.word	0x40020800
 8003d70:	40020820 	.word	0x40020820
 8003d74:	cccccccd 	.word	0xcccccccd
 8003d78:	40020880 	.word	0x40020880

08003d7c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	461a      	mov	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a08      	ldr	r2, [pc, #32]	@ (8003dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003d9e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	3b01      	subs	r3, #1
 8003da4:	f003 031f 	and.w	r3, r3, #31
 8003da8:	2201      	movs	r2, #1
 8003daa:	409a      	lsls	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003db0:	bf00      	nop
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	1000823f 	.word	0x1000823f
 8003dc0:	40020940 	.word	0x40020940

08003dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003dd2:	e15a      	b.n	800408a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	2101      	movs	r1, #1
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8003de0:	4013      	ands	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 814c 	beq.w	8004084 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f003 0303 	and.w	r3, r3, #3
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d005      	beq.n	8003e04 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d130      	bne.n	8003e66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	2203      	movs	r2, #3
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	43db      	mvns	r3, r3
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e42:	43db      	mvns	r3, r3
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4013      	ands	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	091b      	lsrs	r3, r3, #4
 8003e50:	f003 0201 	and.w	r2, r3, #1
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	d017      	beq.n	8003ea2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	2203      	movs	r2, #3
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	43db      	mvns	r3, r3
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4013      	ands	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d123      	bne.n	8003ef6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	08da      	lsrs	r2, r3, #3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	3208      	adds	r2, #8
 8003eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	220f      	movs	r2, #15
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	43db      	mvns	r3, r3
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	691a      	ldr	r2, [r3, #16]
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	08da      	lsrs	r2, r3, #3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3208      	adds	r2, #8
 8003ef0:	6939      	ldr	r1, [r7, #16]
 8003ef2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	2203      	movs	r2, #3
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	43db      	mvns	r3, r3
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f003 0203 	and.w	r2, r3, #3
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 80a6 	beq.w	8004084 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f38:	4b5b      	ldr	r3, [pc, #364]	@ (80040a8 <HAL_GPIO_Init+0x2e4>)
 8003f3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f3c:	4a5a      	ldr	r2, [pc, #360]	@ (80040a8 <HAL_GPIO_Init+0x2e4>)
 8003f3e:	f043 0301 	orr.w	r3, r3, #1
 8003f42:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f44:	4b58      	ldr	r3, [pc, #352]	@ (80040a8 <HAL_GPIO_Init+0x2e4>)
 8003f46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	60bb      	str	r3, [r7, #8]
 8003f4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f50:	4a56      	ldr	r2, [pc, #344]	@ (80040ac <HAL_GPIO_Init+0x2e8>)
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	089b      	lsrs	r3, r3, #2
 8003f56:	3302      	adds	r3, #2
 8003f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f003 0303 	and.w	r3, r3, #3
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	220f      	movs	r2, #15
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	43db      	mvns	r3, r3
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	4013      	ands	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003f7a:	d01f      	beq.n	8003fbc <HAL_GPIO_Init+0x1f8>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a4c      	ldr	r2, [pc, #304]	@ (80040b0 <HAL_GPIO_Init+0x2ec>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d019      	beq.n	8003fb8 <HAL_GPIO_Init+0x1f4>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a4b      	ldr	r2, [pc, #300]	@ (80040b4 <HAL_GPIO_Init+0x2f0>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d013      	beq.n	8003fb4 <HAL_GPIO_Init+0x1f0>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a4a      	ldr	r2, [pc, #296]	@ (80040b8 <HAL_GPIO_Init+0x2f4>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d00d      	beq.n	8003fb0 <HAL_GPIO_Init+0x1ec>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a49      	ldr	r2, [pc, #292]	@ (80040bc <HAL_GPIO_Init+0x2f8>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d007      	beq.n	8003fac <HAL_GPIO_Init+0x1e8>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a48      	ldr	r2, [pc, #288]	@ (80040c0 <HAL_GPIO_Init+0x2fc>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d101      	bne.n	8003fa8 <HAL_GPIO_Init+0x1e4>
 8003fa4:	2305      	movs	r3, #5
 8003fa6:	e00a      	b.n	8003fbe <HAL_GPIO_Init+0x1fa>
 8003fa8:	2306      	movs	r3, #6
 8003faa:	e008      	b.n	8003fbe <HAL_GPIO_Init+0x1fa>
 8003fac:	2304      	movs	r3, #4
 8003fae:	e006      	b.n	8003fbe <HAL_GPIO_Init+0x1fa>
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e004      	b.n	8003fbe <HAL_GPIO_Init+0x1fa>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	e002      	b.n	8003fbe <HAL_GPIO_Init+0x1fa>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e000      	b.n	8003fbe <HAL_GPIO_Init+0x1fa>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	f002 0203 	and.w	r2, r2, #3
 8003fc4:	0092      	lsls	r2, r2, #2
 8003fc6:	4093      	lsls	r3, r2
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fce:	4937      	ldr	r1, [pc, #220]	@ (80040ac <HAL_GPIO_Init+0x2e8>)
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	089b      	lsrs	r3, r3, #2
 8003fd4:	3302      	adds	r3, #2
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fdc:	4b39      	ldr	r3, [pc, #228]	@ (80040c4 <HAL_GPIO_Init+0x300>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004000:	4a30      	ldr	r2, [pc, #192]	@ (80040c4 <HAL_GPIO_Init+0x300>)
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004006:	4b2f      	ldr	r3, [pc, #188]	@ (80040c4 <HAL_GPIO_Init+0x300>)
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	43db      	mvns	r3, r3
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4013      	ands	r3, r2
 8004014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4313      	orrs	r3, r2
 8004028:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800402a:	4a26      	ldr	r2, [pc, #152]	@ (80040c4 <HAL_GPIO_Init+0x300>)
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004030:	4b24      	ldr	r3, [pc, #144]	@ (80040c4 <HAL_GPIO_Init+0x300>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	43db      	mvns	r3, r3
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	4013      	ands	r3, r2
 800403e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4313      	orrs	r3, r2
 8004052:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004054:	4a1b      	ldr	r2, [pc, #108]	@ (80040c4 <HAL_GPIO_Init+0x300>)
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800405a:	4b1a      	ldr	r3, [pc, #104]	@ (80040c4 <HAL_GPIO_Init+0x300>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	43db      	mvns	r3, r3
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4013      	ands	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4313      	orrs	r3, r2
 800407c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800407e:	4a11      	ldr	r2, [pc, #68]	@ (80040c4 <HAL_GPIO_Init+0x300>)
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	3301      	adds	r3, #1
 8004088:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	fa22 f303 	lsr.w	r3, r2, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	f47f ae9d 	bne.w	8003dd4 <HAL_GPIO_Init+0x10>
  }
}
 800409a:	bf00      	nop
 800409c:	bf00      	nop
 800409e:	371c      	adds	r7, #28
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	40021000 	.word	0x40021000
 80040ac:	40010000 	.word	0x40010000
 80040b0:	48000400 	.word	0x48000400
 80040b4:	48000800 	.word	0x48000800
 80040b8:	48000c00 	.word	0x48000c00
 80040bc:	48001000 	.word	0x48001000
 80040c0:	48001400 	.word	0x48001400
 80040c4:	40010400 	.word	0x40010400

080040c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	460b      	mov	r3, r1
 80040d2:	807b      	strh	r3, [r7, #2]
 80040d4:	4613      	mov	r3, r2
 80040d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040d8:	787b      	ldrb	r3, [r7, #1]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040de:	887a      	ldrh	r2, [r7, #2]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040e4:	e002      	b.n	80040ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040e6:	887a      	ldrh	r2, [r7, #2]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	4603      	mov	r3, r0
 8004100:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004102:	4b08      	ldr	r3, [pc, #32]	@ (8004124 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004104:	695a      	ldr	r2, [r3, #20]
 8004106:	88fb      	ldrh	r3, [r7, #6]
 8004108:	4013      	ands	r3, r2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d006      	beq.n	800411c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800410e:	4a05      	ldr	r2, [pc, #20]	@ (8004124 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004110:	88fb      	ldrh	r3, [r7, #6]
 8004112:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004114:	88fb      	ldrh	r3, [r7, #6]
 8004116:	4618      	mov	r0, r3
 8004118:	f000 f806 	bl	8004128 <HAL_GPIO_EXTI_Callback>
  }
}
 800411c:	bf00      	nop
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40010400 	.word	0x40010400

08004128 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	4603      	mov	r3, r0
 8004130:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
	...

08004140 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d141      	bne.n	80041d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800414e:	4b4b      	ldr	r3, [pc, #300]	@ (800427c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800415a:	d131      	bne.n	80041c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800415c:	4b47      	ldr	r3, [pc, #284]	@ (800427c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800415e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004162:	4a46      	ldr	r2, [pc, #280]	@ (800427c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004164:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004168:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800416c:	4b43      	ldr	r3, [pc, #268]	@ (800427c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004174:	4a41      	ldr	r2, [pc, #260]	@ (800427c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004176:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800417a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800417c:	4b40      	ldr	r3, [pc, #256]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2232      	movs	r2, #50	@ 0x32
 8004182:	fb02 f303 	mul.w	r3, r2, r3
 8004186:	4a3f      	ldr	r2, [pc, #252]	@ (8004284 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004188:	fba2 2303 	umull	r2, r3, r2, r3
 800418c:	0c9b      	lsrs	r3, r3, #18
 800418e:	3301      	adds	r3, #1
 8004190:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004192:	e002      	b.n	800419a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	3b01      	subs	r3, #1
 8004198:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800419a:	4b38      	ldr	r3, [pc, #224]	@ (800427c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041a6:	d102      	bne.n	80041ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1f2      	bne.n	8004194 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041ae:	4b33      	ldr	r3, [pc, #204]	@ (800427c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ba:	d158      	bne.n	800426e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e057      	b.n	8004270 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041c0:	4b2e      	ldr	r3, [pc, #184]	@ (800427c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041c6:	4a2d      	ldr	r2, [pc, #180]	@ (800427c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80041d0:	e04d      	b.n	800426e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041d8:	d141      	bne.n	800425e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041da:	4b28      	ldr	r3, [pc, #160]	@ (800427c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80041e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041e6:	d131      	bne.n	800424c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041e8:	4b24      	ldr	r3, [pc, #144]	@ (800427c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041ee:	4a23      	ldr	r2, [pc, #140]	@ (800427c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041f8:	4b20      	ldr	r3, [pc, #128]	@ (800427c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004200:	4a1e      	ldr	r2, [pc, #120]	@ (800427c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004202:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004206:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004208:	4b1d      	ldr	r3, [pc, #116]	@ (8004280 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2232      	movs	r2, #50	@ 0x32
 800420e:	fb02 f303 	mul.w	r3, r2, r3
 8004212:	4a1c      	ldr	r2, [pc, #112]	@ (8004284 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004214:	fba2 2303 	umull	r2, r3, r2, r3
 8004218:	0c9b      	lsrs	r3, r3, #18
 800421a:	3301      	adds	r3, #1
 800421c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800421e:	e002      	b.n	8004226 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	3b01      	subs	r3, #1
 8004224:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004226:	4b15      	ldr	r3, [pc, #84]	@ (800427c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800422e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004232:	d102      	bne.n	800423a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f2      	bne.n	8004220 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800423a:	4b10      	ldr	r3, [pc, #64]	@ (800427c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004242:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004246:	d112      	bne.n	800426e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e011      	b.n	8004270 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800424c:	4b0b      	ldr	r3, [pc, #44]	@ (800427c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800424e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004252:	4a0a      	ldr	r2, [pc, #40]	@ (800427c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004254:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004258:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800425c:	e007      	b.n	800426e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800425e:	4b07      	ldr	r3, [pc, #28]	@ (800427c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004266:	4a05      	ldr	r2, [pc, #20]	@ (800427c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004268:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800426c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	40007000 	.word	0x40007000
 8004280:	20000000 	.word	0x20000000
 8004284:	431bde83 	.word	0x431bde83

08004288 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800428c:	4b05      	ldr	r3, [pc, #20]	@ (80042a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	4a04      	ldr	r2, [pc, #16]	@ (80042a4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004292:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004296:	6093      	str	r3, [r2, #8]
}
 8004298:	bf00      	nop
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	40007000 	.word	0x40007000

080042a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e2fe      	b.n	80048b8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d075      	beq.n	80043b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042c6:	4b97      	ldr	r3, [pc, #604]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 030c 	and.w	r3, r3, #12
 80042ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042d0:	4b94      	ldr	r3, [pc, #592]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	f003 0303 	and.w	r3, r3, #3
 80042d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	2b0c      	cmp	r3, #12
 80042de:	d102      	bne.n	80042e6 <HAL_RCC_OscConfig+0x3e>
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d002      	beq.n	80042ec <HAL_RCC_OscConfig+0x44>
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d10b      	bne.n	8004304 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ec:	4b8d      	ldr	r3, [pc, #564]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d05b      	beq.n	80043b0 <HAL_RCC_OscConfig+0x108>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d157      	bne.n	80043b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e2d9      	b.n	80048b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800430c:	d106      	bne.n	800431c <HAL_RCC_OscConfig+0x74>
 800430e:	4b85      	ldr	r3, [pc, #532]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a84      	ldr	r2, [pc, #528]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 8004314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	e01d      	b.n	8004358 <HAL_RCC_OscConfig+0xb0>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004324:	d10c      	bne.n	8004340 <HAL_RCC_OscConfig+0x98>
 8004326:	4b7f      	ldr	r3, [pc, #508]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a7e      	ldr	r2, [pc, #504]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 800432c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	4b7c      	ldr	r3, [pc, #496]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a7b      	ldr	r2, [pc, #492]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 8004338:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	e00b      	b.n	8004358 <HAL_RCC_OscConfig+0xb0>
 8004340:	4b78      	ldr	r3, [pc, #480]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a77      	ldr	r2, [pc, #476]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 8004346:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800434a:	6013      	str	r3, [r2, #0]
 800434c:	4b75      	ldr	r3, [pc, #468]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a74      	ldr	r2, [pc, #464]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 8004352:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d013      	beq.n	8004388 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004360:	f7fd fc6a 	bl	8001c38 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004368:	f7fd fc66 	bl	8001c38 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b64      	cmp	r3, #100	@ 0x64
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e29e      	b.n	80048b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800437a:	4b6a      	ldr	r3, [pc, #424]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0f0      	beq.n	8004368 <HAL_RCC_OscConfig+0xc0>
 8004386:	e014      	b.n	80043b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004388:	f7fd fc56 	bl	8001c38 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004390:	f7fd fc52 	bl	8001c38 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b64      	cmp	r3, #100	@ 0x64
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e28a      	b.n	80048b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043a2:	4b60      	ldr	r3, [pc, #384]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1f0      	bne.n	8004390 <HAL_RCC_OscConfig+0xe8>
 80043ae:	e000      	b.n	80043b2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d075      	beq.n	80044aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043be:	4b59      	ldr	r3, [pc, #356]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 030c 	and.w	r3, r3, #12
 80043c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043c8:	4b56      	ldr	r3, [pc, #344]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f003 0303 	and.w	r3, r3, #3
 80043d0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	2b0c      	cmp	r3, #12
 80043d6:	d102      	bne.n	80043de <HAL_RCC_OscConfig+0x136>
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d002      	beq.n	80043e4 <HAL_RCC_OscConfig+0x13c>
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	d11f      	bne.n	8004424 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043e4:	4b4f      	ldr	r3, [pc, #316]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d005      	beq.n	80043fc <HAL_RCC_OscConfig+0x154>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e25d      	b.n	80048b8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fc:	4b49      	ldr	r3, [pc, #292]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	061b      	lsls	r3, r3, #24
 800440a:	4946      	ldr	r1, [pc, #280]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 800440c:	4313      	orrs	r3, r2
 800440e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004410:	4b45      	ldr	r3, [pc, #276]	@ (8004528 <HAL_RCC_OscConfig+0x280>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4618      	mov	r0, r3
 8004416:	f7fd fbc3 	bl	8001ba0 <HAL_InitTick>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d043      	beq.n	80044a8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e249      	b.n	80048b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d023      	beq.n	8004474 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800442c:	4b3d      	ldr	r3, [pc, #244]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a3c      	ldr	r2, [pc, #240]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 8004432:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004438:	f7fd fbfe 	bl	8001c38 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004440:	f7fd fbfa 	bl	8001c38 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e232      	b.n	80048b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004452:	4b34      	ldr	r3, [pc, #208]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f0      	beq.n	8004440 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800445e:	4b31      	ldr	r3, [pc, #196]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	061b      	lsls	r3, r3, #24
 800446c:	492d      	ldr	r1, [pc, #180]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 800446e:	4313      	orrs	r3, r2
 8004470:	604b      	str	r3, [r1, #4]
 8004472:	e01a      	b.n	80044aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004474:	4b2b      	ldr	r3, [pc, #172]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a2a      	ldr	r2, [pc, #168]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 800447a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800447e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004480:	f7fd fbda 	bl	8001c38 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004488:	f7fd fbd6 	bl	8001c38 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e20e      	b.n	80048b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800449a:	4b22      	ldr	r3, [pc, #136]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f0      	bne.n	8004488 <HAL_RCC_OscConfig+0x1e0>
 80044a6:	e000      	b.n	80044aa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d041      	beq.n	800453a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d01c      	beq.n	80044f8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044be:	4b19      	ldr	r3, [pc, #100]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 80044c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044c4:	4a17      	ldr	r2, [pc, #92]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 80044c6:	f043 0301 	orr.w	r3, r3, #1
 80044ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ce:	f7fd fbb3 	bl	8001c38 <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044d4:	e008      	b.n	80044e8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044d6:	f7fd fbaf 	bl	8001c38 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d901      	bls.n	80044e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e1e7      	b.n	80048b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044e8:	4b0e      	ldr	r3, [pc, #56]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 80044ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0ef      	beq.n	80044d6 <HAL_RCC_OscConfig+0x22e>
 80044f6:	e020      	b.n	800453a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044f8:	4b0a      	ldr	r3, [pc, #40]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 80044fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044fe:	4a09      	ldr	r2, [pc, #36]	@ (8004524 <HAL_RCC_OscConfig+0x27c>)
 8004500:	f023 0301 	bic.w	r3, r3, #1
 8004504:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004508:	f7fd fb96 	bl	8001c38 <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800450e:	e00d      	b.n	800452c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004510:	f7fd fb92 	bl	8001c38 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d906      	bls.n	800452c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e1ca      	b.n	80048b8 <HAL_RCC_OscConfig+0x610>
 8004522:	bf00      	nop
 8004524:	40021000 	.word	0x40021000
 8004528:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800452c:	4b8c      	ldr	r3, [pc, #560]	@ (8004760 <HAL_RCC_OscConfig+0x4b8>)
 800452e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1ea      	bne.n	8004510 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0304 	and.w	r3, r3, #4
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 80a6 	beq.w	8004694 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004548:	2300      	movs	r3, #0
 800454a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800454c:	4b84      	ldr	r3, [pc, #528]	@ (8004760 <HAL_RCC_OscConfig+0x4b8>)
 800454e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004550:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <HAL_RCC_OscConfig+0x2b4>
 8004558:	2301      	movs	r3, #1
 800455a:	e000      	b.n	800455e <HAL_RCC_OscConfig+0x2b6>
 800455c:	2300      	movs	r3, #0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00d      	beq.n	800457e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004562:	4b7f      	ldr	r3, [pc, #508]	@ (8004760 <HAL_RCC_OscConfig+0x4b8>)
 8004564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004566:	4a7e      	ldr	r2, [pc, #504]	@ (8004760 <HAL_RCC_OscConfig+0x4b8>)
 8004568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800456c:	6593      	str	r3, [r2, #88]	@ 0x58
 800456e:	4b7c      	ldr	r3, [pc, #496]	@ (8004760 <HAL_RCC_OscConfig+0x4b8>)
 8004570:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800457a:	2301      	movs	r3, #1
 800457c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800457e:	4b79      	ldr	r3, [pc, #484]	@ (8004764 <HAL_RCC_OscConfig+0x4bc>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004586:	2b00      	cmp	r3, #0
 8004588:	d118      	bne.n	80045bc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800458a:	4b76      	ldr	r3, [pc, #472]	@ (8004764 <HAL_RCC_OscConfig+0x4bc>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a75      	ldr	r2, [pc, #468]	@ (8004764 <HAL_RCC_OscConfig+0x4bc>)
 8004590:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004596:	f7fd fb4f 	bl	8001c38 <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800459c:	e008      	b.n	80045b0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800459e:	f7fd fb4b 	bl	8001c38 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e183      	b.n	80048b8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045b0:	4b6c      	ldr	r3, [pc, #432]	@ (8004764 <HAL_RCC_OscConfig+0x4bc>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d0f0      	beq.n	800459e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d108      	bne.n	80045d6 <HAL_RCC_OscConfig+0x32e>
 80045c4:	4b66      	ldr	r3, [pc, #408]	@ (8004760 <HAL_RCC_OscConfig+0x4b8>)
 80045c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ca:	4a65      	ldr	r2, [pc, #404]	@ (8004760 <HAL_RCC_OscConfig+0x4b8>)
 80045cc:	f043 0301 	orr.w	r3, r3, #1
 80045d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045d4:	e024      	b.n	8004620 <HAL_RCC_OscConfig+0x378>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	2b05      	cmp	r3, #5
 80045dc:	d110      	bne.n	8004600 <HAL_RCC_OscConfig+0x358>
 80045de:	4b60      	ldr	r3, [pc, #384]	@ (8004760 <HAL_RCC_OscConfig+0x4b8>)
 80045e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e4:	4a5e      	ldr	r2, [pc, #376]	@ (8004760 <HAL_RCC_OscConfig+0x4b8>)
 80045e6:	f043 0304 	orr.w	r3, r3, #4
 80045ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045ee:	4b5c      	ldr	r3, [pc, #368]	@ (8004760 <HAL_RCC_OscConfig+0x4b8>)
 80045f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f4:	4a5a      	ldr	r2, [pc, #360]	@ (8004760 <HAL_RCC_OscConfig+0x4b8>)
 80045f6:	f043 0301 	orr.w	r3, r3, #1
 80045fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045fe:	e00f      	b.n	8004620 <HAL_RCC_OscConfig+0x378>
 8004600:	4b57      	ldr	r3, [pc, #348]	@ (8004760 <HAL_RCC_OscConfig+0x4b8>)
 8004602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004606:	4a56      	ldr	r2, [pc, #344]	@ (8004760 <HAL_RCC_OscConfig+0x4b8>)
 8004608:	f023 0301 	bic.w	r3, r3, #1
 800460c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004610:	4b53      	ldr	r3, [pc, #332]	@ (8004760 <HAL_RCC_OscConfig+0x4b8>)
 8004612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004616:	4a52      	ldr	r2, [pc, #328]	@ (8004760 <HAL_RCC_OscConfig+0x4b8>)
 8004618:	f023 0304 	bic.w	r3, r3, #4
 800461c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d016      	beq.n	8004656 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004628:	f7fd fb06 	bl	8001c38 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800462e:	e00a      	b.n	8004646 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004630:	f7fd fb02 	bl	8001c38 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800463e:	4293      	cmp	r3, r2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e138      	b.n	80048b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004646:	4b46      	ldr	r3, [pc, #280]	@ (8004760 <HAL_RCC_OscConfig+0x4b8>)
 8004648:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0ed      	beq.n	8004630 <HAL_RCC_OscConfig+0x388>
 8004654:	e015      	b.n	8004682 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004656:	f7fd faef 	bl	8001c38 <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800465c:	e00a      	b.n	8004674 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800465e:	f7fd faeb 	bl	8001c38 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	f241 3288 	movw	r2, #5000	@ 0x1388
 800466c:	4293      	cmp	r3, r2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e121      	b.n	80048b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004674:	4b3a      	ldr	r3, [pc, #232]	@ (8004760 <HAL_RCC_OscConfig+0x4b8>)
 8004676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1ed      	bne.n	800465e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004682:	7ffb      	ldrb	r3, [r7, #31]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d105      	bne.n	8004694 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004688:	4b35      	ldr	r3, [pc, #212]	@ (8004760 <HAL_RCC_OscConfig+0x4b8>)
 800468a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800468c:	4a34      	ldr	r2, [pc, #208]	@ (8004760 <HAL_RCC_OscConfig+0x4b8>)
 800468e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004692:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0320 	and.w	r3, r3, #32
 800469c:	2b00      	cmp	r3, #0
 800469e:	d03c      	beq.n	800471a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d01c      	beq.n	80046e2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004760 <HAL_RCC_OscConfig+0x4b8>)
 80046aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004760 <HAL_RCC_OscConfig+0x4b8>)
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b8:	f7fd fabe 	bl	8001c38 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046c0:	f7fd faba 	bl	8001c38 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e0f2      	b.n	80048b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046d2:	4b23      	ldr	r3, [pc, #140]	@ (8004760 <HAL_RCC_OscConfig+0x4b8>)
 80046d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0ef      	beq.n	80046c0 <HAL_RCC_OscConfig+0x418>
 80046e0:	e01b      	b.n	800471a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046e2:	4b1f      	ldr	r3, [pc, #124]	@ (8004760 <HAL_RCC_OscConfig+0x4b8>)
 80046e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80046e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004760 <HAL_RCC_OscConfig+0x4b8>)
 80046ea:	f023 0301 	bic.w	r3, r3, #1
 80046ee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f2:	f7fd faa1 	bl	8001c38 <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046f8:	e008      	b.n	800470c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046fa:	f7fd fa9d 	bl	8001c38 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d901      	bls.n	800470c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e0d5      	b.n	80048b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800470c:	4b14      	ldr	r3, [pc, #80]	@ (8004760 <HAL_RCC_OscConfig+0x4b8>)
 800470e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1ef      	bne.n	80046fa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 80c9 	beq.w	80048b6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004724:	4b0e      	ldr	r3, [pc, #56]	@ (8004760 <HAL_RCC_OscConfig+0x4b8>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f003 030c 	and.w	r3, r3, #12
 800472c:	2b0c      	cmp	r3, #12
 800472e:	f000 8083 	beq.w	8004838 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	2b02      	cmp	r3, #2
 8004738:	d15e      	bne.n	80047f8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800473a:	4b09      	ldr	r3, [pc, #36]	@ (8004760 <HAL_RCC_OscConfig+0x4b8>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a08      	ldr	r2, [pc, #32]	@ (8004760 <HAL_RCC_OscConfig+0x4b8>)
 8004740:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004746:	f7fd fa77 	bl	8001c38 <HAL_GetTick>
 800474a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800474c:	e00c      	b.n	8004768 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800474e:	f7fd fa73 	bl	8001c38 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d905      	bls.n	8004768 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e0ab      	b.n	80048b8 <HAL_RCC_OscConfig+0x610>
 8004760:	40021000 	.word	0x40021000
 8004764:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004768:	4b55      	ldr	r3, [pc, #340]	@ (80048c0 <HAL_RCC_OscConfig+0x618>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1ec      	bne.n	800474e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004774:	4b52      	ldr	r3, [pc, #328]	@ (80048c0 <HAL_RCC_OscConfig+0x618>)
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	4b52      	ldr	r3, [pc, #328]	@ (80048c4 <HAL_RCC_OscConfig+0x61c>)
 800477a:	4013      	ands	r3, r2
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6a11      	ldr	r1, [r2, #32]
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004784:	3a01      	subs	r2, #1
 8004786:	0112      	lsls	r2, r2, #4
 8004788:	4311      	orrs	r1, r2
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800478e:	0212      	lsls	r2, r2, #8
 8004790:	4311      	orrs	r1, r2
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004796:	0852      	lsrs	r2, r2, #1
 8004798:	3a01      	subs	r2, #1
 800479a:	0552      	lsls	r2, r2, #21
 800479c:	4311      	orrs	r1, r2
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80047a2:	0852      	lsrs	r2, r2, #1
 80047a4:	3a01      	subs	r2, #1
 80047a6:	0652      	lsls	r2, r2, #25
 80047a8:	4311      	orrs	r1, r2
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80047ae:	06d2      	lsls	r2, r2, #27
 80047b0:	430a      	orrs	r2, r1
 80047b2:	4943      	ldr	r1, [pc, #268]	@ (80048c0 <HAL_RCC_OscConfig+0x618>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047b8:	4b41      	ldr	r3, [pc, #260]	@ (80048c0 <HAL_RCC_OscConfig+0x618>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a40      	ldr	r2, [pc, #256]	@ (80048c0 <HAL_RCC_OscConfig+0x618>)
 80047be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047c2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047c4:	4b3e      	ldr	r3, [pc, #248]	@ (80048c0 <HAL_RCC_OscConfig+0x618>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	4a3d      	ldr	r2, [pc, #244]	@ (80048c0 <HAL_RCC_OscConfig+0x618>)
 80047ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d0:	f7fd fa32 	bl	8001c38 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047d6:	e008      	b.n	80047ea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d8:	f7fd fa2e 	bl	8001c38 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e066      	b.n	80048b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ea:	4b35      	ldr	r3, [pc, #212]	@ (80048c0 <HAL_RCC_OscConfig+0x618>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0f0      	beq.n	80047d8 <HAL_RCC_OscConfig+0x530>
 80047f6:	e05e      	b.n	80048b6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047f8:	4b31      	ldr	r3, [pc, #196]	@ (80048c0 <HAL_RCC_OscConfig+0x618>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a30      	ldr	r2, [pc, #192]	@ (80048c0 <HAL_RCC_OscConfig+0x618>)
 80047fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004802:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004804:	f7fd fa18 	bl	8001c38 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800480c:	f7fd fa14 	bl	8001c38 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e04c      	b.n	80048b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800481e:	4b28      	ldr	r3, [pc, #160]	@ (80048c0 <HAL_RCC_OscConfig+0x618>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f0      	bne.n	800480c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800482a:	4b25      	ldr	r3, [pc, #148]	@ (80048c0 <HAL_RCC_OscConfig+0x618>)
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	4924      	ldr	r1, [pc, #144]	@ (80048c0 <HAL_RCC_OscConfig+0x618>)
 8004830:	4b25      	ldr	r3, [pc, #148]	@ (80048c8 <HAL_RCC_OscConfig+0x620>)
 8004832:	4013      	ands	r3, r2
 8004834:	60cb      	str	r3, [r1, #12]
 8004836:	e03e      	b.n	80048b6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d101      	bne.n	8004844 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e039      	b.n	80048b8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004844:	4b1e      	ldr	r3, [pc, #120]	@ (80048c0 <HAL_RCC_OscConfig+0x618>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f003 0203 	and.w	r2, r3, #3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	429a      	cmp	r2, r3
 8004856:	d12c      	bne.n	80048b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004862:	3b01      	subs	r3, #1
 8004864:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004866:	429a      	cmp	r2, r3
 8004868:	d123      	bne.n	80048b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004874:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004876:	429a      	cmp	r2, r3
 8004878:	d11b      	bne.n	80048b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004884:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004886:	429a      	cmp	r2, r3
 8004888:	d113      	bne.n	80048b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004894:	085b      	lsrs	r3, r3, #1
 8004896:	3b01      	subs	r3, #1
 8004898:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800489a:	429a      	cmp	r2, r3
 800489c:	d109      	bne.n	80048b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048a8:	085b      	lsrs	r3, r3, #1
 80048aa:	3b01      	subs	r3, #1
 80048ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d001      	beq.n	80048b6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e000      	b.n	80048b8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3720      	adds	r7, #32
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40021000 	.word	0x40021000
 80048c4:	019f800c 	.word	0x019f800c
 80048c8:	feeefffc 	.word	0xfeeefffc

080048cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80048d6:	2300      	movs	r3, #0
 80048d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e11e      	b.n	8004b22 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048e4:	4b91      	ldr	r3, [pc, #580]	@ (8004b2c <HAL_RCC_ClockConfig+0x260>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 030f 	and.w	r3, r3, #15
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d910      	bls.n	8004914 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f2:	4b8e      	ldr	r3, [pc, #568]	@ (8004b2c <HAL_RCC_ClockConfig+0x260>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f023 020f 	bic.w	r2, r3, #15
 80048fa:	498c      	ldr	r1, [pc, #560]	@ (8004b2c <HAL_RCC_ClockConfig+0x260>)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	4313      	orrs	r3, r2
 8004900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004902:	4b8a      	ldr	r3, [pc, #552]	@ (8004b2c <HAL_RCC_ClockConfig+0x260>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 030f 	and.w	r3, r3, #15
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	429a      	cmp	r2, r3
 800490e:	d001      	beq.n	8004914 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e106      	b.n	8004b22 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b00      	cmp	r3, #0
 800491e:	d073      	beq.n	8004a08 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2b03      	cmp	r3, #3
 8004926:	d129      	bne.n	800497c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004928:	4b81      	ldr	r3, [pc, #516]	@ (8004b30 <HAL_RCC_ClockConfig+0x264>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e0f4      	b.n	8004b22 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004938:	f000 f99e 	bl	8004c78 <RCC_GetSysClockFreqFromPLLSource>
 800493c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	4a7c      	ldr	r2, [pc, #496]	@ (8004b34 <HAL_RCC_ClockConfig+0x268>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d93f      	bls.n	80049c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004946:	4b7a      	ldr	r3, [pc, #488]	@ (8004b30 <HAL_RCC_ClockConfig+0x264>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d009      	beq.n	8004966 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800495a:	2b00      	cmp	r3, #0
 800495c:	d033      	beq.n	80049c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004962:	2b00      	cmp	r3, #0
 8004964:	d12f      	bne.n	80049c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004966:	4b72      	ldr	r3, [pc, #456]	@ (8004b30 <HAL_RCC_ClockConfig+0x264>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800496e:	4a70      	ldr	r2, [pc, #448]	@ (8004b30 <HAL_RCC_ClockConfig+0x264>)
 8004970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004974:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004976:	2380      	movs	r3, #128	@ 0x80
 8004978:	617b      	str	r3, [r7, #20]
 800497a:	e024      	b.n	80049c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2b02      	cmp	r3, #2
 8004982:	d107      	bne.n	8004994 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004984:	4b6a      	ldr	r3, [pc, #424]	@ (8004b30 <HAL_RCC_ClockConfig+0x264>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d109      	bne.n	80049a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e0c6      	b.n	8004b22 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004994:	4b66      	ldr	r3, [pc, #408]	@ (8004b30 <HAL_RCC_ClockConfig+0x264>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e0be      	b.n	8004b22 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80049a4:	f000 f8ce 	bl	8004b44 <HAL_RCC_GetSysClockFreq>
 80049a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	4a61      	ldr	r2, [pc, #388]	@ (8004b34 <HAL_RCC_ClockConfig+0x268>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d909      	bls.n	80049c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80049b2:	4b5f      	ldr	r3, [pc, #380]	@ (8004b30 <HAL_RCC_ClockConfig+0x264>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049ba:	4a5d      	ldr	r2, [pc, #372]	@ (8004b30 <HAL_RCC_ClockConfig+0x264>)
 80049bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80049c2:	2380      	movs	r3, #128	@ 0x80
 80049c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049c6:	4b5a      	ldr	r3, [pc, #360]	@ (8004b30 <HAL_RCC_ClockConfig+0x264>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f023 0203 	bic.w	r2, r3, #3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	4957      	ldr	r1, [pc, #348]	@ (8004b30 <HAL_RCC_ClockConfig+0x264>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d8:	f7fd f92e 	bl	8001c38 <HAL_GetTick>
 80049dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049de:	e00a      	b.n	80049f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049e0:	f7fd f92a 	bl	8001c38 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e095      	b.n	8004b22 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f6:	4b4e      	ldr	r3, [pc, #312]	@ (8004b30 <HAL_RCC_ClockConfig+0x264>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f003 020c 	and.w	r2, r3, #12
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d1eb      	bne.n	80049e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d023      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d005      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a20:	4b43      	ldr	r3, [pc, #268]	@ (8004b30 <HAL_RCC_ClockConfig+0x264>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	4a42      	ldr	r2, [pc, #264]	@ (8004b30 <HAL_RCC_ClockConfig+0x264>)
 8004a26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004a2a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0308 	and.w	r3, r3, #8
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d007      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004a38:	4b3d      	ldr	r3, [pc, #244]	@ (8004b30 <HAL_RCC_ClockConfig+0x264>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004a40:	4a3b      	ldr	r2, [pc, #236]	@ (8004b30 <HAL_RCC_ClockConfig+0x264>)
 8004a42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004a46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a48:	4b39      	ldr	r3, [pc, #228]	@ (8004b30 <HAL_RCC_ClockConfig+0x264>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	4936      	ldr	r1, [pc, #216]	@ (8004b30 <HAL_RCC_ClockConfig+0x264>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	608b      	str	r3, [r1, #8]
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	2b80      	cmp	r3, #128	@ 0x80
 8004a60:	d105      	bne.n	8004a6e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004a62:	4b33      	ldr	r3, [pc, #204]	@ (8004b30 <HAL_RCC_ClockConfig+0x264>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	4a32      	ldr	r2, [pc, #200]	@ (8004b30 <HAL_RCC_ClockConfig+0x264>)
 8004a68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a6c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a6e:	4b2f      	ldr	r3, [pc, #188]	@ (8004b2c <HAL_RCC_ClockConfig+0x260>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d21d      	bcs.n	8004ab8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8004b2c <HAL_RCC_ClockConfig+0x260>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f023 020f 	bic.w	r2, r3, #15
 8004a84:	4929      	ldr	r1, [pc, #164]	@ (8004b2c <HAL_RCC_ClockConfig+0x260>)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a8c:	f7fd f8d4 	bl	8001c38 <HAL_GetTick>
 8004a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a92:	e00a      	b.n	8004aaa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a94:	f7fd f8d0 	bl	8001c38 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e03b      	b.n	8004b22 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aaa:	4b20      	ldr	r3, [pc, #128]	@ (8004b2c <HAL_RCC_ClockConfig+0x260>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d1ed      	bne.n	8004a94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d008      	beq.n	8004ad6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8004b30 <HAL_RCC_ClockConfig+0x264>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	4917      	ldr	r1, [pc, #92]	@ (8004b30 <HAL_RCC_ClockConfig+0x264>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0308 	and.w	r3, r3, #8
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d009      	beq.n	8004af6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ae2:	4b13      	ldr	r3, [pc, #76]	@ (8004b30 <HAL_RCC_ClockConfig+0x264>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	490f      	ldr	r1, [pc, #60]	@ (8004b30 <HAL_RCC_ClockConfig+0x264>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004af6:	f000 f825 	bl	8004b44 <HAL_RCC_GetSysClockFreq>
 8004afa:	4602      	mov	r2, r0
 8004afc:	4b0c      	ldr	r3, [pc, #48]	@ (8004b30 <HAL_RCC_ClockConfig+0x264>)
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	091b      	lsrs	r3, r3, #4
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	490c      	ldr	r1, [pc, #48]	@ (8004b38 <HAL_RCC_ClockConfig+0x26c>)
 8004b08:	5ccb      	ldrb	r3, [r1, r3]
 8004b0a:	f003 031f 	and.w	r3, r3, #31
 8004b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b12:	4a0a      	ldr	r2, [pc, #40]	@ (8004b3c <HAL_RCC_ClockConfig+0x270>)
 8004b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004b16:	4b0a      	ldr	r3, [pc, #40]	@ (8004b40 <HAL_RCC_ClockConfig+0x274>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fd f840 	bl	8001ba0 <HAL_InitTick>
 8004b20:	4603      	mov	r3, r0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	40022000 	.word	0x40022000
 8004b30:	40021000 	.word	0x40021000
 8004b34:	04c4b400 	.word	0x04c4b400
 8004b38:	080091a0 	.word	0x080091a0
 8004b3c:	20000000 	.word	0x20000000
 8004b40:	20000004 	.word	0x20000004

08004b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004b4a:	4b2c      	ldr	r3, [pc, #176]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 030c 	and.w	r3, r3, #12
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	d102      	bne.n	8004b5c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b56:	4b2a      	ldr	r3, [pc, #168]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b58:	613b      	str	r3, [r7, #16]
 8004b5a:	e047      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004b5c:	4b27      	ldr	r3, [pc, #156]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f003 030c 	and.w	r3, r3, #12
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d102      	bne.n	8004b6e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b68:	4b26      	ldr	r3, [pc, #152]	@ (8004c04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b6a:	613b      	str	r3, [r7, #16]
 8004b6c:	e03e      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004b6e:	4b23      	ldr	r3, [pc, #140]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 030c 	and.w	r3, r3, #12
 8004b76:	2b0c      	cmp	r3, #12
 8004b78:	d136      	bne.n	8004be8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b7a:	4b20      	ldr	r3, [pc, #128]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b84:	4b1d      	ldr	r3, [pc, #116]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	091b      	lsrs	r3, r3, #4
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	3301      	adds	r3, #1
 8004b90:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2b03      	cmp	r3, #3
 8004b96:	d10c      	bne.n	8004bb2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b98:	4a1a      	ldr	r2, [pc, #104]	@ (8004c04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba0:	4a16      	ldr	r2, [pc, #88]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ba2:	68d2      	ldr	r2, [r2, #12]
 8004ba4:	0a12      	lsrs	r2, r2, #8
 8004ba6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004baa:	fb02 f303 	mul.w	r3, r2, r3
 8004bae:	617b      	str	r3, [r7, #20]
      break;
 8004bb0:	e00c      	b.n	8004bcc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004bb2:	4a13      	ldr	r2, [pc, #76]	@ (8004c00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bba:	4a10      	ldr	r2, [pc, #64]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bbc:	68d2      	ldr	r2, [r2, #12]
 8004bbe:	0a12      	lsrs	r2, r2, #8
 8004bc0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004bc4:	fb02 f303 	mul.w	r3, r2, r3
 8004bc8:	617b      	str	r3, [r7, #20]
      break;
 8004bca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8004bfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	0e5b      	lsrs	r3, r3, #25
 8004bd2:	f003 0303 	and.w	r3, r3, #3
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be4:	613b      	str	r3, [r7, #16]
 8004be6:	e001      	b.n	8004bec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004bec:	693b      	ldr	r3, [r7, #16]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	371c      	adds	r7, #28
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	00f42400 	.word	0x00f42400
 8004c04:	016e3600 	.word	0x016e3600

08004c08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c0c:	4b03      	ldr	r3, [pc, #12]	@ (8004c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	20000000 	.word	0x20000000

08004c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c24:	f7ff fff0 	bl	8004c08 <HAL_RCC_GetHCLKFreq>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	4b06      	ldr	r3, [pc, #24]	@ (8004c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	0a1b      	lsrs	r3, r3, #8
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	4904      	ldr	r1, [pc, #16]	@ (8004c48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c36:	5ccb      	ldrb	r3, [r1, r3]
 8004c38:	f003 031f 	and.w	r3, r3, #31
 8004c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	40021000 	.word	0x40021000
 8004c48:	080091b0 	.word	0x080091b0

08004c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c50:	f7ff ffda 	bl	8004c08 <HAL_RCC_GetHCLKFreq>
 8004c54:	4602      	mov	r2, r0
 8004c56:	4b06      	ldr	r3, [pc, #24]	@ (8004c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	0adb      	lsrs	r3, r3, #11
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	4904      	ldr	r1, [pc, #16]	@ (8004c74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c62:	5ccb      	ldrb	r3, [r1, r3]
 8004c64:	f003 031f 	and.w	r3, r3, #31
 8004c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	40021000 	.word	0x40021000
 8004c74:	080091b0 	.word	0x080091b0

08004c78 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8004cf8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	f003 0303 	and.w	r3, r3, #3
 8004c86:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c88:	4b1b      	ldr	r3, [pc, #108]	@ (8004cf8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	091b      	lsrs	r3, r3, #4
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	3301      	adds	r3, #1
 8004c94:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d10c      	bne.n	8004cb6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c9c:	4a17      	ldr	r2, [pc, #92]	@ (8004cfc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ca4:	4a14      	ldr	r2, [pc, #80]	@ (8004cf8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ca6:	68d2      	ldr	r2, [r2, #12]
 8004ca8:	0a12      	lsrs	r2, r2, #8
 8004caa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004cae:	fb02 f303 	mul.w	r3, r2, r3
 8004cb2:	617b      	str	r3, [r7, #20]
    break;
 8004cb4:	e00c      	b.n	8004cd0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004cb6:	4a12      	ldr	r2, [pc, #72]	@ (8004d00 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cbe:	4a0e      	ldr	r2, [pc, #56]	@ (8004cf8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004cc0:	68d2      	ldr	r2, [r2, #12]
 8004cc2:	0a12      	lsrs	r2, r2, #8
 8004cc4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004cc8:	fb02 f303 	mul.w	r3, r2, r3
 8004ccc:	617b      	str	r3, [r7, #20]
    break;
 8004cce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cd0:	4b09      	ldr	r3, [pc, #36]	@ (8004cf8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	0e5b      	lsrs	r3, r3, #25
 8004cd6:	f003 0303 	and.w	r3, r3, #3
 8004cda:	3301      	adds	r3, #1
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004cea:	687b      	ldr	r3, [r7, #4]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	371c      	adds	r7, #28
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	016e3600 	.word	0x016e3600
 8004d00:	00f42400 	.word	0x00f42400

08004d04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d10:	2300      	movs	r3, #0
 8004d12:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 8098 	beq.w	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d22:	2300      	movs	r3, #0
 8004d24:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d26:	4b43      	ldr	r3, [pc, #268]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10d      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d32:	4b40      	ldr	r3, [pc, #256]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d36:	4a3f      	ldr	r2, [pc, #252]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d3e:	4b3d      	ldr	r3, [pc, #244]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d46:	60bb      	str	r3, [r7, #8]
 8004d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d4e:	4b3a      	ldr	r3, [pc, #232]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a39      	ldr	r2, [pc, #228]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d5a:	f7fc ff6d 	bl	8001c38 <HAL_GetTick>
 8004d5e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d60:	e009      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d62:	f7fc ff69 	bl	8001c38 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d902      	bls.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	74fb      	strb	r3, [r7, #19]
        break;
 8004d74:	e005      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d76:	4b30      	ldr	r3, [pc, #192]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0ef      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004d82:	7cfb      	ldrb	r3, [r7, #19]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d159      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d88:	4b2a      	ldr	r3, [pc, #168]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d92:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d01e      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d019      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004da4:	4b23      	ldr	r3, [pc, #140]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004daa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004db0:	4b20      	ldr	r3, [pc, #128]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004db6:	4a1f      	ldr	r2, [pc, #124]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004db8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dc6:	4a1b      	ldr	r2, [pc, #108]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004dd0:	4a18      	ldr	r2, [pc, #96]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d016      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de2:	f7fc ff29 	bl	8001c38 <HAL_GetTick>
 8004de6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004de8:	e00b      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dea:	f7fc ff25 	bl	8001c38 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d902      	bls.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	74fb      	strb	r3, [r7, #19]
            break;
 8004e00:	e006      	b.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e02:	4b0c      	ldr	r3, [pc, #48]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0ec      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004e10:	7cfb      	ldrb	r3, [r7, #19]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10b      	bne.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e16:	4b07      	ldr	r3, [pc, #28]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e24:	4903      	ldr	r1, [pc, #12]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004e2c:	e008      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e2e:	7cfb      	ldrb	r3, [r7, #19]
 8004e30:	74bb      	strb	r3, [r7, #18]
 8004e32:	e005      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004e34:	40021000 	.word	0x40021000
 8004e38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e3c:	7cfb      	ldrb	r3, [r7, #19]
 8004e3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e40:	7c7b      	ldrb	r3, [r7, #17]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d105      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e46:	4ba7      	ldr	r3, [pc, #668]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e4a:	4aa6      	ldr	r2, [pc, #664]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e50:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e5e:	4ba1      	ldr	r3, [pc, #644]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e64:	f023 0203 	bic.w	r2, r3, #3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	499d      	ldr	r1, [pc, #628]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00a      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e80:	4b98      	ldr	r3, [pc, #608]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e86:	f023 020c 	bic.w	r2, r3, #12
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	4995      	ldr	r1, [pc, #596]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0304 	and.w	r3, r3, #4
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00a      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ea2:	4b90      	ldr	r3, [pc, #576]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ea8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	498c      	ldr	r1, [pc, #560]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00a      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ec4:	4b87      	ldr	r3, [pc, #540]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	4984      	ldr	r1, [pc, #528]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0310 	and.w	r3, r3, #16
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ee6:	4b7f      	ldr	r3, [pc, #508]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	497b      	ldr	r1, [pc, #492]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00a      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f08:	4b76      	ldr	r3, [pc, #472]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f0e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	4973      	ldr	r1, [pc, #460]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f2a:	4b6e      	ldr	r3, [pc, #440]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f30:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	496a      	ldr	r1, [pc, #424]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00a      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f4c:	4b65      	ldr	r3, [pc, #404]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f52:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	4962      	ldr	r1, [pc, #392]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f6e:	4b5d      	ldr	r3, [pc, #372]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f74:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7c:	4959      	ldr	r1, [pc, #356]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00a      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f90:	4b54      	ldr	r3, [pc, #336]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f96:	f023 0203 	bic.w	r2, r3, #3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f9e:	4951      	ldr	r1, [pc, #324]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fb2:	4b4c      	ldr	r3, [pc, #304]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc0:	4948      	ldr	r1, [pc, #288]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d015      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fd4:	4b43      	ldr	r3, [pc, #268]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fda:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe2:	4940      	ldr	r1, [pc, #256]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ff2:	d105      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ff4:	4b3b      	ldr	r3, [pc, #236]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	4a3a      	ldr	r2, [pc, #232]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ffa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ffe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005008:	2b00      	cmp	r3, #0
 800500a:	d015      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800500c:	4b35      	ldr	r3, [pc, #212]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800500e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005012:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800501a:	4932      	ldr	r1, [pc, #200]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800501c:	4313      	orrs	r3, r2
 800501e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005026:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800502a:	d105      	bne.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800502c:	4b2d      	ldr	r3, [pc, #180]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	4a2c      	ldr	r2, [pc, #176]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005032:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005036:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d015      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005044:	4b27      	ldr	r3, [pc, #156]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800504a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005052:	4924      	ldr	r1, [pc, #144]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005054:	4313      	orrs	r3, r2
 8005056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800505e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005062:	d105      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005064:	4b1f      	ldr	r3, [pc, #124]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	4a1e      	ldr	r2, [pc, #120]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800506a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800506e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d015      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800507c:	4b19      	ldr	r3, [pc, #100]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800507e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005082:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800508a:	4916      	ldr	r1, [pc, #88]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005096:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800509a:	d105      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800509c:	4b11      	ldr	r3, [pc, #68]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	4a10      	ldr	r2, [pc, #64]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050a6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d019      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80050b4:	4b0b      	ldr	r3, [pc, #44]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c2:	4908      	ldr	r1, [pc, #32]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80050d2:	d109      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050d4:	4b03      	ldr	r3, [pc, #12]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	4a02      	ldr	r2, [pc, #8]	@ (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050de:	60d3      	str	r3, [r2, #12]
 80050e0:	e002      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80050e2:	bf00      	nop
 80050e4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d015      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80050f4:	4b29      	ldr	r3, [pc, #164]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050fa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005102:	4926      	ldr	r1, [pc, #152]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800510e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005112:	d105      	bne.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005114:	4b21      	ldr	r3, [pc, #132]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	4a20      	ldr	r2, [pc, #128]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800511a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800511e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d015      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800512c:	4b1b      	ldr	r3, [pc, #108]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800512e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005132:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800513a:	4918      	ldr	r1, [pc, #96]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800513c:	4313      	orrs	r3, r2
 800513e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800514a:	d105      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800514c:	4b13      	ldr	r3, [pc, #76]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	4a12      	ldr	r2, [pc, #72]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005152:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005156:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d015      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005164:	4b0d      	ldr	r3, [pc, #52]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005166:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800516a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005172:	490a      	ldr	r1, [pc, #40]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005174:	4313      	orrs	r3, r2
 8005176:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800517e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005182:	d105      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005184:	4b05      	ldr	r3, [pc, #20]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	4a04      	ldr	r2, [pc, #16]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800518a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800518e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005190:	7cbb      	ldrb	r3, [r7, #18]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	40021000 	.word	0x40021000

080051a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e049      	b.n	8005246 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d106      	bne.n	80051cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7fc fbce 	bl	8001968 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3304      	adds	r3, #4
 80051dc:	4619      	mov	r1, r3
 80051de:	4610      	mov	r0, r2
 80051e0:	f000 fe34 	bl	8005e4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b01      	cmp	r3, #1
 8005262:	d001      	beq.n	8005268 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e04c      	b.n	8005302 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a26      	ldr	r2, [pc, #152]	@ (8005310 <HAL_TIM_Base_Start+0xc0>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d022      	beq.n	80052c0 <HAL_TIM_Base_Start+0x70>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005282:	d01d      	beq.n	80052c0 <HAL_TIM_Base_Start+0x70>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a22      	ldr	r2, [pc, #136]	@ (8005314 <HAL_TIM_Base_Start+0xc4>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d018      	beq.n	80052c0 <HAL_TIM_Base_Start+0x70>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a21      	ldr	r2, [pc, #132]	@ (8005318 <HAL_TIM_Base_Start+0xc8>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d013      	beq.n	80052c0 <HAL_TIM_Base_Start+0x70>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a1f      	ldr	r2, [pc, #124]	@ (800531c <HAL_TIM_Base_Start+0xcc>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00e      	beq.n	80052c0 <HAL_TIM_Base_Start+0x70>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005320 <HAL_TIM_Base_Start+0xd0>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d009      	beq.n	80052c0 <HAL_TIM_Base_Start+0x70>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005324 <HAL_TIM_Base_Start+0xd4>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d004      	beq.n	80052c0 <HAL_TIM_Base_Start+0x70>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005328 <HAL_TIM_Base_Start+0xd8>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d115      	bne.n	80052ec <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689a      	ldr	r2, [r3, #8]
 80052c6:	4b19      	ldr	r3, [pc, #100]	@ (800532c <HAL_TIM_Base_Start+0xdc>)
 80052c8:	4013      	ands	r3, r2
 80052ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2b06      	cmp	r3, #6
 80052d0:	d015      	beq.n	80052fe <HAL_TIM_Base_Start+0xae>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052d8:	d011      	beq.n	80052fe <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f042 0201 	orr.w	r2, r2, #1
 80052e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ea:	e008      	b.n	80052fe <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f042 0201 	orr.w	r2, r2, #1
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	e000      	b.n	8005300 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	40012c00 	.word	0x40012c00
 8005314:	40000400 	.word	0x40000400
 8005318:	40000800 	.word	0x40000800
 800531c:	40000c00 	.word	0x40000c00
 8005320:	40013400 	.word	0x40013400
 8005324:	40014000 	.word	0x40014000
 8005328:	40015000 	.word	0x40015000
 800532c:	00010007 	.word	0x00010007

08005330 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b01      	cmp	r3, #1
 8005342:	d001      	beq.n	8005348 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e054      	b.n	80053f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0201 	orr.w	r2, r2, #1
 800535e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a26      	ldr	r2, [pc, #152]	@ (8005400 <HAL_TIM_Base_Start_IT+0xd0>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d022      	beq.n	80053b0 <HAL_TIM_Base_Start_IT+0x80>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005372:	d01d      	beq.n	80053b0 <HAL_TIM_Base_Start_IT+0x80>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a22      	ldr	r2, [pc, #136]	@ (8005404 <HAL_TIM_Base_Start_IT+0xd4>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d018      	beq.n	80053b0 <HAL_TIM_Base_Start_IT+0x80>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a21      	ldr	r2, [pc, #132]	@ (8005408 <HAL_TIM_Base_Start_IT+0xd8>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d013      	beq.n	80053b0 <HAL_TIM_Base_Start_IT+0x80>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a1f      	ldr	r2, [pc, #124]	@ (800540c <HAL_TIM_Base_Start_IT+0xdc>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d00e      	beq.n	80053b0 <HAL_TIM_Base_Start_IT+0x80>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a1e      	ldr	r2, [pc, #120]	@ (8005410 <HAL_TIM_Base_Start_IT+0xe0>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d009      	beq.n	80053b0 <HAL_TIM_Base_Start_IT+0x80>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005414 <HAL_TIM_Base_Start_IT+0xe4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d004      	beq.n	80053b0 <HAL_TIM_Base_Start_IT+0x80>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005418 <HAL_TIM_Base_Start_IT+0xe8>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d115      	bne.n	80053dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689a      	ldr	r2, [r3, #8]
 80053b6:	4b19      	ldr	r3, [pc, #100]	@ (800541c <HAL_TIM_Base_Start_IT+0xec>)
 80053b8:	4013      	ands	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2b06      	cmp	r3, #6
 80053c0:	d015      	beq.n	80053ee <HAL_TIM_Base_Start_IT+0xbe>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053c8:	d011      	beq.n	80053ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f042 0201 	orr.w	r2, r2, #1
 80053d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053da:	e008      	b.n	80053ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 0201 	orr.w	r2, r2, #1
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	e000      	b.n	80053f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3714      	adds	r7, #20
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	40012c00 	.word	0x40012c00
 8005404:	40000400 	.word	0x40000400
 8005408:	40000800 	.word	0x40000800
 800540c:	40000c00 	.word	0x40000c00
 8005410:	40013400 	.word	0x40013400
 8005414:	40014000 	.word	0x40014000
 8005418:	40015000 	.word	0x40015000
 800541c:	00010007 	.word	0x00010007

08005420 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e049      	b.n	80054c6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d106      	bne.n	800544c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f841 	bl	80054ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	3304      	adds	r3, #4
 800545c:	4619      	mov	r1, r3
 800545e:	4610      	mov	r0, r2
 8005460:	f000 fcf4 	bl	8005e4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
	...

080054e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d109      	bne.n	8005508 <HAL_TIM_PWM_Start+0x24>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	bf14      	ite	ne
 8005500:	2301      	movne	r3, #1
 8005502:	2300      	moveq	r3, #0
 8005504:	b2db      	uxtb	r3, r3
 8005506:	e03c      	b.n	8005582 <HAL_TIM_PWM_Start+0x9e>
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	2b04      	cmp	r3, #4
 800550c:	d109      	bne.n	8005522 <HAL_TIM_PWM_Start+0x3e>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b01      	cmp	r3, #1
 8005518:	bf14      	ite	ne
 800551a:	2301      	movne	r3, #1
 800551c:	2300      	moveq	r3, #0
 800551e:	b2db      	uxtb	r3, r3
 8005520:	e02f      	b.n	8005582 <HAL_TIM_PWM_Start+0x9e>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b08      	cmp	r3, #8
 8005526:	d109      	bne.n	800553c <HAL_TIM_PWM_Start+0x58>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b01      	cmp	r3, #1
 8005532:	bf14      	ite	ne
 8005534:	2301      	movne	r3, #1
 8005536:	2300      	moveq	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	e022      	b.n	8005582 <HAL_TIM_PWM_Start+0x9e>
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	2b0c      	cmp	r3, #12
 8005540:	d109      	bne.n	8005556 <HAL_TIM_PWM_Start+0x72>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b01      	cmp	r3, #1
 800554c:	bf14      	ite	ne
 800554e:	2301      	movne	r3, #1
 8005550:	2300      	moveq	r3, #0
 8005552:	b2db      	uxtb	r3, r3
 8005554:	e015      	b.n	8005582 <HAL_TIM_PWM_Start+0x9e>
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b10      	cmp	r3, #16
 800555a:	d109      	bne.n	8005570 <HAL_TIM_PWM_Start+0x8c>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b01      	cmp	r3, #1
 8005566:	bf14      	ite	ne
 8005568:	2301      	movne	r3, #1
 800556a:	2300      	moveq	r3, #0
 800556c:	b2db      	uxtb	r3, r3
 800556e:	e008      	b.n	8005582 <HAL_TIM_PWM_Start+0x9e>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b01      	cmp	r3, #1
 800557a:	bf14      	ite	ne
 800557c:	2301      	movne	r3, #1
 800557e:	2300      	moveq	r3, #0
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e0a6      	b.n	80056d8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d104      	bne.n	800559a <HAL_TIM_PWM_Start+0xb6>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005598:	e023      	b.n	80055e2 <HAL_TIM_PWM_Start+0xfe>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b04      	cmp	r3, #4
 800559e:	d104      	bne.n	80055aa <HAL_TIM_PWM_Start+0xc6>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055a8:	e01b      	b.n	80055e2 <HAL_TIM_PWM_Start+0xfe>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b08      	cmp	r3, #8
 80055ae:	d104      	bne.n	80055ba <HAL_TIM_PWM_Start+0xd6>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055b8:	e013      	b.n	80055e2 <HAL_TIM_PWM_Start+0xfe>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b0c      	cmp	r3, #12
 80055be:	d104      	bne.n	80055ca <HAL_TIM_PWM_Start+0xe6>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055c8:	e00b      	b.n	80055e2 <HAL_TIM_PWM_Start+0xfe>
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b10      	cmp	r3, #16
 80055ce:	d104      	bne.n	80055da <HAL_TIM_PWM_Start+0xf6>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055d8:	e003      	b.n	80055e2 <HAL_TIM_PWM_Start+0xfe>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2202      	movs	r2, #2
 80055de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2201      	movs	r2, #1
 80055e8:	6839      	ldr	r1, [r7, #0]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f001 f8a8 	bl	8006740 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a3a      	ldr	r2, [pc, #232]	@ (80056e0 <HAL_TIM_PWM_Start+0x1fc>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d018      	beq.n	800562c <HAL_TIM_PWM_Start+0x148>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a39      	ldr	r2, [pc, #228]	@ (80056e4 <HAL_TIM_PWM_Start+0x200>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d013      	beq.n	800562c <HAL_TIM_PWM_Start+0x148>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a37      	ldr	r2, [pc, #220]	@ (80056e8 <HAL_TIM_PWM_Start+0x204>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d00e      	beq.n	800562c <HAL_TIM_PWM_Start+0x148>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a36      	ldr	r2, [pc, #216]	@ (80056ec <HAL_TIM_PWM_Start+0x208>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d009      	beq.n	800562c <HAL_TIM_PWM_Start+0x148>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a34      	ldr	r2, [pc, #208]	@ (80056f0 <HAL_TIM_PWM_Start+0x20c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d004      	beq.n	800562c <HAL_TIM_PWM_Start+0x148>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a33      	ldr	r2, [pc, #204]	@ (80056f4 <HAL_TIM_PWM_Start+0x210>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d101      	bne.n	8005630 <HAL_TIM_PWM_Start+0x14c>
 800562c:	2301      	movs	r3, #1
 800562e:	e000      	b.n	8005632 <HAL_TIM_PWM_Start+0x14e>
 8005630:	2300      	movs	r3, #0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d007      	beq.n	8005646 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005644:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a25      	ldr	r2, [pc, #148]	@ (80056e0 <HAL_TIM_PWM_Start+0x1fc>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d022      	beq.n	8005696 <HAL_TIM_PWM_Start+0x1b2>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005658:	d01d      	beq.n	8005696 <HAL_TIM_PWM_Start+0x1b2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a26      	ldr	r2, [pc, #152]	@ (80056f8 <HAL_TIM_PWM_Start+0x214>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d018      	beq.n	8005696 <HAL_TIM_PWM_Start+0x1b2>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a24      	ldr	r2, [pc, #144]	@ (80056fc <HAL_TIM_PWM_Start+0x218>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d013      	beq.n	8005696 <HAL_TIM_PWM_Start+0x1b2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a23      	ldr	r2, [pc, #140]	@ (8005700 <HAL_TIM_PWM_Start+0x21c>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d00e      	beq.n	8005696 <HAL_TIM_PWM_Start+0x1b2>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a19      	ldr	r2, [pc, #100]	@ (80056e4 <HAL_TIM_PWM_Start+0x200>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d009      	beq.n	8005696 <HAL_TIM_PWM_Start+0x1b2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a18      	ldr	r2, [pc, #96]	@ (80056e8 <HAL_TIM_PWM_Start+0x204>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d004      	beq.n	8005696 <HAL_TIM_PWM_Start+0x1b2>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a18      	ldr	r2, [pc, #96]	@ (80056f4 <HAL_TIM_PWM_Start+0x210>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d115      	bne.n	80056c2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	4b19      	ldr	r3, [pc, #100]	@ (8005704 <HAL_TIM_PWM_Start+0x220>)
 800569e:	4013      	ands	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2b06      	cmp	r3, #6
 80056a6:	d015      	beq.n	80056d4 <HAL_TIM_PWM_Start+0x1f0>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056ae:	d011      	beq.n	80056d4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0201 	orr.w	r2, r2, #1
 80056be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c0:	e008      	b.n	80056d4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f042 0201 	orr.w	r2, r2, #1
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	e000      	b.n	80056d6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	40012c00 	.word	0x40012c00
 80056e4:	40013400 	.word	0x40013400
 80056e8:	40014000 	.word	0x40014000
 80056ec:	40014400 	.word	0x40014400
 80056f0:	40014800 	.word	0x40014800
 80056f4:	40015000 	.word	0x40015000
 80056f8:	40000400 	.word	0x40000400
 80056fc:	40000800 	.word	0x40000800
 8005700:	40000c00 	.word	0x40000c00
 8005704:	00010007 	.word	0x00010007

08005708 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d020      	beq.n	800576c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f003 0302 	and.w	r3, r3, #2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d01b      	beq.n	800576c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f06f 0202 	mvn.w	r2, #2
 800573c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2201      	movs	r2, #1
 8005742:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	f003 0303 	and.w	r3, r3, #3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fb5c 	bl	8005e10 <HAL_TIM_IC_CaptureCallback>
 8005758:	e005      	b.n	8005766 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fb4e 	bl	8005dfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 fb5f 	bl	8005e24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f003 0304 	and.w	r3, r3, #4
 8005772:	2b00      	cmp	r3, #0
 8005774:	d020      	beq.n	80057b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f003 0304 	and.w	r3, r3, #4
 800577c:	2b00      	cmp	r3, #0
 800577e:	d01b      	beq.n	80057b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f06f 0204 	mvn.w	r2, #4
 8005788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2202      	movs	r2, #2
 800578e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 fb36 	bl	8005e10 <HAL_TIM_IC_CaptureCallback>
 80057a4:	e005      	b.n	80057b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fb28 	bl	8005dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 fb39 	bl	8005e24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f003 0308 	and.w	r3, r3, #8
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d020      	beq.n	8005804 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f003 0308 	and.w	r3, r3, #8
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d01b      	beq.n	8005804 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f06f 0208 	mvn.w	r2, #8
 80057d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2204      	movs	r2, #4
 80057da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fb10 	bl	8005e10 <HAL_TIM_IC_CaptureCallback>
 80057f0:	e005      	b.n	80057fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fb02 	bl	8005dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 fb13 	bl	8005e24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f003 0310 	and.w	r3, r3, #16
 800580a:	2b00      	cmp	r3, #0
 800580c:	d020      	beq.n	8005850 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f003 0310 	and.w	r3, r3, #16
 8005814:	2b00      	cmp	r3, #0
 8005816:	d01b      	beq.n	8005850 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f06f 0210 	mvn.w	r2, #16
 8005820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2208      	movs	r2, #8
 8005826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 faea 	bl	8005e10 <HAL_TIM_IC_CaptureCallback>
 800583c:	e005      	b.n	800584a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fadc 	bl	8005dfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 faed 	bl	8005e24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00c      	beq.n	8005874 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b00      	cmp	r3, #0
 8005862:	d007      	beq.n	8005874 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f06f 0201 	mvn.w	r2, #1
 800586c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7fb ff1e 	bl	80016b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800587a:	2b00      	cmp	r3, #0
 800587c:	d104      	bne.n	8005888 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00c      	beq.n	80058a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800588e:	2b00      	cmp	r3, #0
 8005890:	d007      	beq.n	80058a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800589a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f001 f8a9 	bl	80069f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00c      	beq.n	80058c6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d007      	beq.n	80058c6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80058be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f001 f8a1 	bl	8006a08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00c      	beq.n	80058ea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d007      	beq.n	80058ea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80058e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 faa7 	bl	8005e38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	f003 0320 	and.w	r3, r3, #32
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d00c      	beq.n	800590e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f003 0320 	and.w	r3, r3, #32
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d007      	beq.n	800590e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f06f 0220 	mvn.w	r2, #32
 8005906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f001 f869 	bl	80069e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00c      	beq.n	8005932 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d007      	beq.n	8005932 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800592a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f001 f875 	bl	8006a1c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00c      	beq.n	8005956 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d007      	beq.n	8005956 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800594e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f001 f86d 	bl	8006a30 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00c      	beq.n	800597a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d007      	beq.n	800597a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f001 f865 	bl	8006a44 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00c      	beq.n	800599e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d007      	beq.n	800599e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f001 f85d 	bl	8006a58 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800599e:	bf00      	nop
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
	...

080059a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059b4:	2300      	movs	r3, #0
 80059b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d101      	bne.n	80059c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059c2:	2302      	movs	r3, #2
 80059c4:	e0ff      	b.n	8005bc6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b14      	cmp	r3, #20
 80059d2:	f200 80f0 	bhi.w	8005bb6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80059d6:	a201      	add	r2, pc, #4	@ (adr r2, 80059dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059dc:	08005a31 	.word	0x08005a31
 80059e0:	08005bb7 	.word	0x08005bb7
 80059e4:	08005bb7 	.word	0x08005bb7
 80059e8:	08005bb7 	.word	0x08005bb7
 80059ec:	08005a71 	.word	0x08005a71
 80059f0:	08005bb7 	.word	0x08005bb7
 80059f4:	08005bb7 	.word	0x08005bb7
 80059f8:	08005bb7 	.word	0x08005bb7
 80059fc:	08005ab3 	.word	0x08005ab3
 8005a00:	08005bb7 	.word	0x08005bb7
 8005a04:	08005bb7 	.word	0x08005bb7
 8005a08:	08005bb7 	.word	0x08005bb7
 8005a0c:	08005af3 	.word	0x08005af3
 8005a10:	08005bb7 	.word	0x08005bb7
 8005a14:	08005bb7 	.word	0x08005bb7
 8005a18:	08005bb7 	.word	0x08005bb7
 8005a1c:	08005b35 	.word	0x08005b35
 8005a20:	08005bb7 	.word	0x08005bb7
 8005a24:	08005bb7 	.word	0x08005bb7
 8005a28:	08005bb7 	.word	0x08005bb7
 8005a2c:	08005b75 	.word	0x08005b75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68b9      	ldr	r1, [r7, #8]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 fabc 	bl	8005fb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699a      	ldr	r2, [r3, #24]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0208 	orr.w	r2, r2, #8
 8005a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699a      	ldr	r2, [r3, #24]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 0204 	bic.w	r2, r2, #4
 8005a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6999      	ldr	r1, [r3, #24]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	691a      	ldr	r2, [r3, #16]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	619a      	str	r2, [r3, #24]
      break;
 8005a6e:	e0a5      	b.n	8005bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68b9      	ldr	r1, [r7, #8]
 8005a76:	4618      	mov	r0, r3
 8005a78:	f000 fb36 	bl	80060e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	699a      	ldr	r2, [r3, #24]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	699a      	ldr	r2, [r3, #24]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6999      	ldr	r1, [r3, #24]
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	021a      	lsls	r2, r3, #8
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	430a      	orrs	r2, r1
 8005aae:	619a      	str	r2, [r3, #24]
      break;
 8005ab0:	e084      	b.n	8005bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68b9      	ldr	r1, [r7, #8]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 fba9 	bl	8006210 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	69da      	ldr	r2, [r3, #28]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f042 0208 	orr.w	r2, r2, #8
 8005acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69da      	ldr	r2, [r3, #28]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0204 	bic.w	r2, r2, #4
 8005adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69d9      	ldr	r1, [r3, #28]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	691a      	ldr	r2, [r3, #16]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	61da      	str	r2, [r3, #28]
      break;
 8005af0:	e064      	b.n	8005bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68b9      	ldr	r1, [r7, #8]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 fc1b 	bl	8006334 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69da      	ldr	r2, [r3, #28]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69da      	ldr	r2, [r3, #28]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69d9      	ldr	r1, [r3, #28]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	021a      	lsls	r2, r3, #8
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	61da      	str	r2, [r3, #28]
      break;
 8005b32:	e043      	b.n	8005bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68b9      	ldr	r1, [r7, #8]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 fc8e 	bl	800645c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f042 0208 	orr.w	r2, r2, #8
 8005b4e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 0204 	bic.w	r2, r2, #4
 8005b5e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	691a      	ldr	r2, [r3, #16]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005b72:	e023      	b.n	8005bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68b9      	ldr	r1, [r7, #8]
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 fcd8 	bl	8006530 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b8e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b9e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	021a      	lsls	r2, r3, #8
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005bb4:	e002      	b.n	8005bbc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	75fb      	strb	r3, [r7, #23]
      break;
 8005bba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3718      	adds	r7, #24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop

08005bd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d101      	bne.n	8005bec <HAL_TIM_ConfigClockSource+0x1c>
 8005be8:	2302      	movs	r3, #2
 8005bea:	e0f6      	b.n	8005dda <HAL_TIM_ConfigClockSource+0x20a>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005c0a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a6f      	ldr	r2, [pc, #444]	@ (8005de4 <HAL_TIM_ConfigClockSource+0x214>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	f000 80c1 	beq.w	8005dae <HAL_TIM_ConfigClockSource+0x1de>
 8005c2c:	4a6d      	ldr	r2, [pc, #436]	@ (8005de4 <HAL_TIM_ConfigClockSource+0x214>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	f200 80c6 	bhi.w	8005dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c34:	4a6c      	ldr	r2, [pc, #432]	@ (8005de8 <HAL_TIM_ConfigClockSource+0x218>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	f000 80b9 	beq.w	8005dae <HAL_TIM_ConfigClockSource+0x1de>
 8005c3c:	4a6a      	ldr	r2, [pc, #424]	@ (8005de8 <HAL_TIM_ConfigClockSource+0x218>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	f200 80be 	bhi.w	8005dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c44:	4a69      	ldr	r2, [pc, #420]	@ (8005dec <HAL_TIM_ConfigClockSource+0x21c>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	f000 80b1 	beq.w	8005dae <HAL_TIM_ConfigClockSource+0x1de>
 8005c4c:	4a67      	ldr	r2, [pc, #412]	@ (8005dec <HAL_TIM_ConfigClockSource+0x21c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	f200 80b6 	bhi.w	8005dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c54:	4a66      	ldr	r2, [pc, #408]	@ (8005df0 <HAL_TIM_ConfigClockSource+0x220>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	f000 80a9 	beq.w	8005dae <HAL_TIM_ConfigClockSource+0x1de>
 8005c5c:	4a64      	ldr	r2, [pc, #400]	@ (8005df0 <HAL_TIM_ConfigClockSource+0x220>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	f200 80ae 	bhi.w	8005dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c64:	4a63      	ldr	r2, [pc, #396]	@ (8005df4 <HAL_TIM_ConfigClockSource+0x224>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	f000 80a1 	beq.w	8005dae <HAL_TIM_ConfigClockSource+0x1de>
 8005c6c:	4a61      	ldr	r2, [pc, #388]	@ (8005df4 <HAL_TIM_ConfigClockSource+0x224>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	f200 80a6 	bhi.w	8005dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c74:	4a60      	ldr	r2, [pc, #384]	@ (8005df8 <HAL_TIM_ConfigClockSource+0x228>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	f000 8099 	beq.w	8005dae <HAL_TIM_ConfigClockSource+0x1de>
 8005c7c:	4a5e      	ldr	r2, [pc, #376]	@ (8005df8 <HAL_TIM_ConfigClockSource+0x228>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	f200 809e 	bhi.w	8005dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c84:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005c88:	f000 8091 	beq.w	8005dae <HAL_TIM_ConfigClockSource+0x1de>
 8005c8c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005c90:	f200 8096 	bhi.w	8005dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c98:	f000 8089 	beq.w	8005dae <HAL_TIM_ConfigClockSource+0x1de>
 8005c9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ca0:	f200 808e 	bhi.w	8005dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ca4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ca8:	d03e      	beq.n	8005d28 <HAL_TIM_ConfigClockSource+0x158>
 8005caa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cae:	f200 8087 	bhi.w	8005dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cb6:	f000 8086 	beq.w	8005dc6 <HAL_TIM_ConfigClockSource+0x1f6>
 8005cba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cbe:	d87f      	bhi.n	8005dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cc0:	2b70      	cmp	r3, #112	@ 0x70
 8005cc2:	d01a      	beq.n	8005cfa <HAL_TIM_ConfigClockSource+0x12a>
 8005cc4:	2b70      	cmp	r3, #112	@ 0x70
 8005cc6:	d87b      	bhi.n	8005dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cc8:	2b60      	cmp	r3, #96	@ 0x60
 8005cca:	d050      	beq.n	8005d6e <HAL_TIM_ConfigClockSource+0x19e>
 8005ccc:	2b60      	cmp	r3, #96	@ 0x60
 8005cce:	d877      	bhi.n	8005dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cd0:	2b50      	cmp	r3, #80	@ 0x50
 8005cd2:	d03c      	beq.n	8005d4e <HAL_TIM_ConfigClockSource+0x17e>
 8005cd4:	2b50      	cmp	r3, #80	@ 0x50
 8005cd6:	d873      	bhi.n	8005dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cd8:	2b40      	cmp	r3, #64	@ 0x40
 8005cda:	d058      	beq.n	8005d8e <HAL_TIM_ConfigClockSource+0x1be>
 8005cdc:	2b40      	cmp	r3, #64	@ 0x40
 8005cde:	d86f      	bhi.n	8005dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ce0:	2b30      	cmp	r3, #48	@ 0x30
 8005ce2:	d064      	beq.n	8005dae <HAL_TIM_ConfigClockSource+0x1de>
 8005ce4:	2b30      	cmp	r3, #48	@ 0x30
 8005ce6:	d86b      	bhi.n	8005dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ce8:	2b20      	cmp	r3, #32
 8005cea:	d060      	beq.n	8005dae <HAL_TIM_ConfigClockSource+0x1de>
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	d867      	bhi.n	8005dc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d05c      	beq.n	8005dae <HAL_TIM_ConfigClockSource+0x1de>
 8005cf4:	2b10      	cmp	r3, #16
 8005cf6:	d05a      	beq.n	8005dae <HAL_TIM_ConfigClockSource+0x1de>
 8005cf8:	e062      	b.n	8005dc0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d0a:	f000 fcf9 	bl	8006700 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	609a      	str	r2, [r3, #8]
      break;
 8005d26:	e04f      	b.n	8005dc8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d38:	f000 fce2 	bl	8006700 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689a      	ldr	r2, [r3, #8]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d4a:	609a      	str	r2, [r3, #8]
      break;
 8005d4c:	e03c      	b.n	8005dc8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	f000 fc54 	bl	8006608 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2150      	movs	r1, #80	@ 0x50
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 fcad 	bl	80066c6 <TIM_ITRx_SetConfig>
      break;
 8005d6c:	e02c      	b.n	8005dc8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	f000 fc73 	bl	8006666 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2160      	movs	r1, #96	@ 0x60
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 fc9d 	bl	80066c6 <TIM_ITRx_SetConfig>
      break;
 8005d8c:	e01c      	b.n	8005dc8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f000 fc34 	bl	8006608 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2140      	movs	r1, #64	@ 0x40
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 fc8d 	bl	80066c6 <TIM_ITRx_SetConfig>
      break;
 8005dac:	e00c      	b.n	8005dc8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4619      	mov	r1, r3
 8005db8:	4610      	mov	r0, r2
 8005dba:	f000 fc84 	bl	80066c6 <TIM_ITRx_SetConfig>
      break;
 8005dbe:	e003      	b.n	8005dc8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8005dc4:	e000      	b.n	8005dc8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005dc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	00100070 	.word	0x00100070
 8005de8:	00100060 	.word	0x00100060
 8005dec:	00100050 	.word	0x00100050
 8005df0:	00100040 	.word	0x00100040
 8005df4:	00100030 	.word	0x00100030
 8005df8:	00100020 	.word	0x00100020

08005dfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a4c      	ldr	r2, [pc, #304]	@ (8005f90 <TIM_Base_SetConfig+0x144>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d017      	beq.n	8005e94 <TIM_Base_SetConfig+0x48>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e6a:	d013      	beq.n	8005e94 <TIM_Base_SetConfig+0x48>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a49      	ldr	r2, [pc, #292]	@ (8005f94 <TIM_Base_SetConfig+0x148>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d00f      	beq.n	8005e94 <TIM_Base_SetConfig+0x48>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a48      	ldr	r2, [pc, #288]	@ (8005f98 <TIM_Base_SetConfig+0x14c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00b      	beq.n	8005e94 <TIM_Base_SetConfig+0x48>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a47      	ldr	r2, [pc, #284]	@ (8005f9c <TIM_Base_SetConfig+0x150>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d007      	beq.n	8005e94 <TIM_Base_SetConfig+0x48>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a46      	ldr	r2, [pc, #280]	@ (8005fa0 <TIM_Base_SetConfig+0x154>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d003      	beq.n	8005e94 <TIM_Base_SetConfig+0x48>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a45      	ldr	r2, [pc, #276]	@ (8005fa4 <TIM_Base_SetConfig+0x158>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d108      	bne.n	8005ea6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a39      	ldr	r2, [pc, #228]	@ (8005f90 <TIM_Base_SetConfig+0x144>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d023      	beq.n	8005ef6 <TIM_Base_SetConfig+0xaa>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eb4:	d01f      	beq.n	8005ef6 <TIM_Base_SetConfig+0xaa>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a36      	ldr	r2, [pc, #216]	@ (8005f94 <TIM_Base_SetConfig+0x148>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d01b      	beq.n	8005ef6 <TIM_Base_SetConfig+0xaa>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a35      	ldr	r2, [pc, #212]	@ (8005f98 <TIM_Base_SetConfig+0x14c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d017      	beq.n	8005ef6 <TIM_Base_SetConfig+0xaa>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a34      	ldr	r2, [pc, #208]	@ (8005f9c <TIM_Base_SetConfig+0x150>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d013      	beq.n	8005ef6 <TIM_Base_SetConfig+0xaa>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a33      	ldr	r2, [pc, #204]	@ (8005fa0 <TIM_Base_SetConfig+0x154>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d00f      	beq.n	8005ef6 <TIM_Base_SetConfig+0xaa>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a33      	ldr	r2, [pc, #204]	@ (8005fa8 <TIM_Base_SetConfig+0x15c>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d00b      	beq.n	8005ef6 <TIM_Base_SetConfig+0xaa>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a32      	ldr	r2, [pc, #200]	@ (8005fac <TIM_Base_SetConfig+0x160>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d007      	beq.n	8005ef6 <TIM_Base_SetConfig+0xaa>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a31      	ldr	r2, [pc, #196]	@ (8005fb0 <TIM_Base_SetConfig+0x164>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d003      	beq.n	8005ef6 <TIM_Base_SetConfig+0xaa>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a2c      	ldr	r2, [pc, #176]	@ (8005fa4 <TIM_Base_SetConfig+0x158>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d108      	bne.n	8005f08 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	689a      	ldr	r2, [r3, #8]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a18      	ldr	r2, [pc, #96]	@ (8005f90 <TIM_Base_SetConfig+0x144>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d013      	beq.n	8005f5c <TIM_Base_SetConfig+0x110>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a1a      	ldr	r2, [pc, #104]	@ (8005fa0 <TIM_Base_SetConfig+0x154>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d00f      	beq.n	8005f5c <TIM_Base_SetConfig+0x110>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a1a      	ldr	r2, [pc, #104]	@ (8005fa8 <TIM_Base_SetConfig+0x15c>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d00b      	beq.n	8005f5c <TIM_Base_SetConfig+0x110>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a19      	ldr	r2, [pc, #100]	@ (8005fac <TIM_Base_SetConfig+0x160>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d007      	beq.n	8005f5c <TIM_Base_SetConfig+0x110>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a18      	ldr	r2, [pc, #96]	@ (8005fb0 <TIM_Base_SetConfig+0x164>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d003      	beq.n	8005f5c <TIM_Base_SetConfig+0x110>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a13      	ldr	r2, [pc, #76]	@ (8005fa4 <TIM_Base_SetConfig+0x158>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d103      	bne.n	8005f64 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	691a      	ldr	r2, [r3, #16]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d105      	bne.n	8005f82 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	f023 0201 	bic.w	r2, r3, #1
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	611a      	str	r2, [r3, #16]
  }
}
 8005f82:	bf00      	nop
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	40012c00 	.word	0x40012c00
 8005f94:	40000400 	.word	0x40000400
 8005f98:	40000800 	.word	0x40000800
 8005f9c:	40000c00 	.word	0x40000c00
 8005fa0:	40013400 	.word	0x40013400
 8005fa4:	40015000 	.word	0x40015000
 8005fa8:	40014000 	.word	0x40014000
 8005fac:	40014400 	.word	0x40014400
 8005fb0:	40014800 	.word	0x40014800

08005fb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b087      	sub	sp, #28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	f023 0201 	bic.w	r2, r3, #1
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0303 	bic.w	r3, r3, #3
 8005fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f023 0302 	bic.w	r3, r3, #2
 8006000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	4313      	orrs	r3, r2
 800600a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a30      	ldr	r2, [pc, #192]	@ (80060d0 <TIM_OC1_SetConfig+0x11c>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d013      	beq.n	800603c <TIM_OC1_SetConfig+0x88>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a2f      	ldr	r2, [pc, #188]	@ (80060d4 <TIM_OC1_SetConfig+0x120>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d00f      	beq.n	800603c <TIM_OC1_SetConfig+0x88>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a2e      	ldr	r2, [pc, #184]	@ (80060d8 <TIM_OC1_SetConfig+0x124>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d00b      	beq.n	800603c <TIM_OC1_SetConfig+0x88>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a2d      	ldr	r2, [pc, #180]	@ (80060dc <TIM_OC1_SetConfig+0x128>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d007      	beq.n	800603c <TIM_OC1_SetConfig+0x88>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a2c      	ldr	r2, [pc, #176]	@ (80060e0 <TIM_OC1_SetConfig+0x12c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d003      	beq.n	800603c <TIM_OC1_SetConfig+0x88>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	4a2b      	ldr	r2, [pc, #172]	@ (80060e4 <TIM_OC1_SetConfig+0x130>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d10c      	bne.n	8006056 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f023 0308 	bic.w	r3, r3, #8
 8006042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	4313      	orrs	r3, r2
 800604c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f023 0304 	bic.w	r3, r3, #4
 8006054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a1d      	ldr	r2, [pc, #116]	@ (80060d0 <TIM_OC1_SetConfig+0x11c>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d013      	beq.n	8006086 <TIM_OC1_SetConfig+0xd2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a1c      	ldr	r2, [pc, #112]	@ (80060d4 <TIM_OC1_SetConfig+0x120>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d00f      	beq.n	8006086 <TIM_OC1_SetConfig+0xd2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a1b      	ldr	r2, [pc, #108]	@ (80060d8 <TIM_OC1_SetConfig+0x124>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d00b      	beq.n	8006086 <TIM_OC1_SetConfig+0xd2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a1a      	ldr	r2, [pc, #104]	@ (80060dc <TIM_OC1_SetConfig+0x128>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d007      	beq.n	8006086 <TIM_OC1_SetConfig+0xd2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a19      	ldr	r2, [pc, #100]	@ (80060e0 <TIM_OC1_SetConfig+0x12c>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d003      	beq.n	8006086 <TIM_OC1_SetConfig+0xd2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a18      	ldr	r2, [pc, #96]	@ (80060e4 <TIM_OC1_SetConfig+0x130>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d111      	bne.n	80060aa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800608c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006094:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	4313      	orrs	r3, r2
 800609e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	699b      	ldr	r3, [r3, #24]
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	621a      	str	r2, [r3, #32]
}
 80060c4:	bf00      	nop
 80060c6:	371c      	adds	r7, #28
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	40012c00 	.word	0x40012c00
 80060d4:	40013400 	.word	0x40013400
 80060d8:	40014000 	.word	0x40014000
 80060dc:	40014400 	.word	0x40014400
 80060e0:	40014800 	.word	0x40014800
 80060e4:	40015000 	.word	0x40015000

080060e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	f023 0210 	bic.w	r2, r3, #16
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006116:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800611a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006122:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	021b      	lsls	r3, r3, #8
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	4313      	orrs	r3, r2
 800612e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	f023 0320 	bic.w	r3, r3, #32
 8006136:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	011b      	lsls	r3, r3, #4
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	4313      	orrs	r3, r2
 8006142:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a2c      	ldr	r2, [pc, #176]	@ (80061f8 <TIM_OC2_SetConfig+0x110>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d007      	beq.n	800615c <TIM_OC2_SetConfig+0x74>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a2b      	ldr	r2, [pc, #172]	@ (80061fc <TIM_OC2_SetConfig+0x114>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d003      	beq.n	800615c <TIM_OC2_SetConfig+0x74>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a2a      	ldr	r2, [pc, #168]	@ (8006200 <TIM_OC2_SetConfig+0x118>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d10d      	bne.n	8006178 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	011b      	lsls	r3, r3, #4
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	4313      	orrs	r3, r2
 800616e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006176:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a1f      	ldr	r2, [pc, #124]	@ (80061f8 <TIM_OC2_SetConfig+0x110>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d013      	beq.n	80061a8 <TIM_OC2_SetConfig+0xc0>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a1e      	ldr	r2, [pc, #120]	@ (80061fc <TIM_OC2_SetConfig+0x114>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d00f      	beq.n	80061a8 <TIM_OC2_SetConfig+0xc0>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a1e      	ldr	r2, [pc, #120]	@ (8006204 <TIM_OC2_SetConfig+0x11c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d00b      	beq.n	80061a8 <TIM_OC2_SetConfig+0xc0>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a1d      	ldr	r2, [pc, #116]	@ (8006208 <TIM_OC2_SetConfig+0x120>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d007      	beq.n	80061a8 <TIM_OC2_SetConfig+0xc0>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a1c      	ldr	r2, [pc, #112]	@ (800620c <TIM_OC2_SetConfig+0x124>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d003      	beq.n	80061a8 <TIM_OC2_SetConfig+0xc0>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a17      	ldr	r2, [pc, #92]	@ (8006200 <TIM_OC2_SetConfig+0x118>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d113      	bne.n	80061d0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	621a      	str	r2, [r3, #32]
}
 80061ea:	bf00      	nop
 80061ec:	371c      	adds	r7, #28
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	40012c00 	.word	0x40012c00
 80061fc:	40013400 	.word	0x40013400
 8006200:	40015000 	.word	0x40015000
 8006204:	40014000 	.word	0x40014000
 8006208:	40014400 	.word	0x40014400
 800620c:	40014800 	.word	0x40014800

08006210 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	69db      	ldr	r3, [r3, #28]
 8006236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800623e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f023 0303 	bic.w	r3, r3, #3
 800624a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	4313      	orrs	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800625c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	021b      	lsls	r3, r3, #8
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	4313      	orrs	r3, r2
 8006268:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a2b      	ldr	r2, [pc, #172]	@ (800631c <TIM_OC3_SetConfig+0x10c>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d007      	beq.n	8006282 <TIM_OC3_SetConfig+0x72>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a2a      	ldr	r2, [pc, #168]	@ (8006320 <TIM_OC3_SetConfig+0x110>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d003      	beq.n	8006282 <TIM_OC3_SetConfig+0x72>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a29      	ldr	r2, [pc, #164]	@ (8006324 <TIM_OC3_SetConfig+0x114>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d10d      	bne.n	800629e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006288:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	021b      	lsls	r3, r3, #8
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	4313      	orrs	r3, r2
 8006294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800629c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a1e      	ldr	r2, [pc, #120]	@ (800631c <TIM_OC3_SetConfig+0x10c>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d013      	beq.n	80062ce <TIM_OC3_SetConfig+0xbe>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006320 <TIM_OC3_SetConfig+0x110>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d00f      	beq.n	80062ce <TIM_OC3_SetConfig+0xbe>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006328 <TIM_OC3_SetConfig+0x118>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d00b      	beq.n	80062ce <TIM_OC3_SetConfig+0xbe>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a1c      	ldr	r2, [pc, #112]	@ (800632c <TIM_OC3_SetConfig+0x11c>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d007      	beq.n	80062ce <TIM_OC3_SetConfig+0xbe>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a1b      	ldr	r2, [pc, #108]	@ (8006330 <TIM_OC3_SetConfig+0x120>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d003      	beq.n	80062ce <TIM_OC3_SetConfig+0xbe>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a16      	ldr	r2, [pc, #88]	@ (8006324 <TIM_OC3_SetConfig+0x114>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d113      	bne.n	80062f6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	011b      	lsls	r3, r3, #4
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	011b      	lsls	r3, r3, #4
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	621a      	str	r2, [r3, #32]
}
 8006310:	bf00      	nop
 8006312:	371c      	adds	r7, #28
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr
 800631c:	40012c00 	.word	0x40012c00
 8006320:	40013400 	.word	0x40013400
 8006324:	40015000 	.word	0x40015000
 8006328:	40014000 	.word	0x40014000
 800632c:	40014400 	.word	0x40014400
 8006330:	40014800 	.word	0x40014800

08006334 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006334:	b480      	push	{r7}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a1b      	ldr	r3, [r3, #32]
 8006348:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006362:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800636e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	021b      	lsls	r3, r3, #8
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	4313      	orrs	r3, r2
 800637a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006382:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	031b      	lsls	r3, r3, #12
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	4313      	orrs	r3, r2
 800638e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a2c      	ldr	r2, [pc, #176]	@ (8006444 <TIM_OC4_SetConfig+0x110>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d007      	beq.n	80063a8 <TIM_OC4_SetConfig+0x74>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a2b      	ldr	r2, [pc, #172]	@ (8006448 <TIM_OC4_SetConfig+0x114>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d003      	beq.n	80063a8 <TIM_OC4_SetConfig+0x74>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a2a      	ldr	r2, [pc, #168]	@ (800644c <TIM_OC4_SetConfig+0x118>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d10d      	bne.n	80063c4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80063ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	031b      	lsls	r3, r3, #12
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a1f      	ldr	r2, [pc, #124]	@ (8006444 <TIM_OC4_SetConfig+0x110>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d013      	beq.n	80063f4 <TIM_OC4_SetConfig+0xc0>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a1e      	ldr	r2, [pc, #120]	@ (8006448 <TIM_OC4_SetConfig+0x114>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d00f      	beq.n	80063f4 <TIM_OC4_SetConfig+0xc0>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a1e      	ldr	r2, [pc, #120]	@ (8006450 <TIM_OC4_SetConfig+0x11c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d00b      	beq.n	80063f4 <TIM_OC4_SetConfig+0xc0>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a1d      	ldr	r2, [pc, #116]	@ (8006454 <TIM_OC4_SetConfig+0x120>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d007      	beq.n	80063f4 <TIM_OC4_SetConfig+0xc0>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006458 <TIM_OC4_SetConfig+0x124>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d003      	beq.n	80063f4 <TIM_OC4_SetConfig+0xc0>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a17      	ldr	r2, [pc, #92]	@ (800644c <TIM_OC4_SetConfig+0x118>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d113      	bne.n	800641c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063fa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006402:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	019b      	lsls	r3, r3, #6
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	4313      	orrs	r3, r2
 800640e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	019b      	lsls	r3, r3, #6
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	621a      	str	r2, [r3, #32]
}
 8006436:	bf00      	nop
 8006438:	371c      	adds	r7, #28
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	40012c00 	.word	0x40012c00
 8006448:	40013400 	.word	0x40013400
 800644c:	40015000 	.word	0x40015000
 8006450:	40014000 	.word	0x40014000
 8006454:	40014400 	.word	0x40014400
 8006458:	40014800 	.word	0x40014800

0800645c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800645c:	b480      	push	{r7}
 800645e:	b087      	sub	sp, #28
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800648a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800648e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	4313      	orrs	r3, r2
 8006498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80064a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	041b      	lsls	r3, r3, #16
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a19      	ldr	r2, [pc, #100]	@ (8006518 <TIM_OC5_SetConfig+0xbc>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d013      	beq.n	80064de <TIM_OC5_SetConfig+0x82>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a18      	ldr	r2, [pc, #96]	@ (800651c <TIM_OC5_SetConfig+0xc0>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d00f      	beq.n	80064de <TIM_OC5_SetConfig+0x82>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a17      	ldr	r2, [pc, #92]	@ (8006520 <TIM_OC5_SetConfig+0xc4>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d00b      	beq.n	80064de <TIM_OC5_SetConfig+0x82>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a16      	ldr	r2, [pc, #88]	@ (8006524 <TIM_OC5_SetConfig+0xc8>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d007      	beq.n	80064de <TIM_OC5_SetConfig+0x82>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a15      	ldr	r2, [pc, #84]	@ (8006528 <TIM_OC5_SetConfig+0xcc>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d003      	beq.n	80064de <TIM_OC5_SetConfig+0x82>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a14      	ldr	r2, [pc, #80]	@ (800652c <TIM_OC5_SetConfig+0xd0>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d109      	bne.n	80064f2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	021b      	lsls	r3, r3, #8
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	621a      	str	r2, [r3, #32]
}
 800650c:	bf00      	nop
 800650e:	371c      	adds	r7, #28
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr
 8006518:	40012c00 	.word	0x40012c00
 800651c:	40013400 	.word	0x40013400
 8006520:	40014000 	.word	0x40014000
 8006524:	40014400 	.word	0x40014400
 8006528:	40014800 	.word	0x40014800
 800652c:	40015000 	.word	0x40015000

08006530 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006530:	b480      	push	{r7}
 8006532:	b087      	sub	sp, #28
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a1b      	ldr	r3, [r3, #32]
 8006544:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800655e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	021b      	lsls	r3, r3, #8
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	4313      	orrs	r3, r2
 800656e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006576:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	051b      	lsls	r3, r3, #20
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	4313      	orrs	r3, r2
 8006582:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a1a      	ldr	r2, [pc, #104]	@ (80065f0 <TIM_OC6_SetConfig+0xc0>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d013      	beq.n	80065b4 <TIM_OC6_SetConfig+0x84>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a19      	ldr	r2, [pc, #100]	@ (80065f4 <TIM_OC6_SetConfig+0xc4>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d00f      	beq.n	80065b4 <TIM_OC6_SetConfig+0x84>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a18      	ldr	r2, [pc, #96]	@ (80065f8 <TIM_OC6_SetConfig+0xc8>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d00b      	beq.n	80065b4 <TIM_OC6_SetConfig+0x84>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a17      	ldr	r2, [pc, #92]	@ (80065fc <TIM_OC6_SetConfig+0xcc>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d007      	beq.n	80065b4 <TIM_OC6_SetConfig+0x84>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a16      	ldr	r2, [pc, #88]	@ (8006600 <TIM_OC6_SetConfig+0xd0>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d003      	beq.n	80065b4 <TIM_OC6_SetConfig+0x84>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a15      	ldr	r2, [pc, #84]	@ (8006604 <TIM_OC6_SetConfig+0xd4>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d109      	bne.n	80065c8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	029b      	lsls	r3, r3, #10
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	621a      	str	r2, [r3, #32]
}
 80065e2:	bf00      	nop
 80065e4:	371c      	adds	r7, #28
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	40012c00 	.word	0x40012c00
 80065f4:	40013400 	.word	0x40013400
 80065f8:	40014000 	.word	0x40014000
 80065fc:	40014400 	.word	0x40014400
 8006600:	40014800 	.word	0x40014800
 8006604:	40015000 	.word	0x40015000

08006608 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006608:	b480      	push	{r7}
 800660a:	b087      	sub	sp, #28
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	f023 0201 	bic.w	r2, r3, #1
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006632:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	011b      	lsls	r3, r3, #4
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4313      	orrs	r3, r2
 800663c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f023 030a 	bic.w	r3, r3, #10
 8006644:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	4313      	orrs	r3, r2
 800664c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	621a      	str	r2, [r3, #32]
}
 800665a:	bf00      	nop
 800665c:	371c      	adds	r7, #28
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006666:	b480      	push	{r7}
 8006668:	b087      	sub	sp, #28
 800666a:	af00      	add	r7, sp, #0
 800666c:	60f8      	str	r0, [r7, #12]
 800666e:	60b9      	str	r1, [r7, #8]
 8006670:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	f023 0210 	bic.w	r2, r3, #16
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006690:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	031b      	lsls	r3, r3, #12
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	4313      	orrs	r3, r2
 800669a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80066a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	011b      	lsls	r3, r3, #4
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	621a      	str	r2, [r3, #32]
}
 80066ba:	bf00      	nop
 80066bc:	371c      	adds	r7, #28
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b085      	sub	sp, #20
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80066dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	f043 0307 	orr.w	r3, r3, #7
 80066ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	609a      	str	r2, [r3, #8]
}
 80066f4:	bf00      	nop
 80066f6:	3714      	adds	r7, #20
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
 800670c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800671a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	021a      	lsls	r2, r3, #8
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	431a      	orrs	r2, r3
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	4313      	orrs	r3, r2
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	4313      	orrs	r3, r2
 800672c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	609a      	str	r2, [r3, #8]
}
 8006734:	bf00      	nop
 8006736:	371c      	adds	r7, #28
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006740:	b480      	push	{r7}
 8006742:	b087      	sub	sp, #28
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f003 031f 	and.w	r3, r3, #31
 8006752:	2201      	movs	r2, #1
 8006754:	fa02 f303 	lsl.w	r3, r2, r3
 8006758:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6a1a      	ldr	r2, [r3, #32]
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	43db      	mvns	r3, r3
 8006762:	401a      	ands	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6a1a      	ldr	r2, [r3, #32]
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	f003 031f 	and.w	r3, r3, #31
 8006772:	6879      	ldr	r1, [r7, #4]
 8006774:	fa01 f303 	lsl.w	r3, r1, r3
 8006778:	431a      	orrs	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	621a      	str	r2, [r3, #32]
}
 800677e:	bf00      	nop
 8006780:	371c      	adds	r7, #28
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
	...

0800678c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800679c:	2b01      	cmp	r3, #1
 800679e:	d101      	bne.n	80067a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067a0:	2302      	movs	r3, #2
 80067a2:	e074      	b.n	800688e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2202      	movs	r2, #2
 80067b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a34      	ldr	r2, [pc, #208]	@ (800689c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d009      	beq.n	80067e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a33      	ldr	r2, [pc, #204]	@ (80068a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d004      	beq.n	80067e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a31      	ldr	r2, [pc, #196]	@ (80068a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d108      	bne.n	80067f4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80067e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80067fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	4313      	orrs	r3, r2
 8006808:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a21      	ldr	r2, [pc, #132]	@ (800689c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d022      	beq.n	8006862 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006824:	d01d      	beq.n	8006862 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a1f      	ldr	r2, [pc, #124]	@ (80068a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d018      	beq.n	8006862 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a1d      	ldr	r2, [pc, #116]	@ (80068ac <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d013      	beq.n	8006862 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a1c      	ldr	r2, [pc, #112]	@ (80068b0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d00e      	beq.n	8006862 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a15      	ldr	r2, [pc, #84]	@ (80068a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d009      	beq.n	8006862 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a18      	ldr	r2, [pc, #96]	@ (80068b4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d004      	beq.n	8006862 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a11      	ldr	r2, [pc, #68]	@ (80068a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d10c      	bne.n	800687c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006868:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	4313      	orrs	r3, r2
 8006872:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	40012c00 	.word	0x40012c00
 80068a0:	40013400 	.word	0x40013400
 80068a4:	40015000 	.word	0x40015000
 80068a8:	40000400 	.word	0x40000400
 80068ac:	40000800 	.word	0x40000800
 80068b0:	40000c00 	.word	0x40000c00
 80068b4:	40014000 	.word	0x40014000

080068b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80068c2:	2300      	movs	r3, #0
 80068c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d101      	bne.n	80068d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80068d0:	2302      	movs	r3, #2
 80068d2:	e078      	b.n	80069c6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	4313      	orrs	r3, r2
 8006904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4313      	orrs	r3, r2
 8006912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	4313      	orrs	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	4313      	orrs	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800693a:	4313      	orrs	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	041b      	lsls	r3, r3, #16
 800694a:	4313      	orrs	r3, r2
 800694c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	69db      	ldr	r3, [r3, #28]
 8006958:	4313      	orrs	r3, r2
 800695a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a1c      	ldr	r2, [pc, #112]	@ (80069d4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d009      	beq.n	800697a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a1b      	ldr	r2, [pc, #108]	@ (80069d8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d004      	beq.n	800697a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a19      	ldr	r2, [pc, #100]	@ (80069dc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d11c      	bne.n	80069b4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006984:	051b      	lsls	r3, r3, #20
 8006986:	4313      	orrs	r3, r2
 8006988:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	4313      	orrs	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b0:	4313      	orrs	r3, r2
 80069b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	40012c00 	.word	0x40012c00
 80069d8:	40013400 	.word	0x40013400
 80069dc:	40015000 	.word	0x40015000

080069e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e042      	b.n	8006b04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d106      	bne.n	8006a96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7fa ff09 	bl	80018a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2224      	movs	r2, #36	@ 0x24
 8006a9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f022 0201 	bic.w	r2, r2, #1
 8006aac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d002      	beq.n	8006abc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 ffd6 	bl	8007a68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 fcd7 	bl	8007470 <UART_SetConfig>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d101      	bne.n	8006acc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e01b      	b.n	8006b04 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ada:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689a      	ldr	r2, [r3, #8]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006aea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f042 0201 	orr.w	r2, r2, #1
 8006afa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f001 f855 	bl	8007bac <UART_CheckIdleState>
 8006b02:	4603      	mov	r3, r0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b08a      	sub	sp, #40	@ 0x28
 8006b10:	af02      	add	r7, sp, #8
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	603b      	str	r3, [r7, #0]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b22:	2b20      	cmp	r3, #32
 8006b24:	d17b      	bne.n	8006c1e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d002      	beq.n	8006b32 <HAL_UART_Transmit+0x26>
 8006b2c:	88fb      	ldrh	r3, [r7, #6]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e074      	b.n	8006c20 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2221      	movs	r2, #33	@ 0x21
 8006b42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b46:	f7fb f877 	bl	8001c38 <HAL_GetTick>
 8006b4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	88fa      	ldrh	r2, [r7, #6]
 8006b50:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	88fa      	ldrh	r2, [r7, #6]
 8006b58:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b64:	d108      	bne.n	8006b78 <HAL_UART_Transmit+0x6c>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d104      	bne.n	8006b78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	61bb      	str	r3, [r7, #24]
 8006b76:	e003      	b.n	8006b80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b80:	e030      	b.n	8006be4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	2180      	movs	r1, #128	@ 0x80
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f001 f8b7 	bl	8007d00 <UART_WaitOnFlagUntilTimeout>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d005      	beq.n	8006ba4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2220      	movs	r2, #32
 8006b9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e03d      	b.n	8006c20 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10b      	bne.n	8006bc2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	881b      	ldrh	r3, [r3, #0]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bb8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	3302      	adds	r3, #2
 8006bbe:	61bb      	str	r3, [r7, #24]
 8006bc0:	e007      	b.n	8006bd2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	781a      	ldrb	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1c8      	bne.n	8006b82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	9300      	str	r3, [sp, #0]
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	2140      	movs	r1, #64	@ 0x40
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f001 f880 	bl	8007d00 <UART_WaitOnFlagUntilTimeout>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d005      	beq.n	8006c12 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2220      	movs	r2, #32
 8006c0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e006      	b.n	8006c20 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2220      	movs	r2, #32
 8006c16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	e000      	b.n	8006c20 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006c1e:	2302      	movs	r3, #2
  }
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3720      	adds	r7, #32
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b091      	sub	sp, #68	@ 0x44
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	4613      	mov	r3, r2
 8006c34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c3c:	2b20      	cmp	r3, #32
 8006c3e:	d178      	bne.n	8006d32 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d002      	beq.n	8006c4c <HAL_UART_Transmit_IT+0x24>
 8006c46:	88fb      	ldrh	r3, [r7, #6]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e071      	b.n	8006d34 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	88fa      	ldrh	r2, [r7, #6]
 8006c5a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	88fa      	ldrh	r2, [r7, #6]
 8006c62:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2221      	movs	r2, #33	@ 0x21
 8006c78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c84:	d12a      	bne.n	8006cdc <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c8e:	d107      	bne.n	8006ca0 <HAL_UART_Transmit_IT+0x78>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d103      	bne.n	8006ca0 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	4a29      	ldr	r2, [pc, #164]	@ (8006d40 <HAL_UART_Transmit_IT+0x118>)
 8006c9c:	679a      	str	r2, [r3, #120]	@ 0x78
 8006c9e:	e002      	b.n	8006ca6 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4a28      	ldr	r2, [pc, #160]	@ (8006d44 <HAL_UART_Transmit_IT+0x11c>)
 8006ca4:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	3308      	adds	r3, #8
 8006cac:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb0:	e853 3f00 	ldrex	r3, [r3]
 8006cb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006cbc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3308      	adds	r3, #8
 8006cc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006cc6:	637a      	str	r2, [r7, #52]	@ 0x34
 8006cc8:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006ccc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006cce:	e841 2300 	strex	r3, r2, [r1]
 8006cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1e5      	bne.n	8006ca6 <HAL_UART_Transmit_IT+0x7e>
 8006cda:	e028      	b.n	8006d2e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ce4:	d107      	bne.n	8006cf6 <HAL_UART_Transmit_IT+0xce>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d103      	bne.n	8006cf6 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	4a15      	ldr	r2, [pc, #84]	@ (8006d48 <HAL_UART_Transmit_IT+0x120>)
 8006cf2:	679a      	str	r2, [r3, #120]	@ 0x78
 8006cf4:	e002      	b.n	8006cfc <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	4a14      	ldr	r2, [pc, #80]	@ (8006d4c <HAL_UART_Transmit_IT+0x124>)
 8006cfa:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	e853 3f00 	ldrex	r3, [r3]
 8006d08:	613b      	str	r3, [r7, #16]
   return(result);
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	461a      	mov	r2, r3
 8006d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d1a:	623b      	str	r3, [r7, #32]
 8006d1c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1e:	69f9      	ldr	r1, [r7, #28]
 8006d20:	6a3a      	ldr	r2, [r7, #32]
 8006d22:	e841 2300 	strex	r3, r2, [r1]
 8006d26:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1e6      	bne.n	8006cfc <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	e000      	b.n	8006d34 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006d32:	2302      	movs	r3, #2
  }
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3744      	adds	r7, #68	@ 0x44
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr
 8006d40:	08008373 	.word	0x08008373
 8006d44:	08008293 	.word	0x08008293
 8006d48:	080081d1 	.word	0x080081d1
 8006d4c:	08008119 	.word	0x08008119

08006d50 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b08a      	sub	sp, #40	@ 0x28
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d64:	2b20      	cmp	r3, #32
 8006d66:	d137      	bne.n	8006dd8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d002      	beq.n	8006d74 <HAL_UART_Receive_IT+0x24>
 8006d6e:	88fb      	ldrh	r3, [r7, #6]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e030      	b.n	8006dda <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a18      	ldr	r2, [pc, #96]	@ (8006de4 <HAL_UART_Receive_IT+0x94>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d01f      	beq.n	8006dc8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d018      	beq.n	8006dc8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	e853 3f00 	ldrex	r3, [r3]
 8006da2:	613b      	str	r3, [r7, #16]
   return(result);
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006daa:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	461a      	mov	r2, r3
 8006db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db4:	623b      	str	r3, [r7, #32]
 8006db6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db8:	69f9      	ldr	r1, [r7, #28]
 8006dba:	6a3a      	ldr	r2, [r7, #32]
 8006dbc:	e841 2300 	strex	r3, r2, [r1]
 8006dc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1e6      	bne.n	8006d96 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006dc8:	88fb      	ldrh	r3, [r7, #6]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	68b9      	ldr	r1, [r7, #8]
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f001 f804 	bl	8007ddc <UART_Start_Receive_IT>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	e000      	b.n	8006dda <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006dd8:	2302      	movs	r3, #2
  }
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3728      	adds	r7, #40	@ 0x28
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	40008000 	.word	0x40008000

08006de8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b0ba      	sub	sp, #232	@ 0xe8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006e12:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006e16:	4013      	ands	r3, r2
 8006e18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006e1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d11b      	bne.n	8006e5c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e28:	f003 0320 	and.w	r3, r3, #32
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d015      	beq.n	8006e5c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e34:	f003 0320 	and.w	r3, r3, #32
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d105      	bne.n	8006e48 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d009      	beq.n	8006e5c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 82e3 	beq.w	8007418 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	4798      	blx	r3
      }
      return;
 8006e5a:	e2dd      	b.n	8007418 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f000 8123 	beq.w	80070ac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006e66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006e6a:	4b8d      	ldr	r3, [pc, #564]	@ (80070a0 <HAL_UART_IRQHandler+0x2b8>)
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d106      	bne.n	8006e80 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006e72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006e76:	4b8b      	ldr	r3, [pc, #556]	@ (80070a4 <HAL_UART_IRQHandler+0x2bc>)
 8006e78:	4013      	ands	r3, r2
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f000 8116 	beq.w	80070ac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e84:	f003 0301 	and.w	r3, r3, #1
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d011      	beq.n	8006eb0 <HAL_UART_IRQHandler+0xc8>
 8006e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00b      	beq.n	8006eb0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ea6:	f043 0201 	orr.w	r2, r3, #1
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eb4:	f003 0302 	and.w	r3, r3, #2
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d011      	beq.n	8006ee0 <HAL_UART_IRQHandler+0xf8>
 8006ebc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00b      	beq.n	8006ee0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2202      	movs	r2, #2
 8006ece:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ed6:	f043 0204 	orr.w	r2, r3, #4
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ee4:	f003 0304 	and.w	r3, r3, #4
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d011      	beq.n	8006f10 <HAL_UART_IRQHandler+0x128>
 8006eec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00b      	beq.n	8006f10 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2204      	movs	r2, #4
 8006efe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f06:	f043 0202 	orr.w	r2, r3, #2
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f14:	f003 0308 	and.w	r3, r3, #8
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d017      	beq.n	8006f4c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f20:	f003 0320 	and.w	r3, r3, #32
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d105      	bne.n	8006f34 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006f28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006f2c:	4b5c      	ldr	r3, [pc, #368]	@ (80070a0 <HAL_UART_IRQHandler+0x2b8>)
 8006f2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00b      	beq.n	8006f4c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2208      	movs	r2, #8
 8006f3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f42:	f043 0208 	orr.w	r2, r3, #8
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d012      	beq.n	8006f7e <HAL_UART_IRQHandler+0x196>
 8006f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00c      	beq.n	8006f7e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f74:	f043 0220 	orr.w	r2, r3, #32
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 8249 	beq.w	800741c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f8e:	f003 0320 	and.w	r3, r3, #32
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d013      	beq.n	8006fbe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f9a:	f003 0320 	and.w	r3, r3, #32
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d105      	bne.n	8006fae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d007      	beq.n	8006fbe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d003      	beq.n	8006fbe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fc4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fd2:	2b40      	cmp	r3, #64	@ 0x40
 8006fd4:	d005      	beq.n	8006fe2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006fd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fda:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d054      	beq.n	800708c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f001 f81c 	bl	8008020 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ff2:	2b40      	cmp	r3, #64	@ 0x40
 8006ff4:	d146      	bne.n	8007084 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	3308      	adds	r3, #8
 8006ffc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007000:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007004:	e853 3f00 	ldrex	r3, [r3]
 8007008:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800700c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007010:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007014:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3308      	adds	r3, #8
 800701e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007022:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007026:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800702e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007032:	e841 2300 	strex	r3, r2, [r1]
 8007036:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800703a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1d9      	bne.n	8006ff6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007048:	2b00      	cmp	r3, #0
 800704a:	d017      	beq.n	800707c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007052:	4a15      	ldr	r2, [pc, #84]	@ (80070a8 <HAL_UART_IRQHandler+0x2c0>)
 8007054:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800705c:	4618      	mov	r0, r3
 800705e:	f7fc fcfb 	bl	8003a58 <HAL_DMA_Abort_IT>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d019      	beq.n	800709c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800706e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007076:	4610      	mov	r0, r2
 8007078:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800707a:	e00f      	b.n	800709c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 f9e1 	bl	8007444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007082:	e00b      	b.n	800709c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f9dd 	bl	8007444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800708a:	e007      	b.n	800709c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f9d9 	bl	8007444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800709a:	e1bf      	b.n	800741c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800709c:	bf00      	nop
    return;
 800709e:	e1bd      	b.n	800741c <HAL_UART_IRQHandler+0x634>
 80070a0:	10000001 	.word	0x10000001
 80070a4:	04000120 	.word	0x04000120
 80070a8:	080080ed 	.word	0x080080ed

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	f040 8153 	bne.w	800735c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80070b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070ba:	f003 0310 	and.w	r3, r3, #16
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f000 814c 	beq.w	800735c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80070c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070c8:	f003 0310 	and.w	r3, r3, #16
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 8145 	beq.w	800735c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2210      	movs	r2, #16
 80070d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070e4:	2b40      	cmp	r3, #64	@ 0x40
 80070e6:	f040 80bb 	bne.w	8007260 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 818f 	beq.w	8007420 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007108:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800710c:	429a      	cmp	r2, r3
 800710e:	f080 8187 	bcs.w	8007420 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007118:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0320 	and.w	r3, r3, #32
 800712a:	2b00      	cmp	r3, #0
 800712c:	f040 8087 	bne.w	800723e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007138:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800713c:	e853 3f00 	ldrex	r3, [r3]
 8007140:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007144:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007148:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800714c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	461a      	mov	r2, r3
 8007156:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800715a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800715e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007162:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007166:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800716a:	e841 2300 	strex	r3, r2, [r1]
 800716e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007172:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1da      	bne.n	8007130 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	3308      	adds	r3, #8
 8007180:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007182:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007184:	e853 3f00 	ldrex	r3, [r3]
 8007188:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800718a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800718c:	f023 0301 	bic.w	r3, r3, #1
 8007190:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	3308      	adds	r3, #8
 800719a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800719e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80071a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80071a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80071aa:	e841 2300 	strex	r3, r2, [r1]
 80071ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80071b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1e1      	bne.n	800717a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	3308      	adds	r3, #8
 80071bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071c0:	e853 3f00 	ldrex	r3, [r3]
 80071c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80071c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	3308      	adds	r3, #8
 80071d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80071da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80071dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80071e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80071e2:	e841 2300 	strex	r3, r2, [r1]
 80071e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80071e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1e3      	bne.n	80071b6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2220      	movs	r2, #32
 80071f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007202:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007204:	e853 3f00 	ldrex	r3, [r3]
 8007208:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800720a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800720c:	f023 0310 	bic.w	r3, r3, #16
 8007210:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	461a      	mov	r2, r3
 800721a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800721e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007220:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007222:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007224:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007226:	e841 2300 	strex	r3, r2, [r1]
 800722a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800722c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1e4      	bne.n	80071fc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007238:	4618      	mov	r0, r3
 800723a:	f7fc fbb4 	bl	80039a6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2202      	movs	r2, #2
 8007242:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007250:	b29b      	uxth	r3, r3
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	b29b      	uxth	r3, r3
 8007256:	4619      	mov	r1, r3
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f8fd 	bl	8007458 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800725e:	e0df      	b.n	8007420 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800726c:	b29b      	uxth	r3, r3
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800727a:	b29b      	uxth	r3, r3
 800727c:	2b00      	cmp	r3, #0
 800727e:	f000 80d1 	beq.w	8007424 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007282:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007286:	2b00      	cmp	r3, #0
 8007288:	f000 80cc 	beq.w	8007424 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007294:	e853 3f00 	ldrex	r3, [r3]
 8007298:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800729a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800729c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	461a      	mov	r2, r3
 80072aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80072ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80072b0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80072b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072b6:	e841 2300 	strex	r3, r2, [r1]
 80072ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1e4      	bne.n	800728c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	3308      	adds	r3, #8
 80072c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072cc:	e853 3f00 	ldrex	r3, [r3]
 80072d0:	623b      	str	r3, [r7, #32]
   return(result);
 80072d2:	6a3b      	ldr	r3, [r7, #32]
 80072d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072d8:	f023 0301 	bic.w	r3, r3, #1
 80072dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	3308      	adds	r3, #8
 80072e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80072ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80072ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072f2:	e841 2300 	strex	r3, r2, [r1]
 80072f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1e1      	bne.n	80072c2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2220      	movs	r2, #32
 8007302:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	e853 3f00 	ldrex	r3, [r3]
 800731e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f023 0310 	bic.w	r3, r3, #16
 8007326:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	461a      	mov	r2, r3
 8007330:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007334:	61fb      	str	r3, [r7, #28]
 8007336:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007338:	69b9      	ldr	r1, [r7, #24]
 800733a:	69fa      	ldr	r2, [r7, #28]
 800733c:	e841 2300 	strex	r3, r2, [r1]
 8007340:	617b      	str	r3, [r7, #20]
   return(result);
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1e4      	bne.n	8007312 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2202      	movs	r2, #2
 800734c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800734e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007352:	4619      	mov	r1, r3
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f87f 	bl	8007458 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800735a:	e063      	b.n	8007424 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800735c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007360:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00e      	beq.n	8007386 <HAL_UART_IRQHandler+0x59e>
 8007368:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800736c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007370:	2b00      	cmp	r3, #0
 8007372:	d008      	beq.n	8007386 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800737c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f001 fdb4 	bl	8008eec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007384:	e051      	b.n	800742a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800738a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800738e:	2b00      	cmp	r3, #0
 8007390:	d014      	beq.n	80073bc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800739a:	2b00      	cmp	r3, #0
 800739c:	d105      	bne.n	80073aa <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800739e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d008      	beq.n	80073bc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d03a      	beq.n	8007428 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	4798      	blx	r3
    }
    return;
 80073ba:	e035      	b.n	8007428 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80073bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d009      	beq.n	80073dc <HAL_UART_IRQHandler+0x5f4>
 80073c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f001 f841 	bl	800845c <UART_EndTransmit_IT>
    return;
 80073da:	e026      	b.n	800742a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80073dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d009      	beq.n	80073fc <HAL_UART_IRQHandler+0x614>
 80073e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073ec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d003      	beq.n	80073fc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f001 fd8d 	bl	8008f14 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80073fa:	e016      	b.n	800742a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80073fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007400:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d010      	beq.n	800742a <HAL_UART_IRQHandler+0x642>
 8007408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800740c:	2b00      	cmp	r3, #0
 800740e:	da0c      	bge.n	800742a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f001 fd75 	bl	8008f00 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007416:	e008      	b.n	800742a <HAL_UART_IRQHandler+0x642>
      return;
 8007418:	bf00      	nop
 800741a:	e006      	b.n	800742a <HAL_UART_IRQHandler+0x642>
    return;
 800741c:	bf00      	nop
 800741e:	e004      	b.n	800742a <HAL_UART_IRQHandler+0x642>
      return;
 8007420:	bf00      	nop
 8007422:	e002      	b.n	800742a <HAL_UART_IRQHandler+0x642>
      return;
 8007424:	bf00      	nop
 8007426:	e000      	b.n	800742a <HAL_UART_IRQHandler+0x642>
    return;
 8007428:	bf00      	nop
  }
}
 800742a:	37e8      	adds	r7, #232	@ 0xe8
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	460b      	mov	r3, r1
 8007462:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007474:	b08c      	sub	sp, #48	@ 0x30
 8007476:	af00      	add	r7, sp, #0
 8007478:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800747a:	2300      	movs	r3, #0
 800747c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	431a      	orrs	r2, r3
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	431a      	orrs	r2, r3
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	69db      	ldr	r3, [r3, #28]
 8007494:	4313      	orrs	r3, r2
 8007496:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	4baa      	ldr	r3, [pc, #680]	@ (8007748 <UART_SetConfig+0x2d8>)
 80074a0:	4013      	ands	r3, r2
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	6812      	ldr	r2, [r2, #0]
 80074a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074a8:	430b      	orrs	r3, r1
 80074aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	68da      	ldr	r2, [r3, #12]
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	430a      	orrs	r2, r1
 80074c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a9f      	ldr	r2, [pc, #636]	@ (800774c <UART_SetConfig+0x2dc>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d004      	beq.n	80074dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	6a1b      	ldr	r3, [r3, #32]
 80074d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074d8:	4313      	orrs	r3, r2
 80074da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80074e6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	6812      	ldr	r2, [r2, #0]
 80074ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074f0:	430b      	orrs	r3, r1
 80074f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074fa:	f023 010f 	bic.w	r1, r3, #15
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	430a      	orrs	r2, r1
 8007508:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a90      	ldr	r2, [pc, #576]	@ (8007750 <UART_SetConfig+0x2e0>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d125      	bne.n	8007560 <UART_SetConfig+0xf0>
 8007514:	4b8f      	ldr	r3, [pc, #572]	@ (8007754 <UART_SetConfig+0x2e4>)
 8007516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800751a:	f003 0303 	and.w	r3, r3, #3
 800751e:	2b03      	cmp	r3, #3
 8007520:	d81a      	bhi.n	8007558 <UART_SetConfig+0xe8>
 8007522:	a201      	add	r2, pc, #4	@ (adr r2, 8007528 <UART_SetConfig+0xb8>)
 8007524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007528:	08007539 	.word	0x08007539
 800752c:	08007549 	.word	0x08007549
 8007530:	08007541 	.word	0x08007541
 8007534:	08007551 	.word	0x08007551
 8007538:	2301      	movs	r3, #1
 800753a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800753e:	e116      	b.n	800776e <UART_SetConfig+0x2fe>
 8007540:	2302      	movs	r3, #2
 8007542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007546:	e112      	b.n	800776e <UART_SetConfig+0x2fe>
 8007548:	2304      	movs	r3, #4
 800754a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800754e:	e10e      	b.n	800776e <UART_SetConfig+0x2fe>
 8007550:	2308      	movs	r3, #8
 8007552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007556:	e10a      	b.n	800776e <UART_SetConfig+0x2fe>
 8007558:	2310      	movs	r3, #16
 800755a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800755e:	e106      	b.n	800776e <UART_SetConfig+0x2fe>
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a7c      	ldr	r2, [pc, #496]	@ (8007758 <UART_SetConfig+0x2e8>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d138      	bne.n	80075dc <UART_SetConfig+0x16c>
 800756a:	4b7a      	ldr	r3, [pc, #488]	@ (8007754 <UART_SetConfig+0x2e4>)
 800756c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007570:	f003 030c 	and.w	r3, r3, #12
 8007574:	2b0c      	cmp	r3, #12
 8007576:	d82d      	bhi.n	80075d4 <UART_SetConfig+0x164>
 8007578:	a201      	add	r2, pc, #4	@ (adr r2, 8007580 <UART_SetConfig+0x110>)
 800757a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757e:	bf00      	nop
 8007580:	080075b5 	.word	0x080075b5
 8007584:	080075d5 	.word	0x080075d5
 8007588:	080075d5 	.word	0x080075d5
 800758c:	080075d5 	.word	0x080075d5
 8007590:	080075c5 	.word	0x080075c5
 8007594:	080075d5 	.word	0x080075d5
 8007598:	080075d5 	.word	0x080075d5
 800759c:	080075d5 	.word	0x080075d5
 80075a0:	080075bd 	.word	0x080075bd
 80075a4:	080075d5 	.word	0x080075d5
 80075a8:	080075d5 	.word	0x080075d5
 80075ac:	080075d5 	.word	0x080075d5
 80075b0:	080075cd 	.word	0x080075cd
 80075b4:	2300      	movs	r3, #0
 80075b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075ba:	e0d8      	b.n	800776e <UART_SetConfig+0x2fe>
 80075bc:	2302      	movs	r3, #2
 80075be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075c2:	e0d4      	b.n	800776e <UART_SetConfig+0x2fe>
 80075c4:	2304      	movs	r3, #4
 80075c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075ca:	e0d0      	b.n	800776e <UART_SetConfig+0x2fe>
 80075cc:	2308      	movs	r3, #8
 80075ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075d2:	e0cc      	b.n	800776e <UART_SetConfig+0x2fe>
 80075d4:	2310      	movs	r3, #16
 80075d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075da:	e0c8      	b.n	800776e <UART_SetConfig+0x2fe>
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a5e      	ldr	r2, [pc, #376]	@ (800775c <UART_SetConfig+0x2ec>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d125      	bne.n	8007632 <UART_SetConfig+0x1c2>
 80075e6:	4b5b      	ldr	r3, [pc, #364]	@ (8007754 <UART_SetConfig+0x2e4>)
 80075e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80075f0:	2b30      	cmp	r3, #48	@ 0x30
 80075f2:	d016      	beq.n	8007622 <UART_SetConfig+0x1b2>
 80075f4:	2b30      	cmp	r3, #48	@ 0x30
 80075f6:	d818      	bhi.n	800762a <UART_SetConfig+0x1ba>
 80075f8:	2b20      	cmp	r3, #32
 80075fa:	d00a      	beq.n	8007612 <UART_SetConfig+0x1a2>
 80075fc:	2b20      	cmp	r3, #32
 80075fe:	d814      	bhi.n	800762a <UART_SetConfig+0x1ba>
 8007600:	2b00      	cmp	r3, #0
 8007602:	d002      	beq.n	800760a <UART_SetConfig+0x19a>
 8007604:	2b10      	cmp	r3, #16
 8007606:	d008      	beq.n	800761a <UART_SetConfig+0x1aa>
 8007608:	e00f      	b.n	800762a <UART_SetConfig+0x1ba>
 800760a:	2300      	movs	r3, #0
 800760c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007610:	e0ad      	b.n	800776e <UART_SetConfig+0x2fe>
 8007612:	2302      	movs	r3, #2
 8007614:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007618:	e0a9      	b.n	800776e <UART_SetConfig+0x2fe>
 800761a:	2304      	movs	r3, #4
 800761c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007620:	e0a5      	b.n	800776e <UART_SetConfig+0x2fe>
 8007622:	2308      	movs	r3, #8
 8007624:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007628:	e0a1      	b.n	800776e <UART_SetConfig+0x2fe>
 800762a:	2310      	movs	r3, #16
 800762c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007630:	e09d      	b.n	800776e <UART_SetConfig+0x2fe>
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a4a      	ldr	r2, [pc, #296]	@ (8007760 <UART_SetConfig+0x2f0>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d125      	bne.n	8007688 <UART_SetConfig+0x218>
 800763c:	4b45      	ldr	r3, [pc, #276]	@ (8007754 <UART_SetConfig+0x2e4>)
 800763e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007642:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007646:	2bc0      	cmp	r3, #192	@ 0xc0
 8007648:	d016      	beq.n	8007678 <UART_SetConfig+0x208>
 800764a:	2bc0      	cmp	r3, #192	@ 0xc0
 800764c:	d818      	bhi.n	8007680 <UART_SetConfig+0x210>
 800764e:	2b80      	cmp	r3, #128	@ 0x80
 8007650:	d00a      	beq.n	8007668 <UART_SetConfig+0x1f8>
 8007652:	2b80      	cmp	r3, #128	@ 0x80
 8007654:	d814      	bhi.n	8007680 <UART_SetConfig+0x210>
 8007656:	2b00      	cmp	r3, #0
 8007658:	d002      	beq.n	8007660 <UART_SetConfig+0x1f0>
 800765a:	2b40      	cmp	r3, #64	@ 0x40
 800765c:	d008      	beq.n	8007670 <UART_SetConfig+0x200>
 800765e:	e00f      	b.n	8007680 <UART_SetConfig+0x210>
 8007660:	2300      	movs	r3, #0
 8007662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007666:	e082      	b.n	800776e <UART_SetConfig+0x2fe>
 8007668:	2302      	movs	r3, #2
 800766a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800766e:	e07e      	b.n	800776e <UART_SetConfig+0x2fe>
 8007670:	2304      	movs	r3, #4
 8007672:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007676:	e07a      	b.n	800776e <UART_SetConfig+0x2fe>
 8007678:	2308      	movs	r3, #8
 800767a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800767e:	e076      	b.n	800776e <UART_SetConfig+0x2fe>
 8007680:	2310      	movs	r3, #16
 8007682:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007686:	e072      	b.n	800776e <UART_SetConfig+0x2fe>
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a35      	ldr	r2, [pc, #212]	@ (8007764 <UART_SetConfig+0x2f4>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d12a      	bne.n	80076e8 <UART_SetConfig+0x278>
 8007692:	4b30      	ldr	r3, [pc, #192]	@ (8007754 <UART_SetConfig+0x2e4>)
 8007694:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007698:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800769c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076a0:	d01a      	beq.n	80076d8 <UART_SetConfig+0x268>
 80076a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076a6:	d81b      	bhi.n	80076e0 <UART_SetConfig+0x270>
 80076a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076ac:	d00c      	beq.n	80076c8 <UART_SetConfig+0x258>
 80076ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076b2:	d815      	bhi.n	80076e0 <UART_SetConfig+0x270>
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d003      	beq.n	80076c0 <UART_SetConfig+0x250>
 80076b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076bc:	d008      	beq.n	80076d0 <UART_SetConfig+0x260>
 80076be:	e00f      	b.n	80076e0 <UART_SetConfig+0x270>
 80076c0:	2300      	movs	r3, #0
 80076c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076c6:	e052      	b.n	800776e <UART_SetConfig+0x2fe>
 80076c8:	2302      	movs	r3, #2
 80076ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076ce:	e04e      	b.n	800776e <UART_SetConfig+0x2fe>
 80076d0:	2304      	movs	r3, #4
 80076d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076d6:	e04a      	b.n	800776e <UART_SetConfig+0x2fe>
 80076d8:	2308      	movs	r3, #8
 80076da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076de:	e046      	b.n	800776e <UART_SetConfig+0x2fe>
 80076e0:	2310      	movs	r3, #16
 80076e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076e6:	e042      	b.n	800776e <UART_SetConfig+0x2fe>
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a17      	ldr	r2, [pc, #92]	@ (800774c <UART_SetConfig+0x2dc>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d13a      	bne.n	8007768 <UART_SetConfig+0x2f8>
 80076f2:	4b18      	ldr	r3, [pc, #96]	@ (8007754 <UART_SetConfig+0x2e4>)
 80076f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076f8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80076fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007700:	d01a      	beq.n	8007738 <UART_SetConfig+0x2c8>
 8007702:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007706:	d81b      	bhi.n	8007740 <UART_SetConfig+0x2d0>
 8007708:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800770c:	d00c      	beq.n	8007728 <UART_SetConfig+0x2b8>
 800770e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007712:	d815      	bhi.n	8007740 <UART_SetConfig+0x2d0>
 8007714:	2b00      	cmp	r3, #0
 8007716:	d003      	beq.n	8007720 <UART_SetConfig+0x2b0>
 8007718:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800771c:	d008      	beq.n	8007730 <UART_SetConfig+0x2c0>
 800771e:	e00f      	b.n	8007740 <UART_SetConfig+0x2d0>
 8007720:	2300      	movs	r3, #0
 8007722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007726:	e022      	b.n	800776e <UART_SetConfig+0x2fe>
 8007728:	2302      	movs	r3, #2
 800772a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800772e:	e01e      	b.n	800776e <UART_SetConfig+0x2fe>
 8007730:	2304      	movs	r3, #4
 8007732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007736:	e01a      	b.n	800776e <UART_SetConfig+0x2fe>
 8007738:	2308      	movs	r3, #8
 800773a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800773e:	e016      	b.n	800776e <UART_SetConfig+0x2fe>
 8007740:	2310      	movs	r3, #16
 8007742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007746:	e012      	b.n	800776e <UART_SetConfig+0x2fe>
 8007748:	cfff69f3 	.word	0xcfff69f3
 800774c:	40008000 	.word	0x40008000
 8007750:	40013800 	.word	0x40013800
 8007754:	40021000 	.word	0x40021000
 8007758:	40004400 	.word	0x40004400
 800775c:	40004800 	.word	0x40004800
 8007760:	40004c00 	.word	0x40004c00
 8007764:	40005000 	.word	0x40005000
 8007768:	2310      	movs	r3, #16
 800776a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4aae      	ldr	r2, [pc, #696]	@ (8007a2c <UART_SetConfig+0x5bc>)
 8007774:	4293      	cmp	r3, r2
 8007776:	f040 8097 	bne.w	80078a8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800777a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800777e:	2b08      	cmp	r3, #8
 8007780:	d823      	bhi.n	80077ca <UART_SetConfig+0x35a>
 8007782:	a201      	add	r2, pc, #4	@ (adr r2, 8007788 <UART_SetConfig+0x318>)
 8007784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007788:	080077ad 	.word	0x080077ad
 800778c:	080077cb 	.word	0x080077cb
 8007790:	080077b5 	.word	0x080077b5
 8007794:	080077cb 	.word	0x080077cb
 8007798:	080077bb 	.word	0x080077bb
 800779c:	080077cb 	.word	0x080077cb
 80077a0:	080077cb 	.word	0x080077cb
 80077a4:	080077cb 	.word	0x080077cb
 80077a8:	080077c3 	.word	0x080077c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077ac:	f7fd fa38 	bl	8004c20 <HAL_RCC_GetPCLK1Freq>
 80077b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077b2:	e010      	b.n	80077d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077b4:	4b9e      	ldr	r3, [pc, #632]	@ (8007a30 <UART_SetConfig+0x5c0>)
 80077b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80077b8:	e00d      	b.n	80077d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077ba:	f7fd f9c3 	bl	8004b44 <HAL_RCC_GetSysClockFreq>
 80077be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80077c0:	e009      	b.n	80077d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80077c8:	e005      	b.n	80077d6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80077ca:	2300      	movs	r3, #0
 80077cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80077d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80077d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 8130 	beq.w	8007a3e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077e2:	4a94      	ldr	r2, [pc, #592]	@ (8007a34 <UART_SetConfig+0x5c4>)
 80077e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077e8:	461a      	mov	r2, r3
 80077ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80077f0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	685a      	ldr	r2, [r3, #4]
 80077f6:	4613      	mov	r3, r2
 80077f8:	005b      	lsls	r3, r3, #1
 80077fa:	4413      	add	r3, r2
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d305      	bcc.n	800780e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007808:	69ba      	ldr	r2, [r7, #24]
 800780a:	429a      	cmp	r2, r3
 800780c:	d903      	bls.n	8007816 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007814:	e113      	b.n	8007a3e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007818:	2200      	movs	r2, #0
 800781a:	60bb      	str	r3, [r7, #8]
 800781c:	60fa      	str	r2, [r7, #12]
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007822:	4a84      	ldr	r2, [pc, #528]	@ (8007a34 <UART_SetConfig+0x5c4>)
 8007824:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007828:	b29b      	uxth	r3, r3
 800782a:	2200      	movs	r2, #0
 800782c:	603b      	str	r3, [r7, #0]
 800782e:	607a      	str	r2, [r7, #4]
 8007830:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007834:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007838:	f7f9 f934 	bl	8000aa4 <__aeabi_uldivmod>
 800783c:	4602      	mov	r2, r0
 800783e:	460b      	mov	r3, r1
 8007840:	4610      	mov	r0, r2
 8007842:	4619      	mov	r1, r3
 8007844:	f04f 0200 	mov.w	r2, #0
 8007848:	f04f 0300 	mov.w	r3, #0
 800784c:	020b      	lsls	r3, r1, #8
 800784e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007852:	0202      	lsls	r2, r0, #8
 8007854:	6979      	ldr	r1, [r7, #20]
 8007856:	6849      	ldr	r1, [r1, #4]
 8007858:	0849      	lsrs	r1, r1, #1
 800785a:	2000      	movs	r0, #0
 800785c:	460c      	mov	r4, r1
 800785e:	4605      	mov	r5, r0
 8007860:	eb12 0804 	adds.w	r8, r2, r4
 8007864:	eb43 0905 	adc.w	r9, r3, r5
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	469a      	mov	sl, r3
 8007870:	4693      	mov	fp, r2
 8007872:	4652      	mov	r2, sl
 8007874:	465b      	mov	r3, fp
 8007876:	4640      	mov	r0, r8
 8007878:	4649      	mov	r1, r9
 800787a:	f7f9 f913 	bl	8000aa4 <__aeabi_uldivmod>
 800787e:	4602      	mov	r2, r0
 8007880:	460b      	mov	r3, r1
 8007882:	4613      	mov	r3, r2
 8007884:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007886:	6a3b      	ldr	r3, [r7, #32]
 8007888:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800788c:	d308      	bcc.n	80078a0 <UART_SetConfig+0x430>
 800788e:	6a3b      	ldr	r3, [r7, #32]
 8007890:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007894:	d204      	bcs.n	80078a0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6a3a      	ldr	r2, [r7, #32]
 800789c:	60da      	str	r2, [r3, #12]
 800789e:	e0ce      	b.n	8007a3e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80078a6:	e0ca      	b.n	8007a3e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	69db      	ldr	r3, [r3, #28]
 80078ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078b0:	d166      	bne.n	8007980 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80078b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80078b6:	2b08      	cmp	r3, #8
 80078b8:	d827      	bhi.n	800790a <UART_SetConfig+0x49a>
 80078ba:	a201      	add	r2, pc, #4	@ (adr r2, 80078c0 <UART_SetConfig+0x450>)
 80078bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c0:	080078e5 	.word	0x080078e5
 80078c4:	080078ed 	.word	0x080078ed
 80078c8:	080078f5 	.word	0x080078f5
 80078cc:	0800790b 	.word	0x0800790b
 80078d0:	080078fb 	.word	0x080078fb
 80078d4:	0800790b 	.word	0x0800790b
 80078d8:	0800790b 	.word	0x0800790b
 80078dc:	0800790b 	.word	0x0800790b
 80078e0:	08007903 	.word	0x08007903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078e4:	f7fd f99c 	bl	8004c20 <HAL_RCC_GetPCLK1Freq>
 80078e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80078ea:	e014      	b.n	8007916 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078ec:	f7fd f9ae 	bl	8004c4c <HAL_RCC_GetPCLK2Freq>
 80078f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80078f2:	e010      	b.n	8007916 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078f4:	4b4e      	ldr	r3, [pc, #312]	@ (8007a30 <UART_SetConfig+0x5c0>)
 80078f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80078f8:	e00d      	b.n	8007916 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078fa:	f7fd f923 	bl	8004b44 <HAL_RCC_GetSysClockFreq>
 80078fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007900:	e009      	b.n	8007916 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007902:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007906:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007908:	e005      	b.n	8007916 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800790a:	2300      	movs	r3, #0
 800790c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007914:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 8090 	beq.w	8007a3e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007922:	4a44      	ldr	r2, [pc, #272]	@ (8007a34 <UART_SetConfig+0x5c4>)
 8007924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007928:	461a      	mov	r2, r3
 800792a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007930:	005a      	lsls	r2, r3, #1
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	085b      	lsrs	r3, r3, #1
 8007938:	441a      	add	r2, r3
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007942:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007944:	6a3b      	ldr	r3, [r7, #32]
 8007946:	2b0f      	cmp	r3, #15
 8007948:	d916      	bls.n	8007978 <UART_SetConfig+0x508>
 800794a:	6a3b      	ldr	r3, [r7, #32]
 800794c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007950:	d212      	bcs.n	8007978 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007952:	6a3b      	ldr	r3, [r7, #32]
 8007954:	b29b      	uxth	r3, r3
 8007956:	f023 030f 	bic.w	r3, r3, #15
 800795a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	085b      	lsrs	r3, r3, #1
 8007960:	b29b      	uxth	r3, r3
 8007962:	f003 0307 	and.w	r3, r3, #7
 8007966:	b29a      	uxth	r2, r3
 8007968:	8bfb      	ldrh	r3, [r7, #30]
 800796a:	4313      	orrs	r3, r2
 800796c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	8bfa      	ldrh	r2, [r7, #30]
 8007974:	60da      	str	r2, [r3, #12]
 8007976:	e062      	b.n	8007a3e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800797e:	e05e      	b.n	8007a3e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007980:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007984:	2b08      	cmp	r3, #8
 8007986:	d828      	bhi.n	80079da <UART_SetConfig+0x56a>
 8007988:	a201      	add	r2, pc, #4	@ (adr r2, 8007990 <UART_SetConfig+0x520>)
 800798a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800798e:	bf00      	nop
 8007990:	080079b5 	.word	0x080079b5
 8007994:	080079bd 	.word	0x080079bd
 8007998:	080079c5 	.word	0x080079c5
 800799c:	080079db 	.word	0x080079db
 80079a0:	080079cb 	.word	0x080079cb
 80079a4:	080079db 	.word	0x080079db
 80079a8:	080079db 	.word	0x080079db
 80079ac:	080079db 	.word	0x080079db
 80079b0:	080079d3 	.word	0x080079d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079b4:	f7fd f934 	bl	8004c20 <HAL_RCC_GetPCLK1Freq>
 80079b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80079ba:	e014      	b.n	80079e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079bc:	f7fd f946 	bl	8004c4c <HAL_RCC_GetPCLK2Freq>
 80079c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80079c2:	e010      	b.n	80079e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079c4:	4b1a      	ldr	r3, [pc, #104]	@ (8007a30 <UART_SetConfig+0x5c0>)
 80079c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80079c8:	e00d      	b.n	80079e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079ca:	f7fd f8bb 	bl	8004b44 <HAL_RCC_GetSysClockFreq>
 80079ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80079d0:	e009      	b.n	80079e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80079d8:	e005      	b.n	80079e6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80079da:	2300      	movs	r3, #0
 80079dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80079e4:	bf00      	nop
    }

    if (pclk != 0U)
 80079e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d028      	beq.n	8007a3e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f0:	4a10      	ldr	r2, [pc, #64]	@ (8007a34 <UART_SetConfig+0x5c4>)
 80079f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079f6:	461a      	mov	r2, r3
 80079f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	085b      	lsrs	r3, r3, #1
 8007a04:	441a      	add	r2, r3
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a10:	6a3b      	ldr	r3, [r7, #32]
 8007a12:	2b0f      	cmp	r3, #15
 8007a14:	d910      	bls.n	8007a38 <UART_SetConfig+0x5c8>
 8007a16:	6a3b      	ldr	r3, [r7, #32]
 8007a18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a1c:	d20c      	bcs.n	8007a38 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a1e:	6a3b      	ldr	r3, [r7, #32]
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	60da      	str	r2, [r3, #12]
 8007a28:	e009      	b.n	8007a3e <UART_SetConfig+0x5ce>
 8007a2a:	bf00      	nop
 8007a2c:	40008000 	.word	0x40008000
 8007a30:	00f42400 	.word	0x00f42400
 8007a34:	080091b8 	.word	0x080091b8
      }
      else
      {
        ret = HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	2200      	movs	r2, #0
 8007a52:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	2200      	movs	r2, #0
 8007a58:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007a5a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3730      	adds	r7, #48	@ 0x30
 8007a62:	46bd      	mov	sp, r7
 8007a64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007a68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a74:	f003 0308 	and.w	r3, r3, #8
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00a      	beq.n	8007a92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a96:	f003 0301 	and.w	r3, r3, #1
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00a      	beq.n	8007ab4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ab8:	f003 0302 	and.w	r3, r3, #2
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00a      	beq.n	8007ad6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ada:	f003 0304 	and.w	r3, r3, #4
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00a      	beq.n	8007af8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	430a      	orrs	r2, r1
 8007af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007afc:	f003 0310 	and.w	r3, r3, #16
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00a      	beq.n	8007b1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b1e:	f003 0320 	and.w	r3, r3, #32
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00a      	beq.n	8007b3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	430a      	orrs	r2, r1
 8007b3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d01a      	beq.n	8007b7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b66:	d10a      	bne.n	8007b7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00a      	beq.n	8007ba0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	430a      	orrs	r2, r1
 8007b9e:	605a      	str	r2, [r3, #4]
  }
}
 8007ba0:	bf00      	nop
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b098      	sub	sp, #96	@ 0x60
 8007bb0:	af02      	add	r7, sp, #8
 8007bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007bbc:	f7fa f83c 	bl	8001c38 <HAL_GetTick>
 8007bc0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 0308 	and.w	r3, r3, #8
 8007bcc:	2b08      	cmp	r3, #8
 8007bce:	d12f      	bne.n	8007c30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f88e 	bl	8007d00 <UART_WaitOnFlagUntilTimeout>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d022      	beq.n	8007c30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf2:	e853 3f00 	ldrex	r3, [r3]
 8007bf6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007bfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	461a      	mov	r2, r3
 8007c06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c08:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c0a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c10:	e841 2300 	strex	r3, r2, [r1]
 8007c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1e6      	bne.n	8007bea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2220      	movs	r2, #32
 8007c20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e063      	b.n	8007cf8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0304 	and.w	r3, r3, #4
 8007c3a:	2b04      	cmp	r3, #4
 8007c3c:	d149      	bne.n	8007cd2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c3e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c42:	9300      	str	r3, [sp, #0]
 8007c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c46:	2200      	movs	r2, #0
 8007c48:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f857 	bl	8007d00 <UART_WaitOnFlagUntilTimeout>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d03c      	beq.n	8007cd2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c60:	e853 3f00 	ldrex	r3, [r3]
 8007c64:	623b      	str	r3, [r7, #32]
   return(result);
 8007c66:	6a3b      	ldr	r3, [r7, #32]
 8007c68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	461a      	mov	r2, r3
 8007c74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c76:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c78:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c7e:	e841 2300 	strex	r3, r2, [r1]
 8007c82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1e6      	bne.n	8007c58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3308      	adds	r3, #8
 8007c90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	e853 3f00 	ldrex	r3, [r3]
 8007c98:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f023 0301 	bic.w	r3, r3, #1
 8007ca0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	3308      	adds	r3, #8
 8007ca8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007caa:	61fa      	str	r2, [r7, #28]
 8007cac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cae:	69b9      	ldr	r1, [r7, #24]
 8007cb0:	69fa      	ldr	r2, [r7, #28]
 8007cb2:	e841 2300 	strex	r3, r2, [r1]
 8007cb6:	617b      	str	r3, [r7, #20]
   return(result);
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e5      	bne.n	8007c8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2220      	movs	r2, #32
 8007cc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	e012      	b.n	8007cf8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2220      	movs	r2, #32
 8007cd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2220      	movs	r2, #32
 8007cde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3758      	adds	r7, #88	@ 0x58
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	603b      	str	r3, [r7, #0]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d10:	e04f      	b.n	8007db2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d18:	d04b      	beq.n	8007db2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d1a:	f7f9 ff8d 	bl	8001c38 <HAL_GetTick>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	69ba      	ldr	r2, [r7, #24]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d302      	bcc.n	8007d30 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d101      	bne.n	8007d34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d30:	2303      	movs	r3, #3
 8007d32:	e04e      	b.n	8007dd2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f003 0304 	and.w	r3, r3, #4
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d037      	beq.n	8007db2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	2b80      	cmp	r3, #128	@ 0x80
 8007d46:	d034      	beq.n	8007db2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2b40      	cmp	r3, #64	@ 0x40
 8007d4c:	d031      	beq.n	8007db2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	69db      	ldr	r3, [r3, #28]
 8007d54:	f003 0308 	and.w	r3, r3, #8
 8007d58:	2b08      	cmp	r3, #8
 8007d5a:	d110      	bne.n	8007d7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2208      	movs	r2, #8
 8007d62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f000 f95b 	bl	8008020 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2208      	movs	r2, #8
 8007d6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e029      	b.n	8007dd2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	69db      	ldr	r3, [r3, #28]
 8007d84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d8c:	d111      	bne.n	8007db2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f000 f941 	bl	8008020 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2220      	movs	r2, #32
 8007da2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	e00f      	b.n	8007dd2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	69da      	ldr	r2, [r3, #28]
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	4013      	ands	r3, r2
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	bf0c      	ite	eq
 8007dc2:	2301      	moveq	r3, #1
 8007dc4:	2300      	movne	r3, #0
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	461a      	mov	r2, r3
 8007dca:	79fb      	ldrb	r3, [r7, #7]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d0a0      	beq.n	8007d12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
	...

08007ddc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b0a3      	sub	sp, #140	@ 0x8c
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	4613      	mov	r3, r2
 8007de8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	88fa      	ldrh	r2, [r7, #6]
 8007df4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	88fa      	ldrh	r2, [r7, #6]
 8007dfc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2200      	movs	r2, #0
 8007e04:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e0e:	d10e      	bne.n	8007e2e <UART_Start_Receive_IT+0x52>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d105      	bne.n	8007e24 <UART_Start_Receive_IT+0x48>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007e1e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007e22:	e02d      	b.n	8007e80 <UART_Start_Receive_IT+0xa4>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	22ff      	movs	r2, #255	@ 0xff
 8007e28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007e2c:	e028      	b.n	8007e80 <UART_Start_Receive_IT+0xa4>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d10d      	bne.n	8007e52 <UART_Start_Receive_IT+0x76>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d104      	bne.n	8007e48 <UART_Start_Receive_IT+0x6c>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	22ff      	movs	r2, #255	@ 0xff
 8007e42:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007e46:	e01b      	b.n	8007e80 <UART_Start_Receive_IT+0xa4>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	227f      	movs	r2, #127	@ 0x7f
 8007e4c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007e50:	e016      	b.n	8007e80 <UART_Start_Receive_IT+0xa4>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e5a:	d10d      	bne.n	8007e78 <UART_Start_Receive_IT+0x9c>
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d104      	bne.n	8007e6e <UART_Start_Receive_IT+0x92>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	227f      	movs	r2, #127	@ 0x7f
 8007e68:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007e6c:	e008      	b.n	8007e80 <UART_Start_Receive_IT+0xa4>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	223f      	movs	r2, #63	@ 0x3f
 8007e72:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007e76:	e003      	b.n	8007e80 <UART_Start_Receive_IT+0xa4>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2222      	movs	r2, #34	@ 0x22
 8007e8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	3308      	adds	r3, #8
 8007e96:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e9a:	e853 3f00 	ldrex	r3, [r3]
 8007e9e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007ea0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ea2:	f043 0301 	orr.w	r3, r3, #1
 8007ea6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	3308      	adds	r3, #8
 8007eb0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007eb4:	673a      	str	r2, [r7, #112]	@ 0x70
 8007eb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007eba:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007ebc:	e841 2300 	strex	r3, r2, [r1]
 8007ec0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007ec2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1e3      	bne.n	8007e90 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ecc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ed0:	d14f      	bne.n	8007f72 <UART_Start_Receive_IT+0x196>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007ed8:	88fa      	ldrh	r2, [r7, #6]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d349      	bcc.n	8007f72 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ee6:	d107      	bne.n	8007ef8 <UART_Start_Receive_IT+0x11c>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d103      	bne.n	8007ef8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	4a47      	ldr	r2, [pc, #284]	@ (8008010 <UART_Start_Receive_IT+0x234>)
 8007ef4:	675a      	str	r2, [r3, #116]	@ 0x74
 8007ef6:	e002      	b.n	8007efe <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	4a46      	ldr	r2, [pc, #280]	@ (8008014 <UART_Start_Receive_IT+0x238>)
 8007efc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d01a      	beq.n	8007f3c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f0e:	e853 3f00 	ldrex	r3, [r3]
 8007f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007f14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	461a      	mov	r2, r3
 8007f24:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007f28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f2a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007f2e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007f30:	e841 2300 	strex	r3, r2, [r1]
 8007f34:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007f36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1e4      	bne.n	8007f06 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	3308      	adds	r3, #8
 8007f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f46:	e853 3f00 	ldrex	r3, [r3]
 8007f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f52:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	3308      	adds	r3, #8
 8007f5a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007f5c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007f5e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f60:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007f62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f64:	e841 2300 	strex	r3, r2, [r1]
 8007f68:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1e5      	bne.n	8007f3c <UART_Start_Receive_IT+0x160>
 8007f70:	e046      	b.n	8008000 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f7a:	d107      	bne.n	8007f8c <UART_Start_Receive_IT+0x1b0>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d103      	bne.n	8007f8c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4a24      	ldr	r2, [pc, #144]	@ (8008018 <UART_Start_Receive_IT+0x23c>)
 8007f88:	675a      	str	r2, [r3, #116]	@ 0x74
 8007f8a:	e002      	b.n	8007f92 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	4a23      	ldr	r2, [pc, #140]	@ (800801c <UART_Start_Receive_IT+0x240>)
 8007f90:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d019      	beq.n	8007fce <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa2:	e853 3f00 	ldrex	r3, [r3]
 8007fa6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007faa:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007fae:	677b      	str	r3, [r7, #116]	@ 0x74
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007fb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fba:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007fbe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007fc0:	e841 2300 	strex	r3, r2, [r1]
 8007fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1e6      	bne.n	8007f9a <UART_Start_Receive_IT+0x1be>
 8007fcc:	e018      	b.n	8008000 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	e853 3f00 	ldrex	r3, [r3]
 8007fda:	613b      	str	r3, [r7, #16]
   return(result);
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	f043 0320 	orr.w	r3, r3, #32
 8007fe2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	461a      	mov	r2, r3
 8007fea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007fec:	623b      	str	r3, [r7, #32]
 8007fee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff0:	69f9      	ldr	r1, [r7, #28]
 8007ff2:	6a3a      	ldr	r2, [r7, #32]
 8007ff4:	e841 2300 	strex	r3, r2, [r1]
 8007ff8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d1e6      	bne.n	8007fce <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	378c      	adds	r7, #140	@ 0x8c
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	08008b85 	.word	0x08008b85
 8008014:	08008825 	.word	0x08008825
 8008018:	0800866d 	.word	0x0800866d
 800801c:	080084b5 	.word	0x080084b5

08008020 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008020:	b480      	push	{r7}
 8008022:	b095      	sub	sp, #84	@ 0x54
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008030:	e853 3f00 	ldrex	r3, [r3]
 8008034:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008038:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800803c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	461a      	mov	r2, r3
 8008044:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008046:	643b      	str	r3, [r7, #64]	@ 0x40
 8008048:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800804c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800804e:	e841 2300 	strex	r3, r2, [r1]
 8008052:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1e6      	bne.n	8008028 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	3308      	adds	r3, #8
 8008060:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008062:	6a3b      	ldr	r3, [r7, #32]
 8008064:	e853 3f00 	ldrex	r3, [r3]
 8008068:	61fb      	str	r3, [r7, #28]
   return(result);
 800806a:	69fb      	ldr	r3, [r7, #28]
 800806c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008070:	f023 0301 	bic.w	r3, r3, #1
 8008074:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	3308      	adds	r3, #8
 800807c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800807e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008080:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008082:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008084:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008086:	e841 2300 	strex	r3, r2, [r1]
 800808a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800808c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1e3      	bne.n	800805a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008096:	2b01      	cmp	r3, #1
 8008098:	d118      	bne.n	80080cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	e853 3f00 	ldrex	r3, [r3]
 80080a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	f023 0310 	bic.w	r3, r3, #16
 80080ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	461a      	mov	r2, r3
 80080b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080b8:	61bb      	str	r3, [r7, #24]
 80080ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080bc:	6979      	ldr	r1, [r7, #20]
 80080be:	69ba      	ldr	r2, [r7, #24]
 80080c0:	e841 2300 	strex	r3, r2, [r1]
 80080c4:	613b      	str	r3, [r7, #16]
   return(result);
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d1e6      	bne.n	800809a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2220      	movs	r2, #32
 80080d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80080e0:	bf00      	nop
 80080e2:	3754      	adds	r7, #84	@ 0x54
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2200      	movs	r2, #0
 8008106:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f7ff f99a 	bl	8007444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008110:	bf00      	nop
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008118:	b480      	push	{r7}
 800811a:	b08f      	sub	sp, #60	@ 0x3c
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008126:	2b21      	cmp	r3, #33	@ 0x21
 8008128:	d14c      	bne.n	80081c4 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008130:	b29b      	uxth	r3, r3
 8008132:	2b00      	cmp	r3, #0
 8008134:	d132      	bne.n	800819c <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813c:	6a3b      	ldr	r3, [r7, #32]
 800813e:	e853 3f00 	ldrex	r3, [r3]
 8008142:	61fb      	str	r3, [r7, #28]
   return(result);
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800814a:	637b      	str	r3, [r7, #52]	@ 0x34
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	461a      	mov	r2, r3
 8008152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008154:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008156:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008158:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800815a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800815c:	e841 2300 	strex	r3, r2, [r1]
 8008160:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1e6      	bne.n	8008136 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	e853 3f00 	ldrex	r3, [r3]
 8008174:	60bb      	str	r3, [r7, #8]
   return(result);
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800817c:	633b      	str	r3, [r7, #48]	@ 0x30
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	461a      	mov	r2, r3
 8008184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008186:	61bb      	str	r3, [r7, #24]
 8008188:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818a:	6979      	ldr	r1, [r7, #20]
 800818c:	69ba      	ldr	r2, [r7, #24]
 800818e:	e841 2300 	strex	r3, r2, [r1]
 8008192:	613b      	str	r3, [r7, #16]
   return(result);
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1e6      	bne.n	8008168 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800819a:	e013      	b.n	80081c4 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081a0:	781a      	ldrb	r2, [r3, #0]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081ac:	1c5a      	adds	r2, r3, #1
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	3b01      	subs	r3, #1
 80081bc:	b29a      	uxth	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 80081c4:	bf00      	nop
 80081c6:	373c      	adds	r7, #60	@ 0x3c
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b091      	sub	sp, #68	@ 0x44
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081de:	2b21      	cmp	r3, #33	@ 0x21
 80081e0:	d151      	bne.n	8008286 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d132      	bne.n	8008254 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f6:	e853 3f00 	ldrex	r3, [r3]
 80081fa:	623b      	str	r3, [r7, #32]
   return(result);
 80081fc:	6a3b      	ldr	r3, [r7, #32]
 80081fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008202:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	461a      	mov	r2, r3
 800820a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800820c:	633b      	str	r3, [r7, #48]	@ 0x30
 800820e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008210:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008212:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008214:	e841 2300 	strex	r3, r2, [r1]
 8008218:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800821a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800821c:	2b00      	cmp	r3, #0
 800821e:	d1e6      	bne.n	80081ee <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	e853 3f00 	ldrex	r3, [r3]
 800822c:	60fb      	str	r3, [r7, #12]
   return(result);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008234:	637b      	str	r3, [r7, #52]	@ 0x34
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	461a      	mov	r2, r3
 800823c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800823e:	61fb      	str	r3, [r7, #28]
 8008240:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008242:	69b9      	ldr	r1, [r7, #24]
 8008244:	69fa      	ldr	r2, [r7, #28]
 8008246:	e841 2300 	strex	r3, r2, [r1]
 800824a:	617b      	str	r3, [r7, #20]
   return(result);
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1e6      	bne.n	8008220 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008252:	e018      	b.n	8008286 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008258:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800825a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800825c:	881b      	ldrh	r3, [r3, #0]
 800825e:	461a      	mov	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008268:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800826e:	1c9a      	adds	r2, r3, #2
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800827a:	b29b      	uxth	r3, r3
 800827c:	3b01      	subs	r3, #1
 800827e:	b29a      	uxth	r2, r3
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8008286:	bf00      	nop
 8008288:	3744      	adds	r7, #68	@ 0x44
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr

08008292 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008292:	b480      	push	{r7}
 8008294:	b091      	sub	sp, #68	@ 0x44
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082a0:	2b21      	cmp	r3, #33	@ 0x21
 80082a2:	d160      	bne.n	8008366 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80082aa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80082ac:	e057      	b.n	800835e <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d133      	bne.n	8008322 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	3308      	adds	r3, #8
 80082c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c4:	e853 3f00 	ldrex	r3, [r3]
 80082c8:	623b      	str	r3, [r7, #32]
   return(result);
 80082ca:	6a3b      	ldr	r3, [r7, #32]
 80082cc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80082d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	3308      	adds	r3, #8
 80082d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80082da:	633a      	str	r2, [r7, #48]	@ 0x30
 80082dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082e2:	e841 2300 	strex	r3, r2, [r1]
 80082e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80082e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d1e5      	bne.n	80082ba <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	e853 3f00 	ldrex	r3, [r3]
 80082fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008302:	637b      	str	r3, [r7, #52]	@ 0x34
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	461a      	mov	r2, r3
 800830a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800830c:	61fb      	str	r3, [r7, #28]
 800830e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008310:	69b9      	ldr	r1, [r7, #24]
 8008312:	69fa      	ldr	r2, [r7, #28]
 8008314:	e841 2300 	strex	r3, r2, [r1]
 8008318:	617b      	str	r3, [r7, #20]
   return(result);
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1e6      	bne.n	80082ee <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008320:	e021      	b.n	8008366 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	69db      	ldr	r3, [r3, #28]
 8008328:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800832c:	2b00      	cmp	r3, #0
 800832e:	d013      	beq.n	8008358 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008334:	781a      	ldrb	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008340:	1c5a      	adds	r2, r3, #1
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800834c:	b29b      	uxth	r3, r3
 800834e:	3b01      	subs	r3, #1
 8008350:	b29a      	uxth	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008358:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800835a:	3b01      	subs	r3, #1
 800835c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800835e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008360:	2b00      	cmp	r3, #0
 8008362:	d1a4      	bne.n	80082ae <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008364:	e7ff      	b.n	8008366 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8008366:	bf00      	nop
 8008368:	3744      	adds	r7, #68	@ 0x44
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr

08008372 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008372:	b480      	push	{r7}
 8008374:	b091      	sub	sp, #68	@ 0x44
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008380:	2b21      	cmp	r3, #33	@ 0x21
 8008382:	d165      	bne.n	8008450 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800838a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800838c:	e05c      	b.n	8008448 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008394:	b29b      	uxth	r3, r3
 8008396:	2b00      	cmp	r3, #0
 8008398:	d133      	bne.n	8008402 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	3308      	adds	r3, #8
 80083a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a2:	6a3b      	ldr	r3, [r7, #32]
 80083a4:	e853 3f00 	ldrex	r3, [r3]
 80083a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80083b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	3308      	adds	r3, #8
 80083b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80083bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083c2:	e841 2300 	strex	r3, r2, [r1]
 80083c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1e5      	bne.n	800839a <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	e853 3f00 	ldrex	r3, [r3]
 80083da:	60bb      	str	r3, [r7, #8]
   return(result);
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	461a      	mov	r2, r3
 80083ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ec:	61bb      	str	r3, [r7, #24]
 80083ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f0:	6979      	ldr	r1, [r7, #20]
 80083f2:	69ba      	ldr	r2, [r7, #24]
 80083f4:	e841 2300 	strex	r3, r2, [r1]
 80083f8:	613b      	str	r3, [r7, #16]
   return(result);
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1e6      	bne.n	80083ce <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008400:	e026      	b.n	8008450 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	69db      	ldr	r3, [r3, #28]
 8008408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800840c:	2b00      	cmp	r3, #0
 800840e:	d018      	beq.n	8008442 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008414:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008418:	881b      	ldrh	r3, [r3, #0]
 800841a:	461a      	mov	r2, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008424:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800842a:	1c9a      	adds	r2, r3, #2
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008436:	b29b      	uxth	r3, r3
 8008438:	3b01      	subs	r3, #1
 800843a:	b29a      	uxth	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008442:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008444:	3b01      	subs	r3, #1
 8008446:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008448:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800844a:	2b00      	cmp	r3, #0
 800844c:	d19f      	bne.n	800838e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800844e:	e7ff      	b.n	8008450 <UART_TxISR_16BIT_FIFOEN+0xde>
 8008450:	bf00      	nop
 8008452:	3744      	adds	r7, #68	@ 0x44
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b088      	sub	sp, #32
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	e853 3f00 	ldrex	r3, [r3]
 8008470:	60bb      	str	r3, [r7, #8]
   return(result);
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008478:	61fb      	str	r3, [r7, #28]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	461a      	mov	r2, r3
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	61bb      	str	r3, [r7, #24]
 8008484:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008486:	6979      	ldr	r1, [r7, #20]
 8008488:	69ba      	ldr	r2, [r7, #24]
 800848a:	e841 2300 	strex	r3, r2, [r1]
 800848e:	613b      	str	r3, [r7, #16]
   return(result);
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1e6      	bne.n	8008464 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2220      	movs	r2, #32
 800849a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f7fe ffc3 	bl	8007430 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084aa:	bf00      	nop
 80084ac:	3720      	adds	r7, #32
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
	...

080084b4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b09c      	sub	sp, #112	@ 0x70
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80084c2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084cc:	2b22      	cmp	r3, #34	@ 0x22
 80084ce:	f040 80be 	bne.w	800864e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084d8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80084dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80084e0:	b2d9      	uxtb	r1, r3
 80084e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80084e6:	b2da      	uxtb	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084ec:	400a      	ands	r2, r1
 80084ee:	b2d2      	uxtb	r2, r2
 80084f0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084f6:	1c5a      	adds	r2, r3, #1
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008502:	b29b      	uxth	r3, r3
 8008504:	3b01      	subs	r3, #1
 8008506:	b29a      	uxth	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008514:	b29b      	uxth	r3, r3
 8008516:	2b00      	cmp	r3, #0
 8008518:	f040 80a1 	bne.w	800865e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008522:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008524:	e853 3f00 	ldrex	r3, [r3]
 8008528:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800852a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800852c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008530:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	461a      	mov	r2, r3
 8008538:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800853a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800853c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008540:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008542:	e841 2300 	strex	r3, r2, [r1]
 8008546:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008548:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800854a:	2b00      	cmp	r3, #0
 800854c:	d1e6      	bne.n	800851c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	3308      	adds	r3, #8
 8008554:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008558:	e853 3f00 	ldrex	r3, [r3]
 800855c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800855e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008560:	f023 0301 	bic.w	r3, r3, #1
 8008564:	667b      	str	r3, [r7, #100]	@ 0x64
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	3308      	adds	r3, #8
 800856c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800856e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008570:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008572:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008574:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008576:	e841 2300 	strex	r3, r2, [r1]
 800857a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800857c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1e5      	bne.n	800854e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2220      	movs	r2, #32
 8008586:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a33      	ldr	r2, [pc, #204]	@ (8008668 <UART_RxISR_8BIT+0x1b4>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d01f      	beq.n	80085e0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d018      	beq.n	80085e0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b6:	e853 3f00 	ldrex	r3, [r3]
 80085ba:	623b      	str	r3, [r7, #32]
   return(result);
 80085bc:	6a3b      	ldr	r3, [r7, #32]
 80085be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80085c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	461a      	mov	r2, r3
 80085ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80085cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80085ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085d4:	e841 2300 	strex	r3, r2, [r1]
 80085d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1e6      	bne.n	80085ae <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d12e      	bne.n	8008646 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	e853 3f00 	ldrex	r3, [r3]
 80085fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f023 0310 	bic.w	r3, r3, #16
 8008602:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	461a      	mov	r2, r3
 800860a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800860c:	61fb      	str	r3, [r7, #28]
 800860e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008610:	69b9      	ldr	r1, [r7, #24]
 8008612:	69fa      	ldr	r2, [r7, #28]
 8008614:	e841 2300 	strex	r3, r2, [r1]
 8008618:	617b      	str	r3, [r7, #20]
   return(result);
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1e6      	bne.n	80085ee <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	69db      	ldr	r3, [r3, #28]
 8008626:	f003 0310 	and.w	r3, r3, #16
 800862a:	2b10      	cmp	r3, #16
 800862c:	d103      	bne.n	8008636 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2210      	movs	r2, #16
 8008634:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800863c:	4619      	mov	r1, r3
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7fe ff0a 	bl	8007458 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008644:	e00b      	b.n	800865e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f7f9 f81a 	bl	8001680 <HAL_UART_RxCpltCallback>
}
 800864c:	e007      	b.n	800865e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	699a      	ldr	r2, [r3, #24]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f042 0208 	orr.w	r2, r2, #8
 800865c:	619a      	str	r2, [r3, #24]
}
 800865e:	bf00      	nop
 8008660:	3770      	adds	r7, #112	@ 0x70
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	40008000 	.word	0x40008000

0800866c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b09c      	sub	sp, #112	@ 0x70
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800867a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008684:	2b22      	cmp	r3, #34	@ 0x22
 8008686:	f040 80be 	bne.w	8008806 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008690:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008698:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800869a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800869e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80086a2:	4013      	ands	r3, r2
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80086a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086ae:	1c9a      	adds	r2, r3, #2
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	3b01      	subs	r3, #1
 80086be:	b29a      	uxth	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f040 80a1 	bne.w	8008816 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086dc:	e853 3f00 	ldrex	r3, [r3]
 80086e0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80086e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	461a      	mov	r2, r3
 80086f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80086f4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80086f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80086fa:	e841 2300 	strex	r3, r2, [r1]
 80086fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008700:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1e6      	bne.n	80086d4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	3308      	adds	r3, #8
 800870c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008710:	e853 3f00 	ldrex	r3, [r3]
 8008714:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008718:	f023 0301 	bic.w	r3, r3, #1
 800871c:	663b      	str	r3, [r7, #96]	@ 0x60
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	3308      	adds	r3, #8
 8008724:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008726:	643a      	str	r2, [r7, #64]	@ 0x40
 8008728:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800872c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800872e:	e841 2300 	strex	r3, r2, [r1]
 8008732:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1e5      	bne.n	8008706 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2220      	movs	r2, #32
 800873e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a33      	ldr	r2, [pc, #204]	@ (8008820 <UART_RxISR_16BIT+0x1b4>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d01f      	beq.n	8008798 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008762:	2b00      	cmp	r3, #0
 8008764:	d018      	beq.n	8008798 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876c:	6a3b      	ldr	r3, [r7, #32]
 800876e:	e853 3f00 	ldrex	r3, [r3]
 8008772:	61fb      	str	r3, [r7, #28]
   return(result);
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800877a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	461a      	mov	r2, r3
 8008782:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008784:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008786:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008788:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800878a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800878c:	e841 2300 	strex	r3, r2, [r1]
 8008790:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008794:	2b00      	cmp	r3, #0
 8008796:	d1e6      	bne.n	8008766 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800879c:	2b01      	cmp	r3, #1
 800879e:	d12e      	bne.n	80087fe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	e853 3f00 	ldrex	r3, [r3]
 80087b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	f023 0310 	bic.w	r3, r3, #16
 80087ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	461a      	mov	r2, r3
 80087c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80087c4:	61bb      	str	r3, [r7, #24]
 80087c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c8:	6979      	ldr	r1, [r7, #20]
 80087ca:	69ba      	ldr	r2, [r7, #24]
 80087cc:	e841 2300 	strex	r3, r2, [r1]
 80087d0:	613b      	str	r3, [r7, #16]
   return(result);
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1e6      	bne.n	80087a6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	69db      	ldr	r3, [r3, #28]
 80087de:	f003 0310 	and.w	r3, r3, #16
 80087e2:	2b10      	cmp	r3, #16
 80087e4:	d103      	bne.n	80087ee <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2210      	movs	r2, #16
 80087ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80087f4:	4619      	mov	r1, r3
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f7fe fe2e 	bl	8007458 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80087fc:	e00b      	b.n	8008816 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f7f8 ff3e 	bl	8001680 <HAL_UART_RxCpltCallback>
}
 8008804:	e007      	b.n	8008816 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	699a      	ldr	r2, [r3, #24]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f042 0208 	orr.w	r2, r2, #8
 8008814:	619a      	str	r2, [r3, #24]
}
 8008816:	bf00      	nop
 8008818:	3770      	adds	r7, #112	@ 0x70
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	40008000 	.word	0x40008000

08008824 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b0ac      	sub	sp, #176	@ 0xb0
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008832:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	69db      	ldr	r3, [r3, #28]
 800883c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800885a:	2b22      	cmp	r3, #34	@ 0x22
 800885c:	f040 8182 	bne.w	8008b64 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008866:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800886a:	e125      	b.n	8008ab8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008872:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008876:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800887a:	b2d9      	uxtb	r1, r3
 800887c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008880:	b2da      	uxtb	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008886:	400a      	ands	r2, r1
 8008888:	b2d2      	uxtb	r2, r2
 800888a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008890:	1c5a      	adds	r2, r3, #1
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800889c:	b29b      	uxth	r3, r3
 800889e:	3b01      	subs	r3, #1
 80088a0:	b29a      	uxth	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	69db      	ldr	r3, [r3, #28]
 80088ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80088b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088b6:	f003 0307 	and.w	r3, r3, #7
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d053      	beq.n	8008966 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80088be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088c2:	f003 0301 	and.w	r3, r3, #1
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d011      	beq.n	80088ee <UART_RxISR_8BIT_FIFOEN+0xca>
 80088ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80088ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00b      	beq.n	80088ee <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2201      	movs	r2, #1
 80088dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088e4:	f043 0201 	orr.w	r2, r3, #1
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80088ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088f2:	f003 0302 	and.w	r3, r3, #2
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d011      	beq.n	800891e <UART_RxISR_8BIT_FIFOEN+0xfa>
 80088fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80088fe:	f003 0301 	and.w	r3, r3, #1
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00b      	beq.n	800891e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2202      	movs	r2, #2
 800890c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008914:	f043 0204 	orr.w	r2, r3, #4
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800891e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008922:	f003 0304 	and.w	r3, r3, #4
 8008926:	2b00      	cmp	r3, #0
 8008928:	d011      	beq.n	800894e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800892a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800892e:	f003 0301 	and.w	r3, r3, #1
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00b      	beq.n	800894e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2204      	movs	r2, #4
 800893c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008944:	f043 0202 	orr.w	r2, r3, #2
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008954:	2b00      	cmp	r3, #0
 8008956:	d006      	beq.n	8008966 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f7fe fd73 	bl	8007444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2200      	movs	r2, #0
 8008962:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800896c:	b29b      	uxth	r3, r3
 800896e:	2b00      	cmp	r3, #0
 8008970:	f040 80a2 	bne.w	8008ab8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800897c:	e853 3f00 	ldrex	r3, [r3]
 8008980:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008982:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008984:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008988:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	461a      	mov	r2, r3
 8008992:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008996:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008998:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800899c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800899e:	e841 2300 	strex	r3, r2, [r1]
 80089a2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80089a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1e4      	bne.n	8008974 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	3308      	adds	r3, #8
 80089b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089b4:	e853 3f00 	ldrex	r3, [r3]
 80089b8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80089ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80089bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089c0:	f023 0301 	bic.w	r3, r3, #1
 80089c4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	3308      	adds	r3, #8
 80089ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80089d2:	66ba      	str	r2, [r7, #104]	@ 0x68
 80089d4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80089d8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80089da:	e841 2300 	strex	r3, r2, [r1]
 80089de:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80089e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d1e1      	bne.n	80089aa <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2220      	movs	r2, #32
 80089ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a5f      	ldr	r2, [pc, #380]	@ (8008b7c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d021      	beq.n	8008a48 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d01a      	beq.n	8008a48 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a1a:	e853 3f00 	ldrex	r3, [r3]
 8008a1e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008a20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008a26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008a34:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a36:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a38:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008a3a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008a3c:	e841 2300 	strex	r3, r2, [r1]
 8008a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008a42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1e4      	bne.n	8008a12 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d130      	bne.n	8008ab2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a5e:	e853 3f00 	ldrex	r3, [r3]
 8008a62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a66:	f023 0310 	bic.w	r3, r3, #16
 8008a6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	461a      	mov	r2, r3
 8008a74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a78:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a7a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a80:	e841 2300 	strex	r3, r2, [r1]
 8008a84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d1e4      	bne.n	8008a56 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	69db      	ldr	r3, [r3, #28]
 8008a92:	f003 0310 	and.w	r3, r3, #16
 8008a96:	2b10      	cmp	r3, #16
 8008a98:	d103      	bne.n	8008aa2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2210      	movs	r2, #16
 8008aa0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7fe fcd4 	bl	8007458 <HAL_UARTEx_RxEventCallback>
 8008ab0:	e002      	b.n	8008ab8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f7f8 fde4 	bl	8001680 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008ab8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d006      	beq.n	8008ace <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008ac0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ac4:	f003 0320 	and.w	r3, r3, #32
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f47f aecf 	bne.w	800886c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ad4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008ad8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d049      	beq.n	8008b74 <UART_RxISR_8BIT_FIFOEN+0x350>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008ae6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d242      	bcs.n	8008b74 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	3308      	adds	r3, #8
 8008af4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af6:	6a3b      	ldr	r3, [r7, #32]
 8008af8:	e853 3f00 	ldrex	r3, [r3]
 8008afc:	61fb      	str	r3, [r7, #28]
   return(result);
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	3308      	adds	r3, #8
 8008b0e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008b12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b1a:	e841 2300 	strex	r3, r2, [r1]
 8008b1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1e3      	bne.n	8008aee <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a15      	ldr	r2, [pc, #84]	@ (8008b80 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008b2a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	e853 3f00 	ldrex	r3, [r3]
 8008b38:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	f043 0320 	orr.w	r3, r3, #32
 8008b40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	461a      	mov	r2, r3
 8008b4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008b4e:	61bb      	str	r3, [r7, #24]
 8008b50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b52:	6979      	ldr	r1, [r7, #20]
 8008b54:	69ba      	ldr	r2, [r7, #24]
 8008b56:	e841 2300 	strex	r3, r2, [r1]
 8008b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d1e4      	bne.n	8008b2c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b62:	e007      	b.n	8008b74 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	699a      	ldr	r2, [r3, #24]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f042 0208 	orr.w	r2, r2, #8
 8008b72:	619a      	str	r2, [r3, #24]
}
 8008b74:	bf00      	nop
 8008b76:	37b0      	adds	r7, #176	@ 0xb0
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	40008000 	.word	0x40008000
 8008b80:	080084b5 	.word	0x080084b5

08008b84 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b0ae      	sub	sp, #184	@ 0xb8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008b92:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	69db      	ldr	r3, [r3, #28]
 8008b9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bba:	2b22      	cmp	r3, #34	@ 0x22
 8008bbc:	f040 8186 	bne.w	8008ecc <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008bc6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008bca:	e129      	b.n	8008e20 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bd2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008bde:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008be2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008be6:	4013      	ands	r3, r2
 8008be8:	b29a      	uxth	r2, r3
 8008bea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008bee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bf4:	1c9a      	adds	r2, r3, #2
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	3b01      	subs	r3, #1
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	69db      	ldr	r3, [r3, #28]
 8008c12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008c16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c1a:	f003 0307 	and.w	r3, r3, #7
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d053      	beq.n	8008cca <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c26:	f003 0301 	and.w	r3, r3, #1
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d011      	beq.n	8008c52 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008c2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00b      	beq.n	8008c52 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c48:	f043 0201 	orr.w	r2, r3, #1
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c56:	f003 0302 	and.w	r3, r3, #2
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d011      	beq.n	8008c82 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008c5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008c62:	f003 0301 	and.w	r3, r3, #1
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00b      	beq.n	8008c82 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2202      	movs	r2, #2
 8008c70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c78:	f043 0204 	orr.w	r2, r3, #4
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008c86:	f003 0304 	and.w	r3, r3, #4
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d011      	beq.n	8008cb2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008c8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008c92:	f003 0301 	and.w	r3, r3, #1
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00b      	beq.n	8008cb2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2204      	movs	r2, #4
 8008ca0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ca8:	f043 0202 	orr.w	r2, r3, #2
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d006      	beq.n	8008cca <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f7fe fbc1 	bl	8007444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f040 80a4 	bne.w	8008e20 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008ce0:	e853 3f00 	ldrex	r3, [r3]
 8008ce4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008ce6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ce8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008cfa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008cfe:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d00:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008d02:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008d06:	e841 2300 	strex	r3, r2, [r1]
 8008d0a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008d0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1e2      	bne.n	8008cd8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	3308      	adds	r3, #8
 8008d18:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d1c:	e853 3f00 	ldrex	r3, [r3]
 8008d20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008d22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d28:	f023 0301 	bic.w	r3, r3, #1
 8008d2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	3308      	adds	r3, #8
 8008d36:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008d3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008d3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008d40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008d42:	e841 2300 	strex	r3, r2, [r1]
 8008d46:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008d48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1e1      	bne.n	8008d12 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2220      	movs	r2, #32
 8008d52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a5f      	ldr	r2, [pc, #380]	@ (8008ee4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d021      	beq.n	8008db0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d01a      	beq.n	8008db0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d82:	e853 3f00 	ldrex	r3, [r3]
 8008d86:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008d88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	461a      	mov	r2, r3
 8008d98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008d9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d9e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008da2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008da4:	e841 2300 	strex	r3, r2, [r1]
 8008da8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008daa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1e4      	bne.n	8008d7a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d130      	bne.n	8008e1a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dc6:	e853 3f00 	ldrex	r3, [r3]
 8008dca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dce:	f023 0310 	bic.w	r3, r3, #16
 8008dd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	461a      	mov	r2, r3
 8008ddc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008de0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008de2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008de6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008de8:	e841 2300 	strex	r3, r2, [r1]
 8008dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d1e4      	bne.n	8008dbe <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	69db      	ldr	r3, [r3, #28]
 8008dfa:	f003 0310 	and.w	r3, r3, #16
 8008dfe:	2b10      	cmp	r3, #16
 8008e00:	d103      	bne.n	8008e0a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2210      	movs	r2, #16
 8008e08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e10:	4619      	mov	r1, r3
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f7fe fb20 	bl	8007458 <HAL_UARTEx_RxEventCallback>
 8008e18:	e002      	b.n	8008e20 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f7f8 fc30 	bl	8001680 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e20:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d006      	beq.n	8008e36 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8008e28:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008e2c:	f003 0320 	and.w	r3, r3, #32
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f47f aecb 	bne.w	8008bcc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e3c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008e40:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d049      	beq.n	8008edc <UART_RxISR_16BIT_FIFOEN+0x358>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008e4e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d242      	bcs.n	8008edc <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	3308      	adds	r3, #8
 8008e5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e60:	e853 3f00 	ldrex	r3, [r3]
 8008e64:	623b      	str	r3, [r7, #32]
   return(result);
 8008e66:	6a3b      	ldr	r3, [r7, #32]
 8008e68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	3308      	adds	r3, #8
 8008e76:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008e7a:	633a      	str	r2, [r7, #48]	@ 0x30
 8008e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e82:	e841 2300 	strex	r3, r2, [r1]
 8008e86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1e3      	bne.n	8008e56 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4a15      	ldr	r2, [pc, #84]	@ (8008ee8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008e92:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	e853 3f00 	ldrex	r3, [r3]
 8008ea0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f043 0320 	orr.w	r3, r3, #32
 8008ea8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008eb6:	61fb      	str	r3, [r7, #28]
 8008eb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eba:	69b9      	ldr	r1, [r7, #24]
 8008ebc:	69fa      	ldr	r2, [r7, #28]
 8008ebe:	e841 2300 	strex	r3, r2, [r1]
 8008ec2:	617b      	str	r3, [r7, #20]
   return(result);
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1e4      	bne.n	8008e94 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008eca:	e007      	b.n	8008edc <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	699a      	ldr	r2, [r3, #24]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f042 0208 	orr.w	r2, r2, #8
 8008eda:	619a      	str	r2, [r3, #24]
}
 8008edc:	bf00      	nop
 8008ede:	37b8      	adds	r7, #184	@ 0xb8
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	40008000 	.word	0x40008000
 8008ee8:	0800866d 	.word	0x0800866d

08008eec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008f08:	bf00      	nop
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008f1c:	bf00      	nop
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d101      	bne.n	8008f3e <HAL_UARTEx_DisableFifoMode+0x16>
 8008f3a:	2302      	movs	r3, #2
 8008f3c:	e027      	b.n	8008f8e <HAL_UARTEx_DisableFifoMode+0x66>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2201      	movs	r2, #1
 8008f42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2224      	movs	r2, #36	@ 0x24
 8008f4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f022 0201 	bic.w	r2, r2, #1
 8008f64:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008f6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2220      	movs	r2, #32
 8008f80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3714      	adds	r7, #20
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr

08008f9a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b084      	sub	sp, #16
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
 8008fa2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d101      	bne.n	8008fb2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008fae:	2302      	movs	r3, #2
 8008fb0:	e02d      	b.n	800900e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2224      	movs	r2, #36	@ 0x24
 8008fbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f022 0201 	bic.w	r2, r2, #1
 8008fd8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	683a      	ldr	r2, [r7, #0]
 8008fea:	430a      	orrs	r2, r1
 8008fec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 f850 	bl	8009094 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2220      	movs	r2, #32
 8009000:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b084      	sub	sp, #16
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
 800901e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009026:	2b01      	cmp	r3, #1
 8009028:	d101      	bne.n	800902e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800902a:	2302      	movs	r3, #2
 800902c:	e02d      	b.n	800908a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2201      	movs	r2, #1
 8009032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2224      	movs	r2, #36	@ 0x24
 800903a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f022 0201 	bic.w	r2, r2, #1
 8009054:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	683a      	ldr	r2, [r7, #0]
 8009066:	430a      	orrs	r2, r1
 8009068:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 f812 	bl	8009094 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2220      	movs	r2, #32
 800907c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
	...

08009094 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d108      	bne.n	80090b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80090b4:	e031      	b.n	800911a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80090b6:	2308      	movs	r3, #8
 80090b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80090ba:	2308      	movs	r3, #8
 80090bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	0e5b      	lsrs	r3, r3, #25
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	f003 0307 	and.w	r3, r3, #7
 80090cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	0f5b      	lsrs	r3, r3, #29
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	f003 0307 	and.w	r3, r3, #7
 80090dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090de:	7bbb      	ldrb	r3, [r7, #14]
 80090e0:	7b3a      	ldrb	r2, [r7, #12]
 80090e2:	4911      	ldr	r1, [pc, #68]	@ (8009128 <UARTEx_SetNbDataToProcess+0x94>)
 80090e4:	5c8a      	ldrb	r2, [r1, r2]
 80090e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80090ea:	7b3a      	ldrb	r2, [r7, #12]
 80090ec:	490f      	ldr	r1, [pc, #60]	@ (800912c <UARTEx_SetNbDataToProcess+0x98>)
 80090ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80090fc:	7bfb      	ldrb	r3, [r7, #15]
 80090fe:	7b7a      	ldrb	r2, [r7, #13]
 8009100:	4909      	ldr	r1, [pc, #36]	@ (8009128 <UARTEx_SetNbDataToProcess+0x94>)
 8009102:	5c8a      	ldrb	r2, [r1, r2]
 8009104:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009108:	7b7a      	ldrb	r2, [r7, #13]
 800910a:	4908      	ldr	r1, [pc, #32]	@ (800912c <UARTEx_SetNbDataToProcess+0x98>)
 800910c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800910e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009112:	b29a      	uxth	r2, r3
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800911a:	bf00      	nop
 800911c:	3714      	adds	r7, #20
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	080091d0 	.word	0x080091d0
 800912c:	080091d8 	.word	0x080091d8

08009130 <memset>:
 8009130:	4402      	add	r2, r0
 8009132:	4603      	mov	r3, r0
 8009134:	4293      	cmp	r3, r2
 8009136:	d100      	bne.n	800913a <memset+0xa>
 8009138:	4770      	bx	lr
 800913a:	f803 1b01 	strb.w	r1, [r3], #1
 800913e:	e7f9      	b.n	8009134 <memset+0x4>

08009140 <__libc_init_array>:
 8009140:	b570      	push	{r4, r5, r6, lr}
 8009142:	4d0d      	ldr	r5, [pc, #52]	@ (8009178 <__libc_init_array+0x38>)
 8009144:	4c0d      	ldr	r4, [pc, #52]	@ (800917c <__libc_init_array+0x3c>)
 8009146:	1b64      	subs	r4, r4, r5
 8009148:	10a4      	asrs	r4, r4, #2
 800914a:	2600      	movs	r6, #0
 800914c:	42a6      	cmp	r6, r4
 800914e:	d109      	bne.n	8009164 <__libc_init_array+0x24>
 8009150:	4d0b      	ldr	r5, [pc, #44]	@ (8009180 <__libc_init_array+0x40>)
 8009152:	4c0c      	ldr	r4, [pc, #48]	@ (8009184 <__libc_init_array+0x44>)
 8009154:	f000 f818 	bl	8009188 <_init>
 8009158:	1b64      	subs	r4, r4, r5
 800915a:	10a4      	asrs	r4, r4, #2
 800915c:	2600      	movs	r6, #0
 800915e:	42a6      	cmp	r6, r4
 8009160:	d105      	bne.n	800916e <__libc_init_array+0x2e>
 8009162:	bd70      	pop	{r4, r5, r6, pc}
 8009164:	f855 3b04 	ldr.w	r3, [r5], #4
 8009168:	4798      	blx	r3
 800916a:	3601      	adds	r6, #1
 800916c:	e7ee      	b.n	800914c <__libc_init_array+0xc>
 800916e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009172:	4798      	blx	r3
 8009174:	3601      	adds	r6, #1
 8009176:	e7f2      	b.n	800915e <__libc_init_array+0x1e>
 8009178:	080091e8 	.word	0x080091e8
 800917c:	080091e8 	.word	0x080091e8
 8009180:	080091e8 	.word	0x080091e8
 8009184:	080091ec 	.word	0x080091ec

08009188 <_init>:
 8009188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800918a:	bf00      	nop
 800918c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800918e:	bc08      	pop	{r3}
 8009190:	469e      	mov	lr, r3
 8009192:	4770      	bx	lr

08009194 <_fini>:
 8009194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009196:	bf00      	nop
 8009198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800919a:	bc08      	pop	{r3}
 800919c:	469e      	mov	lr, r3
 800919e:	4770      	bx	lr
