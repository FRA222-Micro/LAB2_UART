
LAB2_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d70  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008f48  08008f48  00009f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f88  08008f88  0000a00c  2**0
                  CONTENTS
  4 .ARM          00000008  08008f88  08008f88  00009f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f90  08008f90  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f90  08008f90  00009f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f94  08008f94  00009f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08008f98  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  20000010  08008fa4  0000a010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08008fa4  0000a2ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017890  00000000  00000000  0000a03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aa0  00000000  00000000  000218cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  00024370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001017  00000000  00000000  00025808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000284e7  00000000  00000000  0002681f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000176a0  00000000  00000000  0004ed06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112211  00000000  00000000  000663a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001785b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005aac  00000000  00000000  001785fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  0017e0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008f30 	.word	0x08008f30

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08008f30 	.word	0x08008f30

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b96a 	b.w	8000cf0 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	460c      	mov	r4, r1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d14e      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a40:	4694      	mov	ip, r2
 8000a42:	458c      	cmp	ip, r1
 8000a44:	4686      	mov	lr, r0
 8000a46:	fab2 f282 	clz	r2, r2
 8000a4a:	d962      	bls.n	8000b12 <__udivmoddi4+0xde>
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0320 	rsb	r3, r2, #32
 8000a52:	4091      	lsls	r1, r2
 8000a54:	fa20 f303 	lsr.w	r3, r0, r3
 8000a58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5c:	4319      	orrs	r1, r3
 8000a5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a66:	fa1f f68c 	uxth.w	r6, ip
 8000a6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a72:	fb07 1114 	mls	r1, r7, r4, r1
 8000a76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a7a:	fb04 f106 	mul.w	r1, r4, r6
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a8a:	f080 8112 	bcs.w	8000cb2 <__udivmoddi4+0x27e>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 810f 	bls.w	8000cb2 <__udivmoddi4+0x27e>
 8000a94:	3c02      	subs	r4, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a59      	subs	r1, r3, r1
 8000a9a:	fa1f f38e 	uxth.w	r3, lr
 8000a9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aa2:	fb07 1110 	mls	r1, r7, r0, r1
 8000aa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aaa:	fb00 f606 	mul.w	r6, r0, r6
 8000aae:	429e      	cmp	r6, r3
 8000ab0:	d90a      	bls.n	8000ac8 <__udivmoddi4+0x94>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aba:	f080 80fc 	bcs.w	8000cb6 <__udivmoddi4+0x282>
 8000abe:	429e      	cmp	r6, r3
 8000ac0:	f240 80f9 	bls.w	8000cb6 <__udivmoddi4+0x282>
 8000ac4:	4463      	add	r3, ip
 8000ac6:	3802      	subs	r0, #2
 8000ac8:	1b9b      	subs	r3, r3, r6
 8000aca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ace:	2100      	movs	r1, #0
 8000ad0:	b11d      	cbz	r5, 8000ada <__udivmoddi4+0xa6>
 8000ad2:	40d3      	lsrs	r3, r2
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e9c5 3200 	strd	r3, r2, [r5]
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d905      	bls.n	8000aee <__udivmoddi4+0xba>
 8000ae2:	b10d      	cbz	r5, 8000ae8 <__udivmoddi4+0xb4>
 8000ae4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4608      	mov	r0, r1
 8000aec:	e7f5      	b.n	8000ada <__udivmoddi4+0xa6>
 8000aee:	fab3 f183 	clz	r1, r3
 8000af2:	2900      	cmp	r1, #0
 8000af4:	d146      	bne.n	8000b84 <__udivmoddi4+0x150>
 8000af6:	42a3      	cmp	r3, r4
 8000af8:	d302      	bcc.n	8000b00 <__udivmoddi4+0xcc>
 8000afa:	4290      	cmp	r0, r2
 8000afc:	f0c0 80f0 	bcc.w	8000ce0 <__udivmoddi4+0x2ac>
 8000b00:	1a86      	subs	r6, r0, r2
 8000b02:	eb64 0303 	sbc.w	r3, r4, r3
 8000b06:	2001      	movs	r0, #1
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d0e6      	beq.n	8000ada <__udivmoddi4+0xa6>
 8000b0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b10:	e7e3      	b.n	8000ada <__udivmoddi4+0xa6>
 8000b12:	2a00      	cmp	r2, #0
 8000b14:	f040 8090 	bne.w	8000c38 <__udivmoddi4+0x204>
 8000b18:	eba1 040c 	sub.w	r4, r1, ip
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	fa1f f78c 	uxth.w	r7, ip
 8000b24:	2101      	movs	r1, #1
 8000b26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b36:	fb07 f006 	mul.w	r0, r7, r6
 8000b3a:	4298      	cmp	r0, r3
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x11c>
 8000b3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x11a>
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	f200 80cd 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b4e:	4626      	mov	r6, r4
 8000b50:	1a1c      	subs	r4, r3, r0
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b62:	fb00 f707 	mul.w	r7, r0, r7
 8000b66:	429f      	cmp	r7, r3
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x148>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b72:	d202      	bcs.n	8000b7a <__udivmoddi4+0x146>
 8000b74:	429f      	cmp	r7, r3
 8000b76:	f200 80b0 	bhi.w	8000cda <__udivmoddi4+0x2a6>
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	1bdb      	subs	r3, r3, r7
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	e7a5      	b.n	8000ad0 <__udivmoddi4+0x9c>
 8000b84:	f1c1 0620 	rsb	r6, r1, #32
 8000b88:	408b      	lsls	r3, r1
 8000b8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b8e:	431f      	orrs	r7, r3
 8000b90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b94:	fa04 f301 	lsl.w	r3, r4, r1
 8000b98:	ea43 030c 	orr.w	r3, r3, ip
 8000b9c:	40f4      	lsrs	r4, r6
 8000b9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ba2:	0c38      	lsrs	r0, r7, #16
 8000ba4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ba8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bac:	fa1f fc87 	uxth.w	ip, r7
 8000bb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bbc:	45a1      	cmp	r9, r4
 8000bbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc2:	d90a      	bls.n	8000bda <__udivmoddi4+0x1a6>
 8000bc4:	193c      	adds	r4, r7, r4
 8000bc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bca:	f080 8084 	bcs.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bce:	45a1      	cmp	r9, r4
 8000bd0:	f240 8081 	bls.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bd8:	443c      	add	r4, r7
 8000bda:	eba4 0409 	sub.w	r4, r4, r9
 8000bde:	fa1f f983 	uxth.w	r9, r3
 8000be2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000be6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	d907      	bls.n	8000c06 <__udivmoddi4+0x1d2>
 8000bf6:	193c      	adds	r4, r7, r4
 8000bf8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bfc:	d267      	bcs.n	8000cce <__udivmoddi4+0x29a>
 8000bfe:	45a4      	cmp	ip, r4
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0x29a>
 8000c02:	3b02      	subs	r3, #2
 8000c04:	443c      	add	r4, r7
 8000c06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c0e:	eba4 040c 	sub.w	r4, r4, ip
 8000c12:	429c      	cmp	r4, r3
 8000c14:	46ce      	mov	lr, r9
 8000c16:	469c      	mov	ip, r3
 8000c18:	d351      	bcc.n	8000cbe <__udivmoddi4+0x28a>
 8000c1a:	d04e      	beq.n	8000cba <__udivmoddi4+0x286>
 8000c1c:	b155      	cbz	r5, 8000c34 <__udivmoddi4+0x200>
 8000c1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c22:	eb64 040c 	sbc.w	r4, r4, ip
 8000c26:	fa04 f606 	lsl.w	r6, r4, r6
 8000c2a:	40cb      	lsrs	r3, r1
 8000c2c:	431e      	orrs	r6, r3
 8000c2e:	40cc      	lsrs	r4, r1
 8000c30:	e9c5 6400 	strd	r6, r4, [r5]
 8000c34:	2100      	movs	r1, #0
 8000c36:	e750      	b.n	8000ada <__udivmoddi4+0xa6>
 8000c38:	f1c2 0320 	rsb	r3, r2, #32
 8000c3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c44:	fa24 f303 	lsr.w	r3, r4, r3
 8000c48:	4094      	lsls	r4, r2
 8000c4a:	430c      	orrs	r4, r1
 8000c4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c54:	fa1f f78c 	uxth.w	r7, ip
 8000c58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c66:	fb00 f107 	mul.w	r1, r0, r7
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x24c>
 8000c6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c76:	d22c      	bcs.n	8000cd2 <__udivmoddi4+0x29e>
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	d92a      	bls.n	8000cd2 <__udivmoddi4+0x29e>
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a5b      	subs	r3, r3, r1
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c88:	fb08 3311 	mls	r3, r8, r1, r3
 8000c8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c90:	fb01 f307 	mul.w	r3, r1, r7
 8000c94:	42a3      	cmp	r3, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x276>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ca0:	d213      	bcs.n	8000cca <__udivmoddi4+0x296>
 8000ca2:	42a3      	cmp	r3, r4
 8000ca4:	d911      	bls.n	8000cca <__udivmoddi4+0x296>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	4464      	add	r4, ip
 8000caa:	1ae4      	subs	r4, r4, r3
 8000cac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cb0:	e739      	b.n	8000b26 <__udivmoddi4+0xf2>
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	e6f0      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e706      	b.n	8000ac8 <__udivmoddi4+0x94>
 8000cba:	45c8      	cmp	r8, r9
 8000cbc:	d2ae      	bcs.n	8000c1c <__udivmoddi4+0x1e8>
 8000cbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cc6:	3801      	subs	r0, #1
 8000cc8:	e7a8      	b.n	8000c1c <__udivmoddi4+0x1e8>
 8000cca:	4631      	mov	r1, r6
 8000ccc:	e7ed      	b.n	8000caa <__udivmoddi4+0x276>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	e799      	b.n	8000c06 <__udivmoddi4+0x1d2>
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	e7d4      	b.n	8000c80 <__udivmoddi4+0x24c>
 8000cd6:	46d6      	mov	lr, sl
 8000cd8:	e77f      	b.n	8000bda <__udivmoddi4+0x1a6>
 8000cda:	4463      	add	r3, ip
 8000cdc:	3802      	subs	r0, #2
 8000cde:	e74d      	b.n	8000b7c <__udivmoddi4+0x148>
 8000ce0:	4606      	mov	r6, r0
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	e70f      	b.n	8000b08 <__udivmoddi4+0xd4>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	e730      	b.n	8000b50 <__udivmoddi4+0x11c>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_idiv0>:
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	0000      	movs	r0, r0
	...

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	b5b0      	push	{r4, r5, r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfe:	f000 fe0a 	bl	8001916 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d02:	f000 f8c9 	bl	8000e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d06:	f000 fafd 	bl	8001304 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d0a:	f000 fad1 	bl	80012b0 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000d0e:	f000 f987 	bl	8001020 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000d12:	f000 f90d 	bl	8000f30 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d16:	f000 f9cd 	bl	80010b4 <MX_TIM1_Init>
  MX_TIM5_Init();
 8000d1a:	f000 fa7b 	bl	8001214 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000d1e:	217f      	movs	r1, #127	@ 0x7f
 8000d20:	484f      	ldr	r0, [pc, #316]	@ (8000e60 <main+0x168>)
 8000d22:	f002 f977 	bl	8003014 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 40);
 8000d26:	2228      	movs	r2, #40	@ 0x28
 8000d28:	494e      	ldr	r1, [pc, #312]	@ (8000e64 <main+0x16c>)
 8000d2a:	484d      	ldr	r0, [pc, #308]	@ (8000e60 <main+0x168>)
 8000d2c:	f001 fa64 	bl	80021f8 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim1);
 8000d30:	484d      	ldr	r0, [pc, #308]	@ (8000e68 <main+0x170>)
 8000d32:	f004 f961 	bl	8004ff8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d36:	2100      	movs	r1, #0
 8000d38:	484b      	ldr	r0, [pc, #300]	@ (8000e68 <main+0x170>)
 8000d3a:	f004 faa7 	bl	800528c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000d3e:	2104      	movs	r1, #4
 8000d40:	4849      	ldr	r0, [pc, #292]	@ (8000e68 <main+0x170>)
 8000d42:	f004 faa3 	bl	800528c <HAL_TIM_PWM_Start>
  UARTInterruptConfig();
 8000d46:	f000 fb7d 	bl	8001444 <UARTInterruptConfig>
  HAL_TIM_Base_Start_IT(&htim5);
 8000d4a:	4848      	ldr	r0, [pc, #288]	@ (8000e6c <main+0x174>)
 8000d4c:	f004 f9c4 	bl	80050d8 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  avg();
 8000d50:	f000 fb46 	bl	80013e0 <avg>
	  static uint64_t timestamp = 0;
	  uint64_t currentTime = micros();
 8000d54:	f000 fbb6 	bl	80014c4 <micros>
 8000d58:	e9c7 0100 	strd	r0, r1, [r7]

	  if(currentTime > timestamp)
 8000d5c:	4b44      	ldr	r3, [pc, #272]	@ (8000e70 <main+0x178>)
 8000d5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d66:	4290      	cmp	r0, r2
 8000d68:	eb71 0303 	sbcs.w	r3, r1, r3
 8000d6c:	d225      	bcs.n	8000dba <main+0xc2>
	  {
		  timestamp = currentTime + 5000; //us 200 Hz
 8000d6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d72:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000d76:	1854      	adds	r4, r2, r1
 8000d78:	f143 0500 	adc.w	r5, r3, #0
 8000d7c:	4b3c      	ldr	r3, [pc, #240]	@ (8000e70 <main+0x178>)
 8000d7e:	e9c3 4500 	strd	r4, r5, [r3]
		  datasend = ADC_avg[0];
 8000d82:	4b3c      	ldr	r3, [pc, #240]	@ (8000e74 <main+0x17c>)
 8000d84:	881a      	ldrh	r2, [r3, #0]
 8000d86:	4b3c      	ldr	r3, [pc, #240]	@ (8000e78 <main+0x180>)
 8000d88:	801a      	strh	r2, [r3, #0]

		  ADCBytes[0] = 0x69; //Header
 8000d8a:	4b3c      	ldr	r3, [pc, #240]	@ (8000e7c <main+0x184>)
 8000d8c:	2269      	movs	r2, #105	@ 0x69
 8000d8e:	701a      	strb	r2, [r3, #0]
		  ADCBytes[1] = (uint8_t)(datasend & 0xFF); // Lower byte
 8000d90:	4b39      	ldr	r3, [pc, #228]	@ (8000e78 <main+0x180>)
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4b39      	ldr	r3, [pc, #228]	@ (8000e7c <main+0x184>)
 8000d98:	705a      	strb	r2, [r3, #1]
		  ADCBytes[2] = (uint8_t)((datasend >> 8) & 0xFF); // Upper byte
 8000d9a:	4b37      	ldr	r3, [pc, #220]	@ (8000e78 <main+0x180>)
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	0a1b      	lsrs	r3, r3, #8
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	4b35      	ldr	r3, [pc, #212]	@ (8000e7c <main+0x184>)
 8000da6:	709a      	strb	r2, [r3, #2]
		  ADCBytes[3] = 0x0A; //Terminater
 8000da8:	4b34      	ldr	r3, [pc, #208]	@ (8000e7c <main+0x184>)
 8000daa:	220a      	movs	r2, #10
 8000dac:	70da      	strb	r2, [r3, #3]

		  HAL_UART_Transmit(&hlpuart1, ADCBytes , sizeof(ADCBytes), 10);
 8000dae:	230a      	movs	r3, #10
 8000db0:	2204      	movs	r2, #4
 8000db2:	4932      	ldr	r1, [pc, #200]	@ (8000e7c <main+0x184>)
 8000db4:	4832      	ldr	r0, [pc, #200]	@ (8000e80 <main+0x188>)
 8000db6:	f005 fd7d 	bl	80068b4 <HAL_UART_Transmit>
	  }

	  Degree_position = (datasend*360.0)/4095.0;
 8000dba:	4b2f      	ldr	r3, [pc, #188]	@ (8000e78 <main+0x180>)
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fb7c 	bl	80004bc <__aeabi_i2d>
 8000dc4:	f04f 0200 	mov.w	r2, #0
 8000dc8:	4b2e      	ldr	r3, [pc, #184]	@ (8000e84 <main+0x18c>)
 8000dca:	f7ff fbe1 	bl	8000590 <__aeabi_dmul>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	4610      	mov	r0, r2
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	a31e      	add	r3, pc, #120	@ (adr r3, 8000e50 <main+0x158>)
 8000dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ddc:	f7ff fd02 	bl	80007e4 <__aeabi_ddiv>
 8000de0:	4602      	mov	r2, r0
 8000de2:	460b      	mov	r3, r1
 8000de4:	4610      	mov	r0, r2
 8000de6:	4619      	mov	r1, r3
 8000de8:	f7ff fde4 	bl	80009b4 <__aeabi_d2iz>
 8000dec:	4603      	mov	r3, r0
 8000dee:	4a26      	ldr	r2, [pc, #152]	@ (8000e88 <main+0x190>)
 8000df0:	6013      	str	r3, [r2, #0]
	  Rad_position = (datasend*3.14)/4095.0;
 8000df2:	4b21      	ldr	r3, [pc, #132]	@ (8000e78 <main+0x180>)
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fb60 	bl	80004bc <__aeabi_i2d>
 8000dfc:	a316      	add	r3, pc, #88	@ (adr r3, 8000e58 <main+0x160>)
 8000dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e02:	f7ff fbc5 	bl	8000590 <__aeabi_dmul>
 8000e06:	4602      	mov	r2, r0
 8000e08:	460b      	mov	r3, r1
 8000e0a:	4610      	mov	r0, r2
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	a310      	add	r3, pc, #64	@ (adr r3, 8000e50 <main+0x158>)
 8000e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e14:	f7ff fce6 	bl	80007e4 <__aeabi_ddiv>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	4610      	mov	r0, r2
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f7ff fdc8 	bl	80009b4 <__aeabi_d2iz>
 8000e24:	4603      	mov	r3, r0
 8000e26:	4a19      	ldr	r2, [pc, #100]	@ (8000e8c <main+0x194>)
 8000e28:	6013      	str	r3, [r2, #0]
	  PWM = (int16_t)(Recieve_PWM[2]<< 8) + Recieve_PWM[1];
 8000e2a:	4b19      	ldr	r3, [pc, #100]	@ (8000e90 <main+0x198>)
 8000e2c:	789b      	ldrb	r3, [r3, #2]
 8000e2e:	021b      	lsls	r3, r3, #8
 8000e30:	b21b      	sxth	r3, r3
 8000e32:	461a      	mov	r2, r3
 8000e34:	4b16      	ldr	r3, [pc, #88]	@ (8000e90 <main+0x198>)
 8000e36:	785b      	ldrb	r3, [r3, #1]
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a16      	ldr	r2, [pc, #88]	@ (8000e94 <main+0x19c>)
 8000e3c:	6013      	str	r3, [r2, #0]
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM);
 8000e3e:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <main+0x19c>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	4b09      	ldr	r3, [pc, #36]	@ (8000e68 <main+0x170>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	635a      	str	r2, [r3, #52]	@ 0x34
  {
 8000e48:	e782      	b.n	8000d50 <main+0x58>
 8000e4a:	bf00      	nop
 8000e4c:	f3af 8000 	nop.w
 8000e50:	00000000 	.word	0x00000000
 8000e54:	40affe00 	.word	0x40affe00
 8000e58:	51eb851f 	.word	0x51eb851f
 8000e5c:	40091eb8 	.word	0x40091eb8
 8000e60:	2000002c 	.word	0x2000002c
 8000e64:	20000224 	.word	0x20000224
 8000e68:	2000018c 	.word	0x2000018c
 8000e6c:	200001d8 	.word	0x200001d8
 8000e70:	200002a0 	.word	0x200002a0
 8000e74:	20000278 	.word	0x20000278
 8000e78:	20000280 	.word	0x20000280
 8000e7c:	2000027c 	.word	0x2000027c
 8000e80:	200000f8 	.word	0x200000f8
 8000e84:	40768000 	.word	0x40768000
 8000e88:	20000284 	.word	0x20000284
 8000e8c:	20000288 	.word	0x20000288
 8000e90:	2000028c 	.word	0x2000028c
 8000e94:	20000294 	.word	0x20000294

08000e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b094      	sub	sp, #80	@ 0x50
 8000e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9e:	f107 0318 	add.w	r3, r7, #24
 8000ea2:	2238      	movs	r2, #56	@ 0x38
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f008 f816 	bl	8008ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f003 f814 	bl	8003ee8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ec8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eca:	2340      	movs	r3, #64	@ 0x40
 8000ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000eda:	2355      	movs	r3, #85	@ 0x55
 8000edc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eea:	f107 0318 	add.w	r3, r7, #24
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f003 f8ae 	bl	8004050 <HAL_RCC_OscConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000efa:	f000 fafd 	bl	80014f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efe:	230f      	movs	r3, #15
 8000f00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f02:	2303      	movs	r3, #3
 8000f04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	2104      	movs	r1, #4
 8000f16:	4618      	mov	r0, r3
 8000f18:	f003 fbac 	bl	8004674 <HAL_RCC_ClockConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f22:	f000 fae9 	bl	80014f8 <Error_Handler>
  }
}
 8000f26:	bf00      	nop
 8000f28:	3750      	adds	r7, #80	@ 0x50
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08c      	sub	sp, #48	@ 0x30
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2220      	movs	r2, #32
 8000f46:	2100      	movs	r1, #0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f007 ffc5 	bl	8008ed8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f4e:	4b32      	ldr	r3, [pc, #200]	@ (8001018 <MX_ADC1_Init+0xe8>)
 8000f50:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f54:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f56:	4b30      	ldr	r3, [pc, #192]	@ (8001018 <MX_ADC1_Init+0xe8>)
 8000f58:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f5c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f5e:	4b2e      	ldr	r3, [pc, #184]	@ (8001018 <MX_ADC1_Init+0xe8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f64:	4b2c      	ldr	r3, [pc, #176]	@ (8001018 <MX_ADC1_Init+0xe8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f6a:	4b2b      	ldr	r3, [pc, #172]	@ (8001018 <MX_ADC1_Init+0xe8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f70:	4b29      	ldr	r3, [pc, #164]	@ (8001018 <MX_ADC1_Init+0xe8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f76:	4b28      	ldr	r3, [pc, #160]	@ (8001018 <MX_ADC1_Init+0xe8>)
 8000f78:	2204      	movs	r2, #4
 8000f7a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f7c:	4b26      	ldr	r3, [pc, #152]	@ (8001018 <MX_ADC1_Init+0xe8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f82:	4b25      	ldr	r3, [pc, #148]	@ (8001018 <MX_ADC1_Init+0xe8>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f88:	4b23      	ldr	r3, [pc, #140]	@ (8001018 <MX_ADC1_Init+0xe8>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f8e:	4b22      	ldr	r3, [pc, #136]	@ (8001018 <MX_ADC1_Init+0xe8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f96:	4b20      	ldr	r3, [pc, #128]	@ (8001018 <MX_ADC1_Init+0xe8>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001018 <MX_ADC1_Init+0xe8>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fa2:	4b1d      	ldr	r3, [pc, #116]	@ (8001018 <MX_ADC1_Init+0xe8>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000faa:	4b1b      	ldr	r3, [pc, #108]	@ (8001018 <MX_ADC1_Init+0xe8>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000fb0:	4b19      	ldr	r3, [pc, #100]	@ (8001018 <MX_ADC1_Init+0xe8>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fb8:	4817      	ldr	r0, [pc, #92]	@ (8001018 <MX_ADC1_Init+0xe8>)
 8000fba:	f000 ff61 	bl	8001e80 <HAL_ADC_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000fc4:	f000 fa98 	bl	80014f8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4811      	ldr	r0, [pc, #68]	@ (8001018 <MX_ADC1_Init+0xe8>)
 8000fd4:	f002 f880 	bl	80030d8 <HAL_ADCEx_MultiModeConfigChannel>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000fde:	f000 fa8b 	bl	80014f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <MX_ADC1_Init+0xec>)
 8000fe4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fe6:	2306      	movs	r3, #6
 8000fe8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000fea:	2307      	movs	r3, #7
 8000fec:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fee:	237f      	movs	r3, #127	@ 0x7f
 8000ff0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4806      	ldr	r0, [pc, #24]	@ (8001018 <MX_ADC1_Init+0xe8>)
 8001000:	f001 f9ec 	bl	80023dc <HAL_ADC_ConfigChannel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800100a:	f000 fa75 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	3730      	adds	r7, #48	@ 0x30
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	2000002c 	.word	0x2000002c
 800101c:	04300002 	.word	0x04300002

08001020 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001024:	4b21      	ldr	r3, [pc, #132]	@ (80010ac <MX_LPUART1_UART_Init+0x8c>)
 8001026:	4a22      	ldr	r2, [pc, #136]	@ (80010b0 <MX_LPUART1_UART_Init+0x90>)
 8001028:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800102a:	4b20      	ldr	r3, [pc, #128]	@ (80010ac <MX_LPUART1_UART_Init+0x8c>)
 800102c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001030:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001032:	4b1e      	ldr	r3, [pc, #120]	@ (80010ac <MX_LPUART1_UART_Init+0x8c>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001038:	4b1c      	ldr	r3, [pc, #112]	@ (80010ac <MX_LPUART1_UART_Init+0x8c>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800103e:	4b1b      	ldr	r3, [pc, #108]	@ (80010ac <MX_LPUART1_UART_Init+0x8c>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001044:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <MX_LPUART1_UART_Init+0x8c>)
 8001046:	220c      	movs	r2, #12
 8001048:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104a:	4b18      	ldr	r3, [pc, #96]	@ (80010ac <MX_LPUART1_UART_Init+0x8c>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001050:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <MX_LPUART1_UART_Init+0x8c>)
 8001052:	2200      	movs	r2, #0
 8001054:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001056:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <MX_LPUART1_UART_Init+0x8c>)
 8001058:	2200      	movs	r2, #0
 800105a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800105c:	4b13      	ldr	r3, [pc, #76]	@ (80010ac <MX_LPUART1_UART_Init+0x8c>)
 800105e:	2200      	movs	r2, #0
 8001060:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001062:	4812      	ldr	r0, [pc, #72]	@ (80010ac <MX_LPUART1_UART_Init+0x8c>)
 8001064:	f005 fbd6 	bl	8006814 <HAL_UART_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800106e:	f000 fa43 	bl	80014f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001072:	2100      	movs	r1, #0
 8001074:	480d      	ldr	r0, [pc, #52]	@ (80010ac <MX_LPUART1_UART_Init+0x8c>)
 8001076:	f007 fe64 	bl	8008d42 <HAL_UARTEx_SetTxFifoThreshold>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001080:	f000 fa3a 	bl	80014f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001084:	2100      	movs	r1, #0
 8001086:	4809      	ldr	r0, [pc, #36]	@ (80010ac <MX_LPUART1_UART_Init+0x8c>)
 8001088:	f007 fe99 	bl	8008dbe <HAL_UARTEx_SetRxFifoThreshold>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001092:	f000 fa31 	bl	80014f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001096:	4805      	ldr	r0, [pc, #20]	@ (80010ac <MX_LPUART1_UART_Init+0x8c>)
 8001098:	f007 fe1a 	bl	8008cd0 <HAL_UARTEx_DisableFifoMode>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80010a2:	f000 fa29 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200000f8 	.word	0x200000f8
 80010b0:	40008000 	.word	0x40008000

080010b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b09c      	sub	sp, #112	@ 0x70
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ba:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010d4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
 80010e4:	615a      	str	r2, [r3, #20]
 80010e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	2234      	movs	r2, #52	@ 0x34
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f007 fef2 	bl	8008ed8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010f4:	4b45      	ldr	r3, [pc, #276]	@ (800120c <MX_TIM1_Init+0x158>)
 80010f6:	4a46      	ldr	r2, [pc, #280]	@ (8001210 <MX_TIM1_Init+0x15c>)
 80010f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 80010fa:	4b44      	ldr	r3, [pc, #272]	@ (800120c <MX_TIM1_Init+0x158>)
 80010fc:	22a9      	movs	r2, #169	@ 0xa9
 80010fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001100:	4b42      	ldr	r3, [pc, #264]	@ (800120c <MX_TIM1_Init+0x158>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001106:	4b41      	ldr	r3, [pc, #260]	@ (800120c <MX_TIM1_Init+0x158>)
 8001108:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800110c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110e:	4b3f      	ldr	r3, [pc, #252]	@ (800120c <MX_TIM1_Init+0x158>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001114:	4b3d      	ldr	r3, [pc, #244]	@ (800120c <MX_TIM1_Init+0x158>)
 8001116:	2200      	movs	r2, #0
 8001118:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111a:	4b3c      	ldr	r3, [pc, #240]	@ (800120c <MX_TIM1_Init+0x158>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001120:	483a      	ldr	r0, [pc, #232]	@ (800120c <MX_TIM1_Init+0x158>)
 8001122:	f003 ff11 	bl	8004f48 <HAL_TIM_Base_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800112c:	f000 f9e4 	bl	80014f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001130:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001134:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001136:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800113a:	4619      	mov	r1, r3
 800113c:	4833      	ldr	r0, [pc, #204]	@ (800120c <MX_TIM1_Init+0x158>)
 800113e:	f004 fc1b 	bl	8005978 <HAL_TIM_ConfigClockSource>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001148:	f000 f9d6 	bl	80014f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800114c:	482f      	ldr	r0, [pc, #188]	@ (800120c <MX_TIM1_Init+0x158>)
 800114e:	f004 f83b 	bl	80051c8 <HAL_TIM_PWM_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001158:	f000 f9ce 	bl	80014f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800115c:	2300      	movs	r3, #0
 800115e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001160:	2300      	movs	r3, #0
 8001162:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001168:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800116c:	4619      	mov	r1, r3
 800116e:	4827      	ldr	r0, [pc, #156]	@ (800120c <MX_TIM1_Init+0x158>)
 8001170:	f005 f9e0 	bl	8006534 <HAL_TIMEx_MasterConfigSynchronization>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800117a:	f000 f9bd 	bl	80014f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800117e:	2360      	movs	r3, #96	@ 0x60
 8001180:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001186:	2300      	movs	r3, #0
 8001188:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800118a:	2300      	movs	r3, #0
 800118c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800118e:	2300      	movs	r3, #0
 8001190:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001192:	2300      	movs	r3, #0
 8001194:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001196:	2300      	movs	r3, #0
 8001198:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800119a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800119e:	2200      	movs	r2, #0
 80011a0:	4619      	mov	r1, r3
 80011a2:	481a      	ldr	r0, [pc, #104]	@ (800120c <MX_TIM1_Init+0x158>)
 80011a4:	f004 fad4 	bl	8005750 <HAL_TIM_PWM_ConfigChannel>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80011ae:	f000 f9a3 	bl	80014f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80011e2:	2300      	movs	r3, #0
 80011e4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	4619      	mov	r1, r3
 80011ee:	4807      	ldr	r0, [pc, #28]	@ (800120c <MX_TIM1_Init+0x158>)
 80011f0:	f005 fa36 	bl	8006660 <HAL_TIMEx_ConfigBreakDeadTime>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80011fa:	f000 f97d 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011fe:	4803      	ldr	r0, [pc, #12]	@ (800120c <MX_TIM1_Init+0x158>)
 8001200:	f000 fac0 	bl	8001784 <HAL_TIM_MspPostInit>

}
 8001204:	bf00      	nop
 8001206:	3770      	adds	r7, #112	@ 0x70
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	2000018c 	.word	0x2000018c
 8001210:	40012c00 	.word	0x40012c00

08001214 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121a:	f107 0310 	add.w	r3, r7, #16
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001232:	4b1d      	ldr	r3, [pc, #116]	@ (80012a8 <MX_TIM5_Init+0x94>)
 8001234:	4a1d      	ldr	r2, [pc, #116]	@ (80012ac <MX_TIM5_Init+0x98>)
 8001236:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8001238:	4b1b      	ldr	r3, [pc, #108]	@ (80012a8 <MX_TIM5_Init+0x94>)
 800123a:	22a9      	movs	r2, #169	@ 0xa9
 800123c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123e:	4b1a      	ldr	r3, [pc, #104]	@ (80012a8 <MX_TIM5_Init+0x94>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001244:	4b18      	ldr	r3, [pc, #96]	@ (80012a8 <MX_TIM5_Init+0x94>)
 8001246:	f04f 32ff 	mov.w	r2, #4294967295
 800124a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124c:	4b16      	ldr	r3, [pc, #88]	@ (80012a8 <MX_TIM5_Init+0x94>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001252:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <MX_TIM5_Init+0x94>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001258:	4813      	ldr	r0, [pc, #76]	@ (80012a8 <MX_TIM5_Init+0x94>)
 800125a:	f003 fe75 	bl	8004f48 <HAL_TIM_Base_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001264:	f000 f948 	bl	80014f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001268:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800126c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800126e:	f107 0310 	add.w	r3, r7, #16
 8001272:	4619      	mov	r1, r3
 8001274:	480c      	ldr	r0, [pc, #48]	@ (80012a8 <MX_TIM5_Init+0x94>)
 8001276:	f004 fb7f 	bl	8005978 <HAL_TIM_ConfigClockSource>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001280:	f000 f93a 	bl	80014f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001284:	2300      	movs	r3, #0
 8001286:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	4619      	mov	r1, r3
 8001290:	4805      	ldr	r0, [pc, #20]	@ (80012a8 <MX_TIM5_Init+0x94>)
 8001292:	f005 f94f 	bl	8006534 <HAL_TIMEx_MasterConfigSynchronization>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800129c:	f000 f92c 	bl	80014f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	3720      	adds	r7, #32
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	200001d8 	.word	0x200001d8
 80012ac:	40000c00 	.word	0x40000c00

080012b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012b6:	4b12      	ldr	r3, [pc, #72]	@ (8001300 <MX_DMA_Init+0x50>)
 80012b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012ba:	4a11      	ldr	r2, [pc, #68]	@ (8001300 <MX_DMA_Init+0x50>)
 80012bc:	f043 0304 	orr.w	r3, r3, #4
 80012c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80012c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001300 <MX_DMA_Init+0x50>)
 80012c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <MX_DMA_Init+0x50>)
 80012d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001300 <MX_DMA_Init+0x50>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80012da:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <MX_DMA_Init+0x50>)
 80012dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	200b      	movs	r0, #11
 80012ec:	f002 f8d7 	bl	800349e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012f0:	200b      	movs	r0, #11
 80012f2:	f002 f8ee 	bl	80034d2 <HAL_NVIC_EnableIRQ>

}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40021000 	.word	0x40021000

08001304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	@ 0x28
 8001308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800131a:	4b2f      	ldr	r3, [pc, #188]	@ (80013d8 <MX_GPIO_Init+0xd4>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131e:	4a2e      	ldr	r2, [pc, #184]	@ (80013d8 <MX_GPIO_Init+0xd4>)
 8001320:	f043 0304 	orr.w	r3, r3, #4
 8001324:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001326:	4b2c      	ldr	r3, [pc, #176]	@ (80013d8 <MX_GPIO_Init+0xd4>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	f003 0304 	and.w	r3, r3, #4
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001332:	4b29      	ldr	r3, [pc, #164]	@ (80013d8 <MX_GPIO_Init+0xd4>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	4a28      	ldr	r2, [pc, #160]	@ (80013d8 <MX_GPIO_Init+0xd4>)
 8001338:	f043 0320 	orr.w	r3, r3, #32
 800133c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800133e:	4b26      	ldr	r3, [pc, #152]	@ (80013d8 <MX_GPIO_Init+0xd4>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001342:	f003 0320 	and.w	r3, r3, #32
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	4b23      	ldr	r3, [pc, #140]	@ (80013d8 <MX_GPIO_Init+0xd4>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134e:	4a22      	ldr	r2, [pc, #136]	@ (80013d8 <MX_GPIO_Init+0xd4>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001356:	4b20      	ldr	r3, [pc, #128]	@ (80013d8 <MX_GPIO_Init+0xd4>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	4b1d      	ldr	r3, [pc, #116]	@ (80013d8 <MX_GPIO_Init+0xd4>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001366:	4a1c      	ldr	r2, [pc, #112]	@ (80013d8 <MX_GPIO_Init+0xd4>)
 8001368:	f043 0302 	orr.w	r3, r3, #2
 800136c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800136e:	4b1a      	ldr	r3, [pc, #104]	@ (80013d8 <MX_GPIO_Init+0xd4>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	2120      	movs	r1, #32
 800137e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001382:	f002 fd75 	bl	8003e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001386:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800138a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800138c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	480f      	ldr	r0, [pc, #60]	@ (80013dc <MX_GPIO_Init+0xd8>)
 800139e:	f002 fbe5 	bl	8003b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013a2:	2320      	movs	r3, #32
 80013a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a6:	2301      	movs	r3, #1
 80013a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013bc:	f002 fbd6 	bl	8003b6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2100      	movs	r1, #0
 80013c4:	2028      	movs	r0, #40	@ 0x28
 80013c6:	f002 f86a 	bl	800349e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013ca:	2028      	movs	r0, #40	@ 0x28
 80013cc:	f002 f881 	bl	80034d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013d0:	bf00      	nop
 80013d2:	3728      	adds	r7, #40	@ 0x28
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40021000 	.word	0x40021000
 80013dc:	48000800 	.word	0x48000800

080013e0 <avg>:

/* USER CODE BEGIN 4 */
void avg()
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 40; i++)
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	e00b      	b.n	8001404 <avg+0x24>
	{
		ADC_sum[0] += ADC_RawRead[(i)];
 80013ec:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <avg+0x54>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4911      	ldr	r1, [pc, #68]	@ (8001438 <avg+0x58>)
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001434 <avg+0x54>)
 80013fc:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 40; i++)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3301      	adds	r3, #1
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b27      	cmp	r3, #39	@ 0x27
 8001408:	ddf0      	ble.n	80013ec <avg+0xc>
	}
		ADC_avg[0] = ADC_sum[0]/40;
 800140a:	4b0a      	ldr	r3, [pc, #40]	@ (8001434 <avg+0x54>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a0b      	ldr	r2, [pc, #44]	@ (800143c <avg+0x5c>)
 8001410:	fb82 1203 	smull	r1, r2, r2, r3
 8001414:	1112      	asrs	r2, r2, #4
 8001416:	17db      	asrs	r3, r3, #31
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	b29a      	uxth	r2, r3
 800141c:	4b08      	ldr	r3, [pc, #32]	@ (8001440 <avg+0x60>)
 800141e:	801a      	strh	r2, [r3, #0]
		ADC_sum[0] = 0;
 8001420:	4b04      	ldr	r3, [pc, #16]	@ (8001434 <avg+0x54>)
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20000274 	.word	0x20000274
 8001438:	20000224 	.word	0x20000224
 800143c:	66666667 	.word	0x66666667
 8001440:	20000278 	.word	0x20000278

08001444 <UARTInterruptConfig>:
void UARTInterruptConfig()
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&hlpuart1, Recieve_PWM, 4);
 8001448:	2204      	movs	r2, #4
 800144a:	4903      	ldr	r1, [pc, #12]	@ (8001458 <UARTInterruptConfig+0x14>)
 800144c:	4803      	ldr	r0, [pc, #12]	@ (800145c <UARTInterruptConfig+0x18>)
 800144e:	f005 fb53 	bl	8006af8 <HAL_UART_Receive_IT>
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2000028c 	.word	0x2000028c
 800145c:	200000f8 	.word	0x200000f8

08001460 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	if(huart == &hlpuart1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a07      	ldr	r2, [pc, #28]	@ (8001488 <HAL_UART_RxCpltCallback+0x28>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d107      	bne.n	8001480 <HAL_UART_RxCpltCallback+0x20>
	{
		Recieve_PWM[4] = '\0';
 8001470:	4b06      	ldr	r3, [pc, #24]	@ (800148c <HAL_UART_RxCpltCallback+0x2c>)
 8001472:	2200      	movs	r2, #0
 8001474:	711a      	strb	r2, [r3, #4]
		HAL_UART_Transmit_IT(&hlpuart1, Recieve_PWM, 4);
 8001476:	2204      	movs	r2, #4
 8001478:	4904      	ldr	r1, [pc, #16]	@ (800148c <HAL_UART_RxCpltCallback+0x2c>)
 800147a:	4803      	ldr	r0, [pc, #12]	@ (8001488 <HAL_UART_RxCpltCallback+0x28>)
 800147c:	f005 faa8 	bl	80069d0 <HAL_UART_Transmit_IT>
	}
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200000f8 	.word	0x200000f8
 800148c:	2000028c 	.word	0x2000028c

08001490 <HAL_TIM_PeriodElapsedCallback>:
//MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001490:	b4b0      	push	{r4, r5, r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a08      	ldr	r2, [pc, #32]	@ (80014bc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d108      	bne.n	80014b2 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += UINT32_MAX;
 80014a0:	4b07      	ldr	r3, [pc, #28]	@ (80014c0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80014a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a6:	1e54      	subs	r4, r2, #1
 80014a8:	f143 0500 	adc.w	r5, r3, #0
 80014ac:	4b04      	ldr	r3, [pc, #16]	@ (80014c0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80014ae:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bcb0      	pop	{r4, r5, r7}
 80014ba:	4770      	bx	lr
 80014bc:	200001d8 	.word	0x200001d8
 80014c0:	20000298 	.word	0x20000298

080014c4 <micros>:
uint64_t micros()
{
 80014c4:	b4b0      	push	{r4, r5, r7}
 80014c6:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 80014c8:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <micros+0x2c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ce:	2200      	movs	r2, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	4611      	mov	r1, r2
 80014d4:	4b07      	ldr	r3, [pc, #28]	@ (80014f4 <micros+0x30>)
 80014d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014da:	1884      	adds	r4, r0, r2
 80014dc:	eb41 0503 	adc.w	r5, r1, r3
 80014e0:	4622      	mov	r2, r4
 80014e2:	462b      	mov	r3, r5
}
 80014e4:	4610      	mov	r0, r2
 80014e6:	4619      	mov	r1, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bcb0      	pop	{r4, r5, r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	200001d8 	.word	0x200001d8
 80014f4:	20000298 	.word	0x20000298

080014f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014fc:	b672      	cpsid	i
}
 80014fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <Error_Handler+0x8>

08001504 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150a:	4b0f      	ldr	r3, [pc, #60]	@ (8001548 <HAL_MspInit+0x44>)
 800150c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800150e:	4a0e      	ldr	r2, [pc, #56]	@ (8001548 <HAL_MspInit+0x44>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6613      	str	r3, [r2, #96]	@ 0x60
 8001516:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <HAL_MspInit+0x44>)
 8001518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <HAL_MspInit+0x44>)
 8001524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001526:	4a08      	ldr	r2, [pc, #32]	@ (8001548 <HAL_MspInit+0x44>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800152c:	6593      	str	r3, [r2, #88]	@ 0x58
 800152e:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <HAL_MspInit+0x44>)
 8001530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800153a:	f002 fd79 	bl	8004030 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40021000 	.word	0x40021000

0800154c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b09e      	sub	sp, #120	@ 0x78
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001564:	f107 0310 	add.w	r3, r7, #16
 8001568:	2254      	movs	r2, #84	@ 0x54
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f007 fcb3 	bl	8008ed8 <memset>
  if(hadc->Instance==ADC1)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800157a:	d15f      	bne.n	800163c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800157c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001580:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001582:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001586:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	4618      	mov	r0, r3
 800158e:	f003 fa8d 	bl	8004aac <HAL_RCCEx_PeriphCLKConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001598:	f7ff ffae 	bl	80014f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800159c:	4b29      	ldr	r3, [pc, #164]	@ (8001644 <HAL_ADC_MspInit+0xf8>)
 800159e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a0:	4a28      	ldr	r2, [pc, #160]	@ (8001644 <HAL_ADC_MspInit+0xf8>)
 80015a2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a8:	4b26      	ldr	r3, [pc, #152]	@ (8001644 <HAL_ADC_MspInit+0xf8>)
 80015aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b4:	4b23      	ldr	r3, [pc, #140]	@ (8001644 <HAL_ADC_MspInit+0xf8>)
 80015b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b8:	4a22      	ldr	r2, [pc, #136]	@ (8001644 <HAL_ADC_MspInit+0xf8>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015c0:	4b20      	ldr	r3, [pc, #128]	@ (8001644 <HAL_ADC_MspInit+0xf8>)
 80015c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015cc:	2301      	movs	r3, #1
 80015ce:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d0:	2303      	movs	r3, #3
 80015d2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015dc:	4619      	mov	r1, r3
 80015de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015e2:	f002 fac3 	bl	8003b6c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80015e6:	4b18      	ldr	r3, [pc, #96]	@ (8001648 <HAL_ADC_MspInit+0xfc>)
 80015e8:	4a18      	ldr	r2, [pc, #96]	@ (800164c <HAL_ADC_MspInit+0x100>)
 80015ea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80015ec:	4b16      	ldr	r3, [pc, #88]	@ (8001648 <HAL_ADC_MspInit+0xfc>)
 80015ee:	2205      	movs	r2, #5
 80015f0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015f2:	4b15      	ldr	r3, [pc, #84]	@ (8001648 <HAL_ADC_MspInit+0xfc>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f8:	4b13      	ldr	r3, [pc, #76]	@ (8001648 <HAL_ADC_MspInit+0xfc>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015fe:	4b12      	ldr	r3, [pc, #72]	@ (8001648 <HAL_ADC_MspInit+0xfc>)
 8001600:	2280      	movs	r2, #128	@ 0x80
 8001602:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001604:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <HAL_ADC_MspInit+0xfc>)
 8001606:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800160a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800160c:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <HAL_ADC_MspInit+0xfc>)
 800160e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001612:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001614:	4b0c      	ldr	r3, [pc, #48]	@ (8001648 <HAL_ADC_MspInit+0xfc>)
 8001616:	2220      	movs	r2, #32
 8001618:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800161a:	4b0b      	ldr	r3, [pc, #44]	@ (8001648 <HAL_ADC_MspInit+0xfc>)
 800161c:	2200      	movs	r2, #0
 800161e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001620:	4809      	ldr	r0, [pc, #36]	@ (8001648 <HAL_ADC_MspInit+0xfc>)
 8001622:	f001 ff71 	bl	8003508 <HAL_DMA_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800162c:	f7ff ff64 	bl	80014f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a05      	ldr	r2, [pc, #20]	@ (8001648 <HAL_ADC_MspInit+0xfc>)
 8001634:	655a      	str	r2, [r3, #84]	@ 0x54
 8001636:	4a04      	ldr	r2, [pc, #16]	@ (8001648 <HAL_ADC_MspInit+0xfc>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800163c:	bf00      	nop
 800163e:	3778      	adds	r7, #120	@ 0x78
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40021000 	.word	0x40021000
 8001648:	20000098 	.word	0x20000098
 800164c:	40020008 	.word	0x40020008

08001650 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b09e      	sub	sp, #120	@ 0x78
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001668:	f107 0310 	add.w	r3, r7, #16
 800166c:	2254      	movs	r2, #84	@ 0x54
 800166e:	2100      	movs	r1, #0
 8001670:	4618      	mov	r0, r3
 8001672:	f007 fc31 	bl	8008ed8 <memset>
  if(huart->Instance==LPUART1)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a23      	ldr	r2, [pc, #140]	@ (8001708 <HAL_UART_MspInit+0xb8>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d13e      	bne.n	80016fe <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001680:	2320      	movs	r3, #32
 8001682:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001684:	2300      	movs	r3, #0
 8001686:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	4618      	mov	r0, r3
 800168e:	f003 fa0d 	bl	8004aac <HAL_RCCEx_PeriphCLKConfig>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001698:	f7ff ff2e 	bl	80014f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800169c:	4b1b      	ldr	r3, [pc, #108]	@ (800170c <HAL_UART_MspInit+0xbc>)
 800169e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016a0:	4a1a      	ldr	r2, [pc, #104]	@ (800170c <HAL_UART_MspInit+0xbc>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80016a8:	4b18      	ldr	r3, [pc, #96]	@ (800170c <HAL_UART_MspInit+0xbc>)
 80016aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	4b15      	ldr	r3, [pc, #84]	@ (800170c <HAL_UART_MspInit+0xbc>)
 80016b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b8:	4a14      	ldr	r2, [pc, #80]	@ (800170c <HAL_UART_MspInit+0xbc>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016c0:	4b12      	ldr	r3, [pc, #72]	@ (800170c <HAL_UART_MspInit+0xbc>)
 80016c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80016cc:	230c      	movs	r3, #12
 80016ce:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80016dc:	230c      	movs	r3, #12
 80016de:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80016e4:	4619      	mov	r1, r3
 80016e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ea:	f002 fa3f 	bl	8003b6c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	205b      	movs	r0, #91	@ 0x5b
 80016f4:	f001 fed3 	bl	800349e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80016f8:	205b      	movs	r0, #91	@ 0x5b
 80016fa:	f001 feea 	bl	80034d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80016fe:	bf00      	nop
 8001700:	3778      	adds	r7, #120	@ 0x78
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40008000 	.word	0x40008000
 800170c:	40021000 	.word	0x40021000

08001710 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a16      	ldr	r2, [pc, #88]	@ (8001778 <HAL_TIM_Base_MspInit+0x68>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d10c      	bne.n	800173c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001722:	4b16      	ldr	r3, [pc, #88]	@ (800177c <HAL_TIM_Base_MspInit+0x6c>)
 8001724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001726:	4a15      	ldr	r2, [pc, #84]	@ (800177c <HAL_TIM_Base_MspInit+0x6c>)
 8001728:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800172c:	6613      	str	r3, [r2, #96]	@ 0x60
 800172e:	4b13      	ldr	r3, [pc, #76]	@ (800177c <HAL_TIM_Base_MspInit+0x6c>)
 8001730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001732:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800173a:	e018      	b.n	800176e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0f      	ldr	r2, [pc, #60]	@ (8001780 <HAL_TIM_Base_MspInit+0x70>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d113      	bne.n	800176e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001746:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <HAL_TIM_Base_MspInit+0x6c>)
 8001748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800174a:	4a0c      	ldr	r2, [pc, #48]	@ (800177c <HAL_TIM_Base_MspInit+0x6c>)
 800174c:	f043 0308 	orr.w	r3, r3, #8
 8001750:	6593      	str	r3, [r2, #88]	@ 0x58
 8001752:	4b0a      	ldr	r3, [pc, #40]	@ (800177c <HAL_TIM_Base_MspInit+0x6c>)
 8001754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	2032      	movs	r0, #50	@ 0x32
 8001764:	f001 fe9b 	bl	800349e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001768:	2032      	movs	r0, #50	@ 0x32
 800176a:	f001 feb2 	bl	80034d2 <HAL_NVIC_EnableIRQ>
}
 800176e:	bf00      	nop
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40012c00 	.word	0x40012c00
 800177c:	40021000 	.word	0x40021000
 8001780:	40000c00 	.word	0x40000c00

08001784 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b088      	sub	sp, #32
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 030c 	add.w	r3, r7, #12
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a11      	ldr	r2, [pc, #68]	@ (80017e8 <HAL_TIM_MspPostInit+0x64>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d11b      	bne.n	80017de <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a6:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <HAL_TIM_MspPostInit+0x68>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017aa:	4a10      	ldr	r2, [pc, #64]	@ (80017ec <HAL_TIM_MspPostInit+0x68>)
 80017ac:	f043 0304 	orr.w	r3, r3, #4
 80017b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017b2:	4b0e      	ldr	r3, [pc, #56]	@ (80017ec <HAL_TIM_MspPostInit+0x68>)
 80017b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017be:	2301      	movs	r3, #1
 80017c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80017ce:	2302      	movs	r3, #2
 80017d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d2:	f107 030c 	add.w	r3, r7, #12
 80017d6:	4619      	mov	r1, r3
 80017d8:	4805      	ldr	r0, [pc, #20]	@ (80017f0 <HAL_TIM_MspPostInit+0x6c>)
 80017da:	f002 f9c7 	bl	8003b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017de:	bf00      	nop
 80017e0:	3720      	adds	r7, #32
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40012c00 	.word	0x40012c00
 80017ec:	40021000 	.word	0x40021000
 80017f0:	48000800 	.word	0x48000800

080017f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <NMI_Handler+0x4>

080017fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <HardFault_Handler+0x4>

08001804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <MemManage_Handler+0x4>

0800180c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <BusFault_Handler+0x4>

08001814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001818:	bf00      	nop
 800181a:	e7fd      	b.n	8001818 <UsageFault_Handler+0x4>

0800181c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800184a:	f000 f8b7 	bl	80019bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001858:	4802      	ldr	r0, [pc, #8]	@ (8001864 <DMA1_Channel1_IRQHandler+0x10>)
 800185a:	f002 f838 	bl	80038ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000098 	.word	0x20000098

08001868 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800186c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001870:	f002 fb16 	bl	8003ea0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}

08001878 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800187c:	4802      	ldr	r0, [pc, #8]	@ (8001888 <TIM5_IRQHandler+0x10>)
 800187e:	f003 fe17 	bl	80054b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200001d8 	.word	0x200001d8

0800188c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001890:	4802      	ldr	r0, [pc, #8]	@ (800189c <LPUART1_IRQHandler+0x10>)
 8001892:	f005 f97d 	bl	8006b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200000f8 	.word	0x200000f8

080018a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018a4:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <SystemInit+0x20>)
 80018a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018aa:	4a05      	ldr	r2, [pc, #20]	@ (80018c0 <SystemInit+0x20>)
 80018ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018c4:	480d      	ldr	r0, [pc, #52]	@ (80018fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018c8:	f7ff ffea 	bl	80018a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018cc:	480c      	ldr	r0, [pc, #48]	@ (8001900 <LoopForever+0x6>)
  ldr r1, =_edata
 80018ce:	490d      	ldr	r1, [pc, #52]	@ (8001904 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001908 <LoopForever+0xe>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80018d4:	e002      	b.n	80018dc <LoopCopyDataInit>

080018d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018da:	3304      	adds	r3, #4

080018dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e0:	d3f9      	bcc.n	80018d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018e2:	4a0a      	ldr	r2, [pc, #40]	@ (800190c <LoopForever+0x12>)
  ldr r4, =_ebss
 80018e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001910 <LoopForever+0x16>)
  movs r3, #0
 80018e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e8:	e001      	b.n	80018ee <LoopFillZerobss>

080018ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ec:	3204      	adds	r2, #4

080018ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f0:	d3fb      	bcc.n	80018ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018f2:	f007 faf9 	bl	8008ee8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018f6:	f7ff f9ff 	bl	8000cf8 <main>

080018fa <LoopForever>:

LoopForever:
    b LoopForever
 80018fa:	e7fe      	b.n	80018fa <LoopForever>
  ldr   r0, =_estack
 80018fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001904:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001908:	08008f98 	.word	0x08008f98
  ldr r2, =_sbss
 800190c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001910:	200002ac 	.word	0x200002ac

08001914 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001914:	e7fe      	b.n	8001914 <ADC1_2_IRQHandler>

08001916 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001920:	2003      	movs	r0, #3
 8001922:	f001 fdb1 	bl	8003488 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001926:	2000      	movs	r0, #0
 8001928:	f000 f80e 	bl	8001948 <HAL_InitTick>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d002      	beq.n	8001938 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	71fb      	strb	r3, [r7, #7]
 8001936:	e001      	b.n	800193c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001938:	f7ff fde4 	bl	8001504 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800193c:	79fb      	ldrb	r3, [r7, #7]

}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001950:	2300      	movs	r3, #0
 8001952:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001954:	4b16      	ldr	r3, [pc, #88]	@ (80019b0 <HAL_InitTick+0x68>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d022      	beq.n	80019a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800195c:	4b15      	ldr	r3, [pc, #84]	@ (80019b4 <HAL_InitTick+0x6c>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b13      	ldr	r3, [pc, #76]	@ (80019b0 <HAL_InitTick+0x68>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001968:	fbb1 f3f3 	udiv	r3, r1, r3
 800196c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001970:	4618      	mov	r0, r3
 8001972:	f001 fdbc 	bl	80034ee <HAL_SYSTICK_Config>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10f      	bne.n	800199c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b0f      	cmp	r3, #15
 8001980:	d809      	bhi.n	8001996 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001982:	2200      	movs	r2, #0
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	f04f 30ff 	mov.w	r0, #4294967295
 800198a:	f001 fd88 	bl	800349e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800198e:	4a0a      	ldr	r2, [pc, #40]	@ (80019b8 <HAL_InitTick+0x70>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	e007      	b.n	80019a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	73fb      	strb	r3, [r7, #15]
 800199a:	e004      	b.n	80019a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
 80019a0:	e001      	b.n	80019a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000008 	.word	0x20000008
 80019b4:	20000000 	.word	0x20000000
 80019b8:	20000004 	.word	0x20000004

080019bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c0:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <HAL_IncTick+0x1c>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b05      	ldr	r3, [pc, #20]	@ (80019dc <HAL_IncTick+0x20>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4413      	add	r3, r2
 80019ca:	4a03      	ldr	r2, [pc, #12]	@ (80019d8 <HAL_IncTick+0x1c>)
 80019cc:	6013      	str	r3, [r2, #0]
}
 80019ce:	bf00      	nop
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	200002a8 	.word	0x200002a8
 80019dc:	20000008 	.word	0x20000008

080019e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return uwTick;
 80019e4:	4b03      	ldr	r3, [pc, #12]	@ (80019f4 <HAL_GetTick+0x14>)
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	200002a8 	.word	0x200002a8

080019f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	609a      	str	r2, [r3, #8]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	609a      	str	r2, [r3, #8]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b087      	sub	sp, #28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
 8001a6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	3360      	adds	r3, #96	@ 0x60
 8001a72:	461a      	mov	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <LL_ADC_SetOffset+0x44>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a98:	bf00      	nop
 8001a9a:	371c      	adds	r7, #28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	03fff000 	.word	0x03fff000

08001aa8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3360      	adds	r3, #96	@ 0x60
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b087      	sub	sp, #28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	3360      	adds	r3, #96	@ 0x60
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	431a      	orrs	r2, r3
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001afe:	bf00      	nop
 8001b00:	371c      	adds	r7, #28
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b087      	sub	sp, #28
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	60f8      	str	r0, [r7, #12]
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	3360      	adds	r3, #96	@ 0x60
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001b34:	bf00      	nop
 8001b36:	371c      	adds	r7, #28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b087      	sub	sp, #28
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	3360      	adds	r3, #96	@ 0x60
 8001b50:	461a      	mov	r2, r3
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	4413      	add	r3, r2
 8001b58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	431a      	orrs	r2, r3
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001b6a:	bf00      	nop
 8001b6c:	371c      	adds	r7, #28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	615a      	str	r2, [r3, #20]
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e000      	b.n	8001bb6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b087      	sub	sp, #28
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	60f8      	str	r0, [r7, #12]
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	3330      	adds	r3, #48	@ 0x30
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	0a1b      	lsrs	r3, r3, #8
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	4413      	add	r3, r2
 8001be0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	f003 031f 	and.w	r3, r3, #31
 8001bec:	211f      	movs	r1, #31
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	401a      	ands	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	0e9b      	lsrs	r3, r3, #26
 8001bfa:	f003 011f 	and.w	r1, r3, #31
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	f003 031f 	and.w	r3, r3, #31
 8001c04:	fa01 f303 	lsl.w	r3, r1, r3
 8001c08:	431a      	orrs	r2, r3
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c0e:	bf00      	nop
 8001c10:	371c      	adds	r7, #28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b087      	sub	sp, #28
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	60f8      	str	r0, [r7, #12]
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	3314      	adds	r3, #20
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	0e5b      	lsrs	r3, r3, #25
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	f003 0304 	and.w	r3, r3, #4
 8001c36:	4413      	add	r3, r2
 8001c38:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	0d1b      	lsrs	r3, r3, #20
 8001c42:	f003 031f 	and.w	r3, r3, #31
 8001c46:	2107      	movs	r1, #7
 8001c48:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	401a      	ands	r2, r3
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	0d1b      	lsrs	r3, r3, #20
 8001c54:	f003 031f 	and.w	r3, r3, #31
 8001c58:	6879      	ldr	r1, [r7, #4]
 8001c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c64:	bf00      	nop
 8001c66:	371c      	adds	r7, #28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	401a      	ands	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f003 0318 	and.w	r3, r3, #24
 8001c92:	4908      	ldr	r1, [pc, #32]	@ (8001cb4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c94:	40d9      	lsrs	r1, r3
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	400b      	ands	r3, r1
 8001c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ca6:	bf00      	nop
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	0007ffff 	.word	0x0007ffff

08001cb8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 031f 	and.w	r3, r3, #31
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001ce4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6093      	str	r3, [r2, #8]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d0c:	d101      	bne.n	8001d12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e000      	b.n	8001d14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001d30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d34:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d5c:	d101      	bne.n	8001d62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d84:	f043 0201 	orr.w	r2, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001da8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001dac:	f043 0202 	orr.w	r2, r3, #2
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <LL_ADC_IsEnabled+0x18>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <LL_ADC_IsEnabled+0x1a>
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d101      	bne.n	8001dfe <LL_ADC_IsDisableOngoing+0x18>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <LL_ADC_IsDisableOngoing+0x1a>
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e20:	f043 0204 	orr.w	r2, r3, #4
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d101      	bne.n	8001e4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b08      	cmp	r3, #8
 8001e6c:	d101      	bne.n	8001e72 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e80:	b590      	push	{r4, r7, lr}
 8001e82:	b089      	sub	sp, #36	@ 0x24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e1a9      	b.n	80021ee <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d109      	bne.n	8001ebc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff fb4f 	bl	800154c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff19 	bl	8001cf8 <LL_ADC_IsDeepPowerDownEnabled>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d004      	beq.n	8001ed6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff feff 	bl	8001cd4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff ff34 	bl	8001d48 <LL_ADC_IsInternalRegulatorEnabled>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d115      	bne.n	8001f12 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff ff18 	bl	8001d20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ef0:	4b9c      	ldr	r3, [pc, #624]	@ (8002164 <HAL_ADC_Init+0x2e4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	099b      	lsrs	r3, r3, #6
 8001ef6:	4a9c      	ldr	r2, [pc, #624]	@ (8002168 <HAL_ADC_Init+0x2e8>)
 8001ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8001efc:	099b      	lsrs	r3, r3, #6
 8001efe:	3301      	adds	r3, #1
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f04:	e002      	b.n	8001f0c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f9      	bne.n	8001f06 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff ff16 	bl	8001d48 <LL_ADC_IsInternalRegulatorEnabled>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10d      	bne.n	8001f3e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f26:	f043 0210 	orr.w	r2, r3, #16
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f32:	f043 0201 	orr.w	r2, r3, #1
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff ff76 	bl	8001e34 <LL_ADC_REG_IsConversionOngoing>
 8001f48:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f4e:	f003 0310 	and.w	r3, r3, #16
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f040 8142 	bne.w	80021dc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f040 813e 	bne.w	80021dc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f64:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f68:	f043 0202 	orr.w	r2, r3, #2
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff23 	bl	8001dc0 <LL_ADC_IsEnabled>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d141      	bne.n	8002004 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f88:	d004      	beq.n	8001f94 <HAL_ADC_Init+0x114>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a77      	ldr	r2, [pc, #476]	@ (800216c <HAL_ADC_Init+0x2ec>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d10f      	bne.n	8001fb4 <HAL_ADC_Init+0x134>
 8001f94:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001f98:	f7ff ff12 	bl	8001dc0 <LL_ADC_IsEnabled>
 8001f9c:	4604      	mov	r4, r0
 8001f9e:	4873      	ldr	r0, [pc, #460]	@ (800216c <HAL_ADC_Init+0x2ec>)
 8001fa0:	f7ff ff0e 	bl	8001dc0 <LL_ADC_IsEnabled>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	4323      	orrs	r3, r4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	bf0c      	ite	eq
 8001fac:	2301      	moveq	r3, #1
 8001fae:	2300      	movne	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	e012      	b.n	8001fda <HAL_ADC_Init+0x15a>
 8001fb4:	486e      	ldr	r0, [pc, #440]	@ (8002170 <HAL_ADC_Init+0x2f0>)
 8001fb6:	f7ff ff03 	bl	8001dc0 <LL_ADC_IsEnabled>
 8001fba:	4604      	mov	r4, r0
 8001fbc:	486d      	ldr	r0, [pc, #436]	@ (8002174 <HAL_ADC_Init+0x2f4>)
 8001fbe:	f7ff feff 	bl	8001dc0 <LL_ADC_IsEnabled>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	431c      	orrs	r4, r3
 8001fc6:	486c      	ldr	r0, [pc, #432]	@ (8002178 <HAL_ADC_Init+0x2f8>)
 8001fc8:	f7ff fefa 	bl	8001dc0 <LL_ADC_IsEnabled>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	4323      	orrs	r3, r4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	bf0c      	ite	eq
 8001fd4:	2301      	moveq	r3, #1
 8001fd6:	2300      	movne	r3, #0
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d012      	beq.n	8002004 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fe6:	d004      	beq.n	8001ff2 <HAL_ADC_Init+0x172>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a5f      	ldr	r2, [pc, #380]	@ (800216c <HAL_ADC_Init+0x2ec>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ADC_Init+0x176>
 8001ff2:	4a62      	ldr	r2, [pc, #392]	@ (800217c <HAL_ADC_Init+0x2fc>)
 8001ff4:	e000      	b.n	8001ff8 <HAL_ADC_Init+0x178>
 8001ff6:	4a62      	ldr	r2, [pc, #392]	@ (8002180 <HAL_ADC_Init+0x300>)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4610      	mov	r0, r2
 8002000:	f7ff fcfa 	bl	80019f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	7f5b      	ldrb	r3, [r3, #29]
 8002008:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800200e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002014:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800201a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002022:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800202e:	2b01      	cmp	r3, #1
 8002030:	d106      	bne.n	8002040 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002036:	3b01      	subs	r3, #1
 8002038:	045b      	lsls	r3, r3, #17
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002044:	2b00      	cmp	r3, #0
 8002046:	d009      	beq.n	800205c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002054:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68da      	ldr	r2, [r3, #12]
 8002062:	4b48      	ldr	r3, [pc, #288]	@ (8002184 <HAL_ADC_Init+0x304>)
 8002064:	4013      	ands	r3, r2
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	69b9      	ldr	r1, [r7, #24]
 800206c:	430b      	orrs	r3, r1
 800206e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fee5 	bl	8001e5a <LL_ADC_INJ_IsConversionOngoing>
 8002090:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d17f      	bne.n	8002198 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d17c      	bne.n	8002198 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020a2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80020aa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80020ba:	f023 0302 	bic.w	r3, r3, #2
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6812      	ldr	r2, [r2, #0]
 80020c2:	69b9      	ldr	r1, [r7, #24]
 80020c4:	430b      	orrs	r3, r1
 80020c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d017      	beq.n	8002100 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691a      	ldr	r2, [r3, #16]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80020de:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80020e8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80020ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6911      	ldr	r1, [r2, #16]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	430b      	orrs	r3, r1
 80020fa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80020fe:	e013      	b.n	8002128 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691a      	ldr	r2, [r3, #16]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800210e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002120:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002124:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800212e:	2b01      	cmp	r3, #1
 8002130:	d12a      	bne.n	8002188 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800213c:	f023 0304 	bic.w	r3, r3, #4
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002148:	4311      	orrs	r1, r2
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800214e:	4311      	orrs	r1, r2
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002154:	430a      	orrs	r2, r1
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f042 0201 	orr.w	r2, r2, #1
 8002160:	611a      	str	r2, [r3, #16]
 8002162:	e019      	b.n	8002198 <HAL_ADC_Init+0x318>
 8002164:	20000000 	.word	0x20000000
 8002168:	053e2d63 	.word	0x053e2d63
 800216c:	50000100 	.word	0x50000100
 8002170:	50000400 	.word	0x50000400
 8002174:	50000500 	.word	0x50000500
 8002178:	50000600 	.word	0x50000600
 800217c:	50000300 	.word	0x50000300
 8002180:	50000700 	.word	0x50000700
 8002184:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691a      	ldr	r2, [r3, #16]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0201 	bic.w	r2, r2, #1
 8002196:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d10c      	bne.n	80021ba <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a6:	f023 010f 	bic.w	r1, r3, #15
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	1e5a      	subs	r2, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80021b8:	e007      	b.n	80021ca <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 020f 	bic.w	r2, r2, #15
 80021c8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ce:	f023 0303 	bic.w	r3, r3, #3
 80021d2:	f043 0201 	orr.w	r2, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021da:	e007      	b.n	80021ec <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e0:	f043 0210 	orr.w	r2, r3, #16
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3724      	adds	r7, #36	@ 0x24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd90      	pop	{r4, r7, pc}
 80021f6:	bf00      	nop

080021f8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800220c:	d004      	beq.n	8002218 <HAL_ADC_Start_DMA+0x20>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a5a      	ldr	r2, [pc, #360]	@ (800237c <HAL_ADC_Start_DMA+0x184>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d101      	bne.n	800221c <HAL_ADC_Start_DMA+0x24>
 8002218:	4b59      	ldr	r3, [pc, #356]	@ (8002380 <HAL_ADC_Start_DMA+0x188>)
 800221a:	e000      	b.n	800221e <HAL_ADC_Start_DMA+0x26>
 800221c:	4b59      	ldr	r3, [pc, #356]	@ (8002384 <HAL_ADC_Start_DMA+0x18c>)
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fd4a 	bl	8001cb8 <LL_ADC_GetMultimode>
 8002224:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fe02 	bl	8001e34 <LL_ADC_REG_IsConversionOngoing>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	f040 809b 	bne.w	800236e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800223e:	2b01      	cmp	r3, #1
 8002240:	d101      	bne.n	8002246 <HAL_ADC_Start_DMA+0x4e>
 8002242:	2302      	movs	r3, #2
 8002244:	e096      	b.n	8002374 <HAL_ADC_Start_DMA+0x17c>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a4d      	ldr	r2, [pc, #308]	@ (8002388 <HAL_ADC_Start_DMA+0x190>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d008      	beq.n	800226a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d005      	beq.n	800226a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	2b05      	cmp	r3, #5
 8002262:	d002      	beq.n	800226a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	2b09      	cmp	r3, #9
 8002268:	d17a      	bne.n	8002360 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 fcf6 	bl	8002c5c <ADC_Enable>
 8002270:	4603      	mov	r3, r0
 8002272:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002274:	7dfb      	ldrb	r3, [r7, #23]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d16d      	bne.n	8002356 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002282:	f023 0301 	bic.w	r3, r3, #1
 8002286:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a3a      	ldr	r2, [pc, #232]	@ (800237c <HAL_ADC_Start_DMA+0x184>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d009      	beq.n	80022ac <HAL_ADC_Start_DMA+0xb4>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a3b      	ldr	r2, [pc, #236]	@ (800238c <HAL_ADC_Start_DMA+0x194>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d002      	beq.n	80022a8 <HAL_ADC_Start_DMA+0xb0>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	e003      	b.n	80022b0 <HAL_ADC_Start_DMA+0xb8>
 80022a8:	4b39      	ldr	r3, [pc, #228]	@ (8002390 <HAL_ADC_Start_DMA+0x198>)
 80022aa:	e001      	b.n	80022b0 <HAL_ADC_Start_DMA+0xb8>
 80022ac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d002      	beq.n	80022be <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d105      	bne.n	80022ca <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d006      	beq.n	80022e4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022da:	f023 0206 	bic.w	r2, r3, #6
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	661a      	str	r2, [r3, #96]	@ 0x60
 80022e2:	e002      	b.n	80022ea <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022ee:	4a29      	ldr	r2, [pc, #164]	@ (8002394 <HAL_ADC_Start_DMA+0x19c>)
 80022f0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f6:	4a28      	ldr	r2, [pc, #160]	@ (8002398 <HAL_ADC_Start_DMA+0x1a0>)
 80022f8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022fe:	4a27      	ldr	r2, [pc, #156]	@ (800239c <HAL_ADC_Start_DMA+0x1a4>)
 8002300:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	221c      	movs	r2, #28
 8002308:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f042 0210 	orr.w	r2, r2, #16
 8002320:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f042 0201 	orr.w	r2, r2, #1
 8002330:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	3340      	adds	r3, #64	@ 0x40
 800233c:	4619      	mov	r1, r3
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f001 f989 	bl	8003658 <HAL_DMA_Start_IT>
 8002346:	4603      	mov	r3, r0
 8002348:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fd5c 	bl	8001e0c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002354:	e00d      	b.n	8002372 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800235e:	e008      	b.n	8002372 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800236c:	e001      	b.n	8002372 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800236e:	2302      	movs	r3, #2
 8002370:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002372:	7dfb      	ldrb	r3, [r7, #23]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	50000100 	.word	0x50000100
 8002380:	50000300 	.word	0x50000300
 8002384:	50000700 	.word	0x50000700
 8002388:	50000600 	.word	0x50000600
 800238c:	50000500 	.word	0x50000500
 8002390:	50000400 	.word	0x50000400
 8002394:	08002e47 	.word	0x08002e47
 8002398:	08002f1f 	.word	0x08002f1f
 800239c:	08002f3b 	.word	0x08002f3b

080023a0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b0b6      	sub	sp, #216	@ 0xd8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e6:	2300      	movs	r3, #0
 80023e8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d102      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x24>
 80023fa:	2302      	movs	r3, #2
 80023fc:	f000 bc13 	b.w	8002c26 <HAL_ADC_ConfigChannel+0x84a>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fd11 	bl	8001e34 <LL_ADC_REG_IsConversionOngoing>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	f040 83f3 	bne.w	8002c00 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	6859      	ldr	r1, [r3, #4]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	461a      	mov	r2, r3
 8002428:	f7ff fbcb 	bl	8001bc2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fcff 	bl	8001e34 <LL_ADC_REG_IsConversionOngoing>
 8002436:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fd0b 	bl	8001e5a <LL_ADC_INJ_IsConversionOngoing>
 8002444:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002448:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800244c:	2b00      	cmp	r3, #0
 800244e:	f040 81d9 	bne.w	8002804 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002452:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002456:	2b00      	cmp	r3, #0
 8002458:	f040 81d4 	bne.w	8002804 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002464:	d10f      	bne.n	8002486 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2200      	movs	r2, #0
 8002470:	4619      	mov	r1, r3
 8002472:	f7ff fbd2 	bl	8001c1a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff fb79 	bl	8001b76 <LL_ADC_SetSamplingTimeCommonConfig>
 8002484:	e00e      	b.n	80024a4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	6819      	ldr	r1, [r3, #0]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	461a      	mov	r2, r3
 8002494:	f7ff fbc1 	bl	8001c1a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2100      	movs	r1, #0
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fb69 	bl	8001b76 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	695a      	ldr	r2, [r3, #20]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	08db      	lsrs	r3, r3, #3
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d022      	beq.n	800250c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	6919      	ldr	r1, [r3, #16]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80024d6:	f7ff fac3 	bl	8001a60 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6818      	ldr	r0, [r3, #0]
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	6919      	ldr	r1, [r3, #16]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	461a      	mov	r2, r3
 80024e8:	f7ff fb0f 	bl	8001b0a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d102      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x126>
 80024fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002500:	e000      	b.n	8002504 <HAL_ADC_ConfigChannel+0x128>
 8002502:	2300      	movs	r3, #0
 8002504:	461a      	mov	r2, r3
 8002506:	f7ff fb1b 	bl	8001b40 <LL_ADC_SetOffsetSaturation>
 800250a:	e17b      	b.n	8002804 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2100      	movs	r1, #0
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fac8 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 8002518:	4603      	mov	r3, r0
 800251a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10a      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x15c>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2100      	movs	r1, #0
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff fabd 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 800252e:	4603      	mov	r3, r0
 8002530:	0e9b      	lsrs	r3, r3, #26
 8002532:	f003 021f 	and.w	r2, r3, #31
 8002536:	e01e      	b.n	8002576 <HAL_ADC_ConfigChannel+0x19a>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2100      	movs	r1, #0
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fab2 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 8002544:	4603      	mov	r3, r0
 8002546:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800254e:	fa93 f3a3 	rbit	r3, r3
 8002552:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002556:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800255a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800255e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002566:	2320      	movs	r3, #32
 8002568:	e004      	b.n	8002574 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800256a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257e:	2b00      	cmp	r3, #0
 8002580:	d105      	bne.n	800258e <HAL_ADC_ConfigChannel+0x1b2>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	0e9b      	lsrs	r3, r3, #26
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	e018      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x1e4>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002596:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800259a:	fa93 f3a3 	rbit	r3, r3
 800259e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80025a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80025aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80025b2:	2320      	movs	r3, #32
 80025b4:	e004      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80025b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80025ba:	fab3 f383 	clz	r3, r3
 80025be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d106      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2200      	movs	r2, #0
 80025ca:	2100      	movs	r1, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff fa81 	bl	8001ad4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2101      	movs	r1, #1
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff fa65 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 80025de:	4603      	mov	r3, r0
 80025e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10a      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x222>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2101      	movs	r1, #1
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff fa5a 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 80025f4:	4603      	mov	r3, r0
 80025f6:	0e9b      	lsrs	r3, r3, #26
 80025f8:	f003 021f 	and.w	r2, r3, #31
 80025fc:	e01e      	b.n	800263c <HAL_ADC_ConfigChannel+0x260>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2101      	movs	r1, #1
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fa4f 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 800260a:	4603      	mov	r3, r0
 800260c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800261c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002620:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002624:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800262c:	2320      	movs	r3, #32
 800262e:	e004      	b.n	800263a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002630:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002634:	fab3 f383 	clz	r3, r3
 8002638:	b2db      	uxtb	r3, r3
 800263a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002644:	2b00      	cmp	r3, #0
 8002646:	d105      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x278>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	0e9b      	lsrs	r3, r3, #26
 800264e:	f003 031f 	and.w	r3, r3, #31
 8002652:	e018      	b.n	8002686 <HAL_ADC_ConfigChannel+0x2aa>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002660:	fa93 f3a3 	rbit	r3, r3
 8002664:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002668:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800266c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002670:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002678:	2320      	movs	r3, #32
 800267a:	e004      	b.n	8002686 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800267c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002680:	fab3 f383 	clz	r3, r3
 8002684:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002686:	429a      	cmp	r2, r3
 8002688:	d106      	bne.n	8002698 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2200      	movs	r2, #0
 8002690:	2101      	movs	r1, #1
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fa1e 	bl	8001ad4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2102      	movs	r1, #2
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff fa02 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10a      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x2e8>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2102      	movs	r1, #2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff f9f7 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 80026ba:	4603      	mov	r3, r0
 80026bc:	0e9b      	lsrs	r3, r3, #26
 80026be:	f003 021f 	and.w	r2, r3, #31
 80026c2:	e01e      	b.n	8002702 <HAL_ADC_ConfigChannel+0x326>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2102      	movs	r1, #2
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff f9ec 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 80026d0:	4603      	mov	r3, r0
 80026d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80026e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80026ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80026f2:	2320      	movs	r3, #32
 80026f4:	e004      	b.n	8002700 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80026f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80026fa:	fab3 f383 	clz	r3, r3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800270a:	2b00      	cmp	r3, #0
 800270c:	d105      	bne.n	800271a <HAL_ADC_ConfigChannel+0x33e>
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	0e9b      	lsrs	r3, r3, #26
 8002714:	f003 031f 	and.w	r3, r3, #31
 8002718:	e016      	b.n	8002748 <HAL_ADC_ConfigChannel+0x36c>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002726:	fa93 f3a3 	rbit	r3, r3
 800272a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800272c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800272e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002732:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800273a:	2320      	movs	r3, #32
 800273c:	e004      	b.n	8002748 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800273e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002742:	fab3 f383 	clz	r3, r3
 8002746:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002748:	429a      	cmp	r2, r3
 800274a:	d106      	bne.n	800275a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2200      	movs	r2, #0
 8002752:	2102      	movs	r1, #2
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff f9bd 	bl	8001ad4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2103      	movs	r1, #3
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff f9a1 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 8002766:	4603      	mov	r3, r0
 8002768:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10a      	bne.n	8002786 <HAL_ADC_ConfigChannel+0x3aa>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2103      	movs	r1, #3
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff f996 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 800277c:	4603      	mov	r3, r0
 800277e:	0e9b      	lsrs	r3, r3, #26
 8002780:	f003 021f 	and.w	r2, r3, #31
 8002784:	e017      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x3da>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2103      	movs	r1, #3
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff f98b 	bl	8001aa8 <LL_ADC_GetOffsetChannel>
 8002792:	4603      	mov	r3, r0
 8002794:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002796:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002798:	fa93 f3a3 	rbit	r3, r3
 800279c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800279e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027a0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80027a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80027a8:	2320      	movs	r3, #32
 80027aa:	e003      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80027ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027ae:	fab3 f383 	clz	r3, r3
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d105      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x3f2>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	0e9b      	lsrs	r3, r3, #26
 80027c8:	f003 031f 	and.w	r3, r3, #31
 80027cc:	e011      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x416>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80027dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80027de:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80027e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80027e6:	2320      	movs	r3, #32
 80027e8:	e003      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80027ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027ec:	fab3 f383 	clz	r3, r3
 80027f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d106      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2200      	movs	r2, #0
 80027fc:	2103      	movs	r1, #3
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff f968 	bl	8001ad4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff fad9 	bl	8001dc0 <LL_ADC_IsEnabled>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	f040 813d 	bne.w	8002a90 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6818      	ldr	r0, [r3, #0]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	6819      	ldr	r1, [r3, #0]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	461a      	mov	r2, r3
 8002824:	f7ff fa24 	bl	8001c70 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4aa2      	ldr	r2, [pc, #648]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x6dc>)
 800282e:	4293      	cmp	r3, r2
 8002830:	f040 812e 	bne.w	8002a90 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10b      	bne.n	800285c <HAL_ADC_ConfigChannel+0x480>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	0e9b      	lsrs	r3, r3, #26
 800284a:	3301      	adds	r3, #1
 800284c:	f003 031f 	and.w	r3, r3, #31
 8002850:	2b09      	cmp	r3, #9
 8002852:	bf94      	ite	ls
 8002854:	2301      	movls	r3, #1
 8002856:	2300      	movhi	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	e019      	b.n	8002890 <HAL_ADC_ConfigChannel+0x4b4>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002864:	fa93 f3a3 	rbit	r3, r3
 8002868:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800286a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800286c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800286e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002874:	2320      	movs	r3, #32
 8002876:	e003      	b.n	8002880 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002878:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800287a:	fab3 f383 	clz	r3, r3
 800287e:	b2db      	uxtb	r3, r3
 8002880:	3301      	adds	r3, #1
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	2b09      	cmp	r3, #9
 8002888:	bf94      	ite	ls
 800288a:	2301      	movls	r3, #1
 800288c:	2300      	movhi	r3, #0
 800288e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002890:	2b00      	cmp	r3, #0
 8002892:	d079      	beq.n	8002988 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289c:	2b00      	cmp	r3, #0
 800289e:	d107      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x4d4>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	0e9b      	lsrs	r3, r3, #26
 80028a6:	3301      	adds	r3, #1
 80028a8:	069b      	lsls	r3, r3, #26
 80028aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028ae:	e015      	b.n	80028dc <HAL_ADC_ConfigChannel+0x500>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028b8:	fa93 f3a3 	rbit	r3, r3
 80028bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80028be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028c0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80028c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80028c8:	2320      	movs	r3, #32
 80028ca:	e003      	b.n	80028d4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80028cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ce:	fab3 f383 	clz	r3, r3
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	3301      	adds	r3, #1
 80028d6:	069b      	lsls	r3, r3, #26
 80028d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d109      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x520>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	0e9b      	lsrs	r3, r3, #26
 80028ee:	3301      	adds	r3, #1
 80028f0:	f003 031f 	and.w	r3, r3, #31
 80028f4:	2101      	movs	r1, #1
 80028f6:	fa01 f303 	lsl.w	r3, r1, r3
 80028fa:	e017      	b.n	800292c <HAL_ADC_ConfigChannel+0x550>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002904:	fa93 f3a3 	rbit	r3, r3
 8002908:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800290a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800290c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800290e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002914:	2320      	movs	r3, #32
 8002916:	e003      	b.n	8002920 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002918:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800291a:	fab3 f383 	clz	r3, r3
 800291e:	b2db      	uxtb	r3, r3
 8002920:	3301      	adds	r3, #1
 8002922:	f003 031f 	and.w	r3, r3, #31
 8002926:	2101      	movs	r1, #1
 8002928:	fa01 f303 	lsl.w	r3, r1, r3
 800292c:	ea42 0103 	orr.w	r1, r2, r3
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10a      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x576>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	0e9b      	lsrs	r3, r3, #26
 8002942:	3301      	adds	r3, #1
 8002944:	f003 021f 	and.w	r2, r3, #31
 8002948:	4613      	mov	r3, r2
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	4413      	add	r3, r2
 800294e:	051b      	lsls	r3, r3, #20
 8002950:	e018      	b.n	8002984 <HAL_ADC_ConfigChannel+0x5a8>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800295a:	fa93 f3a3 	rbit	r3, r3
 800295e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002962:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800296a:	2320      	movs	r3, #32
 800296c:	e003      	b.n	8002976 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800296e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002970:	fab3 f383 	clz	r3, r3
 8002974:	b2db      	uxtb	r3, r3
 8002976:	3301      	adds	r3, #1
 8002978:	f003 021f 	and.w	r2, r3, #31
 800297c:	4613      	mov	r3, r2
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	4413      	add	r3, r2
 8002982:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002984:	430b      	orrs	r3, r1
 8002986:	e07e      	b.n	8002a86 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002990:	2b00      	cmp	r3, #0
 8002992:	d107      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x5c8>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	0e9b      	lsrs	r3, r3, #26
 800299a:	3301      	adds	r3, #1
 800299c:	069b      	lsls	r3, r3, #26
 800299e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029a2:	e015      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x5f4>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ac:	fa93 f3a3 	rbit	r3, r3
 80029b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80029b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80029b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80029bc:	2320      	movs	r3, #32
 80029be:	e003      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80029c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	3301      	adds	r3, #1
 80029ca:	069b      	lsls	r3, r3, #26
 80029cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d109      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x614>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	0e9b      	lsrs	r3, r3, #26
 80029e2:	3301      	adds	r3, #1
 80029e4:	f003 031f 	and.w	r3, r3, #31
 80029e8:	2101      	movs	r1, #1
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	e017      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x644>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	fa93 f3a3 	rbit	r3, r3
 80029fc:	61fb      	str	r3, [r7, #28]
  return result;
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002a08:	2320      	movs	r3, #32
 8002a0a:	e003      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0e:	fab3 f383 	clz	r3, r3
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	3301      	adds	r3, #1
 8002a16:	f003 031f 	and.w	r3, r3, #31
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a20:	ea42 0103 	orr.w	r1, r2, r3
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10d      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x670>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	0e9b      	lsrs	r3, r3, #26
 8002a36:	3301      	adds	r3, #1
 8002a38:	f003 021f 	and.w	r2, r3, #31
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4413      	add	r3, r2
 8002a42:	3b1e      	subs	r3, #30
 8002a44:	051b      	lsls	r3, r3, #20
 8002a46:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a4a:	e01b      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x6a8>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	fa93 f3a3 	rbit	r3, r3
 8002a58:	613b      	str	r3, [r7, #16]
  return result;
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002a64:	2320      	movs	r3, #32
 8002a66:	e003      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	fab3 f383 	clz	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	3301      	adds	r3, #1
 8002a72:	f003 021f 	and.w	r2, r3, #31
 8002a76:	4613      	mov	r3, r2
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3b1e      	subs	r3, #30
 8002a7e:	051b      	lsls	r3, r3, #20
 8002a80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a84:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f7ff f8c5 	bl	8001c1a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	4b09      	ldr	r3, [pc, #36]	@ (8002abc <HAL_ADC_ConfigChannel+0x6e0>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80be 	beq.w	8002c1a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002aa6:	d004      	beq.n	8002ab2 <HAL_ADC_ConfigChannel+0x6d6>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a04      	ldr	r2, [pc, #16]	@ (8002ac0 <HAL_ADC_ConfigChannel+0x6e4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d10a      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x6ec>
 8002ab2:	4b04      	ldr	r3, [pc, #16]	@ (8002ac4 <HAL_ADC_ConfigChannel+0x6e8>)
 8002ab4:	e009      	b.n	8002aca <HAL_ADC_ConfigChannel+0x6ee>
 8002ab6:	bf00      	nop
 8002ab8:	407f0000 	.word	0x407f0000
 8002abc:	80080000 	.word	0x80080000
 8002ac0:	50000100 	.word	0x50000100
 8002ac4:	50000300 	.word	0x50000300
 8002ac8:	4b59      	ldr	r3, [pc, #356]	@ (8002c30 <HAL_ADC_ConfigChannel+0x854>)
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe ffba 	bl	8001a44 <LL_ADC_GetCommonPathInternalCh>
 8002ad0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a56      	ldr	r2, [pc, #344]	@ (8002c34 <HAL_ADC_ConfigChannel+0x858>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d004      	beq.n	8002ae8 <HAL_ADC_ConfigChannel+0x70c>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a55      	ldr	r2, [pc, #340]	@ (8002c38 <HAL_ADC_ConfigChannel+0x85c>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d13a      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ae8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002aec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d134      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002afc:	d005      	beq.n	8002b0a <HAL_ADC_ConfigChannel+0x72e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a4e      	ldr	r2, [pc, #312]	@ (8002c3c <HAL_ADC_ConfigChannel+0x860>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	f040 8085 	bne.w	8002c14 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b12:	d004      	beq.n	8002b1e <HAL_ADC_ConfigChannel+0x742>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a49      	ldr	r2, [pc, #292]	@ (8002c40 <HAL_ADC_ConfigChannel+0x864>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d101      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x746>
 8002b1e:	4a49      	ldr	r2, [pc, #292]	@ (8002c44 <HAL_ADC_ConfigChannel+0x868>)
 8002b20:	e000      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x748>
 8002b22:	4a43      	ldr	r2, [pc, #268]	@ (8002c30 <HAL_ADC_ConfigChannel+0x854>)
 8002b24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4610      	mov	r0, r2
 8002b30:	f7fe ff75 	bl	8001a1e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b34:	4b44      	ldr	r3, [pc, #272]	@ (8002c48 <HAL_ADC_ConfigChannel+0x86c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	099b      	lsrs	r3, r3, #6
 8002b3a:	4a44      	ldr	r2, [pc, #272]	@ (8002c4c <HAL_ADC_ConfigChannel+0x870>)
 8002b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b40:	099b      	lsrs	r3, r3, #6
 8002b42:	1c5a      	adds	r2, r3, #1
 8002b44:	4613      	mov	r3, r2
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b4e:	e002      	b.n	8002b56 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f9      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b5c:	e05a      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a3b      	ldr	r2, [pc, #236]	@ (8002c50 <HAL_ADC_ConfigChannel+0x874>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d125      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d11f      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a31      	ldr	r2, [pc, #196]	@ (8002c40 <HAL_ADC_ConfigChannel+0x864>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d104      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x7ac>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a34      	ldr	r2, [pc, #208]	@ (8002c54 <HAL_ADC_ConfigChannel+0x878>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d047      	beq.n	8002c18 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b90:	d004      	beq.n	8002b9c <HAL_ADC_ConfigChannel+0x7c0>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a2a      	ldr	r2, [pc, #168]	@ (8002c40 <HAL_ADC_ConfigChannel+0x864>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d101      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x7c4>
 8002b9c:	4a29      	ldr	r2, [pc, #164]	@ (8002c44 <HAL_ADC_ConfigChannel+0x868>)
 8002b9e:	e000      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x7c6>
 8002ba0:	4a23      	ldr	r2, [pc, #140]	@ (8002c30 <HAL_ADC_ConfigChannel+0x854>)
 8002ba2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ba6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002baa:	4619      	mov	r1, r3
 8002bac:	4610      	mov	r0, r2
 8002bae:	f7fe ff36 	bl	8001a1e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bb2:	e031      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a27      	ldr	r2, [pc, #156]	@ (8002c58 <HAL_ADC_ConfigChannel+0x87c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d12d      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002bc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d127      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a1c      	ldr	r2, [pc, #112]	@ (8002c40 <HAL_ADC_ConfigChannel+0x864>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d022      	beq.n	8002c1a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bdc:	d004      	beq.n	8002be8 <HAL_ADC_ConfigChannel+0x80c>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a17      	ldr	r2, [pc, #92]	@ (8002c40 <HAL_ADC_ConfigChannel+0x864>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d101      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x810>
 8002be8:	4a16      	ldr	r2, [pc, #88]	@ (8002c44 <HAL_ADC_ConfigChannel+0x868>)
 8002bea:	e000      	b.n	8002bee <HAL_ADC_ConfigChannel+0x812>
 8002bec:	4a10      	ldr	r2, [pc, #64]	@ (8002c30 <HAL_ADC_ConfigChannel+0x854>)
 8002bee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002bf2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	f7fe ff10 	bl	8001a1e <LL_ADC_SetCommonPathInternalCh>
 8002bfe:	e00c      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c04:	f043 0220 	orr.w	r2, r3, #32
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002c12:	e002      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c14:	bf00      	nop
 8002c16:	e000      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c18:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c22:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	37d8      	adds	r7, #216	@ 0xd8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	50000700 	.word	0x50000700
 8002c34:	c3210000 	.word	0xc3210000
 8002c38:	90c00010 	.word	0x90c00010
 8002c3c:	50000600 	.word	0x50000600
 8002c40:	50000100 	.word	0x50000100
 8002c44:	50000300 	.word	0x50000300
 8002c48:	20000000 	.word	0x20000000
 8002c4c:	053e2d63 	.word	0x053e2d63
 8002c50:	c7520000 	.word	0xc7520000
 8002c54:	50000500 	.word	0x50000500
 8002c58:	cb840000 	.word	0xcb840000

08002c5c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff f8a7 	bl	8001dc0 <LL_ADC_IsEnabled>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d176      	bne.n	8002d66 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	4b3c      	ldr	r3, [pc, #240]	@ (8002d70 <ADC_Enable+0x114>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00d      	beq.n	8002ca2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c8a:	f043 0210 	orr.w	r2, r3, #16
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c96:	f043 0201 	orr.w	r2, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e062      	b.n	8002d68 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff f862 	bl	8001d70 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cb4:	d004      	beq.n	8002cc0 <ADC_Enable+0x64>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a2e      	ldr	r2, [pc, #184]	@ (8002d74 <ADC_Enable+0x118>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d101      	bne.n	8002cc4 <ADC_Enable+0x68>
 8002cc0:	4b2d      	ldr	r3, [pc, #180]	@ (8002d78 <ADC_Enable+0x11c>)
 8002cc2:	e000      	b.n	8002cc6 <ADC_Enable+0x6a>
 8002cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8002d7c <ADC_Enable+0x120>)
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7fe febc 	bl	8001a44 <LL_ADC_GetCommonPathInternalCh>
 8002ccc:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002cce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d013      	beq.n	8002cfe <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cd6:	4b2a      	ldr	r3, [pc, #168]	@ (8002d80 <ADC_Enable+0x124>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	099b      	lsrs	r3, r3, #6
 8002cdc:	4a29      	ldr	r2, [pc, #164]	@ (8002d84 <ADC_Enable+0x128>)
 8002cde:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce2:	099b      	lsrs	r3, r3, #6
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	4413      	add	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cf0:	e002      	b.n	8002cf8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f9      	bne.n	8002cf2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002cfe:	f7fe fe6f 	bl	80019e0 <HAL_GetTick>
 8002d02:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d04:	e028      	b.n	8002d58 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff f858 	bl	8001dc0 <LL_ADC_IsEnabled>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d104      	bne.n	8002d20 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff f828 	bl	8001d70 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d20:	f7fe fe5e 	bl	80019e0 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d914      	bls.n	8002d58 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d00d      	beq.n	8002d58 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d40:	f043 0210 	orr.w	r2, r3, #16
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d4c:	f043 0201 	orr.w	r2, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e007      	b.n	8002d68 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d1cf      	bne.n	8002d06 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	8000003f 	.word	0x8000003f
 8002d74:	50000100 	.word	0x50000100
 8002d78:	50000300 	.word	0x50000300
 8002d7c:	50000700 	.word	0x50000700
 8002d80:	20000000 	.word	0x20000000
 8002d84:	053e2d63 	.word	0x053e2d63

08002d88 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff f826 	bl	8001de6 <LL_ADC_IsDisableOngoing>
 8002d9a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff f80d 	bl	8001dc0 <LL_ADC_IsEnabled>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d047      	beq.n	8002e3c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d144      	bne.n	8002e3c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 030d 	and.w	r3, r3, #13
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d10c      	bne.n	8002dda <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fe ffe7 	bl	8001d98 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2203      	movs	r2, #3
 8002dd0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002dd2:	f7fe fe05 	bl	80019e0 <HAL_GetTick>
 8002dd6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dd8:	e029      	b.n	8002e2e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dde:	f043 0210 	orr.w	r2, r3, #16
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dea:	f043 0201 	orr.w	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e023      	b.n	8002e3e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002df6:	f7fe fdf3 	bl	80019e0 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d914      	bls.n	8002e2e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00d      	beq.n	8002e2e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e16:	f043 0210 	orr.w	r2, r3, #16
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e22:	f043 0201 	orr.w	r2, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e007      	b.n	8002e3e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1dc      	bne.n	8002df6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b084      	sub	sp, #16
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d14b      	bne.n	8002ef8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e64:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d021      	beq.n	8002ebe <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fe fe8c 	bl	8001b9c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d032      	beq.n	8002ef0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d12b      	bne.n	8002ef0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d11f      	bne.n	8002ef0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb4:	f043 0201 	orr.w	r2, r3, #1
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ebc:	e018      	b.n	8002ef0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d111      	bne.n	8002ef0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002edc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d105      	bne.n	8002ef0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee8:	f043 0201 	orr.w	r2, r3, #1
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f7ff fa55 	bl	80023a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ef6:	e00e      	b.n	8002f16 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002efc:	f003 0310 	and.w	r3, r3, #16
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f7ff fa5f 	bl	80023c8 <HAL_ADC_ErrorCallback>
}
 8002f0a:	e004      	b.n	8002f16 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	4798      	blx	r3
}
 8002f16:	bf00      	nop
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b084      	sub	sp, #16
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f7ff fa41 	bl	80023b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f32:	bf00      	nop
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b084      	sub	sp, #16
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f4c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f58:	f043 0204 	orr.w	r2, r3, #4
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f7ff fa31 	bl	80023c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f66:	bf00      	nop
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <LL_ADC_IsEnabled>:
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <LL_ADC_IsEnabled+0x18>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <LL_ADC_IsEnabled+0x1a>
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <LL_ADC_StartCalibration>:
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002fa6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	609a      	str	r2, [r3, #8]
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <LL_ADC_IsCalibrationOnGoing>:
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002fd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002fda:	d101      	bne.n	8002fe0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e000      	b.n	8002fe2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <LL_ADC_REG_IsConversionOngoing>:
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 0304 	and.w	r3, r3, #4
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d101      	bne.n	8003006 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800301e:	2300      	movs	r3, #0
 8003020:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_ADCEx_Calibration_Start+0x1c>
 800302c:	2302      	movs	r3, #2
 800302e:	e04d      	b.n	80030cc <HAL_ADCEx_Calibration_Start+0xb8>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff fea5 	bl	8002d88 <ADC_Disable>
 800303e:	4603      	mov	r3, r0
 8003040:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d136      	bne.n	80030b6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800304c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003050:	f023 0302 	bic.w	r3, r3, #2
 8003054:	f043 0202 	orr.w	r2, r3, #2
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6839      	ldr	r1, [r7, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff ff96 	bl	8002f94 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003068:	e014      	b.n	8003094 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	3301      	adds	r3, #1
 800306e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	4a18      	ldr	r2, [pc, #96]	@ (80030d4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d90d      	bls.n	8003094 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800307c:	f023 0312 	bic.w	r3, r3, #18
 8003080:	f043 0210 	orr.w	r2, r3, #16
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e01b      	b.n	80030cc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff ff94 	bl	8002fc6 <LL_ADC_IsCalibrationOnGoing>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1e2      	bne.n	800306a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a8:	f023 0303 	bic.w	r3, r3, #3
 80030ac:	f043 0201 	orr.w	r2, r3, #1
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80030b4:	e005      	b.n	80030c2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ba:	f043 0210 	orr.w	r2, r3, #16
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	0004de01 	.word	0x0004de01

080030d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b0a1      	sub	sp, #132	@ 0x84
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d101      	bne.n	80030f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e0e7      	b.n	80032c6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80030fe:	2300      	movs	r3, #0
 8003100:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003102:	2300      	movs	r3, #0
 8003104:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800310e:	d102      	bne.n	8003116 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003110:	4b6f      	ldr	r3, [pc, #444]	@ (80032d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	e009      	b.n	800312a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a6e      	ldr	r2, [pc, #440]	@ (80032d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d102      	bne.n	8003126 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003120:	4b6d      	ldr	r3, [pc, #436]	@ (80032d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003122:	60bb      	str	r3, [r7, #8]
 8003124:	e001      	b.n	800312a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003126:	2300      	movs	r3, #0
 8003128:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10b      	bne.n	8003148 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003134:	f043 0220 	orr.w	r2, r3, #32
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0be      	b.n	80032c6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff ff4f 	bl	8002fee <LL_ADC_REG_IsConversionOngoing>
 8003150:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff ff49 	bl	8002fee <LL_ADC_REG_IsConversionOngoing>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	f040 80a0 	bne.w	80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003164:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003166:	2b00      	cmp	r3, #0
 8003168:	f040 809c 	bne.w	80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003174:	d004      	beq.n	8003180 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a55      	ldr	r2, [pc, #340]	@ (80032d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d101      	bne.n	8003184 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003180:	4b56      	ldr	r3, [pc, #344]	@ (80032dc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003182:	e000      	b.n	8003186 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003184:	4b56      	ldr	r3, [pc, #344]	@ (80032e0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003186:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d04b      	beq.n	8003228 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003190:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	6859      	ldr	r1, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80031a2:	035b      	lsls	r3, r3, #13
 80031a4:	430b      	orrs	r3, r1
 80031a6:	431a      	orrs	r2, r3
 80031a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031aa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031b4:	d004      	beq.n	80031c0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a45      	ldr	r2, [pc, #276]	@ (80032d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d10f      	bne.n	80031e0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80031c0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80031c4:	f7ff fed3 	bl	8002f6e <LL_ADC_IsEnabled>
 80031c8:	4604      	mov	r4, r0
 80031ca:	4841      	ldr	r0, [pc, #260]	@ (80032d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80031cc:	f7ff fecf 	bl	8002f6e <LL_ADC_IsEnabled>
 80031d0:	4603      	mov	r3, r0
 80031d2:	4323      	orrs	r3, r4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	bf0c      	ite	eq
 80031d8:	2301      	moveq	r3, #1
 80031da:	2300      	movne	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	e012      	b.n	8003206 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80031e0:	483c      	ldr	r0, [pc, #240]	@ (80032d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80031e2:	f7ff fec4 	bl	8002f6e <LL_ADC_IsEnabled>
 80031e6:	4604      	mov	r4, r0
 80031e8:	483b      	ldr	r0, [pc, #236]	@ (80032d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80031ea:	f7ff fec0 	bl	8002f6e <LL_ADC_IsEnabled>
 80031ee:	4603      	mov	r3, r0
 80031f0:	431c      	orrs	r4, r3
 80031f2:	483c      	ldr	r0, [pc, #240]	@ (80032e4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80031f4:	f7ff febb 	bl	8002f6e <LL_ADC_IsEnabled>
 80031f8:	4603      	mov	r3, r0
 80031fa:	4323      	orrs	r3, r4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	bf0c      	ite	eq
 8003200:	2301      	moveq	r3, #1
 8003202:	2300      	movne	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d056      	beq.n	80032b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800320a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003212:	f023 030f 	bic.w	r3, r3, #15
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	6811      	ldr	r1, [r2, #0]
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	6892      	ldr	r2, [r2, #8]
 800321e:	430a      	orrs	r2, r1
 8003220:	431a      	orrs	r2, r3
 8003222:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003224:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003226:	e047      	b.n	80032b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003228:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003230:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003232:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800323c:	d004      	beq.n	8003248 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a23      	ldr	r2, [pc, #140]	@ (80032d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d10f      	bne.n	8003268 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003248:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800324c:	f7ff fe8f 	bl	8002f6e <LL_ADC_IsEnabled>
 8003250:	4604      	mov	r4, r0
 8003252:	481f      	ldr	r0, [pc, #124]	@ (80032d0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003254:	f7ff fe8b 	bl	8002f6e <LL_ADC_IsEnabled>
 8003258:	4603      	mov	r3, r0
 800325a:	4323      	orrs	r3, r4
 800325c:	2b00      	cmp	r3, #0
 800325e:	bf0c      	ite	eq
 8003260:	2301      	moveq	r3, #1
 8003262:	2300      	movne	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	e012      	b.n	800328e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003268:	481a      	ldr	r0, [pc, #104]	@ (80032d4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800326a:	f7ff fe80 	bl	8002f6e <LL_ADC_IsEnabled>
 800326e:	4604      	mov	r4, r0
 8003270:	4819      	ldr	r0, [pc, #100]	@ (80032d8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003272:	f7ff fe7c 	bl	8002f6e <LL_ADC_IsEnabled>
 8003276:	4603      	mov	r3, r0
 8003278:	431c      	orrs	r4, r3
 800327a:	481a      	ldr	r0, [pc, #104]	@ (80032e4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800327c:	f7ff fe77 	bl	8002f6e <LL_ADC_IsEnabled>
 8003280:	4603      	mov	r3, r0
 8003282:	4323      	orrs	r3, r4
 8003284:	2b00      	cmp	r3, #0
 8003286:	bf0c      	ite	eq
 8003288:	2301      	moveq	r3, #1
 800328a:	2300      	movne	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d012      	beq.n	80032b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003292:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800329a:	f023 030f 	bic.w	r3, r3, #15
 800329e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80032a0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032a2:	e009      	b.n	80032b8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a8:	f043 0220 	orr.w	r2, r3, #32
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80032b6:	e000      	b.n	80032ba <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80032c2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3784      	adds	r7, #132	@ 0x84
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd90      	pop	{r4, r7, pc}
 80032ce:	bf00      	nop
 80032d0:	50000100 	.word	0x50000100
 80032d4:	50000400 	.word	0x50000400
 80032d8:	50000500 	.word	0x50000500
 80032dc:	50000300 	.word	0x50000300
 80032e0:	50000700 	.word	0x50000700
 80032e4:	50000600 	.word	0x50000600

080032e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032f8:	4b0c      	ldr	r3, [pc, #48]	@ (800332c <__NVIC_SetPriorityGrouping+0x44>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003304:	4013      	ands	r3, r2
 8003306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003310:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003314:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800331a:	4a04      	ldr	r2, [pc, #16]	@ (800332c <__NVIC_SetPriorityGrouping+0x44>)
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	60d3      	str	r3, [r2, #12]
}
 8003320:	bf00      	nop
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	e000ed00 	.word	0xe000ed00

08003330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003334:	4b04      	ldr	r3, [pc, #16]	@ (8003348 <__NVIC_GetPriorityGrouping+0x18>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	0a1b      	lsrs	r3, r3, #8
 800333a:	f003 0307 	and.w	r3, r3, #7
}
 800333e:	4618      	mov	r0, r3
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr
 8003348:	e000ed00 	.word	0xe000ed00

0800334c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335a:	2b00      	cmp	r3, #0
 800335c:	db0b      	blt.n	8003376 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800335e:	79fb      	ldrb	r3, [r7, #7]
 8003360:	f003 021f 	and.w	r2, r3, #31
 8003364:	4907      	ldr	r1, [pc, #28]	@ (8003384 <__NVIC_EnableIRQ+0x38>)
 8003366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336a:	095b      	lsrs	r3, r3, #5
 800336c:	2001      	movs	r0, #1
 800336e:	fa00 f202 	lsl.w	r2, r0, r2
 8003372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	e000e100 	.word	0xe000e100

08003388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	6039      	str	r1, [r7, #0]
 8003392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003398:	2b00      	cmp	r3, #0
 800339a:	db0a      	blt.n	80033b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	490c      	ldr	r1, [pc, #48]	@ (80033d4 <__NVIC_SetPriority+0x4c>)
 80033a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a6:	0112      	lsls	r2, r2, #4
 80033a8:	b2d2      	uxtb	r2, r2
 80033aa:	440b      	add	r3, r1
 80033ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033b0:	e00a      	b.n	80033c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	4908      	ldr	r1, [pc, #32]	@ (80033d8 <__NVIC_SetPriority+0x50>)
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	3b04      	subs	r3, #4
 80033c0:	0112      	lsls	r2, r2, #4
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	440b      	add	r3, r1
 80033c6:	761a      	strb	r2, [r3, #24]
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	e000e100 	.word	0xe000e100
 80033d8:	e000ed00 	.word	0xe000ed00

080033dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033dc:	b480      	push	{r7}
 80033de:	b089      	sub	sp, #36	@ 0x24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f1c3 0307 	rsb	r3, r3, #7
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	bf28      	it	cs
 80033fa:	2304      	movcs	r3, #4
 80033fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	3304      	adds	r3, #4
 8003402:	2b06      	cmp	r3, #6
 8003404:	d902      	bls.n	800340c <NVIC_EncodePriority+0x30>
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	3b03      	subs	r3, #3
 800340a:	e000      	b.n	800340e <NVIC_EncodePriority+0x32>
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003410:	f04f 32ff 	mov.w	r2, #4294967295
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43da      	mvns	r2, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	401a      	ands	r2, r3
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003424:	f04f 31ff 	mov.w	r1, #4294967295
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	fa01 f303 	lsl.w	r3, r1, r3
 800342e:	43d9      	mvns	r1, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003434:	4313      	orrs	r3, r2
         );
}
 8003436:	4618      	mov	r0, r3
 8003438:	3724      	adds	r7, #36	@ 0x24
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
	...

08003444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3b01      	subs	r3, #1
 8003450:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003454:	d301      	bcc.n	800345a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003456:	2301      	movs	r3, #1
 8003458:	e00f      	b.n	800347a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800345a:	4a0a      	ldr	r2, [pc, #40]	@ (8003484 <SysTick_Config+0x40>)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3b01      	subs	r3, #1
 8003460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003462:	210f      	movs	r1, #15
 8003464:	f04f 30ff 	mov.w	r0, #4294967295
 8003468:	f7ff ff8e 	bl	8003388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800346c:	4b05      	ldr	r3, [pc, #20]	@ (8003484 <SysTick_Config+0x40>)
 800346e:	2200      	movs	r2, #0
 8003470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003472:	4b04      	ldr	r3, [pc, #16]	@ (8003484 <SysTick_Config+0x40>)
 8003474:	2207      	movs	r2, #7
 8003476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	e000e010 	.word	0xe000e010

08003488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7ff ff29 	bl	80032e8 <__NVIC_SetPriorityGrouping>
}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b086      	sub	sp, #24
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	4603      	mov	r3, r0
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	607a      	str	r2, [r7, #4]
 80034aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034ac:	f7ff ff40 	bl	8003330 <__NVIC_GetPriorityGrouping>
 80034b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	68b9      	ldr	r1, [r7, #8]
 80034b6:	6978      	ldr	r0, [r7, #20]
 80034b8:	f7ff ff90 	bl	80033dc <NVIC_EncodePriority>
 80034bc:	4602      	mov	r2, r0
 80034be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034c2:	4611      	mov	r1, r2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff ff5f 	bl	8003388 <__NVIC_SetPriority>
}
 80034ca:	bf00      	nop
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b082      	sub	sp, #8
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	4603      	mov	r3, r0
 80034da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff ff33 	bl	800334c <__NVIC_EnableIRQ>
}
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b082      	sub	sp, #8
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff ffa4 	bl	8003444 <SysTick_Config>
 80034fc:	4603      	mov	r3, r0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e08d      	b.n	8003636 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	4b47      	ldr	r3, [pc, #284]	@ (8003640 <HAL_DMA_Init+0x138>)
 8003522:	429a      	cmp	r2, r3
 8003524:	d80f      	bhi.n	8003546 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	4b45      	ldr	r3, [pc, #276]	@ (8003644 <HAL_DMA_Init+0x13c>)
 800352e:	4413      	add	r3, r2
 8003530:	4a45      	ldr	r2, [pc, #276]	@ (8003648 <HAL_DMA_Init+0x140>)
 8003532:	fba2 2303 	umull	r2, r3, r2, r3
 8003536:	091b      	lsrs	r3, r3, #4
 8003538:	009a      	lsls	r2, r3, #2
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a42      	ldr	r2, [pc, #264]	@ (800364c <HAL_DMA_Init+0x144>)
 8003542:	641a      	str	r2, [r3, #64]	@ 0x40
 8003544:	e00e      	b.n	8003564 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	461a      	mov	r2, r3
 800354c:	4b40      	ldr	r3, [pc, #256]	@ (8003650 <HAL_DMA_Init+0x148>)
 800354e:	4413      	add	r3, r2
 8003550:	4a3d      	ldr	r2, [pc, #244]	@ (8003648 <HAL_DMA_Init+0x140>)
 8003552:	fba2 2303 	umull	r2, r3, r2, r3
 8003556:	091b      	lsrs	r3, r3, #4
 8003558:	009a      	lsls	r2, r3, #2
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a3c      	ldr	r2, [pc, #240]	@ (8003654 <HAL_DMA_Init+0x14c>)
 8003562:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800357a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800357e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003588:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003594:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 fa76 	bl	8003aa8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035c4:	d102      	bne.n	80035cc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80035e0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d010      	beq.n	800360c <HAL_DMA_Init+0x104>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d80c      	bhi.n	800360c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fa96 	bl	8003b24 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003608:	605a      	str	r2, [r3, #4]
 800360a:	e008      	b.n	800361e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	40020407 	.word	0x40020407
 8003644:	bffdfff8 	.word	0xbffdfff8
 8003648:	cccccccd 	.word	0xcccccccd
 800364c:	40020000 	.word	0x40020000
 8003650:	bffdfbf8 	.word	0xbffdfbf8
 8003654:	40020400 	.word	0x40020400

08003658 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
 8003664:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003670:	2b01      	cmp	r3, #1
 8003672:	d101      	bne.n	8003678 <HAL_DMA_Start_IT+0x20>
 8003674:	2302      	movs	r3, #2
 8003676:	e066      	b.n	8003746 <HAL_DMA_Start_IT+0xee>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b01      	cmp	r3, #1
 800368a:	d155      	bne.n	8003738 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0201 	bic.w	r2, r2, #1
 80036a8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	68b9      	ldr	r1, [r7, #8]
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 f9bb 	bl	8003a2c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d008      	beq.n	80036d0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f042 020e 	orr.w	r2, r2, #14
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	e00f      	b.n	80036f0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 0204 	bic.w	r2, r2, #4
 80036de:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 020a 	orr.w	r2, r2, #10
 80036ee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d007      	beq.n	800370e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003708:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800370c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003712:	2b00      	cmp	r3, #0
 8003714:	d007      	beq.n	8003726 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003720:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003724:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f042 0201 	orr.w	r2, r2, #1
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	e005      	b.n	8003744 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003740:	2302      	movs	r3, #2
 8003742:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003744:	7dfb      	ldrb	r3, [r7, #23]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800374e:	b480      	push	{r7}
 8003750:	b085      	sub	sp, #20
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d005      	beq.n	8003772 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2204      	movs	r2, #4
 800376a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	73fb      	strb	r3, [r7, #15]
 8003770:	e037      	b.n	80037e2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 020e 	bic.w	r2, r2, #14
 8003780:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800378c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003790:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0201 	bic.w	r2, r2, #1
 80037a0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a6:	f003 021f 	and.w	r2, r3, #31
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ae:	2101      	movs	r1, #1
 80037b0:	fa01 f202 	lsl.w	r2, r1, r2
 80037b4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80037be:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00c      	beq.n	80037e2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037d6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80037e0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003808:	2300      	movs	r3, #0
 800380a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d00d      	beq.n	8003834 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2204      	movs	r2, #4
 800381c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	73fb      	strb	r3, [r7, #15]
 8003832:	e047      	b.n	80038c4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 020e 	bic.w	r2, r2, #14
 8003842:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0201 	bic.w	r2, r2, #1
 8003852:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800385e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003862:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003868:	f003 021f 	and.w	r2, r3, #31
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003870:	2101      	movs	r1, #1
 8003872:	fa01 f202 	lsl.w	r2, r1, r2
 8003876:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003880:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00c      	beq.n	80038a4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003894:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003898:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80038a2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	4798      	blx	r3
    }
  }
  return status;
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b084      	sub	sp, #16
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ea:	f003 031f 	and.w	r3, r3, #31
 80038ee:	2204      	movs	r2, #4
 80038f0:	409a      	lsls	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4013      	ands	r3, r2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d026      	beq.n	8003948 <HAL_DMA_IRQHandler+0x7a>
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	2b00      	cmp	r3, #0
 8003902:	d021      	beq.n	8003948 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b00      	cmp	r3, #0
 8003910:	d107      	bne.n	8003922 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0204 	bic.w	r2, r2, #4
 8003920:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003926:	f003 021f 	and.w	r2, r3, #31
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392e:	2104      	movs	r1, #4
 8003930:	fa01 f202 	lsl.w	r2, r1, r2
 8003934:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393a:	2b00      	cmp	r3, #0
 800393c:	d071      	beq.n	8003a22 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003946:	e06c      	b.n	8003a22 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800394c:	f003 031f 	and.w	r3, r3, #31
 8003950:	2202      	movs	r2, #2
 8003952:	409a      	lsls	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4013      	ands	r3, r2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d02e      	beq.n	80039ba <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d029      	beq.n	80039ba <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10b      	bne.n	800398c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 020a 	bic.w	r2, r2, #10
 8003982:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003990:	f003 021f 	and.w	r2, r3, #31
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003998:	2102      	movs	r1, #2
 800399a:	fa01 f202 	lsl.w	r2, r1, r2
 800399e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d038      	beq.n	8003a22 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80039b8:	e033      	b.n	8003a22 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039be:	f003 031f 	and.w	r3, r3, #31
 80039c2:	2208      	movs	r2, #8
 80039c4:	409a      	lsls	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4013      	ands	r3, r2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d02a      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d025      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 020e 	bic.w	r2, r2, #14
 80039e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ec:	f003 021f 	and.w	r2, r3, #31
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f4:	2101      	movs	r1, #1
 80039f6:	fa01 f202 	lsl.w	r2, r1, r2
 80039fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d004      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a22:	bf00      	nop
 8003a24:	bf00      	nop
}
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a42:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d004      	beq.n	8003a56 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a54:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5a:	f003 021f 	and.w	r2, r3, #31
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a62:	2101      	movs	r1, #1
 8003a64:	fa01 f202 	lsl.w	r2, r1, r2
 8003a68:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	2b10      	cmp	r3, #16
 8003a78:	d108      	bne.n	8003a8c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a8a:	e007      	b.n	8003a9c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	60da      	str	r2, [r3, #12]
}
 8003a9c:	bf00      	nop
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	4b16      	ldr	r3, [pc, #88]	@ (8003b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d802      	bhi.n	8003ac2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003abc:	4b15      	ldr	r3, [pc, #84]	@ (8003b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003abe:	617b      	str	r3, [r7, #20]
 8003ac0:	e001      	b.n	8003ac6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003ac2:	4b15      	ldr	r3, [pc, #84]	@ (8003b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003ac4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	3b08      	subs	r3, #8
 8003ad2:	4a12      	ldr	r2, [pc, #72]	@ (8003b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad8:	091b      	lsrs	r3, r3, #4
 8003ada:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae0:	089b      	lsrs	r3, r3, #2
 8003ae2:	009a      	lsls	r2, r3, #2
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	461a      	mov	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a0b      	ldr	r2, [pc, #44]	@ (8003b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003af2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f003 031f 	and.w	r3, r3, #31
 8003afa:	2201      	movs	r2, #1
 8003afc:	409a      	lsls	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b02:	bf00      	nop
 8003b04:	371c      	adds	r7, #28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	40020407 	.word	0x40020407
 8003b14:	40020800 	.word	0x40020800
 8003b18:	40020820 	.word	0x40020820
 8003b1c:	cccccccd 	.word	0xcccccccd
 8003b20:	40020880 	.word	0x40020880

08003b24 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	4b0b      	ldr	r3, [pc, #44]	@ (8003b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a08      	ldr	r2, [pc, #32]	@ (8003b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003b46:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	f003 031f 	and.w	r3, r3, #31
 8003b50:	2201      	movs	r2, #1
 8003b52:	409a      	lsls	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003b58:	bf00      	nop
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	1000823f 	.word	0x1000823f
 8003b68:	40020940 	.word	0x40020940

08003b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b76:	2300      	movs	r3, #0
 8003b78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b7a:	e15a      	b.n	8003e32 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	2101      	movs	r1, #1
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	fa01 f303 	lsl.w	r3, r1, r3
 8003b88:	4013      	ands	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 814c 	beq.w	8003e2c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 0303 	and.w	r3, r3, #3
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d005      	beq.n	8003bac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d130      	bne.n	8003c0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	2203      	movs	r2, #3
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003be2:	2201      	movs	r2, #1
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	43db      	mvns	r3, r3
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	091b      	lsrs	r3, r3, #4
 8003bf8:	f003 0201 	and.w	r2, r3, #1
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d017      	beq.n	8003c4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	2203      	movs	r2, #3
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d123      	bne.n	8003c9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	08da      	lsrs	r2, r3, #3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3208      	adds	r2, #8
 8003c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	220f      	movs	r2, #15
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	43db      	mvns	r3, r3
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4013      	ands	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	08da      	lsrs	r2, r3, #3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3208      	adds	r2, #8
 8003c98:	6939      	ldr	r1, [r7, #16]
 8003c9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	2203      	movs	r2, #3
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f003 0203 	and.w	r2, r3, #3
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 80a6 	beq.w	8003e2c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ce0:	4b5b      	ldr	r3, [pc, #364]	@ (8003e50 <HAL_GPIO_Init+0x2e4>)
 8003ce2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ce4:	4a5a      	ldr	r2, [pc, #360]	@ (8003e50 <HAL_GPIO_Init+0x2e4>)
 8003ce6:	f043 0301 	orr.w	r3, r3, #1
 8003cea:	6613      	str	r3, [r2, #96]	@ 0x60
 8003cec:	4b58      	ldr	r3, [pc, #352]	@ (8003e50 <HAL_GPIO_Init+0x2e4>)
 8003cee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cf8:	4a56      	ldr	r2, [pc, #344]	@ (8003e54 <HAL_GPIO_Init+0x2e8>)
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	089b      	lsrs	r3, r3, #2
 8003cfe:	3302      	adds	r3, #2
 8003d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f003 0303 	and.w	r3, r3, #3
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	220f      	movs	r2, #15
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	43db      	mvns	r3, r3
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	4013      	ands	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d22:	d01f      	beq.n	8003d64 <HAL_GPIO_Init+0x1f8>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a4c      	ldr	r2, [pc, #304]	@ (8003e58 <HAL_GPIO_Init+0x2ec>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d019      	beq.n	8003d60 <HAL_GPIO_Init+0x1f4>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a4b      	ldr	r2, [pc, #300]	@ (8003e5c <HAL_GPIO_Init+0x2f0>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d013      	beq.n	8003d5c <HAL_GPIO_Init+0x1f0>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a4a      	ldr	r2, [pc, #296]	@ (8003e60 <HAL_GPIO_Init+0x2f4>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d00d      	beq.n	8003d58 <HAL_GPIO_Init+0x1ec>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a49      	ldr	r2, [pc, #292]	@ (8003e64 <HAL_GPIO_Init+0x2f8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d007      	beq.n	8003d54 <HAL_GPIO_Init+0x1e8>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a48      	ldr	r2, [pc, #288]	@ (8003e68 <HAL_GPIO_Init+0x2fc>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d101      	bne.n	8003d50 <HAL_GPIO_Init+0x1e4>
 8003d4c:	2305      	movs	r3, #5
 8003d4e:	e00a      	b.n	8003d66 <HAL_GPIO_Init+0x1fa>
 8003d50:	2306      	movs	r3, #6
 8003d52:	e008      	b.n	8003d66 <HAL_GPIO_Init+0x1fa>
 8003d54:	2304      	movs	r3, #4
 8003d56:	e006      	b.n	8003d66 <HAL_GPIO_Init+0x1fa>
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e004      	b.n	8003d66 <HAL_GPIO_Init+0x1fa>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e002      	b.n	8003d66 <HAL_GPIO_Init+0x1fa>
 8003d60:	2301      	movs	r3, #1
 8003d62:	e000      	b.n	8003d66 <HAL_GPIO_Init+0x1fa>
 8003d64:	2300      	movs	r3, #0
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	f002 0203 	and.w	r2, r2, #3
 8003d6c:	0092      	lsls	r2, r2, #2
 8003d6e:	4093      	lsls	r3, r2
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d76:	4937      	ldr	r1, [pc, #220]	@ (8003e54 <HAL_GPIO_Init+0x2e8>)
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	089b      	lsrs	r3, r3, #2
 8003d7c:	3302      	adds	r3, #2
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d84:	4b39      	ldr	r3, [pc, #228]	@ (8003e6c <HAL_GPIO_Init+0x300>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	4013      	ands	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003da8:	4a30      	ldr	r2, [pc, #192]	@ (8003e6c <HAL_GPIO_Init+0x300>)
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003dae:	4b2f      	ldr	r3, [pc, #188]	@ (8003e6c <HAL_GPIO_Init+0x300>)
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	43db      	mvns	r3, r3
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003dd2:	4a26      	ldr	r2, [pc, #152]	@ (8003e6c <HAL_GPIO_Init+0x300>)
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003dd8:	4b24      	ldr	r3, [pc, #144]	@ (8003e6c <HAL_GPIO_Init+0x300>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	43db      	mvns	r3, r3
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4013      	ands	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003dfc:	4a1b      	ldr	r2, [pc, #108]	@ (8003e6c <HAL_GPIO_Init+0x300>)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e02:	4b1a      	ldr	r3, [pc, #104]	@ (8003e6c <HAL_GPIO_Init+0x300>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e26:	4a11      	ldr	r2, [pc, #68]	@ (8003e6c <HAL_GPIO_Init+0x300>)
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f47f ae9d 	bne.w	8003b7c <HAL_GPIO_Init+0x10>
  }
}
 8003e42:	bf00      	nop
 8003e44:	bf00      	nop
 8003e46:	371c      	adds	r7, #28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	40021000 	.word	0x40021000
 8003e54:	40010000 	.word	0x40010000
 8003e58:	48000400 	.word	0x48000400
 8003e5c:	48000800 	.word	0x48000800
 8003e60:	48000c00 	.word	0x48000c00
 8003e64:	48001000 	.word	0x48001000
 8003e68:	48001400 	.word	0x48001400
 8003e6c:	40010400 	.word	0x40010400

08003e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	460b      	mov	r3, r1
 8003e7a:	807b      	strh	r3, [r7, #2]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e80:	787b      	ldrb	r3, [r7, #1]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e86:	887a      	ldrh	r2, [r7, #2]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e8c:	e002      	b.n	8003e94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e8e:	887a      	ldrh	r2, [r7, #2]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003eaa:	4b08      	ldr	r3, [pc, #32]	@ (8003ecc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003eac:	695a      	ldr	r2, [r3, #20]
 8003eae:	88fb      	ldrh	r3, [r7, #6]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d006      	beq.n	8003ec4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003eb6:	4a05      	ldr	r2, [pc, #20]	@ (8003ecc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003eb8:	88fb      	ldrh	r3, [r7, #6]
 8003eba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ebc:	88fb      	ldrh	r3, [r7, #6]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 f806 	bl	8003ed0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ec4:	bf00      	nop
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40010400 	.word	0x40010400

08003ed0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
	...

08003ee8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d141      	bne.n	8003f7a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ef6:	4b4b      	ldr	r3, [pc, #300]	@ (8004024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003efe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f02:	d131      	bne.n	8003f68 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f04:	4b47      	ldr	r3, [pc, #284]	@ (8004024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f0a:	4a46      	ldr	r2, [pc, #280]	@ (8004024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f10:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f14:	4b43      	ldr	r3, [pc, #268]	@ (8004024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f1c:	4a41      	ldr	r2, [pc, #260]	@ (8004024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f24:	4b40      	ldr	r3, [pc, #256]	@ (8004028 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2232      	movs	r2, #50	@ 0x32
 8003f2a:	fb02 f303 	mul.w	r3, r2, r3
 8003f2e:	4a3f      	ldr	r2, [pc, #252]	@ (800402c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f30:	fba2 2303 	umull	r2, r3, r2, r3
 8003f34:	0c9b      	lsrs	r3, r3, #18
 8003f36:	3301      	adds	r3, #1
 8003f38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f3a:	e002      	b.n	8003f42 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f42:	4b38      	ldr	r3, [pc, #224]	@ (8004024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f4e:	d102      	bne.n	8003f56 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f2      	bne.n	8003f3c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f56:	4b33      	ldr	r3, [pc, #204]	@ (8004024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f62:	d158      	bne.n	8004016 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e057      	b.n	8004018 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f68:	4b2e      	ldr	r3, [pc, #184]	@ (8004024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f6e:	4a2d      	ldr	r2, [pc, #180]	@ (8004024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003f78:	e04d      	b.n	8004016 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f80:	d141      	bne.n	8004006 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f82:	4b28      	ldr	r3, [pc, #160]	@ (8004024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f8e:	d131      	bne.n	8003ff4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f90:	4b24      	ldr	r3, [pc, #144]	@ (8004024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f96:	4a23      	ldr	r2, [pc, #140]	@ (8004024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f9c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fa0:	4b20      	ldr	r3, [pc, #128]	@ (8004024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003fa8:	4a1e      	ldr	r2, [pc, #120]	@ (8004024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003faa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8004028 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2232      	movs	r2, #50	@ 0x32
 8003fb6:	fb02 f303 	mul.w	r3, r2, r3
 8003fba:	4a1c      	ldr	r2, [pc, #112]	@ (800402c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc0:	0c9b      	lsrs	r3, r3, #18
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fc6:	e002      	b.n	8003fce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fce:	4b15      	ldr	r3, [pc, #84]	@ (8004024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fda:	d102      	bne.n	8003fe2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1f2      	bne.n	8003fc8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fe2:	4b10      	ldr	r3, [pc, #64]	@ (8004024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fee:	d112      	bne.n	8004016 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e011      	b.n	8004018 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8004024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8004024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ffc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004000:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004004:	e007      	b.n	8004016 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004006:	4b07      	ldr	r3, [pc, #28]	@ (8004024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800400e:	4a05      	ldr	r2, [pc, #20]	@ (8004024 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004010:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004014:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	40007000 	.word	0x40007000
 8004028:	20000000 	.word	0x20000000
 800402c:	431bde83 	.word	0x431bde83

08004030 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004034:	4b05      	ldr	r3, [pc, #20]	@ (800404c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	4a04      	ldr	r2, [pc, #16]	@ (800404c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800403a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800403e:	6093      	str	r3, [r2, #8]
}
 8004040:	bf00      	nop
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	40007000 	.word	0x40007000

08004050 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e2fe      	b.n	8004660 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d075      	beq.n	800415a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800406e:	4b97      	ldr	r3, [pc, #604]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 030c 	and.w	r3, r3, #12
 8004076:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004078:	4b94      	ldr	r3, [pc, #592]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	2b0c      	cmp	r3, #12
 8004086:	d102      	bne.n	800408e <HAL_RCC_OscConfig+0x3e>
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	2b03      	cmp	r3, #3
 800408c:	d002      	beq.n	8004094 <HAL_RCC_OscConfig+0x44>
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	2b08      	cmp	r3, #8
 8004092:	d10b      	bne.n	80040ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004094:	4b8d      	ldr	r3, [pc, #564]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d05b      	beq.n	8004158 <HAL_RCC_OscConfig+0x108>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d157      	bne.n	8004158 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e2d9      	b.n	8004660 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040b4:	d106      	bne.n	80040c4 <HAL_RCC_OscConfig+0x74>
 80040b6:	4b85      	ldr	r3, [pc, #532]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a84      	ldr	r2, [pc, #528]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 80040bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	e01d      	b.n	8004100 <HAL_RCC_OscConfig+0xb0>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040cc:	d10c      	bne.n	80040e8 <HAL_RCC_OscConfig+0x98>
 80040ce:	4b7f      	ldr	r3, [pc, #508]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a7e      	ldr	r2, [pc, #504]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 80040d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	4b7c      	ldr	r3, [pc, #496]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a7b      	ldr	r2, [pc, #492]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 80040e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	e00b      	b.n	8004100 <HAL_RCC_OscConfig+0xb0>
 80040e8:	4b78      	ldr	r3, [pc, #480]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a77      	ldr	r2, [pc, #476]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 80040ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	4b75      	ldr	r3, [pc, #468]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a74      	ldr	r2, [pc, #464]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 80040fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d013      	beq.n	8004130 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004108:	f7fd fc6a 	bl	80019e0 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004110:	f7fd fc66 	bl	80019e0 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b64      	cmp	r3, #100	@ 0x64
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e29e      	b.n	8004660 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004122:	4b6a      	ldr	r3, [pc, #424]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d0f0      	beq.n	8004110 <HAL_RCC_OscConfig+0xc0>
 800412e:	e014      	b.n	800415a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004130:	f7fd fc56 	bl	80019e0 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004138:	f7fd fc52 	bl	80019e0 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b64      	cmp	r3, #100	@ 0x64
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e28a      	b.n	8004660 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800414a:	4b60      	ldr	r3, [pc, #384]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1f0      	bne.n	8004138 <HAL_RCC_OscConfig+0xe8>
 8004156:	e000      	b.n	800415a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d075      	beq.n	8004252 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004166:	4b59      	ldr	r3, [pc, #356]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 030c 	and.w	r3, r3, #12
 800416e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004170:	4b56      	ldr	r3, [pc, #344]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f003 0303 	and.w	r3, r3, #3
 8004178:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	2b0c      	cmp	r3, #12
 800417e:	d102      	bne.n	8004186 <HAL_RCC_OscConfig+0x136>
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	2b02      	cmp	r3, #2
 8004184:	d002      	beq.n	800418c <HAL_RCC_OscConfig+0x13c>
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	2b04      	cmp	r3, #4
 800418a:	d11f      	bne.n	80041cc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800418c:	4b4f      	ldr	r3, [pc, #316]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <HAL_RCC_OscConfig+0x154>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e25d      	b.n	8004660 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a4:	4b49      	ldr	r3, [pc, #292]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	061b      	lsls	r3, r3, #24
 80041b2:	4946      	ldr	r1, [pc, #280]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80041b8:	4b45      	ldr	r3, [pc, #276]	@ (80042d0 <HAL_RCC_OscConfig+0x280>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fd fbc3 	bl	8001948 <HAL_InitTick>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d043      	beq.n	8004250 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e249      	b.n	8004660 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d023      	beq.n	800421c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041d4:	4b3d      	ldr	r3, [pc, #244]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a3c      	ldr	r2, [pc, #240]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 80041da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e0:	f7fd fbfe 	bl	80019e0 <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041e8:	f7fd fbfa 	bl	80019e0 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e232      	b.n	8004660 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041fa:	4b34      	ldr	r3, [pc, #208]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0f0      	beq.n	80041e8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004206:	4b31      	ldr	r3, [pc, #196]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	061b      	lsls	r3, r3, #24
 8004214:	492d      	ldr	r1, [pc, #180]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 8004216:	4313      	orrs	r3, r2
 8004218:	604b      	str	r3, [r1, #4]
 800421a:	e01a      	b.n	8004252 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800421c:	4b2b      	ldr	r3, [pc, #172]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a2a      	ldr	r2, [pc, #168]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 8004222:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004228:	f7fd fbda 	bl	80019e0 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004230:	f7fd fbd6 	bl	80019e0 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e20e      	b.n	8004660 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004242:	4b22      	ldr	r3, [pc, #136]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f0      	bne.n	8004230 <HAL_RCC_OscConfig+0x1e0>
 800424e:	e000      	b.n	8004252 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004250:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d041      	beq.n	80042e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d01c      	beq.n	80042a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004266:	4b19      	ldr	r3, [pc, #100]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 8004268:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800426c:	4a17      	ldr	r2, [pc, #92]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 800426e:	f043 0301 	orr.w	r3, r3, #1
 8004272:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004276:	f7fd fbb3 	bl	80019e0 <HAL_GetTick>
 800427a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800427c:	e008      	b.n	8004290 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800427e:	f7fd fbaf 	bl	80019e0 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e1e7      	b.n	8004660 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004290:	4b0e      	ldr	r3, [pc, #56]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 8004292:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0ef      	beq.n	800427e <HAL_RCC_OscConfig+0x22e>
 800429e:	e020      	b.n	80042e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042a0:	4b0a      	ldr	r3, [pc, #40]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 80042a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042a6:	4a09      	ldr	r2, [pc, #36]	@ (80042cc <HAL_RCC_OscConfig+0x27c>)
 80042a8:	f023 0301 	bic.w	r3, r3, #1
 80042ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b0:	f7fd fb96 	bl	80019e0 <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042b6:	e00d      	b.n	80042d4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042b8:	f7fd fb92 	bl	80019e0 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d906      	bls.n	80042d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e1ca      	b.n	8004660 <HAL_RCC_OscConfig+0x610>
 80042ca:	bf00      	nop
 80042cc:	40021000 	.word	0x40021000
 80042d0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042d4:	4b8c      	ldr	r3, [pc, #560]	@ (8004508 <HAL_RCC_OscConfig+0x4b8>)
 80042d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1ea      	bne.n	80042b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0304 	and.w	r3, r3, #4
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 80a6 	beq.w	800443c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042f0:	2300      	movs	r3, #0
 80042f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042f4:	4b84      	ldr	r3, [pc, #528]	@ (8004508 <HAL_RCC_OscConfig+0x4b8>)
 80042f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <HAL_RCC_OscConfig+0x2b4>
 8004300:	2301      	movs	r3, #1
 8004302:	e000      	b.n	8004306 <HAL_RCC_OscConfig+0x2b6>
 8004304:	2300      	movs	r3, #0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00d      	beq.n	8004326 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800430a:	4b7f      	ldr	r3, [pc, #508]	@ (8004508 <HAL_RCC_OscConfig+0x4b8>)
 800430c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800430e:	4a7e      	ldr	r2, [pc, #504]	@ (8004508 <HAL_RCC_OscConfig+0x4b8>)
 8004310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004314:	6593      	str	r3, [r2, #88]	@ 0x58
 8004316:	4b7c      	ldr	r3, [pc, #496]	@ (8004508 <HAL_RCC_OscConfig+0x4b8>)
 8004318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800431a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004322:	2301      	movs	r3, #1
 8004324:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004326:	4b79      	ldr	r3, [pc, #484]	@ (800450c <HAL_RCC_OscConfig+0x4bc>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800432e:	2b00      	cmp	r3, #0
 8004330:	d118      	bne.n	8004364 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004332:	4b76      	ldr	r3, [pc, #472]	@ (800450c <HAL_RCC_OscConfig+0x4bc>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a75      	ldr	r2, [pc, #468]	@ (800450c <HAL_RCC_OscConfig+0x4bc>)
 8004338:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800433c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800433e:	f7fd fb4f 	bl	80019e0 <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004344:	e008      	b.n	8004358 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004346:	f7fd fb4b 	bl	80019e0 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e183      	b.n	8004660 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004358:	4b6c      	ldr	r3, [pc, #432]	@ (800450c <HAL_RCC_OscConfig+0x4bc>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0f0      	beq.n	8004346 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d108      	bne.n	800437e <HAL_RCC_OscConfig+0x32e>
 800436c:	4b66      	ldr	r3, [pc, #408]	@ (8004508 <HAL_RCC_OscConfig+0x4b8>)
 800436e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004372:	4a65      	ldr	r2, [pc, #404]	@ (8004508 <HAL_RCC_OscConfig+0x4b8>)
 8004374:	f043 0301 	orr.w	r3, r3, #1
 8004378:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800437c:	e024      	b.n	80043c8 <HAL_RCC_OscConfig+0x378>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	2b05      	cmp	r3, #5
 8004384:	d110      	bne.n	80043a8 <HAL_RCC_OscConfig+0x358>
 8004386:	4b60      	ldr	r3, [pc, #384]	@ (8004508 <HAL_RCC_OscConfig+0x4b8>)
 8004388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800438c:	4a5e      	ldr	r2, [pc, #376]	@ (8004508 <HAL_RCC_OscConfig+0x4b8>)
 800438e:	f043 0304 	orr.w	r3, r3, #4
 8004392:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004396:	4b5c      	ldr	r3, [pc, #368]	@ (8004508 <HAL_RCC_OscConfig+0x4b8>)
 8004398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800439c:	4a5a      	ldr	r2, [pc, #360]	@ (8004508 <HAL_RCC_OscConfig+0x4b8>)
 800439e:	f043 0301 	orr.w	r3, r3, #1
 80043a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043a6:	e00f      	b.n	80043c8 <HAL_RCC_OscConfig+0x378>
 80043a8:	4b57      	ldr	r3, [pc, #348]	@ (8004508 <HAL_RCC_OscConfig+0x4b8>)
 80043aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ae:	4a56      	ldr	r2, [pc, #344]	@ (8004508 <HAL_RCC_OscConfig+0x4b8>)
 80043b0:	f023 0301 	bic.w	r3, r3, #1
 80043b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043b8:	4b53      	ldr	r3, [pc, #332]	@ (8004508 <HAL_RCC_OscConfig+0x4b8>)
 80043ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043be:	4a52      	ldr	r2, [pc, #328]	@ (8004508 <HAL_RCC_OscConfig+0x4b8>)
 80043c0:	f023 0304 	bic.w	r3, r3, #4
 80043c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d016      	beq.n	80043fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d0:	f7fd fb06 	bl	80019e0 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043d6:	e00a      	b.n	80043ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d8:	f7fd fb02 	bl	80019e0 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e138      	b.n	8004660 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ee:	4b46      	ldr	r3, [pc, #280]	@ (8004508 <HAL_RCC_OscConfig+0x4b8>)
 80043f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d0ed      	beq.n	80043d8 <HAL_RCC_OscConfig+0x388>
 80043fc:	e015      	b.n	800442a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fe:	f7fd faef 	bl	80019e0 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004404:	e00a      	b.n	800441c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004406:	f7fd faeb 	bl	80019e0 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004414:	4293      	cmp	r3, r2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e121      	b.n	8004660 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800441c:	4b3a      	ldr	r3, [pc, #232]	@ (8004508 <HAL_RCC_OscConfig+0x4b8>)
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1ed      	bne.n	8004406 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800442a:	7ffb      	ldrb	r3, [r7, #31]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d105      	bne.n	800443c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004430:	4b35      	ldr	r3, [pc, #212]	@ (8004508 <HAL_RCC_OscConfig+0x4b8>)
 8004432:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004434:	4a34      	ldr	r2, [pc, #208]	@ (8004508 <HAL_RCC_OscConfig+0x4b8>)
 8004436:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800443a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0320 	and.w	r3, r3, #32
 8004444:	2b00      	cmp	r3, #0
 8004446:	d03c      	beq.n	80044c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d01c      	beq.n	800448a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004450:	4b2d      	ldr	r3, [pc, #180]	@ (8004508 <HAL_RCC_OscConfig+0x4b8>)
 8004452:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004456:	4a2c      	ldr	r2, [pc, #176]	@ (8004508 <HAL_RCC_OscConfig+0x4b8>)
 8004458:	f043 0301 	orr.w	r3, r3, #1
 800445c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004460:	f7fd fabe 	bl	80019e0 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004468:	f7fd faba 	bl	80019e0 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e0f2      	b.n	8004660 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800447a:	4b23      	ldr	r3, [pc, #140]	@ (8004508 <HAL_RCC_OscConfig+0x4b8>)
 800447c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d0ef      	beq.n	8004468 <HAL_RCC_OscConfig+0x418>
 8004488:	e01b      	b.n	80044c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800448a:	4b1f      	ldr	r3, [pc, #124]	@ (8004508 <HAL_RCC_OscConfig+0x4b8>)
 800448c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004490:	4a1d      	ldr	r2, [pc, #116]	@ (8004508 <HAL_RCC_OscConfig+0x4b8>)
 8004492:	f023 0301 	bic.w	r3, r3, #1
 8004496:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449a:	f7fd faa1 	bl	80019e0 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044a2:	f7fd fa9d 	bl	80019e0 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e0d5      	b.n	8004660 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044b4:	4b14      	ldr	r3, [pc, #80]	@ (8004508 <HAL_RCC_OscConfig+0x4b8>)
 80044b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1ef      	bne.n	80044a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 80c9 	beq.w	800465e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004508 <HAL_RCC_OscConfig+0x4b8>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f003 030c 	and.w	r3, r3, #12
 80044d4:	2b0c      	cmp	r3, #12
 80044d6:	f000 8083 	beq.w	80045e0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d15e      	bne.n	80045a0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e2:	4b09      	ldr	r3, [pc, #36]	@ (8004508 <HAL_RCC_OscConfig+0x4b8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a08      	ldr	r2, [pc, #32]	@ (8004508 <HAL_RCC_OscConfig+0x4b8>)
 80044e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ee:	f7fd fa77 	bl	80019e0 <HAL_GetTick>
 80044f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044f4:	e00c      	b.n	8004510 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f6:	f7fd fa73 	bl	80019e0 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d905      	bls.n	8004510 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e0ab      	b.n	8004660 <HAL_RCC_OscConfig+0x610>
 8004508:	40021000 	.word	0x40021000
 800450c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004510:	4b55      	ldr	r3, [pc, #340]	@ (8004668 <HAL_RCC_OscConfig+0x618>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1ec      	bne.n	80044f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800451c:	4b52      	ldr	r3, [pc, #328]	@ (8004668 <HAL_RCC_OscConfig+0x618>)
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	4b52      	ldr	r3, [pc, #328]	@ (800466c <HAL_RCC_OscConfig+0x61c>)
 8004522:	4013      	ands	r3, r2
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6a11      	ldr	r1, [r2, #32]
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800452c:	3a01      	subs	r2, #1
 800452e:	0112      	lsls	r2, r2, #4
 8004530:	4311      	orrs	r1, r2
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004536:	0212      	lsls	r2, r2, #8
 8004538:	4311      	orrs	r1, r2
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800453e:	0852      	lsrs	r2, r2, #1
 8004540:	3a01      	subs	r2, #1
 8004542:	0552      	lsls	r2, r2, #21
 8004544:	4311      	orrs	r1, r2
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800454a:	0852      	lsrs	r2, r2, #1
 800454c:	3a01      	subs	r2, #1
 800454e:	0652      	lsls	r2, r2, #25
 8004550:	4311      	orrs	r1, r2
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004556:	06d2      	lsls	r2, r2, #27
 8004558:	430a      	orrs	r2, r1
 800455a:	4943      	ldr	r1, [pc, #268]	@ (8004668 <HAL_RCC_OscConfig+0x618>)
 800455c:	4313      	orrs	r3, r2
 800455e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004560:	4b41      	ldr	r3, [pc, #260]	@ (8004668 <HAL_RCC_OscConfig+0x618>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a40      	ldr	r2, [pc, #256]	@ (8004668 <HAL_RCC_OscConfig+0x618>)
 8004566:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800456a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800456c:	4b3e      	ldr	r3, [pc, #248]	@ (8004668 <HAL_RCC_OscConfig+0x618>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	4a3d      	ldr	r2, [pc, #244]	@ (8004668 <HAL_RCC_OscConfig+0x618>)
 8004572:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004576:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004578:	f7fd fa32 	bl	80019e0 <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004580:	f7fd fa2e 	bl	80019e0 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e066      	b.n	8004660 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004592:	4b35      	ldr	r3, [pc, #212]	@ (8004668 <HAL_RCC_OscConfig+0x618>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0f0      	beq.n	8004580 <HAL_RCC_OscConfig+0x530>
 800459e:	e05e      	b.n	800465e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045a0:	4b31      	ldr	r3, [pc, #196]	@ (8004668 <HAL_RCC_OscConfig+0x618>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a30      	ldr	r2, [pc, #192]	@ (8004668 <HAL_RCC_OscConfig+0x618>)
 80045a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ac:	f7fd fa18 	bl	80019e0 <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b4:	f7fd fa14 	bl	80019e0 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e04c      	b.n	8004660 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045c6:	4b28      	ldr	r3, [pc, #160]	@ (8004668 <HAL_RCC_OscConfig+0x618>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1f0      	bne.n	80045b4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80045d2:	4b25      	ldr	r3, [pc, #148]	@ (8004668 <HAL_RCC_OscConfig+0x618>)
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	4924      	ldr	r1, [pc, #144]	@ (8004668 <HAL_RCC_OscConfig+0x618>)
 80045d8:	4b25      	ldr	r3, [pc, #148]	@ (8004670 <HAL_RCC_OscConfig+0x620>)
 80045da:	4013      	ands	r3, r2
 80045dc:	60cb      	str	r3, [r1, #12]
 80045de:	e03e      	b.n	800465e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e039      	b.n	8004660 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80045ec:	4b1e      	ldr	r3, [pc, #120]	@ (8004668 <HAL_RCC_OscConfig+0x618>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f003 0203 	and.w	r2, r3, #3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d12c      	bne.n	800465a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460a:	3b01      	subs	r3, #1
 800460c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800460e:	429a      	cmp	r2, r3
 8004610:	d123      	bne.n	800465a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800461e:	429a      	cmp	r2, r3
 8004620:	d11b      	bne.n	800465a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800462e:	429a      	cmp	r2, r3
 8004630:	d113      	bne.n	800465a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800463c:	085b      	lsrs	r3, r3, #1
 800463e:	3b01      	subs	r3, #1
 8004640:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004642:	429a      	cmp	r2, r3
 8004644:	d109      	bne.n	800465a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004650:	085b      	lsrs	r3, r3, #1
 8004652:	3b01      	subs	r3, #1
 8004654:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004656:	429a      	cmp	r2, r3
 8004658:	d001      	beq.n	800465e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3720      	adds	r7, #32
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40021000 	.word	0x40021000
 800466c:	019f800c 	.word	0x019f800c
 8004670:	feeefffc 	.word	0xfeeefffc

08004674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800467e:	2300      	movs	r3, #0
 8004680:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e11e      	b.n	80048ca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800468c:	4b91      	ldr	r3, [pc, #580]	@ (80048d4 <HAL_RCC_ClockConfig+0x260>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 030f 	and.w	r3, r3, #15
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	429a      	cmp	r2, r3
 8004698:	d910      	bls.n	80046bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469a:	4b8e      	ldr	r3, [pc, #568]	@ (80048d4 <HAL_RCC_ClockConfig+0x260>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f023 020f 	bic.w	r2, r3, #15
 80046a2:	498c      	ldr	r1, [pc, #560]	@ (80048d4 <HAL_RCC_ClockConfig+0x260>)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046aa:	4b8a      	ldr	r3, [pc, #552]	@ (80048d4 <HAL_RCC_ClockConfig+0x260>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d001      	beq.n	80046bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e106      	b.n	80048ca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d073      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	2b03      	cmp	r3, #3
 80046ce:	d129      	bne.n	8004724 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046d0:	4b81      	ldr	r3, [pc, #516]	@ (80048d8 <HAL_RCC_ClockConfig+0x264>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e0f4      	b.n	80048ca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80046e0:	f000 f99e 	bl	8004a20 <RCC_GetSysClockFreqFromPLLSource>
 80046e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	4a7c      	ldr	r2, [pc, #496]	@ (80048dc <HAL_RCC_ClockConfig+0x268>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d93f      	bls.n	800476e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80046ee:	4b7a      	ldr	r3, [pc, #488]	@ (80048d8 <HAL_RCC_ClockConfig+0x264>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d009      	beq.n	800470e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004702:	2b00      	cmp	r3, #0
 8004704:	d033      	beq.n	800476e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800470a:	2b00      	cmp	r3, #0
 800470c:	d12f      	bne.n	800476e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800470e:	4b72      	ldr	r3, [pc, #456]	@ (80048d8 <HAL_RCC_ClockConfig+0x264>)
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004716:	4a70      	ldr	r2, [pc, #448]	@ (80048d8 <HAL_RCC_ClockConfig+0x264>)
 8004718:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800471c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800471e:	2380      	movs	r3, #128	@ 0x80
 8004720:	617b      	str	r3, [r7, #20]
 8004722:	e024      	b.n	800476e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2b02      	cmp	r3, #2
 800472a:	d107      	bne.n	800473c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800472c:	4b6a      	ldr	r3, [pc, #424]	@ (80048d8 <HAL_RCC_ClockConfig+0x264>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d109      	bne.n	800474c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e0c6      	b.n	80048ca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800473c:	4b66      	ldr	r3, [pc, #408]	@ (80048d8 <HAL_RCC_ClockConfig+0x264>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e0be      	b.n	80048ca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800474c:	f000 f8ce 	bl	80048ec <HAL_RCC_GetSysClockFreq>
 8004750:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	4a61      	ldr	r2, [pc, #388]	@ (80048dc <HAL_RCC_ClockConfig+0x268>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d909      	bls.n	800476e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800475a:	4b5f      	ldr	r3, [pc, #380]	@ (80048d8 <HAL_RCC_ClockConfig+0x264>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004762:	4a5d      	ldr	r2, [pc, #372]	@ (80048d8 <HAL_RCC_ClockConfig+0x264>)
 8004764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004768:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800476a:	2380      	movs	r3, #128	@ 0x80
 800476c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800476e:	4b5a      	ldr	r3, [pc, #360]	@ (80048d8 <HAL_RCC_ClockConfig+0x264>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f023 0203 	bic.w	r2, r3, #3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	4957      	ldr	r1, [pc, #348]	@ (80048d8 <HAL_RCC_ClockConfig+0x264>)
 800477c:	4313      	orrs	r3, r2
 800477e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004780:	f7fd f92e 	bl	80019e0 <HAL_GetTick>
 8004784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004786:	e00a      	b.n	800479e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004788:	f7fd f92a 	bl	80019e0 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004796:	4293      	cmp	r3, r2
 8004798:	d901      	bls.n	800479e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e095      	b.n	80048ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800479e:	4b4e      	ldr	r3, [pc, #312]	@ (80048d8 <HAL_RCC_ClockConfig+0x264>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 020c 	and.w	r2, r3, #12
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d1eb      	bne.n	8004788 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d023      	beq.n	8004804 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d005      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047c8:	4b43      	ldr	r3, [pc, #268]	@ (80048d8 <HAL_RCC_ClockConfig+0x264>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	4a42      	ldr	r2, [pc, #264]	@ (80048d8 <HAL_RCC_ClockConfig+0x264>)
 80047ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80047d2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d007      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80047e0:	4b3d      	ldr	r3, [pc, #244]	@ (80048d8 <HAL_RCC_ClockConfig+0x264>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80047e8:	4a3b      	ldr	r2, [pc, #236]	@ (80048d8 <HAL_RCC_ClockConfig+0x264>)
 80047ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80047ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047f0:	4b39      	ldr	r3, [pc, #228]	@ (80048d8 <HAL_RCC_ClockConfig+0x264>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	4936      	ldr	r1, [pc, #216]	@ (80048d8 <HAL_RCC_ClockConfig+0x264>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	608b      	str	r3, [r1, #8]
 8004802:	e008      	b.n	8004816 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	2b80      	cmp	r3, #128	@ 0x80
 8004808:	d105      	bne.n	8004816 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800480a:	4b33      	ldr	r3, [pc, #204]	@ (80048d8 <HAL_RCC_ClockConfig+0x264>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	4a32      	ldr	r2, [pc, #200]	@ (80048d8 <HAL_RCC_ClockConfig+0x264>)
 8004810:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004814:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004816:	4b2f      	ldr	r3, [pc, #188]	@ (80048d4 <HAL_RCC_ClockConfig+0x260>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	429a      	cmp	r2, r3
 8004822:	d21d      	bcs.n	8004860 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004824:	4b2b      	ldr	r3, [pc, #172]	@ (80048d4 <HAL_RCC_ClockConfig+0x260>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f023 020f 	bic.w	r2, r3, #15
 800482c:	4929      	ldr	r1, [pc, #164]	@ (80048d4 <HAL_RCC_ClockConfig+0x260>)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	4313      	orrs	r3, r2
 8004832:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004834:	f7fd f8d4 	bl	80019e0 <HAL_GetTick>
 8004838:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800483a:	e00a      	b.n	8004852 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800483c:	f7fd f8d0 	bl	80019e0 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800484a:	4293      	cmp	r3, r2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e03b      	b.n	80048ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004852:	4b20      	ldr	r3, [pc, #128]	@ (80048d4 <HAL_RCC_ClockConfig+0x260>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	429a      	cmp	r2, r3
 800485e:	d1ed      	bne.n	800483c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b00      	cmp	r3, #0
 800486a:	d008      	beq.n	800487e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800486c:	4b1a      	ldr	r3, [pc, #104]	@ (80048d8 <HAL_RCC_ClockConfig+0x264>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	4917      	ldr	r1, [pc, #92]	@ (80048d8 <HAL_RCC_ClockConfig+0x264>)
 800487a:	4313      	orrs	r3, r2
 800487c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0308 	and.w	r3, r3, #8
 8004886:	2b00      	cmp	r3, #0
 8004888:	d009      	beq.n	800489e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800488a:	4b13      	ldr	r3, [pc, #76]	@ (80048d8 <HAL_RCC_ClockConfig+0x264>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	490f      	ldr	r1, [pc, #60]	@ (80048d8 <HAL_RCC_ClockConfig+0x264>)
 800489a:	4313      	orrs	r3, r2
 800489c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800489e:	f000 f825 	bl	80048ec <HAL_RCC_GetSysClockFreq>
 80048a2:	4602      	mov	r2, r0
 80048a4:	4b0c      	ldr	r3, [pc, #48]	@ (80048d8 <HAL_RCC_ClockConfig+0x264>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	091b      	lsrs	r3, r3, #4
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	490c      	ldr	r1, [pc, #48]	@ (80048e0 <HAL_RCC_ClockConfig+0x26c>)
 80048b0:	5ccb      	ldrb	r3, [r1, r3]
 80048b2:	f003 031f 	and.w	r3, r3, #31
 80048b6:	fa22 f303 	lsr.w	r3, r2, r3
 80048ba:	4a0a      	ldr	r2, [pc, #40]	@ (80048e4 <HAL_RCC_ClockConfig+0x270>)
 80048bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80048be:	4b0a      	ldr	r3, [pc, #40]	@ (80048e8 <HAL_RCC_ClockConfig+0x274>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7fd f840 	bl	8001948 <HAL_InitTick>
 80048c8:	4603      	mov	r3, r0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	40022000 	.word	0x40022000
 80048d8:	40021000 	.word	0x40021000
 80048dc:	04c4b400 	.word	0x04c4b400
 80048e0:	08008f48 	.word	0x08008f48
 80048e4:	20000000 	.word	0x20000000
 80048e8:	20000004 	.word	0x20000004

080048ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80048f2:	4b2c      	ldr	r3, [pc, #176]	@ (80049a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 030c 	and.w	r3, r3, #12
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d102      	bne.n	8004904 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048fe:	4b2a      	ldr	r3, [pc, #168]	@ (80049a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004900:	613b      	str	r3, [r7, #16]
 8004902:	e047      	b.n	8004994 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004904:	4b27      	ldr	r3, [pc, #156]	@ (80049a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f003 030c 	and.w	r3, r3, #12
 800490c:	2b08      	cmp	r3, #8
 800490e:	d102      	bne.n	8004916 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004910:	4b26      	ldr	r3, [pc, #152]	@ (80049ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8004912:	613b      	str	r3, [r7, #16]
 8004914:	e03e      	b.n	8004994 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004916:	4b23      	ldr	r3, [pc, #140]	@ (80049a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 030c 	and.w	r3, r3, #12
 800491e:	2b0c      	cmp	r3, #12
 8004920:	d136      	bne.n	8004990 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004922:	4b20      	ldr	r3, [pc, #128]	@ (80049a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800492c:	4b1d      	ldr	r3, [pc, #116]	@ (80049a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	091b      	lsrs	r3, r3, #4
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	3301      	adds	r3, #1
 8004938:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2b03      	cmp	r3, #3
 800493e:	d10c      	bne.n	800495a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004940:	4a1a      	ldr	r2, [pc, #104]	@ (80049ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	fbb2 f3f3 	udiv	r3, r2, r3
 8004948:	4a16      	ldr	r2, [pc, #88]	@ (80049a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800494a:	68d2      	ldr	r2, [r2, #12]
 800494c:	0a12      	lsrs	r2, r2, #8
 800494e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004952:	fb02 f303 	mul.w	r3, r2, r3
 8004956:	617b      	str	r3, [r7, #20]
      break;
 8004958:	e00c      	b.n	8004974 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800495a:	4a13      	ldr	r2, [pc, #76]	@ (80049a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004962:	4a10      	ldr	r2, [pc, #64]	@ (80049a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004964:	68d2      	ldr	r2, [r2, #12]
 8004966:	0a12      	lsrs	r2, r2, #8
 8004968:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800496c:	fb02 f303 	mul.w	r3, r2, r3
 8004970:	617b      	str	r3, [r7, #20]
      break;
 8004972:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004974:	4b0b      	ldr	r3, [pc, #44]	@ (80049a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	0e5b      	lsrs	r3, r3, #25
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	3301      	adds	r3, #1
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	fbb2 f3f3 	udiv	r3, r2, r3
 800498c:	613b      	str	r3, [r7, #16]
 800498e:	e001      	b.n	8004994 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004994:	693b      	ldr	r3, [r7, #16]
}
 8004996:	4618      	mov	r0, r3
 8004998:	371c      	adds	r7, #28
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40021000 	.word	0x40021000
 80049a8:	00f42400 	.word	0x00f42400
 80049ac:	016e3600 	.word	0x016e3600

080049b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049b4:	4b03      	ldr	r3, [pc, #12]	@ (80049c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80049b6:	681b      	ldr	r3, [r3, #0]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	20000000 	.word	0x20000000

080049c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049cc:	f7ff fff0 	bl	80049b0 <HAL_RCC_GetHCLKFreq>
 80049d0:	4602      	mov	r2, r0
 80049d2:	4b06      	ldr	r3, [pc, #24]	@ (80049ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	0a1b      	lsrs	r3, r3, #8
 80049d8:	f003 0307 	and.w	r3, r3, #7
 80049dc:	4904      	ldr	r1, [pc, #16]	@ (80049f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049de:	5ccb      	ldrb	r3, [r1, r3]
 80049e0:	f003 031f 	and.w	r3, r3, #31
 80049e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40021000 	.word	0x40021000
 80049f0:	08008f58 	.word	0x08008f58

080049f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049f8:	f7ff ffda 	bl	80049b0 <HAL_RCC_GetHCLKFreq>
 80049fc:	4602      	mov	r2, r0
 80049fe:	4b06      	ldr	r3, [pc, #24]	@ (8004a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	0adb      	lsrs	r3, r3, #11
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	4904      	ldr	r1, [pc, #16]	@ (8004a1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a0a:	5ccb      	ldrb	r3, [r1, r3]
 8004a0c:	f003 031f 	and.w	r3, r3, #31
 8004a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	08008f58 	.word	0x08008f58

08004a20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b087      	sub	sp, #28
 8004a24:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a26:	4b1e      	ldr	r3, [pc, #120]	@ (8004aa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a30:	4b1b      	ldr	r3, [pc, #108]	@ (8004aa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	091b      	lsrs	r3, r3, #4
 8004a36:	f003 030f 	and.w	r3, r3, #15
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d10c      	bne.n	8004a5e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a44:	4a17      	ldr	r2, [pc, #92]	@ (8004aa4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4c:	4a14      	ldr	r2, [pc, #80]	@ (8004aa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a4e:	68d2      	ldr	r2, [r2, #12]
 8004a50:	0a12      	lsrs	r2, r2, #8
 8004a52:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a56:	fb02 f303 	mul.w	r3, r2, r3
 8004a5a:	617b      	str	r3, [r7, #20]
    break;
 8004a5c:	e00c      	b.n	8004a78 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a5e:	4a12      	ldr	r2, [pc, #72]	@ (8004aa8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a66:	4a0e      	ldr	r2, [pc, #56]	@ (8004aa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a68:	68d2      	ldr	r2, [r2, #12]
 8004a6a:	0a12      	lsrs	r2, r2, #8
 8004a6c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a70:	fb02 f303 	mul.w	r3, r2, r3
 8004a74:	617b      	str	r3, [r7, #20]
    break;
 8004a76:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a78:	4b09      	ldr	r3, [pc, #36]	@ (8004aa0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	0e5b      	lsrs	r3, r3, #25
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	3301      	adds	r3, #1
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a90:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004a92:	687b      	ldr	r3, [r7, #4]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	371c      	adds	r7, #28
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	016e3600 	.word	0x016e3600
 8004aa8:	00f42400 	.word	0x00f42400

08004aac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ab8:	2300      	movs	r3, #0
 8004aba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 8098 	beq.w	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aca:	2300      	movs	r3, #0
 8004acc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ace:	4b43      	ldr	r3, [pc, #268]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10d      	bne.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ada:	4b40      	ldr	r3, [pc, #256]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ade:	4a3f      	ldr	r2, [pc, #252]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ae0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ae4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ae6:	4b3d      	ldr	r3, [pc, #244]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aee:	60bb      	str	r3, [r7, #8]
 8004af0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004af2:	2301      	movs	r3, #1
 8004af4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004af6:	4b3a      	ldr	r3, [pc, #232]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a39      	ldr	r2, [pc, #228]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004afc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b02:	f7fc ff6d 	bl	80019e0 <HAL_GetTick>
 8004b06:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b08:	e009      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b0a:	f7fc ff69 	bl	80019e0 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d902      	bls.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	74fb      	strb	r3, [r7, #19]
        break;
 8004b1c:	e005      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b1e:	4b30      	ldr	r3, [pc, #192]	@ (8004be0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0ef      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004b2a:	7cfb      	ldrb	r3, [r7, #19]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d159      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b30:	4b2a      	ldr	r3, [pc, #168]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b3a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d01e      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d019      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b4c:	4b23      	ldr	r3, [pc, #140]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b58:	4b20      	ldr	r3, [pc, #128]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b5e:	4a1f      	ldr	r2, [pc, #124]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b68:	4b1c      	ldr	r3, [pc, #112]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b6e:	4a1b      	ldr	r2, [pc, #108]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b78:	4a18      	ldr	r2, [pc, #96]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d016      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8a:	f7fc ff29 	bl	80019e0 <HAL_GetTick>
 8004b8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b90:	e00b      	b.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b92:	f7fc ff25 	bl	80019e0 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d902      	bls.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	74fb      	strb	r3, [r7, #19]
            break;
 8004ba8:	e006      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004baa:	4b0c      	ldr	r3, [pc, #48]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0ec      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004bb8:	7cfb      	ldrb	r3, [r7, #19]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10b      	bne.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bbe:	4b07      	ldr	r3, [pc, #28]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bc4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bcc:	4903      	ldr	r1, [pc, #12]	@ (8004bdc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004bd4:	e008      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bd6:	7cfb      	ldrb	r3, [r7, #19]
 8004bd8:	74bb      	strb	r3, [r7, #18]
 8004bda:	e005      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004bdc:	40021000 	.word	0x40021000
 8004be0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be4:	7cfb      	ldrb	r3, [r7, #19]
 8004be6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004be8:	7c7b      	ldrb	r3, [r7, #17]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d105      	bne.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bee:	4ba7      	ldr	r3, [pc, #668]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf2:	4aa6      	ldr	r2, [pc, #664]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bf8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c06:	4ba1      	ldr	r3, [pc, #644]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c0c:	f023 0203 	bic.w	r2, r3, #3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	499d      	ldr	r1, [pc, #628]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c28:	4b98      	ldr	r3, [pc, #608]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2e:	f023 020c 	bic.w	r2, r3, #12
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	4995      	ldr	r1, [pc, #596]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0304 	and.w	r3, r3, #4
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c4a:	4b90      	ldr	r3, [pc, #576]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c50:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	498c      	ldr	r1, [pc, #560]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0308 	and.w	r3, r3, #8
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00a      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c6c:	4b87      	ldr	r3, [pc, #540]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c72:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	4984      	ldr	r1, [pc, #528]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0310 	and.w	r3, r3, #16
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c8e:	4b7f      	ldr	r3, [pc, #508]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	497b      	ldr	r1, [pc, #492]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0320 	and.w	r3, r3, #32
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cb0:	4b76      	ldr	r3, [pc, #472]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	4973      	ldr	r1, [pc, #460]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cd2:	4b6e      	ldr	r3, [pc, #440]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	496a      	ldr	r1, [pc, #424]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00a      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cf4:	4b65      	ldr	r3, [pc, #404]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cfa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	4962      	ldr	r1, [pc, #392]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d16:	4b5d      	ldr	r3, [pc, #372]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d1c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d24:	4959      	ldr	r1, [pc, #356]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00a      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d38:	4b54      	ldr	r3, [pc, #336]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d3e:	f023 0203 	bic.w	r2, r3, #3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d46:	4951      	ldr	r1, [pc, #324]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00a      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d5a:	4b4c      	ldr	r3, [pc, #304]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d60:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d68:	4948      	ldr	r1, [pc, #288]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d015      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d7c:	4b43      	ldr	r3, [pc, #268]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d8a:	4940      	ldr	r1, [pc, #256]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d9a:	d105      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d9c:	4b3b      	ldr	r3, [pc, #236]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	4a3a      	ldr	r2, [pc, #232]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004da6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d015      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004db4:	4b35      	ldr	r3, [pc, #212]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dc2:	4932      	ldr	r1, [pc, #200]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dd2:	d105      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dd4:	4b2d      	ldr	r3, [pc, #180]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	4a2c      	ldr	r2, [pc, #176]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dde:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d015      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004dec:	4b27      	ldr	r3, [pc, #156]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004df2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dfa:	4924      	ldr	r1, [pc, #144]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e0a:	d105      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e0c:	4b1f      	ldr	r3, [pc, #124]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	4a1e      	ldr	r2, [pc, #120]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e16:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d015      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e24:	4b19      	ldr	r3, [pc, #100]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e32:	4916      	ldr	r1, [pc, #88]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e42:	d105      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e44:	4b11      	ldr	r3, [pc, #68]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	4a10      	ldr	r2, [pc, #64]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e4e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d019      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e62:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6a:	4908      	ldr	r1, [pc, #32]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e7a:	d109      	bne.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e7c:	4b03      	ldr	r3, [pc, #12]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	4a02      	ldr	r2, [pc, #8]	@ (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e86:	60d3      	str	r3, [r2, #12]
 8004e88:	e002      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004e8a:	bf00      	nop
 8004e8c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d015      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004e9c:	4b29      	ldr	r3, [pc, #164]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ea2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eaa:	4926      	ldr	r1, [pc, #152]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004eba:	d105      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ebc:	4b21      	ldr	r3, [pc, #132]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	4a20      	ldr	r2, [pc, #128]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ec2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ec6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d015      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eda:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ee2:	4918      	ldr	r1, [pc, #96]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ef2:	d105      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ef4:	4b13      	ldr	r3, [pc, #76]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	4a12      	ldr	r2, [pc, #72]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004efa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004efe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d015      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f1a:	490a      	ldr	r1, [pc, #40]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f2a:	d105      	bne.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f2c:	4b05      	ldr	r3, [pc, #20]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	4a04      	ldr	r2, [pc, #16]	@ (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f36:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004f38:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	40021000 	.word	0x40021000

08004f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e049      	b.n	8004fee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d106      	bne.n	8004f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7fc fbce 	bl	8001710 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3304      	adds	r3, #4
 8004f84:	4619      	mov	r1, r3
 8004f86:	4610      	mov	r0, r2
 8004f88:	f000 fe34 	bl	8005bf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
	...

08004ff8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b01      	cmp	r3, #1
 800500a:	d001      	beq.n	8005010 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e04c      	b.n	80050aa <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a26      	ldr	r2, [pc, #152]	@ (80050b8 <HAL_TIM_Base_Start+0xc0>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d022      	beq.n	8005068 <HAL_TIM_Base_Start+0x70>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800502a:	d01d      	beq.n	8005068 <HAL_TIM_Base_Start+0x70>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a22      	ldr	r2, [pc, #136]	@ (80050bc <HAL_TIM_Base_Start+0xc4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d018      	beq.n	8005068 <HAL_TIM_Base_Start+0x70>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a21      	ldr	r2, [pc, #132]	@ (80050c0 <HAL_TIM_Base_Start+0xc8>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d013      	beq.n	8005068 <HAL_TIM_Base_Start+0x70>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a1f      	ldr	r2, [pc, #124]	@ (80050c4 <HAL_TIM_Base_Start+0xcc>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d00e      	beq.n	8005068 <HAL_TIM_Base_Start+0x70>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a1e      	ldr	r2, [pc, #120]	@ (80050c8 <HAL_TIM_Base_Start+0xd0>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d009      	beq.n	8005068 <HAL_TIM_Base_Start+0x70>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a1c      	ldr	r2, [pc, #112]	@ (80050cc <HAL_TIM_Base_Start+0xd4>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d004      	beq.n	8005068 <HAL_TIM_Base_Start+0x70>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a1b      	ldr	r2, [pc, #108]	@ (80050d0 <HAL_TIM_Base_Start+0xd8>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d115      	bne.n	8005094 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689a      	ldr	r2, [r3, #8]
 800506e:	4b19      	ldr	r3, [pc, #100]	@ (80050d4 <HAL_TIM_Base_Start+0xdc>)
 8005070:	4013      	ands	r3, r2
 8005072:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b06      	cmp	r3, #6
 8005078:	d015      	beq.n	80050a6 <HAL_TIM_Base_Start+0xae>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005080:	d011      	beq.n	80050a6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f042 0201 	orr.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005092:	e008      	b.n	80050a6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0201 	orr.w	r2, r2, #1
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	e000      	b.n	80050a8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	40012c00 	.word	0x40012c00
 80050bc:	40000400 	.word	0x40000400
 80050c0:	40000800 	.word	0x40000800
 80050c4:	40000c00 	.word	0x40000c00
 80050c8:	40013400 	.word	0x40013400
 80050cc:	40014000 	.word	0x40014000
 80050d0:	40015000 	.word	0x40015000
 80050d4:	00010007 	.word	0x00010007

080050d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d001      	beq.n	80050f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e054      	b.n	800519a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f042 0201 	orr.w	r2, r2, #1
 8005106:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a26      	ldr	r2, [pc, #152]	@ (80051a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d022      	beq.n	8005158 <HAL_TIM_Base_Start_IT+0x80>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800511a:	d01d      	beq.n	8005158 <HAL_TIM_Base_Start_IT+0x80>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a22      	ldr	r2, [pc, #136]	@ (80051ac <HAL_TIM_Base_Start_IT+0xd4>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d018      	beq.n	8005158 <HAL_TIM_Base_Start_IT+0x80>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a21      	ldr	r2, [pc, #132]	@ (80051b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d013      	beq.n	8005158 <HAL_TIM_Base_Start_IT+0x80>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a1f      	ldr	r2, [pc, #124]	@ (80051b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d00e      	beq.n	8005158 <HAL_TIM_Base_Start_IT+0x80>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a1e      	ldr	r2, [pc, #120]	@ (80051b8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d009      	beq.n	8005158 <HAL_TIM_Base_Start_IT+0x80>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a1c      	ldr	r2, [pc, #112]	@ (80051bc <HAL_TIM_Base_Start_IT+0xe4>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d004      	beq.n	8005158 <HAL_TIM_Base_Start_IT+0x80>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a1b      	ldr	r2, [pc, #108]	@ (80051c0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d115      	bne.n	8005184 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	4b19      	ldr	r3, [pc, #100]	@ (80051c4 <HAL_TIM_Base_Start_IT+0xec>)
 8005160:	4013      	ands	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b06      	cmp	r3, #6
 8005168:	d015      	beq.n	8005196 <HAL_TIM_Base_Start_IT+0xbe>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005170:	d011      	beq.n	8005196 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f042 0201 	orr.w	r2, r2, #1
 8005180:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005182:	e008      	b.n	8005196 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0201 	orr.w	r2, r2, #1
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	e000      	b.n	8005198 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005196:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	40012c00 	.word	0x40012c00
 80051ac:	40000400 	.word	0x40000400
 80051b0:	40000800 	.word	0x40000800
 80051b4:	40000c00 	.word	0x40000c00
 80051b8:	40013400 	.word	0x40013400
 80051bc:	40014000 	.word	0x40014000
 80051c0:	40015000 	.word	0x40015000
 80051c4:	00010007 	.word	0x00010007

080051c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e049      	b.n	800526e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d106      	bne.n	80051f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f841 	bl	8005276 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3304      	adds	r3, #4
 8005204:	4619      	mov	r1, r3
 8005206:	4610      	mov	r0, r2
 8005208:	f000 fcf4 	bl	8005bf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005276:	b480      	push	{r7}
 8005278:	b083      	sub	sp, #12
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800527e:	bf00      	nop
 8005280:	370c      	adds	r7, #12
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
	...

0800528c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d109      	bne.n	80052b0 <HAL_TIM_PWM_Start+0x24>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	bf14      	ite	ne
 80052a8:	2301      	movne	r3, #1
 80052aa:	2300      	moveq	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	e03c      	b.n	800532a <HAL_TIM_PWM_Start+0x9e>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	d109      	bne.n	80052ca <HAL_TIM_PWM_Start+0x3e>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b01      	cmp	r3, #1
 80052c0:	bf14      	ite	ne
 80052c2:	2301      	movne	r3, #1
 80052c4:	2300      	moveq	r3, #0
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	e02f      	b.n	800532a <HAL_TIM_PWM_Start+0x9e>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d109      	bne.n	80052e4 <HAL_TIM_PWM_Start+0x58>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b01      	cmp	r3, #1
 80052da:	bf14      	ite	ne
 80052dc:	2301      	movne	r3, #1
 80052de:	2300      	moveq	r3, #0
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	e022      	b.n	800532a <HAL_TIM_PWM_Start+0x9e>
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	2b0c      	cmp	r3, #12
 80052e8:	d109      	bne.n	80052fe <HAL_TIM_PWM_Start+0x72>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	bf14      	ite	ne
 80052f6:	2301      	movne	r3, #1
 80052f8:	2300      	moveq	r3, #0
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	e015      	b.n	800532a <HAL_TIM_PWM_Start+0x9e>
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b10      	cmp	r3, #16
 8005302:	d109      	bne.n	8005318 <HAL_TIM_PWM_Start+0x8c>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b01      	cmp	r3, #1
 800530e:	bf14      	ite	ne
 8005310:	2301      	movne	r3, #1
 8005312:	2300      	moveq	r3, #0
 8005314:	b2db      	uxtb	r3, r3
 8005316:	e008      	b.n	800532a <HAL_TIM_PWM_Start+0x9e>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b01      	cmp	r3, #1
 8005322:	bf14      	ite	ne
 8005324:	2301      	movne	r3, #1
 8005326:	2300      	moveq	r3, #0
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e0a6      	b.n	8005480 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d104      	bne.n	8005342 <HAL_TIM_PWM_Start+0xb6>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005340:	e023      	b.n	800538a <HAL_TIM_PWM_Start+0xfe>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b04      	cmp	r3, #4
 8005346:	d104      	bne.n	8005352 <HAL_TIM_PWM_Start+0xc6>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005350:	e01b      	b.n	800538a <HAL_TIM_PWM_Start+0xfe>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b08      	cmp	r3, #8
 8005356:	d104      	bne.n	8005362 <HAL_TIM_PWM_Start+0xd6>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005360:	e013      	b.n	800538a <HAL_TIM_PWM_Start+0xfe>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b0c      	cmp	r3, #12
 8005366:	d104      	bne.n	8005372 <HAL_TIM_PWM_Start+0xe6>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005370:	e00b      	b.n	800538a <HAL_TIM_PWM_Start+0xfe>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b10      	cmp	r3, #16
 8005376:	d104      	bne.n	8005382 <HAL_TIM_PWM_Start+0xf6>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005380:	e003      	b.n	800538a <HAL_TIM_PWM_Start+0xfe>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2202      	movs	r2, #2
 8005386:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2201      	movs	r2, #1
 8005390:	6839      	ldr	r1, [r7, #0]
 8005392:	4618      	mov	r0, r3
 8005394:	f001 f8a8 	bl	80064e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a3a      	ldr	r2, [pc, #232]	@ (8005488 <HAL_TIM_PWM_Start+0x1fc>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d018      	beq.n	80053d4 <HAL_TIM_PWM_Start+0x148>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a39      	ldr	r2, [pc, #228]	@ (800548c <HAL_TIM_PWM_Start+0x200>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d013      	beq.n	80053d4 <HAL_TIM_PWM_Start+0x148>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a37      	ldr	r2, [pc, #220]	@ (8005490 <HAL_TIM_PWM_Start+0x204>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00e      	beq.n	80053d4 <HAL_TIM_PWM_Start+0x148>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a36      	ldr	r2, [pc, #216]	@ (8005494 <HAL_TIM_PWM_Start+0x208>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d009      	beq.n	80053d4 <HAL_TIM_PWM_Start+0x148>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a34      	ldr	r2, [pc, #208]	@ (8005498 <HAL_TIM_PWM_Start+0x20c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d004      	beq.n	80053d4 <HAL_TIM_PWM_Start+0x148>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a33      	ldr	r2, [pc, #204]	@ (800549c <HAL_TIM_PWM_Start+0x210>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d101      	bne.n	80053d8 <HAL_TIM_PWM_Start+0x14c>
 80053d4:	2301      	movs	r3, #1
 80053d6:	e000      	b.n	80053da <HAL_TIM_PWM_Start+0x14e>
 80053d8:	2300      	movs	r3, #0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d007      	beq.n	80053ee <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80053ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a25      	ldr	r2, [pc, #148]	@ (8005488 <HAL_TIM_PWM_Start+0x1fc>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d022      	beq.n	800543e <HAL_TIM_PWM_Start+0x1b2>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005400:	d01d      	beq.n	800543e <HAL_TIM_PWM_Start+0x1b2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a26      	ldr	r2, [pc, #152]	@ (80054a0 <HAL_TIM_PWM_Start+0x214>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d018      	beq.n	800543e <HAL_TIM_PWM_Start+0x1b2>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a24      	ldr	r2, [pc, #144]	@ (80054a4 <HAL_TIM_PWM_Start+0x218>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d013      	beq.n	800543e <HAL_TIM_PWM_Start+0x1b2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a23      	ldr	r2, [pc, #140]	@ (80054a8 <HAL_TIM_PWM_Start+0x21c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d00e      	beq.n	800543e <HAL_TIM_PWM_Start+0x1b2>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a19      	ldr	r2, [pc, #100]	@ (800548c <HAL_TIM_PWM_Start+0x200>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d009      	beq.n	800543e <HAL_TIM_PWM_Start+0x1b2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a18      	ldr	r2, [pc, #96]	@ (8005490 <HAL_TIM_PWM_Start+0x204>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d004      	beq.n	800543e <HAL_TIM_PWM_Start+0x1b2>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a18      	ldr	r2, [pc, #96]	@ (800549c <HAL_TIM_PWM_Start+0x210>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d115      	bne.n	800546a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	4b19      	ldr	r3, [pc, #100]	@ (80054ac <HAL_TIM_PWM_Start+0x220>)
 8005446:	4013      	ands	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2b06      	cmp	r3, #6
 800544e:	d015      	beq.n	800547c <HAL_TIM_PWM_Start+0x1f0>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005456:	d011      	beq.n	800547c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005468:	e008      	b.n	800547c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f042 0201 	orr.w	r2, r2, #1
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	e000      	b.n	800547e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800547c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40012c00 	.word	0x40012c00
 800548c:	40013400 	.word	0x40013400
 8005490:	40014000 	.word	0x40014000
 8005494:	40014400 	.word	0x40014400
 8005498:	40014800 	.word	0x40014800
 800549c:	40015000 	.word	0x40015000
 80054a0:	40000400 	.word	0x40000400
 80054a4:	40000800 	.word	0x40000800
 80054a8:	40000c00 	.word	0x40000c00
 80054ac:	00010007 	.word	0x00010007

080054b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d020      	beq.n	8005514 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d01b      	beq.n	8005514 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f06f 0202 	mvn.w	r2, #2
 80054e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	f003 0303 	and.w	r3, r3, #3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fb5c 	bl	8005bb8 <HAL_TIM_IC_CaptureCallback>
 8005500:	e005      	b.n	800550e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fb4e 	bl	8005ba4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 fb5f 	bl	8005bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f003 0304 	and.w	r3, r3, #4
 800551a:	2b00      	cmp	r3, #0
 800551c:	d020      	beq.n	8005560 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01b      	beq.n	8005560 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f06f 0204 	mvn.w	r2, #4
 8005530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2202      	movs	r2, #2
 8005536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fb36 	bl	8005bb8 <HAL_TIM_IC_CaptureCallback>
 800554c:	e005      	b.n	800555a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 fb28 	bl	8005ba4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fb39 	bl	8005bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f003 0308 	and.w	r3, r3, #8
 8005566:	2b00      	cmp	r3, #0
 8005568:	d020      	beq.n	80055ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f003 0308 	and.w	r3, r3, #8
 8005570:	2b00      	cmp	r3, #0
 8005572:	d01b      	beq.n	80055ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f06f 0208 	mvn.w	r2, #8
 800557c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2204      	movs	r2, #4
 8005582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fb10 	bl	8005bb8 <HAL_TIM_IC_CaptureCallback>
 8005598:	e005      	b.n	80055a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fb02 	bl	8005ba4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 fb13 	bl	8005bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f003 0310 	and.w	r3, r3, #16
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d020      	beq.n	80055f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f003 0310 	and.w	r3, r3, #16
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d01b      	beq.n	80055f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f06f 0210 	mvn.w	r2, #16
 80055c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2208      	movs	r2, #8
 80055ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 faea 	bl	8005bb8 <HAL_TIM_IC_CaptureCallback>
 80055e4:	e005      	b.n	80055f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fadc 	bl	8005ba4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 faed 	bl	8005bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00c      	beq.n	800561c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b00      	cmp	r3, #0
 800560a:	d007      	beq.n	800561c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f06f 0201 	mvn.w	r2, #1
 8005614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7fb ff3a 	bl	8001490 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005622:	2b00      	cmp	r3, #0
 8005624:	d104      	bne.n	8005630 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00c      	beq.n	800564a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005636:	2b00      	cmp	r3, #0
 8005638:	d007      	beq.n	800564a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f001 f8a9 	bl	800679c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00c      	beq.n	800566e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800565a:	2b00      	cmp	r3, #0
 800565c:	d007      	beq.n	800566e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f001 f8a1 	bl	80067b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00c      	beq.n	8005692 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800567e:	2b00      	cmp	r3, #0
 8005680:	d007      	beq.n	8005692 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800568a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 faa7 	bl	8005be0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	f003 0320 	and.w	r3, r3, #32
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00c      	beq.n	80056b6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f003 0320 	and.w	r3, r3, #32
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d007      	beq.n	80056b6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f06f 0220 	mvn.w	r2, #32
 80056ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f001 f869 	bl	8006788 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00c      	beq.n	80056da <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d007      	beq.n	80056da <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80056d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f001 f875 	bl	80067c4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00c      	beq.n	80056fe <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d007      	beq.n	80056fe <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80056f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f001 f86d 	bl	80067d8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00c      	beq.n	8005722 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d007      	beq.n	8005722 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800571a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f001 f865 	bl	80067ec <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00c      	beq.n	8005746 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d007      	beq.n	8005746 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800573e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f001 f85d 	bl	8006800 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005746:	bf00      	nop
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
	...

08005750 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800575c:	2300      	movs	r3, #0
 800575e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005766:	2b01      	cmp	r3, #1
 8005768:	d101      	bne.n	800576e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800576a:	2302      	movs	r3, #2
 800576c:	e0ff      	b.n	800596e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b14      	cmp	r3, #20
 800577a:	f200 80f0 	bhi.w	800595e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800577e:	a201      	add	r2, pc, #4	@ (adr r2, 8005784 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005784:	080057d9 	.word	0x080057d9
 8005788:	0800595f 	.word	0x0800595f
 800578c:	0800595f 	.word	0x0800595f
 8005790:	0800595f 	.word	0x0800595f
 8005794:	08005819 	.word	0x08005819
 8005798:	0800595f 	.word	0x0800595f
 800579c:	0800595f 	.word	0x0800595f
 80057a0:	0800595f 	.word	0x0800595f
 80057a4:	0800585b 	.word	0x0800585b
 80057a8:	0800595f 	.word	0x0800595f
 80057ac:	0800595f 	.word	0x0800595f
 80057b0:	0800595f 	.word	0x0800595f
 80057b4:	0800589b 	.word	0x0800589b
 80057b8:	0800595f 	.word	0x0800595f
 80057bc:	0800595f 	.word	0x0800595f
 80057c0:	0800595f 	.word	0x0800595f
 80057c4:	080058dd 	.word	0x080058dd
 80057c8:	0800595f 	.word	0x0800595f
 80057cc:	0800595f 	.word	0x0800595f
 80057d0:	0800595f 	.word	0x0800595f
 80057d4:	0800591d 	.word	0x0800591d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68b9      	ldr	r1, [r7, #8]
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 fabc 	bl	8005d5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699a      	ldr	r2, [r3, #24]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f042 0208 	orr.w	r2, r2, #8
 80057f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699a      	ldr	r2, [r3, #24]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 0204 	bic.w	r2, r2, #4
 8005802:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6999      	ldr	r1, [r3, #24]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	691a      	ldr	r2, [r3, #16]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	619a      	str	r2, [r3, #24]
      break;
 8005816:	e0a5      	b.n	8005964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68b9      	ldr	r1, [r7, #8]
 800581e:	4618      	mov	r0, r3
 8005820:	f000 fb36 	bl	8005e90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699a      	ldr	r2, [r3, #24]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005832:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	699a      	ldr	r2, [r3, #24]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005842:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6999      	ldr	r1, [r3, #24]
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	021a      	lsls	r2, r3, #8
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	619a      	str	r2, [r3, #24]
      break;
 8005858:	e084      	b.n	8005964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68b9      	ldr	r1, [r7, #8]
 8005860:	4618      	mov	r0, r3
 8005862:	f000 fba9 	bl	8005fb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69da      	ldr	r2, [r3, #28]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f042 0208 	orr.w	r2, r2, #8
 8005874:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69da      	ldr	r2, [r3, #28]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 0204 	bic.w	r2, r2, #4
 8005884:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69d9      	ldr	r1, [r3, #28]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	691a      	ldr	r2, [r3, #16]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	430a      	orrs	r2, r1
 8005896:	61da      	str	r2, [r3, #28]
      break;
 8005898:	e064      	b.n	8005964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68b9      	ldr	r1, [r7, #8]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f000 fc1b 	bl	80060dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69da      	ldr	r2, [r3, #28]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	69da      	ldr	r2, [r3, #28]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	69d9      	ldr	r1, [r3, #28]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	021a      	lsls	r2, r3, #8
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	61da      	str	r2, [r3, #28]
      break;
 80058da:	e043      	b.n	8005964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68b9      	ldr	r1, [r7, #8]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 fc8e 	bl	8006204 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f042 0208 	orr.w	r2, r2, #8
 80058f6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0204 	bic.w	r2, r2, #4
 8005906:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	691a      	ldr	r2, [r3, #16]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800591a:	e023      	b.n	8005964 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68b9      	ldr	r1, [r7, #8]
 8005922:	4618      	mov	r0, r3
 8005924:	f000 fcd8 	bl	80062d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005936:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005946:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	021a      	lsls	r2, r3, #8
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800595c:	e002      	b.n	8005964 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	75fb      	strb	r3, [r7, #23]
      break;
 8005962:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800596c:	7dfb      	ldrb	r3, [r7, #23]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop

08005978 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800598c:	2b01      	cmp	r3, #1
 800598e:	d101      	bne.n	8005994 <HAL_TIM_ConfigClockSource+0x1c>
 8005990:	2302      	movs	r3, #2
 8005992:	e0f6      	b.n	8005b82 <HAL_TIM_ConfigClockSource+0x20a>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80059b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80059b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a6f      	ldr	r2, [pc, #444]	@ (8005b8c <HAL_TIM_ConfigClockSource+0x214>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	f000 80c1 	beq.w	8005b56 <HAL_TIM_ConfigClockSource+0x1de>
 80059d4:	4a6d      	ldr	r2, [pc, #436]	@ (8005b8c <HAL_TIM_ConfigClockSource+0x214>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	f200 80c6 	bhi.w	8005b68 <HAL_TIM_ConfigClockSource+0x1f0>
 80059dc:	4a6c      	ldr	r2, [pc, #432]	@ (8005b90 <HAL_TIM_ConfigClockSource+0x218>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	f000 80b9 	beq.w	8005b56 <HAL_TIM_ConfigClockSource+0x1de>
 80059e4:	4a6a      	ldr	r2, [pc, #424]	@ (8005b90 <HAL_TIM_ConfigClockSource+0x218>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	f200 80be 	bhi.w	8005b68 <HAL_TIM_ConfigClockSource+0x1f0>
 80059ec:	4a69      	ldr	r2, [pc, #420]	@ (8005b94 <HAL_TIM_ConfigClockSource+0x21c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	f000 80b1 	beq.w	8005b56 <HAL_TIM_ConfigClockSource+0x1de>
 80059f4:	4a67      	ldr	r2, [pc, #412]	@ (8005b94 <HAL_TIM_ConfigClockSource+0x21c>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	f200 80b6 	bhi.w	8005b68 <HAL_TIM_ConfigClockSource+0x1f0>
 80059fc:	4a66      	ldr	r2, [pc, #408]	@ (8005b98 <HAL_TIM_ConfigClockSource+0x220>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	f000 80a9 	beq.w	8005b56 <HAL_TIM_ConfigClockSource+0x1de>
 8005a04:	4a64      	ldr	r2, [pc, #400]	@ (8005b98 <HAL_TIM_ConfigClockSource+0x220>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	f200 80ae 	bhi.w	8005b68 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a0c:	4a63      	ldr	r2, [pc, #396]	@ (8005b9c <HAL_TIM_ConfigClockSource+0x224>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	f000 80a1 	beq.w	8005b56 <HAL_TIM_ConfigClockSource+0x1de>
 8005a14:	4a61      	ldr	r2, [pc, #388]	@ (8005b9c <HAL_TIM_ConfigClockSource+0x224>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	f200 80a6 	bhi.w	8005b68 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a1c:	4a60      	ldr	r2, [pc, #384]	@ (8005ba0 <HAL_TIM_ConfigClockSource+0x228>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	f000 8099 	beq.w	8005b56 <HAL_TIM_ConfigClockSource+0x1de>
 8005a24:	4a5e      	ldr	r2, [pc, #376]	@ (8005ba0 <HAL_TIM_ConfigClockSource+0x228>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	f200 809e 	bhi.w	8005b68 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a2c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005a30:	f000 8091 	beq.w	8005b56 <HAL_TIM_ConfigClockSource+0x1de>
 8005a34:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005a38:	f200 8096 	bhi.w	8005b68 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a40:	f000 8089 	beq.w	8005b56 <HAL_TIM_ConfigClockSource+0x1de>
 8005a44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a48:	f200 808e 	bhi.w	8005b68 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a50:	d03e      	beq.n	8005ad0 <HAL_TIM_ConfigClockSource+0x158>
 8005a52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a56:	f200 8087 	bhi.w	8005b68 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a5e:	f000 8086 	beq.w	8005b6e <HAL_TIM_ConfigClockSource+0x1f6>
 8005a62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a66:	d87f      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a68:	2b70      	cmp	r3, #112	@ 0x70
 8005a6a:	d01a      	beq.n	8005aa2 <HAL_TIM_ConfigClockSource+0x12a>
 8005a6c:	2b70      	cmp	r3, #112	@ 0x70
 8005a6e:	d87b      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a70:	2b60      	cmp	r3, #96	@ 0x60
 8005a72:	d050      	beq.n	8005b16 <HAL_TIM_ConfigClockSource+0x19e>
 8005a74:	2b60      	cmp	r3, #96	@ 0x60
 8005a76:	d877      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a78:	2b50      	cmp	r3, #80	@ 0x50
 8005a7a:	d03c      	beq.n	8005af6 <HAL_TIM_ConfigClockSource+0x17e>
 8005a7c:	2b50      	cmp	r3, #80	@ 0x50
 8005a7e:	d873      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a80:	2b40      	cmp	r3, #64	@ 0x40
 8005a82:	d058      	beq.n	8005b36 <HAL_TIM_ConfigClockSource+0x1be>
 8005a84:	2b40      	cmp	r3, #64	@ 0x40
 8005a86:	d86f      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a88:	2b30      	cmp	r3, #48	@ 0x30
 8005a8a:	d064      	beq.n	8005b56 <HAL_TIM_ConfigClockSource+0x1de>
 8005a8c:	2b30      	cmp	r3, #48	@ 0x30
 8005a8e:	d86b      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a90:	2b20      	cmp	r3, #32
 8005a92:	d060      	beq.n	8005b56 <HAL_TIM_ConfigClockSource+0x1de>
 8005a94:	2b20      	cmp	r3, #32
 8005a96:	d867      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d05c      	beq.n	8005b56 <HAL_TIM_ConfigClockSource+0x1de>
 8005a9c:	2b10      	cmp	r3, #16
 8005a9e:	d05a      	beq.n	8005b56 <HAL_TIM_ConfigClockSource+0x1de>
 8005aa0:	e062      	b.n	8005b68 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ab2:	f000 fcf9 	bl	80064a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ac4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	609a      	str	r2, [r3, #8]
      break;
 8005ace:	e04f      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ae0:	f000 fce2 	bl	80064a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689a      	ldr	r2, [r3, #8]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005af2:	609a      	str	r2, [r3, #8]
      break;
 8005af4:	e03c      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b02:	461a      	mov	r2, r3
 8005b04:	f000 fc54 	bl	80063b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2150      	movs	r1, #80	@ 0x50
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 fcad 	bl	800646e <TIM_ITRx_SetConfig>
      break;
 8005b14:	e02c      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b22:	461a      	mov	r2, r3
 8005b24:	f000 fc73 	bl	800640e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2160      	movs	r1, #96	@ 0x60
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 fc9d 	bl	800646e <TIM_ITRx_SetConfig>
      break;
 8005b34:	e01c      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b42:	461a      	mov	r2, r3
 8005b44:	f000 fc34 	bl	80063b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2140      	movs	r1, #64	@ 0x40
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 fc8d 	bl	800646e <TIM_ITRx_SetConfig>
      break;
 8005b54:	e00c      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4610      	mov	r0, r2
 8005b62:	f000 fc84 	bl	800646e <TIM_ITRx_SetConfig>
      break;
 8005b66:	e003      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b6c:	e000      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005b6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	00100070 	.word	0x00100070
 8005b90:	00100060 	.word	0x00100060
 8005b94:	00100050 	.word	0x00100050
 8005b98:	00100040 	.word	0x00100040
 8005b9c:	00100030 	.word	0x00100030
 8005ba0:	00100020 	.word	0x00100020

08005ba4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a4c      	ldr	r2, [pc, #304]	@ (8005d38 <TIM_Base_SetConfig+0x144>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d017      	beq.n	8005c3c <TIM_Base_SetConfig+0x48>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c12:	d013      	beq.n	8005c3c <TIM_Base_SetConfig+0x48>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a49      	ldr	r2, [pc, #292]	@ (8005d3c <TIM_Base_SetConfig+0x148>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d00f      	beq.n	8005c3c <TIM_Base_SetConfig+0x48>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a48      	ldr	r2, [pc, #288]	@ (8005d40 <TIM_Base_SetConfig+0x14c>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d00b      	beq.n	8005c3c <TIM_Base_SetConfig+0x48>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a47      	ldr	r2, [pc, #284]	@ (8005d44 <TIM_Base_SetConfig+0x150>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d007      	beq.n	8005c3c <TIM_Base_SetConfig+0x48>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a46      	ldr	r2, [pc, #280]	@ (8005d48 <TIM_Base_SetConfig+0x154>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d003      	beq.n	8005c3c <TIM_Base_SetConfig+0x48>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a45      	ldr	r2, [pc, #276]	@ (8005d4c <TIM_Base_SetConfig+0x158>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d108      	bne.n	8005c4e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a39      	ldr	r2, [pc, #228]	@ (8005d38 <TIM_Base_SetConfig+0x144>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d023      	beq.n	8005c9e <TIM_Base_SetConfig+0xaa>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c5c:	d01f      	beq.n	8005c9e <TIM_Base_SetConfig+0xaa>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a36      	ldr	r2, [pc, #216]	@ (8005d3c <TIM_Base_SetConfig+0x148>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d01b      	beq.n	8005c9e <TIM_Base_SetConfig+0xaa>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a35      	ldr	r2, [pc, #212]	@ (8005d40 <TIM_Base_SetConfig+0x14c>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d017      	beq.n	8005c9e <TIM_Base_SetConfig+0xaa>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a34      	ldr	r2, [pc, #208]	@ (8005d44 <TIM_Base_SetConfig+0x150>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d013      	beq.n	8005c9e <TIM_Base_SetConfig+0xaa>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a33      	ldr	r2, [pc, #204]	@ (8005d48 <TIM_Base_SetConfig+0x154>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d00f      	beq.n	8005c9e <TIM_Base_SetConfig+0xaa>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a33      	ldr	r2, [pc, #204]	@ (8005d50 <TIM_Base_SetConfig+0x15c>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d00b      	beq.n	8005c9e <TIM_Base_SetConfig+0xaa>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a32      	ldr	r2, [pc, #200]	@ (8005d54 <TIM_Base_SetConfig+0x160>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d007      	beq.n	8005c9e <TIM_Base_SetConfig+0xaa>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a31      	ldr	r2, [pc, #196]	@ (8005d58 <TIM_Base_SetConfig+0x164>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d003      	beq.n	8005c9e <TIM_Base_SetConfig+0xaa>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a2c      	ldr	r2, [pc, #176]	@ (8005d4c <TIM_Base_SetConfig+0x158>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d108      	bne.n	8005cb0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	689a      	ldr	r2, [r3, #8]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a18      	ldr	r2, [pc, #96]	@ (8005d38 <TIM_Base_SetConfig+0x144>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d013      	beq.n	8005d04 <TIM_Base_SetConfig+0x110>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a1a      	ldr	r2, [pc, #104]	@ (8005d48 <TIM_Base_SetConfig+0x154>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d00f      	beq.n	8005d04 <TIM_Base_SetConfig+0x110>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a1a      	ldr	r2, [pc, #104]	@ (8005d50 <TIM_Base_SetConfig+0x15c>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d00b      	beq.n	8005d04 <TIM_Base_SetConfig+0x110>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a19      	ldr	r2, [pc, #100]	@ (8005d54 <TIM_Base_SetConfig+0x160>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d007      	beq.n	8005d04 <TIM_Base_SetConfig+0x110>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a18      	ldr	r2, [pc, #96]	@ (8005d58 <TIM_Base_SetConfig+0x164>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d003      	beq.n	8005d04 <TIM_Base_SetConfig+0x110>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a13      	ldr	r2, [pc, #76]	@ (8005d4c <TIM_Base_SetConfig+0x158>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d103      	bne.n	8005d0c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	691a      	ldr	r2, [r3, #16]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d105      	bne.n	8005d2a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	f023 0201 	bic.w	r2, r3, #1
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	611a      	str	r2, [r3, #16]
  }
}
 8005d2a:	bf00      	nop
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	40012c00 	.word	0x40012c00
 8005d3c:	40000400 	.word	0x40000400
 8005d40:	40000800 	.word	0x40000800
 8005d44:	40000c00 	.word	0x40000c00
 8005d48:	40013400 	.word	0x40013400
 8005d4c:	40015000 	.word	0x40015000
 8005d50:	40014000 	.word	0x40014000
 8005d54:	40014400 	.word	0x40014400
 8005d58:	40014800 	.word	0x40014800

08005d5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	f023 0201 	bic.w	r2, r3, #1
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f023 0303 	bic.w	r3, r3, #3
 8005d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	f023 0302 	bic.w	r3, r3, #2
 8005da8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a30      	ldr	r2, [pc, #192]	@ (8005e78 <TIM_OC1_SetConfig+0x11c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d013      	beq.n	8005de4 <TIM_OC1_SetConfig+0x88>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a2f      	ldr	r2, [pc, #188]	@ (8005e7c <TIM_OC1_SetConfig+0x120>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d00f      	beq.n	8005de4 <TIM_OC1_SetConfig+0x88>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a2e      	ldr	r2, [pc, #184]	@ (8005e80 <TIM_OC1_SetConfig+0x124>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d00b      	beq.n	8005de4 <TIM_OC1_SetConfig+0x88>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a2d      	ldr	r2, [pc, #180]	@ (8005e84 <TIM_OC1_SetConfig+0x128>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d007      	beq.n	8005de4 <TIM_OC1_SetConfig+0x88>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a2c      	ldr	r2, [pc, #176]	@ (8005e88 <TIM_OC1_SetConfig+0x12c>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d003      	beq.n	8005de4 <TIM_OC1_SetConfig+0x88>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a2b      	ldr	r2, [pc, #172]	@ (8005e8c <TIM_OC1_SetConfig+0x130>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d10c      	bne.n	8005dfe <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f023 0308 	bic.w	r3, r3, #8
 8005dea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f023 0304 	bic.w	r3, r3, #4
 8005dfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a1d      	ldr	r2, [pc, #116]	@ (8005e78 <TIM_OC1_SetConfig+0x11c>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d013      	beq.n	8005e2e <TIM_OC1_SetConfig+0xd2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a1c      	ldr	r2, [pc, #112]	@ (8005e7c <TIM_OC1_SetConfig+0x120>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d00f      	beq.n	8005e2e <TIM_OC1_SetConfig+0xd2>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a1b      	ldr	r2, [pc, #108]	@ (8005e80 <TIM_OC1_SetConfig+0x124>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d00b      	beq.n	8005e2e <TIM_OC1_SetConfig+0xd2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a1a      	ldr	r2, [pc, #104]	@ (8005e84 <TIM_OC1_SetConfig+0x128>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d007      	beq.n	8005e2e <TIM_OC1_SetConfig+0xd2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a19      	ldr	r2, [pc, #100]	@ (8005e88 <TIM_OC1_SetConfig+0x12c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d003      	beq.n	8005e2e <TIM_OC1_SetConfig+0xd2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a18      	ldr	r2, [pc, #96]	@ (8005e8c <TIM_OC1_SetConfig+0x130>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d111      	bne.n	8005e52 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	621a      	str	r2, [r3, #32]
}
 8005e6c:	bf00      	nop
 8005e6e:	371c      	adds	r7, #28
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	40012c00 	.word	0x40012c00
 8005e7c:	40013400 	.word	0x40013400
 8005e80:	40014000 	.word	0x40014000
 8005e84:	40014400 	.word	0x40014400
 8005e88:	40014800 	.word	0x40014800
 8005e8c:	40015000 	.word	0x40015000

08005e90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	f023 0210 	bic.w	r2, r3, #16
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ebe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	021b      	lsls	r3, r3, #8
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	f023 0320 	bic.w	r3, r3, #32
 8005ede:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	011b      	lsls	r3, r3, #4
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a2c      	ldr	r2, [pc, #176]	@ (8005fa0 <TIM_OC2_SetConfig+0x110>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d007      	beq.n	8005f04 <TIM_OC2_SetConfig+0x74>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a2b      	ldr	r2, [pc, #172]	@ (8005fa4 <TIM_OC2_SetConfig+0x114>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d003      	beq.n	8005f04 <TIM_OC2_SetConfig+0x74>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a2a      	ldr	r2, [pc, #168]	@ (8005fa8 <TIM_OC2_SetConfig+0x118>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d10d      	bne.n	8005f20 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	011b      	lsls	r3, r3, #4
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a1f      	ldr	r2, [pc, #124]	@ (8005fa0 <TIM_OC2_SetConfig+0x110>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d013      	beq.n	8005f50 <TIM_OC2_SetConfig+0xc0>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a1e      	ldr	r2, [pc, #120]	@ (8005fa4 <TIM_OC2_SetConfig+0x114>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d00f      	beq.n	8005f50 <TIM_OC2_SetConfig+0xc0>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a1e      	ldr	r2, [pc, #120]	@ (8005fac <TIM_OC2_SetConfig+0x11c>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d00b      	beq.n	8005f50 <TIM_OC2_SetConfig+0xc0>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a1d      	ldr	r2, [pc, #116]	@ (8005fb0 <TIM_OC2_SetConfig+0x120>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d007      	beq.n	8005f50 <TIM_OC2_SetConfig+0xc0>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a1c      	ldr	r2, [pc, #112]	@ (8005fb4 <TIM_OC2_SetConfig+0x124>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d003      	beq.n	8005f50 <TIM_OC2_SetConfig+0xc0>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a17      	ldr	r2, [pc, #92]	@ (8005fa8 <TIM_OC2_SetConfig+0x118>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d113      	bne.n	8005f78 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	699b      	ldr	r3, [r3, #24]
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	693a      	ldr	r2, [r7, #16]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	621a      	str	r2, [r3, #32]
}
 8005f92:	bf00      	nop
 8005f94:	371c      	adds	r7, #28
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	40012c00 	.word	0x40012c00
 8005fa4:	40013400 	.word	0x40013400
 8005fa8:	40015000 	.word	0x40015000
 8005fac:	40014000 	.word	0x40014000
 8005fb0:	40014400 	.word	0x40014400
 8005fb4:	40014800 	.word	0x40014800

08005fb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b087      	sub	sp, #28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f023 0303 	bic.w	r3, r3, #3
 8005ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	021b      	lsls	r3, r3, #8
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	4313      	orrs	r3, r2
 8006010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a2b      	ldr	r2, [pc, #172]	@ (80060c4 <TIM_OC3_SetConfig+0x10c>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d007      	beq.n	800602a <TIM_OC3_SetConfig+0x72>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a2a      	ldr	r2, [pc, #168]	@ (80060c8 <TIM_OC3_SetConfig+0x110>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d003      	beq.n	800602a <TIM_OC3_SetConfig+0x72>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a29      	ldr	r2, [pc, #164]	@ (80060cc <TIM_OC3_SetConfig+0x114>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d10d      	bne.n	8006046 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006030:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	021b      	lsls	r3, r3, #8
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	4313      	orrs	r3, r2
 800603c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a1e      	ldr	r2, [pc, #120]	@ (80060c4 <TIM_OC3_SetConfig+0x10c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d013      	beq.n	8006076 <TIM_OC3_SetConfig+0xbe>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a1d      	ldr	r2, [pc, #116]	@ (80060c8 <TIM_OC3_SetConfig+0x110>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d00f      	beq.n	8006076 <TIM_OC3_SetConfig+0xbe>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a1d      	ldr	r2, [pc, #116]	@ (80060d0 <TIM_OC3_SetConfig+0x118>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d00b      	beq.n	8006076 <TIM_OC3_SetConfig+0xbe>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a1c      	ldr	r2, [pc, #112]	@ (80060d4 <TIM_OC3_SetConfig+0x11c>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d007      	beq.n	8006076 <TIM_OC3_SetConfig+0xbe>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a1b      	ldr	r2, [pc, #108]	@ (80060d8 <TIM_OC3_SetConfig+0x120>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d003      	beq.n	8006076 <TIM_OC3_SetConfig+0xbe>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a16      	ldr	r2, [pc, #88]	@ (80060cc <TIM_OC3_SetConfig+0x114>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d113      	bne.n	800609e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800607c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006084:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	4313      	orrs	r3, r2
 8006090:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	011b      	lsls	r3, r3, #4
 8006098:	693a      	ldr	r2, [r7, #16]
 800609a:	4313      	orrs	r3, r2
 800609c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	621a      	str	r2, [r3, #32]
}
 80060b8:	bf00      	nop
 80060ba:	371c      	adds	r7, #28
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	40012c00 	.word	0x40012c00
 80060c8:	40013400 	.word	0x40013400
 80060cc:	40015000 	.word	0x40015000
 80060d0:	40014000 	.word	0x40014000
 80060d4:	40014400 	.word	0x40014400
 80060d8:	40014800 	.word	0x40014800

080060dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800610a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800610e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	021b      	lsls	r3, r3, #8
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	4313      	orrs	r3, r2
 8006122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800612a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	031b      	lsls	r3, r3, #12
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	4313      	orrs	r3, r2
 8006136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a2c      	ldr	r2, [pc, #176]	@ (80061ec <TIM_OC4_SetConfig+0x110>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d007      	beq.n	8006150 <TIM_OC4_SetConfig+0x74>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a2b      	ldr	r2, [pc, #172]	@ (80061f0 <TIM_OC4_SetConfig+0x114>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d003      	beq.n	8006150 <TIM_OC4_SetConfig+0x74>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a2a      	ldr	r2, [pc, #168]	@ (80061f4 <TIM_OC4_SetConfig+0x118>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d10d      	bne.n	800616c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	031b      	lsls	r3, r3, #12
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	4313      	orrs	r3, r2
 8006162:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800616a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a1f      	ldr	r2, [pc, #124]	@ (80061ec <TIM_OC4_SetConfig+0x110>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d013      	beq.n	800619c <TIM_OC4_SetConfig+0xc0>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a1e      	ldr	r2, [pc, #120]	@ (80061f0 <TIM_OC4_SetConfig+0x114>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d00f      	beq.n	800619c <TIM_OC4_SetConfig+0xc0>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a1e      	ldr	r2, [pc, #120]	@ (80061f8 <TIM_OC4_SetConfig+0x11c>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d00b      	beq.n	800619c <TIM_OC4_SetConfig+0xc0>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a1d      	ldr	r2, [pc, #116]	@ (80061fc <TIM_OC4_SetConfig+0x120>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d007      	beq.n	800619c <TIM_OC4_SetConfig+0xc0>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a1c      	ldr	r2, [pc, #112]	@ (8006200 <TIM_OC4_SetConfig+0x124>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d003      	beq.n	800619c <TIM_OC4_SetConfig+0xc0>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a17      	ldr	r2, [pc, #92]	@ (80061f4 <TIM_OC4_SetConfig+0x118>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d113      	bne.n	80061c4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061a2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80061aa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	695b      	ldr	r3, [r3, #20]
 80061b0:	019b      	lsls	r3, r3, #6
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	019b      	lsls	r3, r3, #6
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685a      	ldr	r2, [r3, #4]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	621a      	str	r2, [r3, #32]
}
 80061de:	bf00      	nop
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	40012c00 	.word	0x40012c00
 80061f0:	40013400 	.word	0x40013400
 80061f4:	40015000 	.word	0x40015000
 80061f8:	40014000 	.word	0x40014000
 80061fc:	40014400 	.word	0x40014400
 8006200:	40014800 	.word	0x40014800

08006204 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006204:	b480      	push	{r7}
 8006206:	b087      	sub	sp, #28
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800622a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	4313      	orrs	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006248:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	041b      	lsls	r3, r3, #16
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4313      	orrs	r3, r2
 8006254:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a19      	ldr	r2, [pc, #100]	@ (80062c0 <TIM_OC5_SetConfig+0xbc>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d013      	beq.n	8006286 <TIM_OC5_SetConfig+0x82>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a18      	ldr	r2, [pc, #96]	@ (80062c4 <TIM_OC5_SetConfig+0xc0>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d00f      	beq.n	8006286 <TIM_OC5_SetConfig+0x82>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a17      	ldr	r2, [pc, #92]	@ (80062c8 <TIM_OC5_SetConfig+0xc4>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d00b      	beq.n	8006286 <TIM_OC5_SetConfig+0x82>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a16      	ldr	r2, [pc, #88]	@ (80062cc <TIM_OC5_SetConfig+0xc8>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d007      	beq.n	8006286 <TIM_OC5_SetConfig+0x82>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a15      	ldr	r2, [pc, #84]	@ (80062d0 <TIM_OC5_SetConfig+0xcc>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d003      	beq.n	8006286 <TIM_OC5_SetConfig+0x82>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a14      	ldr	r2, [pc, #80]	@ (80062d4 <TIM_OC5_SetConfig+0xd0>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d109      	bne.n	800629a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800628c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	021b      	lsls	r3, r3, #8
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	4313      	orrs	r3, r2
 8006298:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	621a      	str	r2, [r3, #32]
}
 80062b4:	bf00      	nop
 80062b6:	371c      	adds	r7, #28
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	40012c00 	.word	0x40012c00
 80062c4:	40013400 	.word	0x40013400
 80062c8:	40014000 	.word	0x40014000
 80062cc:	40014400 	.word	0x40014400
 80062d0:	40014800 	.word	0x40014800
 80062d4:	40015000 	.word	0x40015000

080062d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062d8:	b480      	push	{r7}
 80062da:	b087      	sub	sp, #28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a1b      	ldr	r3, [r3, #32]
 80062ec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006306:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800630a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	021b      	lsls	r3, r3, #8
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	4313      	orrs	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800631e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	051b      	lsls	r3, r3, #20
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	4313      	orrs	r3, r2
 800632a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a1a      	ldr	r2, [pc, #104]	@ (8006398 <TIM_OC6_SetConfig+0xc0>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d013      	beq.n	800635c <TIM_OC6_SetConfig+0x84>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a19      	ldr	r2, [pc, #100]	@ (800639c <TIM_OC6_SetConfig+0xc4>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00f      	beq.n	800635c <TIM_OC6_SetConfig+0x84>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a18      	ldr	r2, [pc, #96]	@ (80063a0 <TIM_OC6_SetConfig+0xc8>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d00b      	beq.n	800635c <TIM_OC6_SetConfig+0x84>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a17      	ldr	r2, [pc, #92]	@ (80063a4 <TIM_OC6_SetConfig+0xcc>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d007      	beq.n	800635c <TIM_OC6_SetConfig+0x84>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a16      	ldr	r2, [pc, #88]	@ (80063a8 <TIM_OC6_SetConfig+0xd0>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d003      	beq.n	800635c <TIM_OC6_SetConfig+0x84>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a15      	ldr	r2, [pc, #84]	@ (80063ac <TIM_OC6_SetConfig+0xd4>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d109      	bne.n	8006370 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006362:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	029b      	lsls	r3, r3, #10
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	4313      	orrs	r3, r2
 800636e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	621a      	str	r2, [r3, #32]
}
 800638a:	bf00      	nop
 800638c:	371c      	adds	r7, #28
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	40012c00 	.word	0x40012c00
 800639c:	40013400 	.word	0x40013400
 80063a0:	40014000 	.word	0x40014000
 80063a4:	40014400 	.word	0x40014400
 80063a8:	40014800 	.word	0x40014800
 80063ac:	40015000 	.word	0x40015000

080063b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b087      	sub	sp, #28
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	f023 0201 	bic.w	r2, r3, #1
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	011b      	lsls	r3, r3, #4
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f023 030a 	bic.w	r3, r3, #10
 80063ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063ee:	697a      	ldr	r2, [r7, #20]
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	621a      	str	r2, [r3, #32]
}
 8006402:	bf00      	nop
 8006404:	371c      	adds	r7, #28
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800640e:	b480      	push	{r7}
 8006410:	b087      	sub	sp, #28
 8006412:	af00      	add	r7, sp, #0
 8006414:	60f8      	str	r0, [r7, #12]
 8006416:	60b9      	str	r1, [r7, #8]
 8006418:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	f023 0210 	bic.w	r2, r3, #16
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006438:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	031b      	lsls	r3, r3, #12
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	4313      	orrs	r3, r2
 8006442:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800644a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	011b      	lsls	r3, r3, #4
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	4313      	orrs	r3, r2
 8006454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	621a      	str	r2, [r3, #32]
}
 8006462:	bf00      	nop
 8006464:	371c      	adds	r7, #28
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800646e:	b480      	push	{r7}
 8006470:	b085      	sub	sp, #20
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
 8006476:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006484:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006488:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4313      	orrs	r3, r2
 8006490:	f043 0307 	orr.w	r3, r3, #7
 8006494:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	609a      	str	r2, [r3, #8]
}
 800649c:	bf00      	nop
 800649e:	3714      	adds	r7, #20
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
 80064b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	021a      	lsls	r2, r3, #8
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	431a      	orrs	r2, r3
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	609a      	str	r2, [r3, #8]
}
 80064dc:	bf00      	nop
 80064de:	371c      	adds	r7, #28
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b087      	sub	sp, #28
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	f003 031f 	and.w	r3, r3, #31
 80064fa:	2201      	movs	r2, #1
 80064fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006500:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	6a1a      	ldr	r2, [r3, #32]
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	43db      	mvns	r3, r3
 800650a:	401a      	ands	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6a1a      	ldr	r2, [r3, #32]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f003 031f 	and.w	r3, r3, #31
 800651a:	6879      	ldr	r1, [r7, #4]
 800651c:	fa01 f303 	lsl.w	r3, r1, r3
 8006520:	431a      	orrs	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	621a      	str	r2, [r3, #32]
}
 8006526:	bf00      	nop
 8006528:	371c      	adds	r7, #28
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
	...

08006534 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006544:	2b01      	cmp	r3, #1
 8006546:	d101      	bne.n	800654c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006548:	2302      	movs	r3, #2
 800654a:	e074      	b.n	8006636 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2202      	movs	r2, #2
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a34      	ldr	r2, [pc, #208]	@ (8006644 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d009      	beq.n	800658a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a33      	ldr	r2, [pc, #204]	@ (8006648 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d004      	beq.n	800658a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a31      	ldr	r2, [pc, #196]	@ (800664c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d108      	bne.n	800659c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006590:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	4313      	orrs	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80065a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a21      	ldr	r2, [pc, #132]	@ (8006644 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d022      	beq.n	800660a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065cc:	d01d      	beq.n	800660a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a1f      	ldr	r2, [pc, #124]	@ (8006650 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d018      	beq.n	800660a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006654 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d013      	beq.n	800660a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006658 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d00e      	beq.n	800660a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a15      	ldr	r2, [pc, #84]	@ (8006648 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d009      	beq.n	800660a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a18      	ldr	r2, [pc, #96]	@ (800665c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d004      	beq.n	800660a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a11      	ldr	r2, [pc, #68]	@ (800664c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d10c      	bne.n	8006624 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006610:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	4313      	orrs	r3, r2
 800661a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	40012c00 	.word	0x40012c00
 8006648:	40013400 	.word	0x40013400
 800664c:	40015000 	.word	0x40015000
 8006650:	40000400 	.word	0x40000400
 8006654:	40000800 	.word	0x40000800
 8006658:	40000c00 	.word	0x40000c00
 800665c:	40014000 	.word	0x40014000

08006660 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800666a:	2300      	movs	r3, #0
 800666c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006674:	2b01      	cmp	r3, #1
 8006676:	d101      	bne.n	800667c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006678:	2302      	movs	r3, #2
 800667a:	e078      	b.n	800676e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	4313      	orrs	r3, r2
 8006690:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	4313      	orrs	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e2:	4313      	orrs	r3, r2
 80066e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	041b      	lsls	r3, r3, #16
 80066f2:	4313      	orrs	r3, r2
 80066f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	4313      	orrs	r3, r2
 8006702:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a1c      	ldr	r2, [pc, #112]	@ (800677c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d009      	beq.n	8006722 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a1b      	ldr	r2, [pc, #108]	@ (8006780 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d004      	beq.n	8006722 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a19      	ldr	r2, [pc, #100]	@ (8006784 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d11c      	bne.n	800675c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800672c:	051b      	lsls	r3, r3, #20
 800672e:	4313      	orrs	r3, r2
 8006730:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	6a1b      	ldr	r3, [r3, #32]
 800673c:	4313      	orrs	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800674a:	4313      	orrs	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006758:	4313      	orrs	r3, r2
 800675a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3714      	adds	r7, #20
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	40012c00 	.word	0x40012c00
 8006780:	40013400 	.word	0x40013400
 8006784:	40015000 	.word	0x40015000

08006788 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e042      	b.n	80068ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800682c:	2b00      	cmp	r3, #0
 800682e:	d106      	bne.n	800683e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f7fa ff09 	bl	8001650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2224      	movs	r2, #36	@ 0x24
 8006842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f022 0201 	bic.w	r2, r2, #1
 8006854:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800685a:	2b00      	cmp	r3, #0
 800685c:	d002      	beq.n	8006864 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 ffd6 	bl	8007810 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fcd7 	bl	8007218 <UART_SetConfig>
 800686a:	4603      	mov	r3, r0
 800686c:	2b01      	cmp	r3, #1
 800686e:	d101      	bne.n	8006874 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e01b      	b.n	80068ac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	685a      	ldr	r2, [r3, #4]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006882:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689a      	ldr	r2, [r3, #8]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006892:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f042 0201 	orr.w	r2, r2, #1
 80068a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f001 f855 	bl	8007954 <UART_CheckIdleState>
 80068aa:	4603      	mov	r3, r0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b08a      	sub	sp, #40	@ 0x28
 80068b8:	af02      	add	r7, sp, #8
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	603b      	str	r3, [r7, #0]
 80068c0:	4613      	mov	r3, r2
 80068c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068ca:	2b20      	cmp	r3, #32
 80068cc:	d17b      	bne.n	80069c6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d002      	beq.n	80068da <HAL_UART_Transmit+0x26>
 80068d4:	88fb      	ldrh	r3, [r7, #6]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e074      	b.n	80069c8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2221      	movs	r2, #33	@ 0x21
 80068ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068ee:	f7fb f877 	bl	80019e0 <HAL_GetTick>
 80068f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	88fa      	ldrh	r2, [r7, #6]
 80068f8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	88fa      	ldrh	r2, [r7, #6]
 8006900:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800690c:	d108      	bne.n	8006920 <HAL_UART_Transmit+0x6c>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d104      	bne.n	8006920 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006916:	2300      	movs	r3, #0
 8006918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	61bb      	str	r3, [r7, #24]
 800691e:	e003      	b.n	8006928 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006924:	2300      	movs	r3, #0
 8006926:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006928:	e030      	b.n	800698c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	9300      	str	r3, [sp, #0]
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	2200      	movs	r2, #0
 8006932:	2180      	movs	r1, #128	@ 0x80
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f001 f8b7 	bl	8007aa8 <UART_WaitOnFlagUntilTimeout>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d005      	beq.n	800694c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2220      	movs	r2, #32
 8006944:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e03d      	b.n	80069c8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10b      	bne.n	800696a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	461a      	mov	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006960:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	3302      	adds	r3, #2
 8006966:	61bb      	str	r3, [r7, #24]
 8006968:	e007      	b.n	800697a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	781a      	ldrb	r2, [r3, #0]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	3301      	adds	r3, #1
 8006978:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006980:	b29b      	uxth	r3, r3
 8006982:	3b01      	subs	r3, #1
 8006984:	b29a      	uxth	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006992:	b29b      	uxth	r3, r3
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1c8      	bne.n	800692a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	2200      	movs	r2, #0
 80069a0:	2140      	movs	r1, #64	@ 0x40
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f001 f880 	bl	8007aa8 <UART_WaitOnFlagUntilTimeout>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d005      	beq.n	80069ba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2220      	movs	r2, #32
 80069b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e006      	b.n	80069c8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2220      	movs	r2, #32
 80069be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	e000      	b.n	80069c8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80069c6:	2302      	movs	r3, #2
  }
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3720      	adds	r7, #32
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b091      	sub	sp, #68	@ 0x44
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	4613      	mov	r3, r2
 80069dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069e4:	2b20      	cmp	r3, #32
 80069e6:	d178      	bne.n	8006ada <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d002      	beq.n	80069f4 <HAL_UART_Transmit_IT+0x24>
 80069ee:	88fb      	ldrh	r3, [r7, #6]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d101      	bne.n	80069f8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e071      	b.n	8006adc <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	88fa      	ldrh	r2, [r7, #6]
 8006a02:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	88fa      	ldrh	r2, [r7, #6]
 8006a0a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2221      	movs	r2, #33	@ 0x21
 8006a20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a2c:	d12a      	bne.n	8006a84 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a36:	d107      	bne.n	8006a48 <HAL_UART_Transmit_IT+0x78>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d103      	bne.n	8006a48 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4a29      	ldr	r2, [pc, #164]	@ (8006ae8 <HAL_UART_Transmit_IT+0x118>)
 8006a44:	679a      	str	r2, [r3, #120]	@ 0x78
 8006a46:	e002      	b.n	8006a4e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	4a28      	ldr	r2, [pc, #160]	@ (8006aec <HAL_UART_Transmit_IT+0x11c>)
 8006a4c:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	3308      	adds	r3, #8
 8006a54:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a58:	e853 3f00 	ldrex	r3, [r3]
 8006a5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006a64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	3308      	adds	r3, #8
 8006a6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a6e:	637a      	str	r2, [r7, #52]	@ 0x34
 8006a70:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006a74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a76:	e841 2300 	strex	r3, r2, [r1]
 8006a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1e5      	bne.n	8006a4e <HAL_UART_Transmit_IT+0x7e>
 8006a82:	e028      	b.n	8006ad6 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a8c:	d107      	bne.n	8006a9e <HAL_UART_Transmit_IT+0xce>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d103      	bne.n	8006a9e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	4a15      	ldr	r2, [pc, #84]	@ (8006af0 <HAL_UART_Transmit_IT+0x120>)
 8006a9a:	679a      	str	r2, [r3, #120]	@ 0x78
 8006a9c:	e002      	b.n	8006aa4 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	4a14      	ldr	r2, [pc, #80]	@ (8006af4 <HAL_UART_Transmit_IT+0x124>)
 8006aa2:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	e853 3f00 	ldrex	r3, [r3]
 8006ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ac2:	623b      	str	r3, [r7, #32]
 8006ac4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac6:	69f9      	ldr	r1, [r7, #28]
 8006ac8:	6a3a      	ldr	r2, [r7, #32]
 8006aca:	e841 2300 	strex	r3, r2, [r1]
 8006ace:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1e6      	bne.n	8006aa4 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	e000      	b.n	8006adc <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006ada:	2302      	movs	r3, #2
  }
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3744      	adds	r7, #68	@ 0x44
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr
 8006ae8:	0800811b 	.word	0x0800811b
 8006aec:	0800803b 	.word	0x0800803b
 8006af0:	08007f79 	.word	0x08007f79
 8006af4:	08007ec1 	.word	0x08007ec1

08006af8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08a      	sub	sp, #40	@ 0x28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	4613      	mov	r3, r2
 8006b04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b0c:	2b20      	cmp	r3, #32
 8006b0e:	d137      	bne.n	8006b80 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d002      	beq.n	8006b1c <HAL_UART_Receive_IT+0x24>
 8006b16:	88fb      	ldrh	r3, [r7, #6]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d101      	bne.n	8006b20 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e030      	b.n	8006b82 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a18      	ldr	r2, [pc, #96]	@ (8006b8c <HAL_UART_Receive_IT+0x94>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d01f      	beq.n	8006b70 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d018      	beq.n	8006b70 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	e853 3f00 	ldrex	r3, [r3]
 8006b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	461a      	mov	r2, r3
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5c:	623b      	str	r3, [r7, #32]
 8006b5e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b60:	69f9      	ldr	r1, [r7, #28]
 8006b62:	6a3a      	ldr	r2, [r7, #32]
 8006b64:	e841 2300 	strex	r3, r2, [r1]
 8006b68:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1e6      	bne.n	8006b3e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006b70:	88fb      	ldrh	r3, [r7, #6]
 8006b72:	461a      	mov	r2, r3
 8006b74:	68b9      	ldr	r1, [r7, #8]
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f001 f804 	bl	8007b84 <UART_Start_Receive_IT>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	e000      	b.n	8006b82 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006b80:	2302      	movs	r3, #2
  }
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3728      	adds	r7, #40	@ 0x28
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	40008000 	.word	0x40008000

08006b90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b0ba      	sub	sp, #232	@ 0xe8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006bb6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006bba:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006bc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d11b      	bne.n	8006c04 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bd0:	f003 0320 	and.w	r3, r3, #32
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d015      	beq.n	8006c04 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bdc:	f003 0320 	and.w	r3, r3, #32
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d105      	bne.n	8006bf0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006be4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d009      	beq.n	8006c04 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f000 82e3 	beq.w	80071c0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	4798      	blx	r3
      }
      return;
 8006c02:	e2dd      	b.n	80071c0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 8123 	beq.w	8006e54 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006c0e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006c12:	4b8d      	ldr	r3, [pc, #564]	@ (8006e48 <HAL_UART_IRQHandler+0x2b8>)
 8006c14:	4013      	ands	r3, r2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d106      	bne.n	8006c28 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006c1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006c1e:	4b8b      	ldr	r3, [pc, #556]	@ (8006e4c <HAL_UART_IRQHandler+0x2bc>)
 8006c20:	4013      	ands	r3, r2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f000 8116 	beq.w	8006e54 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c2c:	f003 0301 	and.w	r3, r3, #1
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d011      	beq.n	8006c58 <HAL_UART_IRQHandler+0xc8>
 8006c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00b      	beq.n	8006c58 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2201      	movs	r2, #1
 8006c46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c4e:	f043 0201 	orr.w	r2, r3, #1
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c5c:	f003 0302 	and.w	r3, r3, #2
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d011      	beq.n	8006c88 <HAL_UART_IRQHandler+0xf8>
 8006c64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00b      	beq.n	8006c88 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2202      	movs	r2, #2
 8006c76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c7e:	f043 0204 	orr.w	r2, r3, #4
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c8c:	f003 0304 	and.w	r3, r3, #4
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d011      	beq.n	8006cb8 <HAL_UART_IRQHandler+0x128>
 8006c94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00b      	beq.n	8006cb8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2204      	movs	r2, #4
 8006ca6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cae:	f043 0202 	orr.w	r2, r3, #2
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cbc:	f003 0308 	and.w	r3, r3, #8
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d017      	beq.n	8006cf4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cc8:	f003 0320 	and.w	r3, r3, #32
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d105      	bne.n	8006cdc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006cd0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006cd4:	4b5c      	ldr	r3, [pc, #368]	@ (8006e48 <HAL_UART_IRQHandler+0x2b8>)
 8006cd6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00b      	beq.n	8006cf4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2208      	movs	r2, #8
 8006ce2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cea:	f043 0208 	orr.w	r2, r3, #8
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d012      	beq.n	8006d26 <HAL_UART_IRQHandler+0x196>
 8006d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d04:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00c      	beq.n	8006d26 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d1c:	f043 0220 	orr.w	r2, r3, #32
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f000 8249 	beq.w	80071c4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d36:	f003 0320 	and.w	r3, r3, #32
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d013      	beq.n	8006d66 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d42:	f003 0320 	and.w	r3, r3, #32
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d105      	bne.n	8006d56 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d007      	beq.n	8006d66 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d003      	beq.n	8006d66 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d6c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d7a:	2b40      	cmp	r3, #64	@ 0x40
 8006d7c:	d005      	beq.n	8006d8a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d82:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d054      	beq.n	8006e34 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f001 f81c 	bl	8007dc8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d9a:	2b40      	cmp	r3, #64	@ 0x40
 8006d9c:	d146      	bne.n	8006e2c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	3308      	adds	r3, #8
 8006da4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006dac:	e853 3f00 	ldrex	r3, [r3]
 8006db0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006db4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006db8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006dca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006dce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006dd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006dda:	e841 2300 	strex	r3, r2, [r1]
 8006dde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006de2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1d9      	bne.n	8006d9e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d017      	beq.n	8006e24 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dfa:	4a15      	ldr	r2, [pc, #84]	@ (8006e50 <HAL_UART_IRQHandler+0x2c0>)
 8006dfc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7fc fcfb 	bl	8003800 <HAL_DMA_Abort_IT>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d019      	beq.n	8006e44 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006e1e:	4610      	mov	r0, r2
 8006e20:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e22:	e00f      	b.n	8006e44 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f9e1 	bl	80071ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e2a:	e00b      	b.n	8006e44 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f9dd 	bl	80071ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e32:	e007      	b.n	8006e44 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f9d9 	bl	80071ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006e42:	e1bf      	b.n	80071c4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e44:	bf00      	nop
    return;
 8006e46:	e1bd      	b.n	80071c4 <HAL_UART_IRQHandler+0x634>
 8006e48:	10000001 	.word	0x10000001
 8006e4c:	04000120 	.word	0x04000120
 8006e50:	08007e95 	.word	0x08007e95

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	f040 8153 	bne.w	8007104 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e62:	f003 0310 	and.w	r3, r3, #16
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f000 814c 	beq.w	8007104 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e70:	f003 0310 	and.w	r3, r3, #16
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f000 8145 	beq.w	8007104 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2210      	movs	r2, #16
 8006e80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e8c:	2b40      	cmp	r3, #64	@ 0x40
 8006e8e:	f040 80bb 	bne.w	8007008 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ea0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f000 818f 	beq.w	80071c8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006eb0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	f080 8187 	bcs.w	80071c8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ec0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0320 	and.w	r3, r3, #32
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f040 8087 	bne.w	8006fe6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ee4:	e853 3f00 	ldrex	r3, [r3]
 8006ee8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ef0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	461a      	mov	r2, r3
 8006efe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006f06:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006f0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006f12:	e841 2300 	strex	r3, r2, [r1]
 8006f16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1da      	bne.n	8006ed8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	3308      	adds	r3, #8
 8006f28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f2c:	e853 3f00 	ldrex	r3, [r3]
 8006f30:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006f32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f34:	f023 0301 	bic.w	r3, r3, #1
 8006f38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3308      	adds	r3, #8
 8006f42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006f46:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006f4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006f4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006f52:	e841 2300 	strex	r3, r2, [r1]
 8006f56:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006f58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1e1      	bne.n	8006f22 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	3308      	adds	r3, #8
 8006f64:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f68:	e853 3f00 	ldrex	r3, [r3]
 8006f6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006f6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	3308      	adds	r3, #8
 8006f7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006f82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006f84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f86:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006f88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006f8a:	e841 2300 	strex	r3, r2, [r1]
 8006f8e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006f90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d1e3      	bne.n	8006f5e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2220      	movs	r2, #32
 8006f9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006faa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fac:	e853 3f00 	ldrex	r3, [r3]
 8006fb0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006fb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fb4:	f023 0310 	bic.w	r3, r3, #16
 8006fb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fc6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006fc8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006fcc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006fce:	e841 2300 	strex	r3, r2, [r1]
 8006fd2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006fd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1e4      	bne.n	8006fa4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7fc fbb4 	bl	800374e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2202      	movs	r2, #2
 8006fea:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f8fd 	bl	8007200 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007006:	e0df      	b.n	80071c8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007014:	b29b      	uxth	r3, r3
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007022:	b29b      	uxth	r3, r3
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 80d1 	beq.w	80071cc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800702a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800702e:	2b00      	cmp	r3, #0
 8007030:	f000 80cc 	beq.w	80071cc <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800703c:	e853 3f00 	ldrex	r3, [r3]
 8007040:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007044:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007048:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	461a      	mov	r2, r3
 8007052:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007056:	647b      	str	r3, [r7, #68]	@ 0x44
 8007058:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800705c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800705e:	e841 2300 	strex	r3, r2, [r1]
 8007062:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1e4      	bne.n	8007034 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	3308      	adds	r3, #8
 8007070:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007074:	e853 3f00 	ldrex	r3, [r3]
 8007078:	623b      	str	r3, [r7, #32]
   return(result);
 800707a:	6a3b      	ldr	r3, [r7, #32]
 800707c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007080:	f023 0301 	bic.w	r3, r3, #1
 8007084:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	3308      	adds	r3, #8
 800708e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007092:	633a      	str	r2, [r7, #48]	@ 0x30
 8007094:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007096:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007098:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800709a:	e841 2300 	strex	r3, r2, [r1]
 800709e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1e1      	bne.n	800706a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2220      	movs	r2, #32
 80070aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	e853 3f00 	ldrex	r3, [r3]
 80070c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 0310 	bic.w	r3, r3, #16
 80070ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	461a      	mov	r2, r3
 80070d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80070dc:	61fb      	str	r3, [r7, #28]
 80070de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e0:	69b9      	ldr	r1, [r7, #24]
 80070e2:	69fa      	ldr	r2, [r7, #28]
 80070e4:	e841 2300 	strex	r3, r2, [r1]
 80070e8:	617b      	str	r3, [r7, #20]
   return(result);
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d1e4      	bne.n	80070ba <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2202      	movs	r2, #2
 80070f4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f87f 	bl	8007200 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007102:	e063      	b.n	80071cc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007108:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00e      	beq.n	800712e <HAL_UART_IRQHandler+0x59e>
 8007110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007114:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d008      	beq.n	800712e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007124:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f001 fdb4 	bl	8008c94 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800712c:	e051      	b.n	80071d2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800712e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007136:	2b00      	cmp	r3, #0
 8007138:	d014      	beq.n	8007164 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800713a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800713e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007142:	2b00      	cmp	r3, #0
 8007144:	d105      	bne.n	8007152 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007146:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800714a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d008      	beq.n	8007164 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007156:	2b00      	cmp	r3, #0
 8007158:	d03a      	beq.n	80071d0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	4798      	blx	r3
    }
    return;
 8007162:	e035      	b.n	80071d0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800716c:	2b00      	cmp	r3, #0
 800716e:	d009      	beq.n	8007184 <HAL_UART_IRQHandler+0x5f4>
 8007170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007178:	2b00      	cmp	r3, #0
 800717a:	d003      	beq.n	8007184 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f001 f841 	bl	8008204 <UART_EndTransmit_IT>
    return;
 8007182:	e026      	b.n	80071d2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007188:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d009      	beq.n	80071a4 <HAL_UART_IRQHandler+0x614>
 8007190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007194:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007198:	2b00      	cmp	r3, #0
 800719a:	d003      	beq.n	80071a4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f001 fd8d 	bl	8008cbc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071a2:	e016      	b.n	80071d2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80071a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d010      	beq.n	80071d2 <HAL_UART_IRQHandler+0x642>
 80071b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	da0c      	bge.n	80071d2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f001 fd75 	bl	8008ca8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071be:	e008      	b.n	80071d2 <HAL_UART_IRQHandler+0x642>
      return;
 80071c0:	bf00      	nop
 80071c2:	e006      	b.n	80071d2 <HAL_UART_IRQHandler+0x642>
    return;
 80071c4:	bf00      	nop
 80071c6:	e004      	b.n	80071d2 <HAL_UART_IRQHandler+0x642>
      return;
 80071c8:	bf00      	nop
 80071ca:	e002      	b.n	80071d2 <HAL_UART_IRQHandler+0x642>
      return;
 80071cc:	bf00      	nop
 80071ce:	e000      	b.n	80071d2 <HAL_UART_IRQHandler+0x642>
    return;
 80071d0:	bf00      	nop
  }
}
 80071d2:	37e8      	adds	r7, #232	@ 0xe8
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	460b      	mov	r3, r1
 800720a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800720c:	bf00      	nop
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800721c:	b08c      	sub	sp, #48	@ 0x30
 800721e:	af00      	add	r7, sp, #0
 8007220:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007222:	2300      	movs	r3, #0
 8007224:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	689a      	ldr	r2, [r3, #8]
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	431a      	orrs	r2, r3
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	431a      	orrs	r2, r3
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	69db      	ldr	r3, [r3, #28]
 800723c:	4313      	orrs	r3, r2
 800723e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	4baa      	ldr	r3, [pc, #680]	@ (80074f0 <UART_SetConfig+0x2d8>)
 8007248:	4013      	ands	r3, r2
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	6812      	ldr	r2, [r2, #0]
 800724e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007250:	430b      	orrs	r3, r1
 8007252:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	68da      	ldr	r2, [r3, #12]
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	430a      	orrs	r2, r1
 8007268:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a9f      	ldr	r2, [pc, #636]	@ (80074f4 <UART_SetConfig+0x2dc>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d004      	beq.n	8007284 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007280:	4313      	orrs	r3, r2
 8007282:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800728e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	6812      	ldr	r2, [r2, #0]
 8007296:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007298:	430b      	orrs	r3, r1
 800729a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a2:	f023 010f 	bic.w	r1, r3, #15
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	430a      	orrs	r2, r1
 80072b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a90      	ldr	r2, [pc, #576]	@ (80074f8 <UART_SetConfig+0x2e0>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d125      	bne.n	8007308 <UART_SetConfig+0xf0>
 80072bc:	4b8f      	ldr	r3, [pc, #572]	@ (80074fc <UART_SetConfig+0x2e4>)
 80072be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072c2:	f003 0303 	and.w	r3, r3, #3
 80072c6:	2b03      	cmp	r3, #3
 80072c8:	d81a      	bhi.n	8007300 <UART_SetConfig+0xe8>
 80072ca:	a201      	add	r2, pc, #4	@ (adr r2, 80072d0 <UART_SetConfig+0xb8>)
 80072cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d0:	080072e1 	.word	0x080072e1
 80072d4:	080072f1 	.word	0x080072f1
 80072d8:	080072e9 	.word	0x080072e9
 80072dc:	080072f9 	.word	0x080072f9
 80072e0:	2301      	movs	r3, #1
 80072e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072e6:	e116      	b.n	8007516 <UART_SetConfig+0x2fe>
 80072e8:	2302      	movs	r3, #2
 80072ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072ee:	e112      	b.n	8007516 <UART_SetConfig+0x2fe>
 80072f0:	2304      	movs	r3, #4
 80072f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072f6:	e10e      	b.n	8007516 <UART_SetConfig+0x2fe>
 80072f8:	2308      	movs	r3, #8
 80072fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072fe:	e10a      	b.n	8007516 <UART_SetConfig+0x2fe>
 8007300:	2310      	movs	r3, #16
 8007302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007306:	e106      	b.n	8007516 <UART_SetConfig+0x2fe>
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a7c      	ldr	r2, [pc, #496]	@ (8007500 <UART_SetConfig+0x2e8>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d138      	bne.n	8007384 <UART_SetConfig+0x16c>
 8007312:	4b7a      	ldr	r3, [pc, #488]	@ (80074fc <UART_SetConfig+0x2e4>)
 8007314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007318:	f003 030c 	and.w	r3, r3, #12
 800731c:	2b0c      	cmp	r3, #12
 800731e:	d82d      	bhi.n	800737c <UART_SetConfig+0x164>
 8007320:	a201      	add	r2, pc, #4	@ (adr r2, 8007328 <UART_SetConfig+0x110>)
 8007322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007326:	bf00      	nop
 8007328:	0800735d 	.word	0x0800735d
 800732c:	0800737d 	.word	0x0800737d
 8007330:	0800737d 	.word	0x0800737d
 8007334:	0800737d 	.word	0x0800737d
 8007338:	0800736d 	.word	0x0800736d
 800733c:	0800737d 	.word	0x0800737d
 8007340:	0800737d 	.word	0x0800737d
 8007344:	0800737d 	.word	0x0800737d
 8007348:	08007365 	.word	0x08007365
 800734c:	0800737d 	.word	0x0800737d
 8007350:	0800737d 	.word	0x0800737d
 8007354:	0800737d 	.word	0x0800737d
 8007358:	08007375 	.word	0x08007375
 800735c:	2300      	movs	r3, #0
 800735e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007362:	e0d8      	b.n	8007516 <UART_SetConfig+0x2fe>
 8007364:	2302      	movs	r3, #2
 8007366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800736a:	e0d4      	b.n	8007516 <UART_SetConfig+0x2fe>
 800736c:	2304      	movs	r3, #4
 800736e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007372:	e0d0      	b.n	8007516 <UART_SetConfig+0x2fe>
 8007374:	2308      	movs	r3, #8
 8007376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800737a:	e0cc      	b.n	8007516 <UART_SetConfig+0x2fe>
 800737c:	2310      	movs	r3, #16
 800737e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007382:	e0c8      	b.n	8007516 <UART_SetConfig+0x2fe>
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a5e      	ldr	r2, [pc, #376]	@ (8007504 <UART_SetConfig+0x2ec>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d125      	bne.n	80073da <UART_SetConfig+0x1c2>
 800738e:	4b5b      	ldr	r3, [pc, #364]	@ (80074fc <UART_SetConfig+0x2e4>)
 8007390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007394:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007398:	2b30      	cmp	r3, #48	@ 0x30
 800739a:	d016      	beq.n	80073ca <UART_SetConfig+0x1b2>
 800739c:	2b30      	cmp	r3, #48	@ 0x30
 800739e:	d818      	bhi.n	80073d2 <UART_SetConfig+0x1ba>
 80073a0:	2b20      	cmp	r3, #32
 80073a2:	d00a      	beq.n	80073ba <UART_SetConfig+0x1a2>
 80073a4:	2b20      	cmp	r3, #32
 80073a6:	d814      	bhi.n	80073d2 <UART_SetConfig+0x1ba>
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <UART_SetConfig+0x19a>
 80073ac:	2b10      	cmp	r3, #16
 80073ae:	d008      	beq.n	80073c2 <UART_SetConfig+0x1aa>
 80073b0:	e00f      	b.n	80073d2 <UART_SetConfig+0x1ba>
 80073b2:	2300      	movs	r3, #0
 80073b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073b8:	e0ad      	b.n	8007516 <UART_SetConfig+0x2fe>
 80073ba:	2302      	movs	r3, #2
 80073bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073c0:	e0a9      	b.n	8007516 <UART_SetConfig+0x2fe>
 80073c2:	2304      	movs	r3, #4
 80073c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073c8:	e0a5      	b.n	8007516 <UART_SetConfig+0x2fe>
 80073ca:	2308      	movs	r3, #8
 80073cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073d0:	e0a1      	b.n	8007516 <UART_SetConfig+0x2fe>
 80073d2:	2310      	movs	r3, #16
 80073d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073d8:	e09d      	b.n	8007516 <UART_SetConfig+0x2fe>
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a4a      	ldr	r2, [pc, #296]	@ (8007508 <UART_SetConfig+0x2f0>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d125      	bne.n	8007430 <UART_SetConfig+0x218>
 80073e4:	4b45      	ldr	r3, [pc, #276]	@ (80074fc <UART_SetConfig+0x2e4>)
 80073e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073ea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80073ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80073f0:	d016      	beq.n	8007420 <UART_SetConfig+0x208>
 80073f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80073f4:	d818      	bhi.n	8007428 <UART_SetConfig+0x210>
 80073f6:	2b80      	cmp	r3, #128	@ 0x80
 80073f8:	d00a      	beq.n	8007410 <UART_SetConfig+0x1f8>
 80073fa:	2b80      	cmp	r3, #128	@ 0x80
 80073fc:	d814      	bhi.n	8007428 <UART_SetConfig+0x210>
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d002      	beq.n	8007408 <UART_SetConfig+0x1f0>
 8007402:	2b40      	cmp	r3, #64	@ 0x40
 8007404:	d008      	beq.n	8007418 <UART_SetConfig+0x200>
 8007406:	e00f      	b.n	8007428 <UART_SetConfig+0x210>
 8007408:	2300      	movs	r3, #0
 800740a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800740e:	e082      	b.n	8007516 <UART_SetConfig+0x2fe>
 8007410:	2302      	movs	r3, #2
 8007412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007416:	e07e      	b.n	8007516 <UART_SetConfig+0x2fe>
 8007418:	2304      	movs	r3, #4
 800741a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800741e:	e07a      	b.n	8007516 <UART_SetConfig+0x2fe>
 8007420:	2308      	movs	r3, #8
 8007422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007426:	e076      	b.n	8007516 <UART_SetConfig+0x2fe>
 8007428:	2310      	movs	r3, #16
 800742a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800742e:	e072      	b.n	8007516 <UART_SetConfig+0x2fe>
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a35      	ldr	r2, [pc, #212]	@ (800750c <UART_SetConfig+0x2f4>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d12a      	bne.n	8007490 <UART_SetConfig+0x278>
 800743a:	4b30      	ldr	r3, [pc, #192]	@ (80074fc <UART_SetConfig+0x2e4>)
 800743c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007440:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007444:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007448:	d01a      	beq.n	8007480 <UART_SetConfig+0x268>
 800744a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800744e:	d81b      	bhi.n	8007488 <UART_SetConfig+0x270>
 8007450:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007454:	d00c      	beq.n	8007470 <UART_SetConfig+0x258>
 8007456:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800745a:	d815      	bhi.n	8007488 <UART_SetConfig+0x270>
 800745c:	2b00      	cmp	r3, #0
 800745e:	d003      	beq.n	8007468 <UART_SetConfig+0x250>
 8007460:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007464:	d008      	beq.n	8007478 <UART_SetConfig+0x260>
 8007466:	e00f      	b.n	8007488 <UART_SetConfig+0x270>
 8007468:	2300      	movs	r3, #0
 800746a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800746e:	e052      	b.n	8007516 <UART_SetConfig+0x2fe>
 8007470:	2302      	movs	r3, #2
 8007472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007476:	e04e      	b.n	8007516 <UART_SetConfig+0x2fe>
 8007478:	2304      	movs	r3, #4
 800747a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800747e:	e04a      	b.n	8007516 <UART_SetConfig+0x2fe>
 8007480:	2308      	movs	r3, #8
 8007482:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007486:	e046      	b.n	8007516 <UART_SetConfig+0x2fe>
 8007488:	2310      	movs	r3, #16
 800748a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800748e:	e042      	b.n	8007516 <UART_SetConfig+0x2fe>
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a17      	ldr	r2, [pc, #92]	@ (80074f4 <UART_SetConfig+0x2dc>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d13a      	bne.n	8007510 <UART_SetConfig+0x2f8>
 800749a:	4b18      	ldr	r3, [pc, #96]	@ (80074fc <UART_SetConfig+0x2e4>)
 800749c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80074a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074a8:	d01a      	beq.n	80074e0 <UART_SetConfig+0x2c8>
 80074aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074ae:	d81b      	bhi.n	80074e8 <UART_SetConfig+0x2d0>
 80074b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074b4:	d00c      	beq.n	80074d0 <UART_SetConfig+0x2b8>
 80074b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074ba:	d815      	bhi.n	80074e8 <UART_SetConfig+0x2d0>
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d003      	beq.n	80074c8 <UART_SetConfig+0x2b0>
 80074c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074c4:	d008      	beq.n	80074d8 <UART_SetConfig+0x2c0>
 80074c6:	e00f      	b.n	80074e8 <UART_SetConfig+0x2d0>
 80074c8:	2300      	movs	r3, #0
 80074ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ce:	e022      	b.n	8007516 <UART_SetConfig+0x2fe>
 80074d0:	2302      	movs	r3, #2
 80074d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074d6:	e01e      	b.n	8007516 <UART_SetConfig+0x2fe>
 80074d8:	2304      	movs	r3, #4
 80074da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074de:	e01a      	b.n	8007516 <UART_SetConfig+0x2fe>
 80074e0:	2308      	movs	r3, #8
 80074e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074e6:	e016      	b.n	8007516 <UART_SetConfig+0x2fe>
 80074e8:	2310      	movs	r3, #16
 80074ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ee:	e012      	b.n	8007516 <UART_SetConfig+0x2fe>
 80074f0:	cfff69f3 	.word	0xcfff69f3
 80074f4:	40008000 	.word	0x40008000
 80074f8:	40013800 	.word	0x40013800
 80074fc:	40021000 	.word	0x40021000
 8007500:	40004400 	.word	0x40004400
 8007504:	40004800 	.word	0x40004800
 8007508:	40004c00 	.word	0x40004c00
 800750c:	40005000 	.word	0x40005000
 8007510:	2310      	movs	r3, #16
 8007512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4aae      	ldr	r2, [pc, #696]	@ (80077d4 <UART_SetConfig+0x5bc>)
 800751c:	4293      	cmp	r3, r2
 800751e:	f040 8097 	bne.w	8007650 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007522:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007526:	2b08      	cmp	r3, #8
 8007528:	d823      	bhi.n	8007572 <UART_SetConfig+0x35a>
 800752a:	a201      	add	r2, pc, #4	@ (adr r2, 8007530 <UART_SetConfig+0x318>)
 800752c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007530:	08007555 	.word	0x08007555
 8007534:	08007573 	.word	0x08007573
 8007538:	0800755d 	.word	0x0800755d
 800753c:	08007573 	.word	0x08007573
 8007540:	08007563 	.word	0x08007563
 8007544:	08007573 	.word	0x08007573
 8007548:	08007573 	.word	0x08007573
 800754c:	08007573 	.word	0x08007573
 8007550:	0800756b 	.word	0x0800756b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007554:	f7fd fa38 	bl	80049c8 <HAL_RCC_GetPCLK1Freq>
 8007558:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800755a:	e010      	b.n	800757e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800755c:	4b9e      	ldr	r3, [pc, #632]	@ (80077d8 <UART_SetConfig+0x5c0>)
 800755e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007560:	e00d      	b.n	800757e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007562:	f7fd f9c3 	bl	80048ec <HAL_RCC_GetSysClockFreq>
 8007566:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007568:	e009      	b.n	800757e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800756a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800756e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007570:	e005      	b.n	800757e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007572:	2300      	movs	r3, #0
 8007574:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800757c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800757e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007580:	2b00      	cmp	r3, #0
 8007582:	f000 8130 	beq.w	80077e6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800758a:	4a94      	ldr	r2, [pc, #592]	@ (80077dc <UART_SetConfig+0x5c4>)
 800758c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007590:	461a      	mov	r2, r3
 8007592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007594:	fbb3 f3f2 	udiv	r3, r3, r2
 8007598:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	4613      	mov	r3, r2
 80075a0:	005b      	lsls	r3, r3, #1
 80075a2:	4413      	add	r3, r2
 80075a4:	69ba      	ldr	r2, [r7, #24]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d305      	bcc.n	80075b6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075b0:	69ba      	ldr	r2, [r7, #24]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d903      	bls.n	80075be <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80075bc:	e113      	b.n	80077e6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c0:	2200      	movs	r2, #0
 80075c2:	60bb      	str	r3, [r7, #8]
 80075c4:	60fa      	str	r2, [r7, #12]
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ca:	4a84      	ldr	r2, [pc, #528]	@ (80077dc <UART_SetConfig+0x5c4>)
 80075cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	2200      	movs	r2, #0
 80075d4:	603b      	str	r3, [r7, #0]
 80075d6:	607a      	str	r2, [r7, #4]
 80075d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80075e0:	f7f9 fa10 	bl	8000a04 <__aeabi_uldivmod>
 80075e4:	4602      	mov	r2, r0
 80075e6:	460b      	mov	r3, r1
 80075e8:	4610      	mov	r0, r2
 80075ea:	4619      	mov	r1, r3
 80075ec:	f04f 0200 	mov.w	r2, #0
 80075f0:	f04f 0300 	mov.w	r3, #0
 80075f4:	020b      	lsls	r3, r1, #8
 80075f6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80075fa:	0202      	lsls	r2, r0, #8
 80075fc:	6979      	ldr	r1, [r7, #20]
 80075fe:	6849      	ldr	r1, [r1, #4]
 8007600:	0849      	lsrs	r1, r1, #1
 8007602:	2000      	movs	r0, #0
 8007604:	460c      	mov	r4, r1
 8007606:	4605      	mov	r5, r0
 8007608:	eb12 0804 	adds.w	r8, r2, r4
 800760c:	eb43 0905 	adc.w	r9, r3, r5
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	469a      	mov	sl, r3
 8007618:	4693      	mov	fp, r2
 800761a:	4652      	mov	r2, sl
 800761c:	465b      	mov	r3, fp
 800761e:	4640      	mov	r0, r8
 8007620:	4649      	mov	r1, r9
 8007622:	f7f9 f9ef 	bl	8000a04 <__aeabi_uldivmod>
 8007626:	4602      	mov	r2, r0
 8007628:	460b      	mov	r3, r1
 800762a:	4613      	mov	r3, r2
 800762c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800762e:	6a3b      	ldr	r3, [r7, #32]
 8007630:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007634:	d308      	bcc.n	8007648 <UART_SetConfig+0x430>
 8007636:	6a3b      	ldr	r3, [r7, #32]
 8007638:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800763c:	d204      	bcs.n	8007648 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	6a3a      	ldr	r2, [r7, #32]
 8007644:	60da      	str	r2, [r3, #12]
 8007646:	e0ce      	b.n	80077e6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800764e:	e0ca      	b.n	80077e6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	69db      	ldr	r3, [r3, #28]
 8007654:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007658:	d166      	bne.n	8007728 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800765a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800765e:	2b08      	cmp	r3, #8
 8007660:	d827      	bhi.n	80076b2 <UART_SetConfig+0x49a>
 8007662:	a201      	add	r2, pc, #4	@ (adr r2, 8007668 <UART_SetConfig+0x450>)
 8007664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007668:	0800768d 	.word	0x0800768d
 800766c:	08007695 	.word	0x08007695
 8007670:	0800769d 	.word	0x0800769d
 8007674:	080076b3 	.word	0x080076b3
 8007678:	080076a3 	.word	0x080076a3
 800767c:	080076b3 	.word	0x080076b3
 8007680:	080076b3 	.word	0x080076b3
 8007684:	080076b3 	.word	0x080076b3
 8007688:	080076ab 	.word	0x080076ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800768c:	f7fd f99c 	bl	80049c8 <HAL_RCC_GetPCLK1Freq>
 8007690:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007692:	e014      	b.n	80076be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007694:	f7fd f9ae 	bl	80049f4 <HAL_RCC_GetPCLK2Freq>
 8007698:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800769a:	e010      	b.n	80076be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800769c:	4b4e      	ldr	r3, [pc, #312]	@ (80077d8 <UART_SetConfig+0x5c0>)
 800769e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80076a0:	e00d      	b.n	80076be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076a2:	f7fd f923 	bl	80048ec <HAL_RCC_GetSysClockFreq>
 80076a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076a8:	e009      	b.n	80076be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80076b0:	e005      	b.n	80076be <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80076b2:	2300      	movs	r3, #0
 80076b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80076bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80076be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f000 8090 	beq.w	80077e6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ca:	4a44      	ldr	r2, [pc, #272]	@ (80077dc <UART_SetConfig+0x5c4>)
 80076cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076d0:	461a      	mov	r2, r3
 80076d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80076d8:	005a      	lsls	r2, r3, #1
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	085b      	lsrs	r3, r3, #1
 80076e0:	441a      	add	r2, r3
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076ec:	6a3b      	ldr	r3, [r7, #32]
 80076ee:	2b0f      	cmp	r3, #15
 80076f0:	d916      	bls.n	8007720 <UART_SetConfig+0x508>
 80076f2:	6a3b      	ldr	r3, [r7, #32]
 80076f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076f8:	d212      	bcs.n	8007720 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076fa:	6a3b      	ldr	r3, [r7, #32]
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	f023 030f 	bic.w	r3, r3, #15
 8007702:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007704:	6a3b      	ldr	r3, [r7, #32]
 8007706:	085b      	lsrs	r3, r3, #1
 8007708:	b29b      	uxth	r3, r3
 800770a:	f003 0307 	and.w	r3, r3, #7
 800770e:	b29a      	uxth	r2, r3
 8007710:	8bfb      	ldrh	r3, [r7, #30]
 8007712:	4313      	orrs	r3, r2
 8007714:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	8bfa      	ldrh	r2, [r7, #30]
 800771c:	60da      	str	r2, [r3, #12]
 800771e:	e062      	b.n	80077e6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007726:	e05e      	b.n	80077e6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007728:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800772c:	2b08      	cmp	r3, #8
 800772e:	d828      	bhi.n	8007782 <UART_SetConfig+0x56a>
 8007730:	a201      	add	r2, pc, #4	@ (adr r2, 8007738 <UART_SetConfig+0x520>)
 8007732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007736:	bf00      	nop
 8007738:	0800775d 	.word	0x0800775d
 800773c:	08007765 	.word	0x08007765
 8007740:	0800776d 	.word	0x0800776d
 8007744:	08007783 	.word	0x08007783
 8007748:	08007773 	.word	0x08007773
 800774c:	08007783 	.word	0x08007783
 8007750:	08007783 	.word	0x08007783
 8007754:	08007783 	.word	0x08007783
 8007758:	0800777b 	.word	0x0800777b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800775c:	f7fd f934 	bl	80049c8 <HAL_RCC_GetPCLK1Freq>
 8007760:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007762:	e014      	b.n	800778e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007764:	f7fd f946 	bl	80049f4 <HAL_RCC_GetPCLK2Freq>
 8007768:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800776a:	e010      	b.n	800778e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800776c:	4b1a      	ldr	r3, [pc, #104]	@ (80077d8 <UART_SetConfig+0x5c0>)
 800776e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007770:	e00d      	b.n	800778e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007772:	f7fd f8bb 	bl	80048ec <HAL_RCC_GetSysClockFreq>
 8007776:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007778:	e009      	b.n	800778e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800777a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800777e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007780:	e005      	b.n	800778e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007782:	2300      	movs	r3, #0
 8007784:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800778c:	bf00      	nop
    }

    if (pclk != 0U)
 800778e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007790:	2b00      	cmp	r3, #0
 8007792:	d028      	beq.n	80077e6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007798:	4a10      	ldr	r2, [pc, #64]	@ (80077dc <UART_SetConfig+0x5c4>)
 800779a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800779e:	461a      	mov	r2, r3
 80077a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	085b      	lsrs	r3, r3, #1
 80077ac:	441a      	add	r2, r3
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077b8:	6a3b      	ldr	r3, [r7, #32]
 80077ba:	2b0f      	cmp	r3, #15
 80077bc:	d910      	bls.n	80077e0 <UART_SetConfig+0x5c8>
 80077be:	6a3b      	ldr	r3, [r7, #32]
 80077c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077c4:	d20c      	bcs.n	80077e0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077c6:	6a3b      	ldr	r3, [r7, #32]
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	60da      	str	r2, [r3, #12]
 80077d0:	e009      	b.n	80077e6 <UART_SetConfig+0x5ce>
 80077d2:	bf00      	nop
 80077d4:	40008000 	.word	0x40008000
 80077d8:	00f42400 	.word	0x00f42400
 80077dc:	08008f60 	.word	0x08008f60
      }
      else
      {
        ret = HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	2200      	movs	r2, #0
 80077fa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	2200      	movs	r2, #0
 8007800:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007802:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007806:	4618      	mov	r0, r3
 8007808:	3730      	adds	r7, #48	@ 0x30
 800780a:	46bd      	mov	sp, r7
 800780c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007810 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800781c:	f003 0308 	and.w	r3, r3, #8
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00a      	beq.n	800783a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	430a      	orrs	r2, r1
 8007838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800783e:	f003 0301 	and.w	r3, r3, #1
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00a      	beq.n	800785c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	430a      	orrs	r2, r1
 800785a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007860:	f003 0302 	and.w	r3, r3, #2
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00a      	beq.n	800787e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	430a      	orrs	r2, r1
 800787c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007882:	f003 0304 	and.w	r3, r3, #4
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00a      	beq.n	80078a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	430a      	orrs	r2, r1
 800789e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078a4:	f003 0310 	and.w	r3, r3, #16
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00a      	beq.n	80078c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	430a      	orrs	r2, r1
 80078c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c6:	f003 0320 	and.w	r3, r3, #32
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00a      	beq.n	80078e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	430a      	orrs	r2, r1
 80078e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d01a      	beq.n	8007926 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	430a      	orrs	r2, r1
 8007904:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800790a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800790e:	d10a      	bne.n	8007926 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	430a      	orrs	r2, r1
 8007924:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800792a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00a      	beq.n	8007948 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	430a      	orrs	r2, r1
 8007946:	605a      	str	r2, [r3, #4]
  }
}
 8007948:	bf00      	nop
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b098      	sub	sp, #96	@ 0x60
 8007958:	af02      	add	r7, sp, #8
 800795a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007964:	f7fa f83c 	bl	80019e0 <HAL_GetTick>
 8007968:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 0308 	and.w	r3, r3, #8
 8007974:	2b08      	cmp	r3, #8
 8007976:	d12f      	bne.n	80079d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007978:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007980:	2200      	movs	r2, #0
 8007982:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f88e 	bl	8007aa8 <UART_WaitOnFlagUntilTimeout>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d022      	beq.n	80079d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800799a:	e853 3f00 	ldrex	r3, [r3]
 800799e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80079a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	461a      	mov	r2, r3
 80079ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80079b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80079b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079b8:	e841 2300 	strex	r3, r2, [r1]
 80079bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1e6      	bne.n	8007992 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2220      	movs	r2, #32
 80079c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e063      	b.n	8007aa0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 0304 	and.w	r3, r3, #4
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	d149      	bne.n	8007a7a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079ee:	2200      	movs	r2, #0
 80079f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 f857 	bl	8007aa8 <UART_WaitOnFlagUntilTimeout>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d03c      	beq.n	8007a7a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a08:	e853 3f00 	ldrex	r3, [r3]
 8007a0c:	623b      	str	r3, [r7, #32]
   return(result);
 8007a0e:	6a3b      	ldr	r3, [r7, #32]
 8007a10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a20:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a26:	e841 2300 	strex	r3, r2, [r1]
 8007a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1e6      	bne.n	8007a00 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	3308      	adds	r3, #8
 8007a38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	e853 3f00 	ldrex	r3, [r3]
 8007a40:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f023 0301 	bic.w	r3, r3, #1
 8007a48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	3308      	adds	r3, #8
 8007a50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a52:	61fa      	str	r2, [r7, #28]
 8007a54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a56:	69b9      	ldr	r1, [r7, #24]
 8007a58:	69fa      	ldr	r2, [r7, #28]
 8007a5a:	e841 2300 	strex	r3, r2, [r1]
 8007a5e:	617b      	str	r3, [r7, #20]
   return(result);
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1e5      	bne.n	8007a32 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2220      	movs	r2, #32
 8007a6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e012      	b.n	8007aa0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2220      	movs	r2, #32
 8007a7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2220      	movs	r2, #32
 8007a86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3758      	adds	r7, #88	@ 0x58
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	603b      	str	r3, [r7, #0]
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ab8:	e04f      	b.n	8007b5a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac0:	d04b      	beq.n	8007b5a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ac2:	f7f9 ff8d 	bl	80019e0 <HAL_GetTick>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	1ad3      	subs	r3, r2, r3
 8007acc:	69ba      	ldr	r2, [r7, #24]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d302      	bcc.n	8007ad8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d101      	bne.n	8007adc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e04e      	b.n	8007b7a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 0304 	and.w	r3, r3, #4
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d037      	beq.n	8007b5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	2b80      	cmp	r3, #128	@ 0x80
 8007aee:	d034      	beq.n	8007b5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	2b40      	cmp	r3, #64	@ 0x40
 8007af4:	d031      	beq.n	8007b5a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	69db      	ldr	r3, [r3, #28]
 8007afc:	f003 0308 	and.w	r3, r3, #8
 8007b00:	2b08      	cmp	r3, #8
 8007b02:	d110      	bne.n	8007b26 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2208      	movs	r2, #8
 8007b0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f000 f95b 	bl	8007dc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2208      	movs	r2, #8
 8007b16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e029      	b.n	8007b7a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	69db      	ldr	r3, [r3, #28]
 8007b2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b34:	d111      	bne.n	8007b5a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 f941 	bl	8007dc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2220      	movs	r2, #32
 8007b4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007b56:	2303      	movs	r3, #3
 8007b58:	e00f      	b.n	8007b7a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	69da      	ldr	r2, [r3, #28]
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	4013      	ands	r3, r2
 8007b64:	68ba      	ldr	r2, [r7, #8]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	bf0c      	ite	eq
 8007b6a:	2301      	moveq	r3, #1
 8007b6c:	2300      	movne	r3, #0
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	461a      	mov	r2, r3
 8007b72:	79fb      	ldrb	r3, [r7, #7]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d0a0      	beq.n	8007aba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
	...

08007b84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b0a3      	sub	sp, #140	@ 0x8c
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	88fa      	ldrh	r2, [r7, #6]
 8007b9c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	88fa      	ldrh	r2, [r7, #6]
 8007ba4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bb6:	d10e      	bne.n	8007bd6 <UART_Start_Receive_IT+0x52>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d105      	bne.n	8007bcc <UART_Start_Receive_IT+0x48>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007bc6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007bca:	e02d      	b.n	8007c28 <UART_Start_Receive_IT+0xa4>
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	22ff      	movs	r2, #255	@ 0xff
 8007bd0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007bd4:	e028      	b.n	8007c28 <UART_Start_Receive_IT+0xa4>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d10d      	bne.n	8007bfa <UART_Start_Receive_IT+0x76>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d104      	bne.n	8007bf0 <UART_Start_Receive_IT+0x6c>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	22ff      	movs	r2, #255	@ 0xff
 8007bea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007bee:	e01b      	b.n	8007c28 <UART_Start_Receive_IT+0xa4>
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	227f      	movs	r2, #127	@ 0x7f
 8007bf4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007bf8:	e016      	b.n	8007c28 <UART_Start_Receive_IT+0xa4>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c02:	d10d      	bne.n	8007c20 <UART_Start_Receive_IT+0x9c>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	691b      	ldr	r3, [r3, #16]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d104      	bne.n	8007c16 <UART_Start_Receive_IT+0x92>
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	227f      	movs	r2, #127	@ 0x7f
 8007c10:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007c14:	e008      	b.n	8007c28 <UART_Start_Receive_IT+0xa4>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	223f      	movs	r2, #63	@ 0x3f
 8007c1a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007c1e:	e003      	b.n	8007c28 <UART_Start_Receive_IT+0xa4>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2222      	movs	r2, #34	@ 0x22
 8007c34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	3308      	adds	r3, #8
 8007c3e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c42:	e853 3f00 	ldrex	r3, [r3]
 8007c46:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007c48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c4a:	f043 0301 	orr.w	r3, r3, #1
 8007c4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	3308      	adds	r3, #8
 8007c58:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007c5c:	673a      	str	r2, [r7, #112]	@ 0x70
 8007c5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c60:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007c62:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007c64:	e841 2300 	strex	r3, r2, [r1]
 8007c68:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007c6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1e3      	bne.n	8007c38 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007c74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c78:	d14f      	bne.n	8007d1a <UART_Start_Receive_IT+0x196>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007c80:	88fa      	ldrh	r2, [r7, #6]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d349      	bcc.n	8007d1a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c8e:	d107      	bne.n	8007ca0 <UART_Start_Receive_IT+0x11c>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d103      	bne.n	8007ca0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	4a47      	ldr	r2, [pc, #284]	@ (8007db8 <UART_Start_Receive_IT+0x234>)
 8007c9c:	675a      	str	r2, [r3, #116]	@ 0x74
 8007c9e:	e002      	b.n	8007ca6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	4a46      	ldr	r2, [pc, #280]	@ (8007dbc <UART_Start_Receive_IT+0x238>)
 8007ca4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d01a      	beq.n	8007ce4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cb6:	e853 3f00 	ldrex	r3, [r3]
 8007cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007cbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cc2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007cd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007cd2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007cd6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007cd8:	e841 2300 	strex	r3, r2, [r1]
 8007cdc:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007cde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1e4      	bne.n	8007cae <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	3308      	adds	r3, #8
 8007cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cee:	e853 3f00 	ldrex	r3, [r3]
 8007cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cfa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	3308      	adds	r3, #8
 8007d02:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007d04:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007d06:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d08:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007d0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d0c:	e841 2300 	strex	r3, r2, [r1]
 8007d10:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007d12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d1e5      	bne.n	8007ce4 <UART_Start_Receive_IT+0x160>
 8007d18:	e046      	b.n	8007da8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d22:	d107      	bne.n	8007d34 <UART_Start_Receive_IT+0x1b0>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d103      	bne.n	8007d34 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	4a24      	ldr	r2, [pc, #144]	@ (8007dc0 <UART_Start_Receive_IT+0x23c>)
 8007d30:	675a      	str	r2, [r3, #116]	@ 0x74
 8007d32:	e002      	b.n	8007d3a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	4a23      	ldr	r2, [pc, #140]	@ (8007dc4 <UART_Start_Receive_IT+0x240>)
 8007d38:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d019      	beq.n	8007d76 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d4a:	e853 3f00 	ldrex	r3, [r3]
 8007d4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d52:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007d56:	677b      	str	r3, [r7, #116]	@ 0x74
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007d60:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d62:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d64:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007d66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d68:	e841 2300 	strex	r3, r2, [r1]
 8007d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1e6      	bne.n	8007d42 <UART_Start_Receive_IT+0x1be>
 8007d74:	e018      	b.n	8007da8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	e853 3f00 	ldrex	r3, [r3]
 8007d82:	613b      	str	r3, [r7, #16]
   return(result);
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	f043 0320 	orr.w	r3, r3, #32
 8007d8a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	461a      	mov	r2, r3
 8007d92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d94:	623b      	str	r3, [r7, #32]
 8007d96:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d98:	69f9      	ldr	r1, [r7, #28]
 8007d9a:	6a3a      	ldr	r2, [r7, #32]
 8007d9c:	e841 2300 	strex	r3, r2, [r1]
 8007da0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1e6      	bne.n	8007d76 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	378c      	adds	r7, #140	@ 0x8c
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	0800892d 	.word	0x0800892d
 8007dbc:	080085cd 	.word	0x080085cd
 8007dc0:	08008415 	.word	0x08008415
 8007dc4:	0800825d 	.word	0x0800825d

08007dc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b095      	sub	sp, #84	@ 0x54
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dd8:	e853 3f00 	ldrex	r3, [r3]
 8007ddc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007de4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	461a      	mov	r2, r3
 8007dec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dee:	643b      	str	r3, [r7, #64]	@ 0x40
 8007df0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007df4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007df6:	e841 2300 	strex	r3, r2, [r1]
 8007dfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1e6      	bne.n	8007dd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	3308      	adds	r3, #8
 8007e08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0a:	6a3b      	ldr	r3, [r7, #32]
 8007e0c:	e853 3f00 	ldrex	r3, [r3]
 8007e10:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e12:	69fb      	ldr	r3, [r7, #28]
 8007e14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e18:	f023 0301 	bic.w	r3, r3, #1
 8007e1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	3308      	adds	r3, #8
 8007e24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e2e:	e841 2300 	strex	r3, r2, [r1]
 8007e32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1e3      	bne.n	8007e02 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d118      	bne.n	8007e74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	e853 3f00 	ldrex	r3, [r3]
 8007e4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	f023 0310 	bic.w	r3, r3, #16
 8007e56:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e60:	61bb      	str	r3, [r7, #24]
 8007e62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e64:	6979      	ldr	r1, [r7, #20]
 8007e66:	69ba      	ldr	r2, [r7, #24]
 8007e68:	e841 2300 	strex	r3, r2, [r1]
 8007e6c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1e6      	bne.n	8007e42 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2220      	movs	r2, #32
 8007e78:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007e88:	bf00      	nop
 8007e8a:	3754      	adds	r7, #84	@ 0x54
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	f7ff f99a 	bl	80071ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007eb8:	bf00      	nop
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b08f      	sub	sp, #60	@ 0x3c
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ece:	2b21      	cmp	r3, #33	@ 0x21
 8007ed0:	d14c      	bne.n	8007f6c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d132      	bne.n	8007f44 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee4:	6a3b      	ldr	r3, [r7, #32]
 8007ee6:	e853 3f00 	ldrex	r3, [r3]
 8007eea:	61fb      	str	r3, [r7, #28]
   return(result);
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ef2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	461a      	mov	r2, r3
 8007efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007efe:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f04:	e841 2300 	strex	r3, r2, [r1]
 8007f08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1e6      	bne.n	8007ede <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	e853 3f00 	ldrex	r3, [r3]
 8007f1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f24:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f2e:	61bb      	str	r3, [r7, #24]
 8007f30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f32:	6979      	ldr	r1, [r7, #20]
 8007f34:	69ba      	ldr	r2, [r7, #24]
 8007f36:	e841 2300 	strex	r3, r2, [r1]
 8007f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d1e6      	bne.n	8007f10 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007f42:	e013      	b.n	8007f6c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f48:	781a      	ldrb	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f54:	1c5a      	adds	r2, r3, #1
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	3b01      	subs	r3, #1
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8007f6c:	bf00      	nop
 8007f6e:	373c      	adds	r7, #60	@ 0x3c
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b091      	sub	sp, #68	@ 0x44
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f86:	2b21      	cmp	r3, #33	@ 0x21
 8007f88:	d151      	bne.n	800802e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d132      	bne.n	8007ffc <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f9e:	e853 3f00 	ldrex	r3, [r3]
 8007fa2:	623b      	str	r3, [r7, #32]
   return(result);
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007faa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8007fb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fbc:	e841 2300 	strex	r3, r2, [r1]
 8007fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1e6      	bne.n	8007f96 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	e853 3f00 	ldrex	r3, [r3]
 8007fd4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fe6:	61fb      	str	r3, [r7, #28]
 8007fe8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fea:	69b9      	ldr	r1, [r7, #24]
 8007fec:	69fa      	ldr	r2, [r7, #28]
 8007fee:	e841 2300 	strex	r3, r2, [r1]
 8007ff2:	617b      	str	r3, [r7, #20]
   return(result);
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d1e6      	bne.n	8007fc8 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007ffa:	e018      	b.n	800802e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008000:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008004:	881b      	ldrh	r3, [r3, #0]
 8008006:	461a      	mov	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008010:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008016:	1c9a      	adds	r2, r3, #2
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008022:	b29b      	uxth	r3, r3
 8008024:	3b01      	subs	r3, #1
 8008026:	b29a      	uxth	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800802e:	bf00      	nop
 8008030:	3744      	adds	r7, #68	@ 0x44
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800803a:	b480      	push	{r7}
 800803c:	b091      	sub	sp, #68	@ 0x44
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008048:	2b21      	cmp	r3, #33	@ 0x21
 800804a:	d160      	bne.n	800810e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008052:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008054:	e057      	b.n	8008106 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800805c:	b29b      	uxth	r3, r3
 800805e:	2b00      	cmp	r3, #0
 8008060:	d133      	bne.n	80080ca <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	3308      	adds	r3, #8
 8008068:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800806c:	e853 3f00 	ldrex	r3, [r3]
 8008070:	623b      	str	r3, [r7, #32]
   return(result);
 8008072:	6a3b      	ldr	r3, [r7, #32]
 8008074:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008078:	63bb      	str	r3, [r7, #56]	@ 0x38
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	3308      	adds	r3, #8
 8008080:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008082:	633a      	str	r2, [r7, #48]	@ 0x30
 8008084:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008086:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008088:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800808a:	e841 2300 	strex	r3, r2, [r1]
 800808e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1e5      	bne.n	8008062 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	e853 3f00 	ldrex	r3, [r3]
 80080a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	461a      	mov	r2, r3
 80080b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080b4:	61fb      	str	r3, [r7, #28]
 80080b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b8:	69b9      	ldr	r1, [r7, #24]
 80080ba:	69fa      	ldr	r2, [r7, #28]
 80080bc:	e841 2300 	strex	r3, r2, [r1]
 80080c0:	617b      	str	r3, [r7, #20]
   return(result);
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d1e6      	bne.n	8008096 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80080c8:	e021      	b.n	800810e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	69db      	ldr	r3, [r3, #28]
 80080d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d013      	beq.n	8008100 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080dc:	781a      	ldrb	r2, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080e8:	1c5a      	adds	r2, r3, #1
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	3b01      	subs	r3, #1
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008100:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008102:	3b01      	subs	r3, #1
 8008104:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008106:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1a4      	bne.n	8008056 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800810c:	e7ff      	b.n	800810e <UART_TxISR_8BIT_FIFOEN+0xd4>
 800810e:	bf00      	nop
 8008110:	3744      	adds	r7, #68	@ 0x44
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800811a:	b480      	push	{r7}
 800811c:	b091      	sub	sp, #68	@ 0x44
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008128:	2b21      	cmp	r3, #33	@ 0x21
 800812a:	d165      	bne.n	80081f8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008132:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008134:	e05c      	b.n	80081f0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800813c:	b29b      	uxth	r3, r3
 800813e:	2b00      	cmp	r3, #0
 8008140:	d133      	bne.n	80081aa <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	3308      	adds	r3, #8
 8008148:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814a:	6a3b      	ldr	r3, [r7, #32]
 800814c:	e853 3f00 	ldrex	r3, [r3]
 8008150:	61fb      	str	r3, [r7, #28]
   return(result);
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008158:	637b      	str	r3, [r7, #52]	@ 0x34
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	3308      	adds	r3, #8
 8008160:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008162:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008164:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008166:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008168:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800816a:	e841 2300 	strex	r3, r2, [r1]
 800816e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1e5      	bne.n	8008142 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	e853 3f00 	ldrex	r3, [r3]
 8008182:	60bb      	str	r3, [r7, #8]
   return(result);
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800818a:	633b      	str	r3, [r7, #48]	@ 0x30
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	461a      	mov	r2, r3
 8008192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008194:	61bb      	str	r3, [r7, #24]
 8008196:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008198:	6979      	ldr	r1, [r7, #20]
 800819a:	69ba      	ldr	r2, [r7, #24]
 800819c:	e841 2300 	strex	r3, r2, [r1]
 80081a0:	613b      	str	r3, [r7, #16]
   return(result);
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1e6      	bne.n	8008176 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80081a8:	e026      	b.n	80081f8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	69db      	ldr	r3, [r3, #28]
 80081b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d018      	beq.n	80081ea <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081bc:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80081be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c0:	881b      	ldrh	r3, [r3, #0]
 80081c2:	461a      	mov	r2, r3
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80081cc:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081d2:	1c9a      	adds	r2, r3, #2
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80081de:	b29b      	uxth	r3, r3
 80081e0:	3b01      	subs	r3, #1
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80081ea:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80081ec:	3b01      	subs	r3, #1
 80081ee:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80081f0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d19f      	bne.n	8008136 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80081f6:	e7ff      	b.n	80081f8 <UART_TxISR_16BIT_FIFOEN+0xde>
 80081f8:	bf00      	nop
 80081fa:	3744      	adds	r7, #68	@ 0x44
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b088      	sub	sp, #32
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	e853 3f00 	ldrex	r3, [r3]
 8008218:	60bb      	str	r3, [r7, #8]
   return(result);
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008220:	61fb      	str	r3, [r7, #28]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	461a      	mov	r2, r3
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	61bb      	str	r3, [r7, #24]
 800822c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822e:	6979      	ldr	r1, [r7, #20]
 8008230:	69ba      	ldr	r2, [r7, #24]
 8008232:	e841 2300 	strex	r3, r2, [r1]
 8008236:	613b      	str	r3, [r7, #16]
   return(result);
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1e6      	bne.n	800820c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2220      	movs	r2, #32
 8008242:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f7fe ffc3 	bl	80071d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008252:	bf00      	nop
 8008254:	3720      	adds	r7, #32
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
	...

0800825c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b09c      	sub	sp, #112	@ 0x70
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800826a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008274:	2b22      	cmp	r3, #34	@ 0x22
 8008276:	f040 80be 	bne.w	80083f6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008280:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008284:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008288:	b2d9      	uxtb	r1, r3
 800828a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800828e:	b2da      	uxtb	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008294:	400a      	ands	r2, r1
 8008296:	b2d2      	uxtb	r2, r2
 8008298:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800829e:	1c5a      	adds	r2, r3, #1
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	3b01      	subs	r3, #1
 80082ae:	b29a      	uxth	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80082bc:	b29b      	uxth	r3, r3
 80082be:	2b00      	cmp	r3, #0
 80082c0:	f040 80a1 	bne.w	8008406 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082cc:	e853 3f00 	ldrex	r3, [r3]
 80082d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80082d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	461a      	mov	r2, r3
 80082e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80082e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80082e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80082e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80082ea:	e841 2300 	strex	r3, r2, [r1]
 80082ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80082f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1e6      	bne.n	80082c4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	3308      	adds	r3, #8
 80082fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008300:	e853 3f00 	ldrex	r3, [r3]
 8008304:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008308:	f023 0301 	bic.w	r3, r3, #1
 800830c:	667b      	str	r3, [r7, #100]	@ 0x64
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	3308      	adds	r3, #8
 8008314:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008316:	647a      	str	r2, [r7, #68]	@ 0x44
 8008318:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800831c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800831e:	e841 2300 	strex	r3, r2, [r1]
 8008322:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1e5      	bne.n	80082f6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2220      	movs	r2, #32
 800832e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2200      	movs	r2, #0
 800833c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a33      	ldr	r2, [pc, #204]	@ (8008410 <UART_RxISR_8BIT+0x1b4>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d01f      	beq.n	8008388 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008352:	2b00      	cmp	r3, #0
 8008354:	d018      	beq.n	8008388 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835e:	e853 3f00 	ldrex	r3, [r3]
 8008362:	623b      	str	r3, [r7, #32]
   return(result);
 8008364:	6a3b      	ldr	r3, [r7, #32]
 8008366:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800836a:	663b      	str	r3, [r7, #96]	@ 0x60
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	461a      	mov	r2, r3
 8008372:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008374:	633b      	str	r3, [r7, #48]	@ 0x30
 8008376:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008378:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800837a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800837c:	e841 2300 	strex	r3, r2, [r1]
 8008380:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008384:	2b00      	cmp	r3, #0
 8008386:	d1e6      	bne.n	8008356 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800838c:	2b01      	cmp	r3, #1
 800838e:	d12e      	bne.n	80083ee <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	e853 3f00 	ldrex	r3, [r3]
 80083a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f023 0310 	bic.w	r3, r3, #16
 80083aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	461a      	mov	r2, r3
 80083b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80083b4:	61fb      	str	r3, [r7, #28]
 80083b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b8:	69b9      	ldr	r1, [r7, #24]
 80083ba:	69fa      	ldr	r2, [r7, #28]
 80083bc:	e841 2300 	strex	r3, r2, [r1]
 80083c0:	617b      	str	r3, [r7, #20]
   return(result);
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1e6      	bne.n	8008396 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	69db      	ldr	r3, [r3, #28]
 80083ce:	f003 0310 	and.w	r3, r3, #16
 80083d2:	2b10      	cmp	r3, #16
 80083d4:	d103      	bne.n	80083de <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2210      	movs	r2, #16
 80083dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80083e4:	4619      	mov	r1, r3
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f7fe ff0a 	bl	8007200 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80083ec:	e00b      	b.n	8008406 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7f9 f836 	bl	8001460 <HAL_UART_RxCpltCallback>
}
 80083f4:	e007      	b.n	8008406 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	699a      	ldr	r2, [r3, #24]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f042 0208 	orr.w	r2, r2, #8
 8008404:	619a      	str	r2, [r3, #24]
}
 8008406:	bf00      	nop
 8008408:	3770      	adds	r7, #112	@ 0x70
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	40008000 	.word	0x40008000

08008414 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b09c      	sub	sp, #112	@ 0x70
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008422:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800842c:	2b22      	cmp	r3, #34	@ 0x22
 800842e:	f040 80be 	bne.w	80085ae <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008438:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008440:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008442:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008446:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800844a:	4013      	ands	r3, r2
 800844c:	b29a      	uxth	r2, r3
 800844e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008450:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008456:	1c9a      	adds	r2, r3, #2
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008462:	b29b      	uxth	r3, r3
 8008464:	3b01      	subs	r3, #1
 8008466:	b29a      	uxth	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008474:	b29b      	uxth	r3, r3
 8008476:	2b00      	cmp	r3, #0
 8008478:	f040 80a1 	bne.w	80085be <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008482:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008484:	e853 3f00 	ldrex	r3, [r3]
 8008488:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800848a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800848c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008490:	667b      	str	r3, [r7, #100]	@ 0x64
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	461a      	mov	r2, r3
 8008498:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800849a:	657b      	str	r3, [r7, #84]	@ 0x54
 800849c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80084a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80084a2:	e841 2300 	strex	r3, r2, [r1]
 80084a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80084a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1e6      	bne.n	800847c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	3308      	adds	r3, #8
 80084b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084b8:	e853 3f00 	ldrex	r3, [r3]
 80084bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80084be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c0:	f023 0301 	bic.w	r3, r3, #1
 80084c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	3308      	adds	r3, #8
 80084cc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80084ce:	643a      	str	r2, [r7, #64]	@ 0x40
 80084d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80084d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80084d6:	e841 2300 	strex	r3, r2, [r1]
 80084da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80084dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d1e5      	bne.n	80084ae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2220      	movs	r2, #32
 80084e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2200      	movs	r2, #0
 80084ee:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a33      	ldr	r2, [pc, #204]	@ (80085c8 <UART_RxISR_16BIT+0x1b4>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d01f      	beq.n	8008540 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800850a:	2b00      	cmp	r3, #0
 800850c:	d018      	beq.n	8008540 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008514:	6a3b      	ldr	r3, [r7, #32]
 8008516:	e853 3f00 	ldrex	r3, [r3]
 800851a:	61fb      	str	r3, [r7, #28]
   return(result);
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008522:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	461a      	mov	r2, r3
 800852a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800852c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800852e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008530:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008532:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008534:	e841 2300 	strex	r3, r2, [r1]
 8008538:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800853a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1e6      	bne.n	800850e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008544:	2b01      	cmp	r3, #1
 8008546:	d12e      	bne.n	80085a6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	e853 3f00 	ldrex	r3, [r3]
 800855a:	60bb      	str	r3, [r7, #8]
   return(result);
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	f023 0310 	bic.w	r3, r3, #16
 8008562:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	461a      	mov	r2, r3
 800856a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800856c:	61bb      	str	r3, [r7, #24]
 800856e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008570:	6979      	ldr	r1, [r7, #20]
 8008572:	69ba      	ldr	r2, [r7, #24]
 8008574:	e841 2300 	strex	r3, r2, [r1]
 8008578:	613b      	str	r3, [r7, #16]
   return(result);
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1e6      	bne.n	800854e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	69db      	ldr	r3, [r3, #28]
 8008586:	f003 0310 	and.w	r3, r3, #16
 800858a:	2b10      	cmp	r3, #16
 800858c:	d103      	bne.n	8008596 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2210      	movs	r2, #16
 8008594:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800859c:	4619      	mov	r1, r3
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f7fe fe2e 	bl	8007200 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80085a4:	e00b      	b.n	80085be <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f7f8 ff5a 	bl	8001460 <HAL_UART_RxCpltCallback>
}
 80085ac:	e007      	b.n	80085be <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	699a      	ldr	r2, [r3, #24]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f042 0208 	orr.w	r2, r2, #8
 80085bc:	619a      	str	r2, [r3, #24]
}
 80085be:	bf00      	nop
 80085c0:	3770      	adds	r7, #112	@ 0x70
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	40008000 	.word	0x40008000

080085cc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b0ac      	sub	sp, #176	@ 0xb0
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80085da:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	69db      	ldr	r3, [r3, #28]
 80085e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008602:	2b22      	cmp	r3, #34	@ 0x22
 8008604:	f040 8182 	bne.w	800890c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800860e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008612:	e125      	b.n	8008860 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800861a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800861e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008622:	b2d9      	uxtb	r1, r3
 8008624:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008628:	b2da      	uxtb	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800862e:	400a      	ands	r2, r1
 8008630:	b2d2      	uxtb	r2, r2
 8008632:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008638:	1c5a      	adds	r2, r3, #1
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008644:	b29b      	uxth	r3, r3
 8008646:	3b01      	subs	r3, #1
 8008648:	b29a      	uxth	r2, r3
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	69db      	ldr	r3, [r3, #28]
 8008656:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800865a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800865e:	f003 0307 	and.w	r3, r3, #7
 8008662:	2b00      	cmp	r3, #0
 8008664:	d053      	beq.n	800870e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800866a:	f003 0301 	and.w	r3, r3, #1
 800866e:	2b00      	cmp	r3, #0
 8008670:	d011      	beq.n	8008696 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008672:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00b      	beq.n	8008696 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	2201      	movs	r2, #1
 8008684:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800868c:	f043 0201 	orr.w	r2, r3, #1
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008696:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800869a:	f003 0302 	and.w	r3, r3, #2
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d011      	beq.n	80086c6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80086a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00b      	beq.n	80086c6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2202      	movs	r2, #2
 80086b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086bc:	f043 0204 	orr.w	r2, r3, #4
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086ca:	f003 0304 	and.w	r3, r3, #4
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d011      	beq.n	80086f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80086d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80086d6:	f003 0301 	and.w	r3, r3, #1
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00b      	beq.n	80086f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2204      	movs	r2, #4
 80086e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086ec:	f043 0202 	orr.w	r2, r3, #2
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d006      	beq.n	800870e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f7fe fd73 	bl	80071ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008714:	b29b      	uxth	r3, r3
 8008716:	2b00      	cmp	r3, #0
 8008718:	f040 80a2 	bne.w	8008860 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008722:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008724:	e853 3f00 	ldrex	r3, [r3]
 8008728:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800872a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800872c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008730:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	461a      	mov	r2, r3
 800873a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800873e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008740:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008742:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008744:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008746:	e841 2300 	strex	r3, r2, [r1]
 800874a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800874c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1e4      	bne.n	800871c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3308      	adds	r3, #8
 8008758:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800875c:	e853 3f00 	ldrex	r3, [r3]
 8008760:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008762:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008764:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008768:	f023 0301 	bic.w	r3, r3, #1
 800876c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	3308      	adds	r3, #8
 8008776:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800877a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800877c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008780:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008782:	e841 2300 	strex	r3, r2, [r1]
 8008786:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008788:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1e1      	bne.n	8008752 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2220      	movs	r2, #32
 8008792:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a5f      	ldr	r2, [pc, #380]	@ (8008924 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d021      	beq.n	80087f0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d01a      	beq.n	80087f0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087c2:	e853 3f00 	ldrex	r3, [r3]
 80087c6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80087c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80087ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	461a      	mov	r2, r3
 80087d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80087dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80087de:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80087e2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80087e4:	e841 2300 	strex	r3, r2, [r1]
 80087e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80087ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1e4      	bne.n	80087ba <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d130      	bne.n	800885a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008806:	e853 3f00 	ldrex	r3, [r3]
 800880a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800880c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880e:	f023 0310 	bic.w	r3, r3, #16
 8008812:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008820:	643b      	str	r3, [r7, #64]	@ 0x40
 8008822:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008824:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008826:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008828:	e841 2300 	strex	r3, r2, [r1]
 800882c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800882e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008830:	2b00      	cmp	r3, #0
 8008832:	d1e4      	bne.n	80087fe <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	69db      	ldr	r3, [r3, #28]
 800883a:	f003 0310 	and.w	r3, r3, #16
 800883e:	2b10      	cmp	r3, #16
 8008840:	d103      	bne.n	800884a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2210      	movs	r2, #16
 8008848:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008850:	4619      	mov	r1, r3
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f7fe fcd4 	bl	8007200 <HAL_UARTEx_RxEventCallback>
 8008858:	e002      	b.n	8008860 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f7f8 fe00 	bl	8001460 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008860:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008864:	2b00      	cmp	r3, #0
 8008866:	d006      	beq.n	8008876 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008868:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800886c:	f003 0320 	and.w	r3, r3, #32
 8008870:	2b00      	cmp	r3, #0
 8008872:	f47f aecf 	bne.w	8008614 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800887c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008880:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008884:	2b00      	cmp	r3, #0
 8008886:	d049      	beq.n	800891c <UART_RxISR_8BIT_FIFOEN+0x350>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800888e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008892:	429a      	cmp	r2, r3
 8008894:	d242      	bcs.n	800891c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	3308      	adds	r3, #8
 800889c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800889e:	6a3b      	ldr	r3, [r7, #32]
 80088a0:	e853 3f00 	ldrex	r3, [r3]
 80088a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	3308      	adds	r3, #8
 80088b6:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80088ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80088bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088c2:	e841 2300 	strex	r3, r2, [r1]
 80088c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80088c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d1e3      	bne.n	8008896 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4a15      	ldr	r2, [pc, #84]	@ (8008928 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80088d2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	e853 3f00 	ldrex	r3, [r3]
 80088e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	f043 0320 	orr.w	r3, r3, #32
 80088e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	461a      	mov	r2, r3
 80088f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80088f6:	61bb      	str	r3, [r7, #24]
 80088f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fa:	6979      	ldr	r1, [r7, #20]
 80088fc:	69ba      	ldr	r2, [r7, #24]
 80088fe:	e841 2300 	strex	r3, r2, [r1]
 8008902:	613b      	str	r3, [r7, #16]
   return(result);
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d1e4      	bne.n	80088d4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800890a:	e007      	b.n	800891c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	699a      	ldr	r2, [r3, #24]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f042 0208 	orr.w	r2, r2, #8
 800891a:	619a      	str	r2, [r3, #24]
}
 800891c:	bf00      	nop
 800891e:	37b0      	adds	r7, #176	@ 0xb0
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	40008000 	.word	0x40008000
 8008928:	0800825d 	.word	0x0800825d

0800892c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b0ae      	sub	sp, #184	@ 0xb8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800893a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	69db      	ldr	r3, [r3, #28]
 8008944:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008962:	2b22      	cmp	r3, #34	@ 0x22
 8008964:	f040 8186 	bne.w	8008c74 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800896e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008972:	e129      	b.n	8008bc8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800897a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008982:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008986:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800898a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800898e:	4013      	ands	r3, r2
 8008990:	b29a      	uxth	r2, r3
 8008992:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008996:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800899c:	1c9a      	adds	r2, r3, #2
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	3b01      	subs	r3, #1
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	69db      	ldr	r3, [r3, #28]
 80089ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80089be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80089c2:	f003 0307 	and.w	r3, r3, #7
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d053      	beq.n	8008a72 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80089ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80089ce:	f003 0301 	and.w	r3, r3, #1
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d011      	beq.n	80089fa <UART_RxISR_16BIT_FIFOEN+0xce>
 80089d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80089da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00b      	beq.n	80089fa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2201      	movs	r2, #1
 80089e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089f0:	f043 0201 	orr.w	r2, r3, #1
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80089fe:	f003 0302 	and.w	r3, r3, #2
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d011      	beq.n	8008a2a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008a06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008a0a:	f003 0301 	and.w	r3, r3, #1
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00b      	beq.n	8008a2a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2202      	movs	r2, #2
 8008a18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a20:	f043 0204 	orr.w	r2, r3, #4
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008a2e:	f003 0304 	and.w	r3, r3, #4
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d011      	beq.n	8008a5a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008a36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00b      	beq.n	8008a5a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2204      	movs	r2, #4
 8008a48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a50:	f043 0202 	orr.w	r2, r3, #2
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d006      	beq.n	8008a72 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f7fe fbc1 	bl	80071ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f040 80a4 	bne.w	8008bc8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a88:	e853 3f00 	ldrex	r3, [r3]
 8008a8c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008a8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008aa2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008aa6:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008aaa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008aae:	e841 2300 	strex	r3, r2, [r1]
 8008ab2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008ab4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1e2      	bne.n	8008a80 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	3308      	adds	r3, #8
 8008ac0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ac4:	e853 3f00 	ldrex	r3, [r3]
 8008ac8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008aca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008acc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ad0:	f023 0301 	bic.w	r3, r3, #1
 8008ad4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	3308      	adds	r3, #8
 8008ade:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008ae2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008ae4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008ae8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008aea:	e841 2300 	strex	r3, r2, [r1]
 8008aee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008af0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d1e1      	bne.n	8008aba <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2220      	movs	r2, #32
 8008afa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a5f      	ldr	r2, [pc, #380]	@ (8008c8c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d021      	beq.n	8008b58 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d01a      	beq.n	8008b58 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b2a:	e853 3f00 	ldrex	r3, [r3]
 8008b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b32:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008b36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	461a      	mov	r2, r3
 8008b40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008b44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b46:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b48:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008b4a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b4c:	e841 2300 	strex	r3, r2, [r1]
 8008b50:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008b52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d1e4      	bne.n	8008b22 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d130      	bne.n	8008bc2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6e:	e853 3f00 	ldrex	r3, [r3]
 8008b72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b76:	f023 0310 	bic.w	r3, r3, #16
 8008b7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	461a      	mov	r2, r3
 8008b84:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008b88:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b8a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b90:	e841 2300 	strex	r3, r2, [r1]
 8008b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d1e4      	bne.n	8008b66 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	69db      	ldr	r3, [r3, #28]
 8008ba2:	f003 0310 	and.w	r3, r3, #16
 8008ba6:	2b10      	cmp	r3, #16
 8008ba8:	d103      	bne.n	8008bb2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2210      	movs	r2, #16
 8008bb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008bb8:	4619      	mov	r1, r3
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f7fe fb20 	bl	8007200 <HAL_UARTEx_RxEventCallback>
 8008bc0:	e002      	b.n	8008bc8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f7f8 fc4c 	bl	8001460 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008bc8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d006      	beq.n	8008bde <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8008bd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008bd4:	f003 0320 	and.w	r3, r3, #32
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f47f aecb 	bne.w	8008974 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008be4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008be8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d049      	beq.n	8008c84 <UART_RxISR_16BIT_FIFOEN+0x358>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008bf6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d242      	bcs.n	8008c84 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	3308      	adds	r3, #8
 8008c04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c08:	e853 3f00 	ldrex	r3, [r3]
 8008c0c:	623b      	str	r3, [r7, #32]
   return(result);
 8008c0e:	6a3b      	ldr	r3, [r7, #32]
 8008c10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	3308      	adds	r3, #8
 8008c1e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008c22:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c2a:	e841 2300 	strex	r3, r2, [r1]
 8008c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d1e3      	bne.n	8008bfe <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a15      	ldr	r2, [pc, #84]	@ (8008c90 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008c3a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	e853 3f00 	ldrex	r3, [r3]
 8008c48:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f043 0320 	orr.w	r3, r3, #32
 8008c50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	461a      	mov	r2, r3
 8008c5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008c5e:	61fb      	str	r3, [r7, #28]
 8008c60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c62:	69b9      	ldr	r1, [r7, #24]
 8008c64:	69fa      	ldr	r2, [r7, #28]
 8008c66:	e841 2300 	strex	r3, r2, [r1]
 8008c6a:	617b      	str	r3, [r7, #20]
   return(result);
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1e4      	bne.n	8008c3c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c72:	e007      	b.n	8008c84 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	699a      	ldr	r2, [r3, #24]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f042 0208 	orr.w	r2, r2, #8
 8008c82:	619a      	str	r2, [r3, #24]
}
 8008c84:	bf00      	nop
 8008c86:	37b8      	adds	r7, #184	@ 0xb8
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	40008000 	.word	0x40008000
 8008c90:	08008415 	.word	0x08008415

08008c94 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008c9c:	bf00      	nop
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008cb0:	bf00      	nop
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008cc4:	bf00      	nop
 8008cc6:	370c      	adds	r7, #12
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d101      	bne.n	8008ce6 <HAL_UARTEx_DisableFifoMode+0x16>
 8008ce2:	2302      	movs	r3, #2
 8008ce4:	e027      	b.n	8008d36 <HAL_UARTEx_DisableFifoMode+0x66>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2224      	movs	r2, #36	@ 0x24
 8008cf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f022 0201 	bic.w	r2, r2, #1
 8008d0c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008d14:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2220      	movs	r2, #32
 8008d28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3714      	adds	r7, #20
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr

08008d42 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b084      	sub	sp, #16
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
 8008d4a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d101      	bne.n	8008d5a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d56:	2302      	movs	r3, #2
 8008d58:	e02d      	b.n	8008db6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2224      	movs	r2, #36	@ 0x24
 8008d66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f022 0201 	bic.w	r2, r2, #1
 8008d80:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	683a      	ldr	r2, [r7, #0]
 8008d92:	430a      	orrs	r2, r1
 8008d94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 f850 	bl	8008e3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2220      	movs	r2, #32
 8008da8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b084      	sub	sp, #16
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
 8008dc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d101      	bne.n	8008dd6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008dd2:	2302      	movs	r3, #2
 8008dd4:	e02d      	b.n	8008e32 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2224      	movs	r2, #36	@ 0x24
 8008de2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f022 0201 	bic.w	r2, r2, #1
 8008dfc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	683a      	ldr	r2, [r7, #0]
 8008e0e:	430a      	orrs	r2, r1
 8008e10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f812 	bl	8008e3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	68fa      	ldr	r2, [r7, #12]
 8008e1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2220      	movs	r2, #32
 8008e24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
	...

08008e3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d108      	bne.n	8008e5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e5c:	e031      	b.n	8008ec2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e5e:	2308      	movs	r3, #8
 8008e60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e62:	2308      	movs	r3, #8
 8008e64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	0e5b      	lsrs	r3, r3, #25
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	f003 0307 	and.w	r3, r3, #7
 8008e74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	0f5b      	lsrs	r3, r3, #29
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	f003 0307 	and.w	r3, r3, #7
 8008e84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e86:	7bbb      	ldrb	r3, [r7, #14]
 8008e88:	7b3a      	ldrb	r2, [r7, #12]
 8008e8a:	4911      	ldr	r1, [pc, #68]	@ (8008ed0 <UARTEx_SetNbDataToProcess+0x94>)
 8008e8c:	5c8a      	ldrb	r2, [r1, r2]
 8008e8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e92:	7b3a      	ldrb	r2, [r7, #12]
 8008e94:	490f      	ldr	r1, [pc, #60]	@ (8008ed4 <UARTEx_SetNbDataToProcess+0x98>)
 8008e96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e98:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ea4:	7bfb      	ldrb	r3, [r7, #15]
 8008ea6:	7b7a      	ldrb	r2, [r7, #13]
 8008ea8:	4909      	ldr	r1, [pc, #36]	@ (8008ed0 <UARTEx_SetNbDataToProcess+0x94>)
 8008eaa:	5c8a      	ldrb	r2, [r1, r2]
 8008eac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008eb0:	7b7a      	ldrb	r2, [r7, #13]
 8008eb2:	4908      	ldr	r1, [pc, #32]	@ (8008ed4 <UARTEx_SetNbDataToProcess+0x98>)
 8008eb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008eb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8008eba:	b29a      	uxth	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008ec2:	bf00      	nop
 8008ec4:	3714      	adds	r7, #20
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	08008f78 	.word	0x08008f78
 8008ed4:	08008f80 	.word	0x08008f80

08008ed8 <memset>:
 8008ed8:	4402      	add	r2, r0
 8008eda:	4603      	mov	r3, r0
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d100      	bne.n	8008ee2 <memset+0xa>
 8008ee0:	4770      	bx	lr
 8008ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ee6:	e7f9      	b.n	8008edc <memset+0x4>

08008ee8 <__libc_init_array>:
 8008ee8:	b570      	push	{r4, r5, r6, lr}
 8008eea:	4d0d      	ldr	r5, [pc, #52]	@ (8008f20 <__libc_init_array+0x38>)
 8008eec:	4c0d      	ldr	r4, [pc, #52]	@ (8008f24 <__libc_init_array+0x3c>)
 8008eee:	1b64      	subs	r4, r4, r5
 8008ef0:	10a4      	asrs	r4, r4, #2
 8008ef2:	2600      	movs	r6, #0
 8008ef4:	42a6      	cmp	r6, r4
 8008ef6:	d109      	bne.n	8008f0c <__libc_init_array+0x24>
 8008ef8:	4d0b      	ldr	r5, [pc, #44]	@ (8008f28 <__libc_init_array+0x40>)
 8008efa:	4c0c      	ldr	r4, [pc, #48]	@ (8008f2c <__libc_init_array+0x44>)
 8008efc:	f000 f818 	bl	8008f30 <_init>
 8008f00:	1b64      	subs	r4, r4, r5
 8008f02:	10a4      	asrs	r4, r4, #2
 8008f04:	2600      	movs	r6, #0
 8008f06:	42a6      	cmp	r6, r4
 8008f08:	d105      	bne.n	8008f16 <__libc_init_array+0x2e>
 8008f0a:	bd70      	pop	{r4, r5, r6, pc}
 8008f0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f10:	4798      	blx	r3
 8008f12:	3601      	adds	r6, #1
 8008f14:	e7ee      	b.n	8008ef4 <__libc_init_array+0xc>
 8008f16:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f1a:	4798      	blx	r3
 8008f1c:	3601      	adds	r6, #1
 8008f1e:	e7f2      	b.n	8008f06 <__libc_init_array+0x1e>
 8008f20:	08008f90 	.word	0x08008f90
 8008f24:	08008f90 	.word	0x08008f90
 8008f28:	08008f90 	.word	0x08008f90
 8008f2c:	08008f94 	.word	0x08008f94

08008f30 <_init>:
 8008f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f32:	bf00      	nop
 8008f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f36:	bc08      	pop	{r3}
 8008f38:	469e      	mov	lr, r3
 8008f3a:	4770      	bx	lr

08008f3c <_fini>:
 8008f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f3e:	bf00      	nop
 8008f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f42:	bc08      	pop	{r3}
 8008f44:	469e      	mov	lr, r3
 8008f46:	4770      	bx	lr
