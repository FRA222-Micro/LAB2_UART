
LAB2_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007350  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007528  08007528  00008528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007568  08007568  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  08007568  08007568  00008568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007570  08007570  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007570  08007570  00008570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007574  08007574  00008574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08007578  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  2000000c  08007584  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08007584  000092b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c7f  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a01  00000000  00000000  0001fcbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  000226c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001004  00000000  00000000  00023b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000284e7  00000000  00000000  00024b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017628  00000000  00000000  0004d02b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001121e1  00000000  00000000  00064653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00176834  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a30  00000000  00000000  00176878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  0017c2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007510 	.word	0x08007510

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08007510 	.word	0x08007510

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	@ 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2iz>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009cc:	d215      	bcs.n	80009fa <__aeabi_d2iz+0x36>
 80009ce:	d511      	bpl.n	80009f4 <__aeabi_d2iz+0x30>
 80009d0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d912      	bls.n	8000a00 <__aeabi_d2iz+0x3c>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009ea:	fa23 f002 	lsr.w	r0, r3, r2
 80009ee:	bf18      	it	ne
 80009f0:	4240      	negne	r0, r0
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009fe:	d105      	bne.n	8000a0c <__aeabi_d2iz+0x48>
 8000a00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a04:	bf08      	it	eq
 8000a06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a0a:	4770      	bx	lr
 8000a0c:	f04f 0000 	mov.w	r0, #0
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b96a 	b.w	8000d00 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	460c      	mov	r4, r1
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d14e      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a50:	4694      	mov	ip, r2
 8000a52:	458c      	cmp	ip, r1
 8000a54:	4686      	mov	lr, r0
 8000a56:	fab2 f282 	clz	r2, r2
 8000a5a:	d962      	bls.n	8000b22 <__udivmoddi4+0xde>
 8000a5c:	b14a      	cbz	r2, 8000a72 <__udivmoddi4+0x2e>
 8000a5e:	f1c2 0320 	rsb	r3, r2, #32
 8000a62:	4091      	lsls	r1, r2
 8000a64:	fa20 f303 	lsr.w	r3, r0, r3
 8000a68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6c:	4319      	orrs	r1, r3
 8000a6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a76:	fa1f f68c 	uxth.w	r6, ip
 8000a7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a82:	fb07 1114 	mls	r1, r7, r4, r1
 8000a86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a8a:	fb04 f106 	mul.w	r1, r4, r6
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a9a:	f080 8112 	bcs.w	8000cc2 <__udivmoddi4+0x27e>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 810f 	bls.w	8000cc2 <__udivmoddi4+0x27e>
 8000aa4:	3c02      	subs	r4, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a59      	subs	r1, r3, r1
 8000aaa:	fa1f f38e 	uxth.w	r3, lr
 8000aae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ab2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ab6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aba:	fb00 f606 	mul.w	r6, r0, r6
 8000abe:	429e      	cmp	r6, r3
 8000ac0:	d90a      	bls.n	8000ad8 <__udivmoddi4+0x94>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aca:	f080 80fc 	bcs.w	8000cc6 <__udivmoddi4+0x282>
 8000ace:	429e      	cmp	r6, r3
 8000ad0:	f240 80f9 	bls.w	8000cc6 <__udivmoddi4+0x282>
 8000ad4:	4463      	add	r3, ip
 8000ad6:	3802      	subs	r0, #2
 8000ad8:	1b9b      	subs	r3, r3, r6
 8000ada:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ade:	2100      	movs	r1, #0
 8000ae0:	b11d      	cbz	r5, 8000aea <__udivmoddi4+0xa6>
 8000ae2:	40d3      	lsrs	r3, r2
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	e9c5 3200 	strd	r3, r2, [r5]
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d905      	bls.n	8000afe <__udivmoddi4+0xba>
 8000af2:	b10d      	cbz	r5, 8000af8 <__udivmoddi4+0xb4>
 8000af4:	e9c5 0100 	strd	r0, r1, [r5]
 8000af8:	2100      	movs	r1, #0
 8000afa:	4608      	mov	r0, r1
 8000afc:	e7f5      	b.n	8000aea <__udivmoddi4+0xa6>
 8000afe:	fab3 f183 	clz	r1, r3
 8000b02:	2900      	cmp	r1, #0
 8000b04:	d146      	bne.n	8000b94 <__udivmoddi4+0x150>
 8000b06:	42a3      	cmp	r3, r4
 8000b08:	d302      	bcc.n	8000b10 <__udivmoddi4+0xcc>
 8000b0a:	4290      	cmp	r0, r2
 8000b0c:	f0c0 80f0 	bcc.w	8000cf0 <__udivmoddi4+0x2ac>
 8000b10:	1a86      	subs	r6, r0, r2
 8000b12:	eb64 0303 	sbc.w	r3, r4, r3
 8000b16:	2001      	movs	r0, #1
 8000b18:	2d00      	cmp	r5, #0
 8000b1a:	d0e6      	beq.n	8000aea <__udivmoddi4+0xa6>
 8000b1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b20:	e7e3      	b.n	8000aea <__udivmoddi4+0xa6>
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	f040 8090 	bne.w	8000c48 <__udivmoddi4+0x204>
 8000b28:	eba1 040c 	sub.w	r4, r1, ip
 8000b2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b30:	fa1f f78c 	uxth.w	r7, ip
 8000b34:	2101      	movs	r1, #1
 8000b36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b46:	fb07 f006 	mul.w	r0, r7, r6
 8000b4a:	4298      	cmp	r0, r3
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x11c>
 8000b4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x11a>
 8000b58:	4298      	cmp	r0, r3
 8000b5a:	f200 80cd 	bhi.w	8000cf8 <__udivmoddi4+0x2b4>
 8000b5e:	4626      	mov	r6, r4
 8000b60:	1a1c      	subs	r4, r3, r0
 8000b62:	fa1f f38e 	uxth.w	r3, lr
 8000b66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b72:	fb00 f707 	mul.w	r7, r0, r7
 8000b76:	429f      	cmp	r7, r3
 8000b78:	d908      	bls.n	8000b8c <__udivmoddi4+0x148>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b82:	d202      	bcs.n	8000b8a <__udivmoddi4+0x146>
 8000b84:	429f      	cmp	r7, r3
 8000b86:	f200 80b0 	bhi.w	8000cea <__udivmoddi4+0x2a6>
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	1bdb      	subs	r3, r3, r7
 8000b8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b92:	e7a5      	b.n	8000ae0 <__udivmoddi4+0x9c>
 8000b94:	f1c1 0620 	rsb	r6, r1, #32
 8000b98:	408b      	lsls	r3, r1
 8000b9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b9e:	431f      	orrs	r7, r3
 8000ba0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ba4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ba8:	ea43 030c 	orr.w	r3, r3, ip
 8000bac:	40f4      	lsrs	r4, r6
 8000bae:	fa00 f801 	lsl.w	r8, r0, r1
 8000bb2:	0c38      	lsrs	r0, r7, #16
 8000bb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bbc:	fa1f fc87 	uxth.w	ip, r7
 8000bc0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bc4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bc8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bcc:	45a1      	cmp	r9, r4
 8000bce:	fa02 f201 	lsl.w	r2, r2, r1
 8000bd2:	d90a      	bls.n	8000bea <__udivmoddi4+0x1a6>
 8000bd4:	193c      	adds	r4, r7, r4
 8000bd6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bda:	f080 8084 	bcs.w	8000ce6 <__udivmoddi4+0x2a2>
 8000bde:	45a1      	cmp	r9, r4
 8000be0:	f240 8081 	bls.w	8000ce6 <__udivmoddi4+0x2a2>
 8000be4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000be8:	443c      	add	r4, r7
 8000bea:	eba4 0409 	sub.w	r4, r4, r9
 8000bee:	fa1f f983 	uxth.w	r9, r3
 8000bf2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bf6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bfa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bfe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c02:	45a4      	cmp	ip, r4
 8000c04:	d907      	bls.n	8000c16 <__udivmoddi4+0x1d2>
 8000c06:	193c      	adds	r4, r7, r4
 8000c08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c0c:	d267      	bcs.n	8000cde <__udivmoddi4+0x29a>
 8000c0e:	45a4      	cmp	ip, r4
 8000c10:	d965      	bls.n	8000cde <__udivmoddi4+0x29a>
 8000c12:	3b02      	subs	r3, #2
 8000c14:	443c      	add	r4, r7
 8000c16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c1e:	eba4 040c 	sub.w	r4, r4, ip
 8000c22:	429c      	cmp	r4, r3
 8000c24:	46ce      	mov	lr, r9
 8000c26:	469c      	mov	ip, r3
 8000c28:	d351      	bcc.n	8000cce <__udivmoddi4+0x28a>
 8000c2a:	d04e      	beq.n	8000cca <__udivmoddi4+0x286>
 8000c2c:	b155      	cbz	r5, 8000c44 <__udivmoddi4+0x200>
 8000c2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c32:	eb64 040c 	sbc.w	r4, r4, ip
 8000c36:	fa04 f606 	lsl.w	r6, r4, r6
 8000c3a:	40cb      	lsrs	r3, r1
 8000c3c:	431e      	orrs	r6, r3
 8000c3e:	40cc      	lsrs	r4, r1
 8000c40:	e9c5 6400 	strd	r6, r4, [r5]
 8000c44:	2100      	movs	r1, #0
 8000c46:	e750      	b.n	8000aea <__udivmoddi4+0xa6>
 8000c48:	f1c2 0320 	rsb	r3, r2, #32
 8000c4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c54:	fa24 f303 	lsr.w	r3, r4, r3
 8000c58:	4094      	lsls	r4, r2
 8000c5a:	430c      	orrs	r4, r1
 8000c5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c64:	fa1f f78c 	uxth.w	r7, ip
 8000c68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c70:	0c23      	lsrs	r3, r4, #16
 8000c72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c76:	fb00 f107 	mul.w	r1, r0, r7
 8000c7a:	4299      	cmp	r1, r3
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0x24c>
 8000c7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c86:	d22c      	bcs.n	8000ce2 <__udivmoddi4+0x29e>
 8000c88:	4299      	cmp	r1, r3
 8000c8a:	d92a      	bls.n	8000ce2 <__udivmoddi4+0x29e>
 8000c8c:	3802      	subs	r0, #2
 8000c8e:	4463      	add	r3, ip
 8000c90:	1a5b      	subs	r3, r3, r1
 8000c92:	b2a4      	uxth	r4, r4
 8000c94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c98:	fb08 3311 	mls	r3, r8, r1, r3
 8000c9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca0:	fb01 f307 	mul.w	r3, r1, r7
 8000ca4:	42a3      	cmp	r3, r4
 8000ca6:	d908      	bls.n	8000cba <__udivmoddi4+0x276>
 8000ca8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cb0:	d213      	bcs.n	8000cda <__udivmoddi4+0x296>
 8000cb2:	42a3      	cmp	r3, r4
 8000cb4:	d911      	bls.n	8000cda <__udivmoddi4+0x296>
 8000cb6:	3902      	subs	r1, #2
 8000cb8:	4464      	add	r4, ip
 8000cba:	1ae4      	subs	r4, r4, r3
 8000cbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cc0:	e739      	b.n	8000b36 <__udivmoddi4+0xf2>
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	e6f0      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000cc6:	4608      	mov	r0, r1
 8000cc8:	e706      	b.n	8000ad8 <__udivmoddi4+0x94>
 8000cca:	45c8      	cmp	r8, r9
 8000ccc:	d2ae      	bcs.n	8000c2c <__udivmoddi4+0x1e8>
 8000cce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cd6:	3801      	subs	r0, #1
 8000cd8:	e7a8      	b.n	8000c2c <__udivmoddi4+0x1e8>
 8000cda:	4631      	mov	r1, r6
 8000cdc:	e7ed      	b.n	8000cba <__udivmoddi4+0x276>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	e799      	b.n	8000c16 <__udivmoddi4+0x1d2>
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	e7d4      	b.n	8000c90 <__udivmoddi4+0x24c>
 8000ce6:	46d6      	mov	lr, sl
 8000ce8:	e77f      	b.n	8000bea <__udivmoddi4+0x1a6>
 8000cea:	4463      	add	r3, ip
 8000cec:	3802      	subs	r0, #2
 8000cee:	e74d      	b.n	8000b8c <__udivmoddi4+0x148>
 8000cf0:	4606      	mov	r6, r0
 8000cf2:	4623      	mov	r3, r4
 8000cf4:	4608      	mov	r0, r1
 8000cf6:	e70f      	b.n	8000b18 <__udivmoddi4+0xd4>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	e730      	b.n	8000b60 <__udivmoddi4+0x11c>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_idiv0>:
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	0000      	movs	r0, r0
	...

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0c:	f000 fd97 	bl	800183e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d10:	f000 f896 	bl	8000e40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d14:	f000 fa98 	bl	8001248 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d18:	f000 fa5c 	bl	80011d4 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000d1c:	f000 f954 	bl	8000fc8 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000d20:	f000 f8da 	bl	8000ed8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d24:	f000 f99a 	bl	800105c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000d28:	217f      	movs	r1, #127	@ 0x7f
 8000d2a:	483b      	ldr	r0, [pc, #236]	@ (8000e18 <main+0x110>)
 8000d2c:	f002 f906 	bl	8002f3c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 40);
 8000d30:	4b3a      	ldr	r3, [pc, #232]	@ (8000e1c <main+0x114>)
 8000d32:	881b      	ldrh	r3, [r3, #0]
 8000d34:	2228      	movs	r2, #40	@ 0x28
 8000d36:	4619      	mov	r1, r3
 8000d38:	4837      	ldr	r0, [pc, #220]	@ (8000e18 <main+0x110>)
 8000d3a:	f001 f9f1 	bl	8002120 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim1);
 8000d3e:	4838      	ldr	r0, [pc, #224]	@ (8000e20 <main+0x118>)
 8000d40:	f004 f83c 	bl	8004dbc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d44:	2100      	movs	r1, #0
 8000d46:	4836      	ldr	r0, [pc, #216]	@ (8000e20 <main+0x118>)
 8000d48:	f004 f90a 	bl	8004f60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000d4c:	2104      	movs	r1, #4
 8000d4e:	4834      	ldr	r0, [pc, #208]	@ (8000e20 <main+0x118>)
 8000d50:	f004 f906 	bl	8004f60 <HAL_TIM_PWM_Start>
  UARTDMAConfig();
 8000d54:	f000 fae6 	bl	8001324 <UARTDMAConfig>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //ADC_RawRead[40] = ADC;
	  ADCBytes[0] = (uint8_t)(ADC_RawRead & 0xFF); // Lower byte
 8000d58:	4b30      	ldr	r3, [pc, #192]	@ (8000e1c <main+0x114>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4b31      	ldr	r3, [pc, #196]	@ (8000e24 <main+0x11c>)
 8000d60:	701a      	strb	r2, [r3, #0]
	  ADCBytes[1] = (uint8_t)((ADC_RawRead >> 8) & 0xFF); // Upper byte
 8000d62:	4b2e      	ldr	r3, [pc, #184]	@ (8000e1c <main+0x114>)
 8000d64:	881b      	ldrh	r3, [r3, #0]
 8000d66:	0a1b      	lsrs	r3, r3, #8
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	4b2d      	ldr	r3, [pc, #180]	@ (8000e24 <main+0x11c>)
 8000d6e:	705a      	strb	r2, [r3, #1]
	  HAL_UART_Transmit_DMA(&hlpuart1, ADCBytes , sizeof(ADCBytes));
 8000d70:	2202      	movs	r2, #2
 8000d72:	492c      	ldr	r1, [pc, #176]	@ (8000e24 <main+0x11c>)
 8000d74:	482c      	ldr	r0, [pc, #176]	@ (8000e28 <main+0x120>)
 8000d76:	f005 fa49 	bl	800620c <HAL_UART_Transmit_DMA>
	  Degree_position = (ADC_RawRead*360.0)/4095.0;
 8000d7a:	4b28      	ldr	r3, [pc, #160]	@ (8000e1c <main+0x114>)
 8000d7c:	881b      	ldrh	r3, [r3, #0]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fba4 	bl	80004cc <__aeabi_i2d>
 8000d84:	f04f 0200 	mov.w	r2, #0
 8000d88:	4b28      	ldr	r3, [pc, #160]	@ (8000e2c <main+0x124>)
 8000d8a:	f7ff fc09 	bl	80005a0 <__aeabi_dmul>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	460b      	mov	r3, r1
 8000d92:	4610      	mov	r0, r2
 8000d94:	4619      	mov	r1, r3
 8000d96:	a31c      	add	r3, pc, #112	@ (adr r3, 8000e08 <main+0x100>)
 8000d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d9c:	f7ff fd2a 	bl	80007f4 <__aeabi_ddiv>
 8000da0:	4602      	mov	r2, r0
 8000da2:	460b      	mov	r3, r1
 8000da4:	4610      	mov	r0, r2
 8000da6:	4619      	mov	r1, r3
 8000da8:	f7ff fe0c 	bl	80009c4 <__aeabi_d2iz>
 8000dac:	4603      	mov	r3, r0
 8000dae:	4a20      	ldr	r2, [pc, #128]	@ (8000e30 <main+0x128>)
 8000db0:	6013      	str	r3, [r2, #0]
	  Rad_position = (ADC_RawRead*3.14)/4095.0;
 8000db2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e1c <main+0x114>)
 8000db4:	881b      	ldrh	r3, [r3, #0]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fb88 	bl	80004cc <__aeabi_i2d>
 8000dbc:	a314      	add	r3, pc, #80	@ (adr r3, 8000e10 <main+0x108>)
 8000dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc2:	f7ff fbed 	bl	80005a0 <__aeabi_dmul>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	460b      	mov	r3, r1
 8000dca:	4610      	mov	r0, r2
 8000dcc:	4619      	mov	r1, r3
 8000dce:	a30e      	add	r3, pc, #56	@ (adr r3, 8000e08 <main+0x100>)
 8000dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd4:	f7ff fd0e 	bl	80007f4 <__aeabi_ddiv>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4610      	mov	r0, r2
 8000dde:	4619      	mov	r1, r3
 8000de0:	f7ff fdf0 	bl	80009c4 <__aeabi_d2iz>
 8000de4:	4603      	mov	r3, r0
 8000de6:	4a13      	ldr	r2, [pc, #76]	@ (8000e34 <main+0x12c>)
 8000de8:	6013      	str	r3, [r2, #0]
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM1);
 8000dea:	4b13      	ldr	r3, [pc, #76]	@ (8000e38 <main+0x130>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	4b0c      	ldr	r3, [pc, #48]	@ (8000e20 <main+0x118>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM2);
 8000df4:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <main+0x134>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b09      	ldr	r3, [pc, #36]	@ (8000e20 <main+0x118>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	639a      	str	r2, [r3, #56]	@ 0x38
	  ADCBytes[0] = (uint8_t)(ADC_RawRead & 0xFF); // Lower byte
 8000dfe:	bf00      	nop
 8000e00:	e7aa      	b.n	8000d58 <main+0x50>
 8000e02:	bf00      	nop
 8000e04:	f3af 8000 	nop.w
 8000e08:	00000000 	.word	0x00000000
 8000e0c:	40affe00 	.word	0x40affe00
 8000e10:	51eb851f 	.word	0x51eb851f
 8000e14:	40091eb8 	.word	0x40091eb8
 8000e18:	20000028 	.word	0x20000028
 8000e1c:	20000294 	.word	0x20000294
 8000e20:	20000248 	.word	0x20000248
 8000e24:	20000298 	.word	0x20000298
 8000e28:	200000f4 	.word	0x200000f4
 8000e2c:	40768000 	.word	0x40768000
 8000e30:	2000029c 	.word	0x2000029c
 8000e34:	200002a0 	.word	0x200002a0
 8000e38:	200002a4 	.word	0x200002a4
 8000e3c:	200002a8 	.word	0x200002a8

08000e40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b094      	sub	sp, #80	@ 0x50
 8000e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e46:	f107 0318 	add.w	r3, r7, #24
 8000e4a:	2238      	movs	r2, #56	@ 0x38
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f006 fb32 	bl	80074b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e62:	2000      	movs	r0, #0
 8000e64:	f002 ff22 	bl	8003cac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e70:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e72:	2340      	movs	r3, #64	@ 0x40
 8000e74:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e76:	2302      	movs	r3, #2
 8000e78:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000e7e:	2304      	movs	r3, #4
 8000e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000e82:	2355      	movs	r3, #85	@ 0x55
 8000e84:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e86:	2302      	movs	r3, #2
 8000e88:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e92:	f107 0318 	add.w	r3, r7, #24
 8000e96:	4618      	mov	r0, r3
 8000e98:	f002 ffbc 	bl	8003e14 <HAL_RCC_OscConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ea2:	f000 fa83 	bl	80013ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea6:	230f      	movs	r3, #15
 8000ea8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	2104      	movs	r1, #4
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f003 faba 	bl	8004438 <HAL_RCC_ClockConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000eca:	f000 fa6f 	bl	80013ac <Error_Handler>
  }
}
 8000ece:	bf00      	nop
 8000ed0:	3750      	adds	r7, #80	@ 0x50
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08c      	sub	sp, #48	@ 0x30
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ede:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2220      	movs	r2, #32
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f006 fae1 	bl	80074b8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ef6:	4b32      	ldr	r3, [pc, #200]	@ (8000fc0 <MX_ADC1_Init+0xe8>)
 8000ef8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000efc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000efe:	4b30      	ldr	r3, [pc, #192]	@ (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f00:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f04:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f06:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f12:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f18:	4b29      	ldr	r3, [pc, #164]	@ (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f1e:	4b28      	ldr	r3, [pc, #160]	@ (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f20:	2204      	movs	r2, #4
 8000f22:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f24:	4b26      	ldr	r3, [pc, #152]	@ (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f2a:	4b25      	ldr	r3, [pc, #148]	@ (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f30:	4b23      	ldr	r3, [pc, #140]	@ (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f36:	4b22      	ldr	r3, [pc, #136]	@ (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f3e:	4b20      	ldr	r3, [pc, #128]	@ (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f44:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f52:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f58:	4b19      	ldr	r3, [pc, #100]	@ (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f60:	4817      	ldr	r0, [pc, #92]	@ (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f62:	f000 ff21 	bl	8001da8 <HAL_ADC_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f6c:	f000 fa1e 	bl	80013ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4811      	ldr	r0, [pc, #68]	@ (8000fc0 <MX_ADC1_Init+0xe8>)
 8000f7c:	f002 f840 	bl	8003000 <HAL_ADCEx_MultiModeConfigChannel>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f86:	f000 fa11 	bl	80013ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <MX_ADC1_Init+0xec>)
 8000f8c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f8e:	2306      	movs	r3, #6
 8000f90:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000f92:	2307      	movs	r3, #7
 8000f94:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f96:	237f      	movs	r3, #127	@ 0x7f
 8000f98:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4806      	ldr	r0, [pc, #24]	@ (8000fc0 <MX_ADC1_Init+0xe8>)
 8000fa8:	f001 f9ac 	bl	8002304 <HAL_ADC_ConfigChannel>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000fb2:	f000 f9fb 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	3730      	adds	r7, #48	@ 0x30
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000028 	.word	0x20000028
 8000fc4:	04300002 	.word	0x04300002

08000fc8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000fcc:	4b21      	ldr	r3, [pc, #132]	@ (8001054 <MX_LPUART1_UART_Init+0x8c>)
 8000fce:	4a22      	ldr	r2, [pc, #136]	@ (8001058 <MX_LPUART1_UART_Init+0x90>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000fd2:	4b20      	ldr	r3, [pc, #128]	@ (8001054 <MX_LPUART1_UART_Init+0x8c>)
 8000fd4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fd8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fda:	4b1e      	ldr	r3, [pc, #120]	@ (8001054 <MX_LPUART1_UART_Init+0x8c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8001054 <MX_LPUART1_UART_Init+0x8c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8001054 <MX_LPUART1_UART_Init+0x8c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000fec:	4b19      	ldr	r3, [pc, #100]	@ (8001054 <MX_LPUART1_UART_Init+0x8c>)
 8000fee:	220c      	movs	r2, #12
 8000ff0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff2:	4b18      	ldr	r3, [pc, #96]	@ (8001054 <MX_LPUART1_UART_Init+0x8c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ff8:	4b16      	ldr	r3, [pc, #88]	@ (8001054 <MX_LPUART1_UART_Init+0x8c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ffe:	4b15      	ldr	r3, [pc, #84]	@ (8001054 <MX_LPUART1_UART_Init+0x8c>)
 8001000:	2200      	movs	r2, #0
 8001002:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001004:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <MX_LPUART1_UART_Init+0x8c>)
 8001006:	2200      	movs	r2, #0
 8001008:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800100a:	4812      	ldr	r0, [pc, #72]	@ (8001054 <MX_LPUART1_UART_Init+0x8c>)
 800100c:	f005 f8ae 	bl	800616c <HAL_UART_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001016:	f000 f9c9 	bl	80013ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800101a:	2100      	movs	r1, #0
 800101c:	480d      	ldr	r0, [pc, #52]	@ (8001054 <MX_LPUART1_UART_Init+0x8c>)
 800101e:	f006 f981 	bl	8007324 <HAL_UARTEx_SetTxFifoThreshold>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001028:	f000 f9c0 	bl	80013ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800102c:	2100      	movs	r1, #0
 800102e:	4809      	ldr	r0, [pc, #36]	@ (8001054 <MX_LPUART1_UART_Init+0x8c>)
 8001030:	f006 f9b6 	bl	80073a0 <HAL_UARTEx_SetRxFifoThreshold>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800103a:	f000 f9b7 	bl	80013ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	@ (8001054 <MX_LPUART1_UART_Init+0x8c>)
 8001040:	f006 f937 	bl	80072b2 <HAL_UARTEx_DisableFifoMode>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800104a:	f000 f9af 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200000f4 	.word	0x200000f4
 8001058:	40008000 	.word	0x40008000

0800105c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b09c      	sub	sp, #112	@ 0x70
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001062:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001070:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800107c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
 800108c:	615a      	str	r2, [r3, #20]
 800108e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	2234      	movs	r2, #52	@ 0x34
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f006 fa0e 	bl	80074b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800109c:	4b4b      	ldr	r3, [pc, #300]	@ (80011cc <MX_TIM1_Init+0x170>)
 800109e:	4a4c      	ldr	r2, [pc, #304]	@ (80011d0 <MX_TIM1_Init+0x174>)
 80010a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 80010a2:	4b4a      	ldr	r3, [pc, #296]	@ (80011cc <MX_TIM1_Init+0x170>)
 80010a4:	2210      	movs	r2, #16
 80010a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a8:	4b48      	ldr	r3, [pc, #288]	@ (80011cc <MX_TIM1_Init+0x170>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80010ae:	4b47      	ldr	r3, [pc, #284]	@ (80011cc <MX_TIM1_Init+0x170>)
 80010b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b6:	4b45      	ldr	r3, [pc, #276]	@ (80011cc <MX_TIM1_Init+0x170>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010bc:	4b43      	ldr	r3, [pc, #268]	@ (80011cc <MX_TIM1_Init+0x170>)
 80010be:	2200      	movs	r2, #0
 80010c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c2:	4b42      	ldr	r3, [pc, #264]	@ (80011cc <MX_TIM1_Init+0x170>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010c8:	4840      	ldr	r0, [pc, #256]	@ (80011cc <MX_TIM1_Init+0x170>)
 80010ca:	f003 fe1f 	bl	8004d0c <HAL_TIM_Base_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80010d4:	f000 f96a 	bl	80013ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010dc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010de:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80010e2:	4619      	mov	r1, r3
 80010e4:	4839      	ldr	r0, [pc, #228]	@ (80011cc <MX_TIM1_Init+0x170>)
 80010e6:	f004 f961 	bl	80053ac <HAL_TIM_ConfigClockSource>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80010f0:	f000 f95c 	bl	80013ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010f4:	4835      	ldr	r0, [pc, #212]	@ (80011cc <MX_TIM1_Init+0x170>)
 80010f6:	f003 fed1 	bl	8004e9c <HAL_TIM_PWM_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001100:	f000 f954 	bl	80013ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001104:	2300      	movs	r3, #0
 8001106:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001108:	2300      	movs	r3, #0
 800110a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110c:	2300      	movs	r3, #0
 800110e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001110:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001114:	4619      	mov	r1, r3
 8001116:	482d      	ldr	r0, [pc, #180]	@ (80011cc <MX_TIM1_Init+0x170>)
 8001118:	f004 fefe 	bl	8005f18 <HAL_TIMEx_MasterConfigSynchronization>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001122:	f000 f943 	bl	80013ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001126:	2360      	movs	r3, #96	@ 0x60
 8001128:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800112e:	2300      	movs	r3, #0
 8001130:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001132:	2300      	movs	r3, #0
 8001134:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800113a:	2300      	movs	r3, #0
 800113c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800113e:	2300      	movs	r3, #0
 8001140:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001142:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001146:	2200      	movs	r2, #0
 8001148:	4619      	mov	r1, r3
 800114a:	4820      	ldr	r0, [pc, #128]	@ (80011cc <MX_TIM1_Init+0x170>)
 800114c:	f004 f81a 	bl	8005184 <HAL_TIM_PWM_ConfigChannel>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001156:	f000 f929 	bl	80013ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800115a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800115e:	2204      	movs	r2, #4
 8001160:	4619      	mov	r1, r3
 8001162:	481a      	ldr	r0, [pc, #104]	@ (80011cc <MX_TIM1_Init+0x170>)
 8001164:	f004 f80e 	bl	8005184 <HAL_TIM_PWM_ConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800116e:	f000 f91d 	bl	80013ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001186:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800118a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001190:	2300      	movs	r3, #0
 8001192:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001198:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800119c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80011a2:	2300      	movs	r3, #0
 80011a4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	4619      	mov	r1, r3
 80011ae:	4807      	ldr	r0, [pc, #28]	@ (80011cc <MX_TIM1_Init+0x170>)
 80011b0:	f004 ff48 	bl	8006044 <HAL_TIMEx_ConfigBreakDeadTime>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 80011ba:	f000 f8f7 	bl	80013ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011be:	4803      	ldr	r0, [pc, #12]	@ (80011cc <MX_TIM1_Init+0x170>)
 80011c0:	f000 fa74 	bl	80016ac <HAL_TIM_MspPostInit>

}
 80011c4:	bf00      	nop
 80011c6:	3770      	adds	r7, #112	@ 0x70
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000248 	.word	0x20000248
 80011d0:	40012c00 	.word	0x40012c00

080011d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011da:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <MX_DMA_Init+0x70>)
 80011dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011de:	4a19      	ldr	r2, [pc, #100]	@ (8001244 <MX_DMA_Init+0x70>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	6493      	str	r3, [r2, #72]	@ 0x48
 80011e6:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <MX_DMA_Init+0x70>)
 80011e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011f2:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <MX_DMA_Init+0x70>)
 80011f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011f6:	4a13      	ldr	r2, [pc, #76]	@ (8001244 <MX_DMA_Init+0x70>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6493      	str	r3, [r2, #72]	@ 0x48
 80011fe:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <MX_DMA_Init+0x70>)
 8001200:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	200b      	movs	r0, #11
 8001210:	f002 f8d9 	bl	80033c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001214:	200b      	movs	r0, #11
 8001216:	f002 f8f0 	bl	80033fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2100      	movs	r1, #0
 800121e:	200c      	movs	r0, #12
 8001220:	f002 f8d1 	bl	80033c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001224:	200c      	movs	r0, #12
 8001226:	f002 f8e8 	bl	80033fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	200d      	movs	r0, #13
 8001230:	f002 f8c9 	bl	80033c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001234:	200d      	movs	r0, #13
 8001236:	f002 f8e0 	bl	80033fa <HAL_NVIC_EnableIRQ>

}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40021000 	.word	0x40021000

08001248 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	@ 0x28
 800124c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	2200      	movs	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
 8001256:	605a      	str	r2, [r3, #4]
 8001258:	609a      	str	r2, [r3, #8]
 800125a:	60da      	str	r2, [r3, #12]
 800125c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800125e:	4b2f      	ldr	r3, [pc, #188]	@ (800131c <MX_GPIO_Init+0xd4>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001262:	4a2e      	ldr	r2, [pc, #184]	@ (800131c <MX_GPIO_Init+0xd4>)
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800126a:	4b2c      	ldr	r3, [pc, #176]	@ (800131c <MX_GPIO_Init+0xd4>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001276:	4b29      	ldr	r3, [pc, #164]	@ (800131c <MX_GPIO_Init+0xd4>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127a:	4a28      	ldr	r2, [pc, #160]	@ (800131c <MX_GPIO_Init+0xd4>)
 800127c:	f043 0320 	orr.w	r3, r3, #32
 8001280:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001282:	4b26      	ldr	r3, [pc, #152]	@ (800131c <MX_GPIO_Init+0xd4>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001286:	f003 0320 	and.w	r3, r3, #32
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	4b23      	ldr	r3, [pc, #140]	@ (800131c <MX_GPIO_Init+0xd4>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001292:	4a22      	ldr	r2, [pc, #136]	@ (800131c <MX_GPIO_Init+0xd4>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800129a:	4b20      	ldr	r3, [pc, #128]	@ (800131c <MX_GPIO_Init+0xd4>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	4b1d      	ldr	r3, [pc, #116]	@ (800131c <MX_GPIO_Init+0xd4>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012aa:	4a1c      	ldr	r2, [pc, #112]	@ (800131c <MX_GPIO_Init+0xd4>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b2:	4b1a      	ldr	r3, [pc, #104]	@ (800131c <MX_GPIO_Init+0xd4>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	2120      	movs	r1, #32
 80012c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012c6:	f002 fca7 	bl	8003c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012d0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4619      	mov	r1, r3
 80012e0:	480f      	ldr	r0, [pc, #60]	@ (8001320 <MX_GPIO_Init+0xd8>)
 80012e2:	f002 fb17 	bl	8003914 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012e6:	2320      	movs	r3, #32
 80012e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012f6:	f107 0314 	add.w	r3, r7, #20
 80012fa:	4619      	mov	r1, r3
 80012fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001300:	f002 fb08 	bl	8003914 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001304:	2200      	movs	r2, #0
 8001306:	2100      	movs	r1, #0
 8001308:	2028      	movs	r0, #40	@ 0x28
 800130a:	f002 f85c 	bl	80033c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800130e:	2028      	movs	r0, #40	@ 0x28
 8001310:	f002 f873 	bl	80033fa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001314:	bf00      	nop
 8001316:	3728      	adds	r7, #40	@ 0x28
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40021000 	.word	0x40021000
 8001320:	48000800 	.word	0x48000800

08001324 <UARTDMAConfig>:

/* USER CODE BEGIN 4 */
void UARTDMAConfig()
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&hlpuart1, ADCBytes, sizeof(ADCBytes));
 8001328:	2202      	movs	r2, #2
 800132a:	4903      	ldr	r1, [pc, #12]	@ (8001338 <UARTDMAConfig+0x14>)
 800132c:	4803      	ldr	r0, [pc, #12]	@ (800133c <UARTDMAConfig+0x18>)
 800132e:	f004 ffed 	bl	800630c <HAL_UART_Receive_DMA>
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000298 	.word	0x20000298
 800133c:	200000f4 	.word	0x200000f4

08001340 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	if(huart == &hlpuart1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a08      	ldr	r2, [pc, #32]	@ (800136c <HAL_UART_RxCpltCallback+0x2c>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d109      	bne.n	8001364 <HAL_UART_RxCpltCallback+0x24>
	{
		HAL_UART_Transmit_DMA(&hlpuart1, ADCBytes, strlen((char*) ADCBytes));
 8001350:	4807      	ldr	r0, [pc, #28]	@ (8001370 <HAL_UART_RxCpltCallback+0x30>)
 8001352:	f7fe ff61 	bl	8000218 <strlen>
 8001356:	4603      	mov	r3, r0
 8001358:	b29b      	uxth	r3, r3
 800135a:	461a      	mov	r2, r3
 800135c:	4904      	ldr	r1, [pc, #16]	@ (8001370 <HAL_UART_RxCpltCallback+0x30>)
 800135e:	4803      	ldr	r0, [pc, #12]	@ (800136c <HAL_UART_RxCpltCallback+0x2c>)
 8001360:	f004 ff54 	bl	800620c <HAL_UART_Transmit_DMA>
	}
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200000f4 	.word	0x200000f4
 8001370:	20000298 	.word	0x20000298

08001374 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	80fb      	strh	r3, [r7, #6]

    if(GPIO_Pin == GPIO_PIN_13){
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001384:	d109      	bne.n	800139a <HAL_GPIO_EXTI_Callback+0x26>
        HAL_UART_Transmit_DMA(&hlpuart1, ADCBytes, 10);
 8001386:	220a      	movs	r2, #10
 8001388:	4906      	ldr	r1, [pc, #24]	@ (80013a4 <HAL_GPIO_EXTI_Callback+0x30>)
 800138a:	4807      	ldr	r0, [pc, #28]	@ (80013a8 <HAL_GPIO_EXTI_Callback+0x34>)
 800138c:	f004 ff3e 	bl	800620c <HAL_UART_Transmit_DMA>
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001390:	2120      	movs	r1, #32
 8001392:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001396:	f002 fc57 	bl	8003c48 <HAL_GPIO_TogglePin>
    }
}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000298 	.word	0x20000298
 80013a8:	200000f4 	.word	0x200000f4

080013ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b0:	b672      	cpsid	i
}
 80013b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <Error_Handler+0x8>

080013b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <HAL_MspInit+0x44>)
 80013c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c2:	4a0e      	ldr	r2, [pc, #56]	@ (80013fc <HAL_MspInit+0x44>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80013ca:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <HAL_MspInit+0x44>)
 80013cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <HAL_MspInit+0x44>)
 80013d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013da:	4a08      	ldr	r2, [pc, #32]	@ (80013fc <HAL_MspInit+0x44>)
 80013dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80013e2:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <HAL_MspInit+0x44>)
 80013e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80013ee:	f002 fd01 	bl	8003df4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40021000 	.word	0x40021000

08001400 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b09e      	sub	sp, #120	@ 0x78
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	2254      	movs	r2, #84	@ 0x54
 800141e:	2100      	movs	r1, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f006 f849 	bl	80074b8 <memset>
  if(hadc->Instance==ADC1)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800142e:	d15f      	bne.n	80014f0 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001430:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001434:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001436:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800143a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800143c:	f107 0310 	add.w	r3, r7, #16
 8001440:	4618      	mov	r0, r3
 8001442:	f003 fa15 	bl	8004870 <HAL_RCCEx_PeriphCLKConfig>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800144c:	f7ff ffae 	bl	80013ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001450:	4b29      	ldr	r3, [pc, #164]	@ (80014f8 <HAL_ADC_MspInit+0xf8>)
 8001452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001454:	4a28      	ldr	r2, [pc, #160]	@ (80014f8 <HAL_ADC_MspInit+0xf8>)
 8001456:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800145a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800145c:	4b26      	ldr	r3, [pc, #152]	@ (80014f8 <HAL_ADC_MspInit+0xf8>)
 800145e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001460:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001468:	4b23      	ldr	r3, [pc, #140]	@ (80014f8 <HAL_ADC_MspInit+0xf8>)
 800146a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146c:	4a22      	ldr	r2, [pc, #136]	@ (80014f8 <HAL_ADC_MspInit+0xf8>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001474:	4b20      	ldr	r3, [pc, #128]	@ (80014f8 <HAL_ADC_MspInit+0xf8>)
 8001476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001480:	2301      	movs	r3, #1
 8001482:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001484:	2303      	movs	r3, #3
 8001486:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001490:	4619      	mov	r1, r3
 8001492:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001496:	f002 fa3d 	bl	8003914 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800149a:	4b18      	ldr	r3, [pc, #96]	@ (80014fc <HAL_ADC_MspInit+0xfc>)
 800149c:	4a18      	ldr	r2, [pc, #96]	@ (8001500 <HAL_ADC_MspInit+0x100>)
 800149e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80014a0:	4b16      	ldr	r3, [pc, #88]	@ (80014fc <HAL_ADC_MspInit+0xfc>)
 80014a2:	2205      	movs	r2, #5
 80014a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014a6:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <HAL_ADC_MspInit+0xfc>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ac:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <HAL_ADC_MspInit+0xfc>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014b2:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <HAL_ADC_MspInit+0xfc>)
 80014b4:	2280      	movs	r2, #128	@ 0x80
 80014b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014b8:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <HAL_ADC_MspInit+0xfc>)
 80014ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014c0:	4b0e      	ldr	r3, [pc, #56]	@ (80014fc <HAL_ADC_MspInit+0xfc>)
 80014c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014c6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <HAL_ADC_MspInit+0xfc>)
 80014ca:	2220      	movs	r2, #32
 80014cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014ce:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <HAL_ADC_MspInit+0xfc>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014d4:	4809      	ldr	r0, [pc, #36]	@ (80014fc <HAL_ADC_MspInit+0xfc>)
 80014d6:	f001 ffab 	bl	8003430 <HAL_DMA_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80014e0:	f7ff ff64 	bl	80013ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a05      	ldr	r2, [pc, #20]	@ (80014fc <HAL_ADC_MspInit+0xfc>)
 80014e8:	655a      	str	r2, [r3, #84]	@ 0x54
 80014ea:	4a04      	ldr	r2, [pc, #16]	@ (80014fc <HAL_ADC_MspInit+0xfc>)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014f0:	bf00      	nop
 80014f2:	3778      	adds	r7, #120	@ 0x78
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40021000 	.word	0x40021000
 80014fc:	20000094 	.word	0x20000094
 8001500:	40020008 	.word	0x40020008

08001504 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b09e      	sub	sp, #120	@ 0x78
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800151c:	f107 0310 	add.w	r3, r7, #16
 8001520:	2254      	movs	r2, #84	@ 0x54
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f005 ffc7 	bl	80074b8 <memset>
  if(huart->Instance==LPUART1)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a49      	ldr	r2, [pc, #292]	@ (8001654 <HAL_UART_MspInit+0x150>)
 8001530:	4293      	cmp	r3, r2
 8001532:	f040 808a 	bne.w	800164a <HAL_UART_MspInit+0x146>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001536:	2320      	movs	r3, #32
 8001538:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800153a:	2300      	movs	r3, #0
 800153c:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800153e:	f107 0310 	add.w	r3, r7, #16
 8001542:	4618      	mov	r0, r3
 8001544:	f003 f994 	bl	8004870 <HAL_RCCEx_PeriphCLKConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800154e:	f7ff ff2d 	bl	80013ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001552:	4b41      	ldr	r3, [pc, #260]	@ (8001658 <HAL_UART_MspInit+0x154>)
 8001554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001556:	4a40      	ldr	r2, [pc, #256]	@ (8001658 <HAL_UART_MspInit+0x154>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800155e:	4b3e      	ldr	r3, [pc, #248]	@ (8001658 <HAL_UART_MspInit+0x154>)
 8001560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	4b3b      	ldr	r3, [pc, #236]	@ (8001658 <HAL_UART_MspInit+0x154>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156e:	4a3a      	ldr	r2, [pc, #232]	@ (8001658 <HAL_UART_MspInit+0x154>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001576:	4b38      	ldr	r3, [pc, #224]	@ (8001658 <HAL_UART_MspInit+0x154>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001582:	230c      	movs	r3, #12
 8001584:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001592:	230c      	movs	r3, #12
 8001594:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001596:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800159a:	4619      	mov	r1, r3
 800159c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015a0:	f002 f9b8 	bl	8003914 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 80015a4:	4b2d      	ldr	r3, [pc, #180]	@ (800165c <HAL_UART_MspInit+0x158>)
 80015a6:	4a2e      	ldr	r2, [pc, #184]	@ (8001660 <HAL_UART_MspInit+0x15c>)
 80015a8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80015aa:	4b2c      	ldr	r3, [pc, #176]	@ (800165c <HAL_UART_MspInit+0x158>)
 80015ac:	2222      	movs	r2, #34	@ 0x22
 80015ae:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015b0:	4b2a      	ldr	r3, [pc, #168]	@ (800165c <HAL_UART_MspInit+0x158>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015b6:	4b29      	ldr	r3, [pc, #164]	@ (800165c <HAL_UART_MspInit+0x158>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015bc:	4b27      	ldr	r3, [pc, #156]	@ (800165c <HAL_UART_MspInit+0x158>)
 80015be:	2280      	movs	r2, #128	@ 0x80
 80015c0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015c2:	4b26      	ldr	r3, [pc, #152]	@ (800165c <HAL_UART_MspInit+0x158>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015c8:	4b24      	ldr	r3, [pc, #144]	@ (800165c <HAL_UART_MspInit+0x158>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80015ce:	4b23      	ldr	r3, [pc, #140]	@ (800165c <HAL_UART_MspInit+0x158>)
 80015d0:	2220      	movs	r2, #32
 80015d2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015d4:	4b21      	ldr	r3, [pc, #132]	@ (800165c <HAL_UART_MspInit+0x158>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80015da:	4820      	ldr	r0, [pc, #128]	@ (800165c <HAL_UART_MspInit+0x158>)
 80015dc:	f001 ff28 	bl	8003430 <HAL_DMA_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80015e6:	f7ff fee1 	bl	80013ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a1b      	ldr	r2, [pc, #108]	@ (800165c <HAL_UART_MspInit+0x158>)
 80015ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80015f2:	4a1a      	ldr	r2, [pc, #104]	@ (800165c <HAL_UART_MspInit+0x158>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel3;
 80015f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001664 <HAL_UART_MspInit+0x160>)
 80015fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001668 <HAL_UART_MspInit+0x164>)
 80015fc:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80015fe:	4b19      	ldr	r3, [pc, #100]	@ (8001664 <HAL_UART_MspInit+0x160>)
 8001600:	2223      	movs	r2, #35	@ 0x23
 8001602:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001604:	4b17      	ldr	r3, [pc, #92]	@ (8001664 <HAL_UART_MspInit+0x160>)
 8001606:	2210      	movs	r2, #16
 8001608:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800160a:	4b16      	ldr	r3, [pc, #88]	@ (8001664 <HAL_UART_MspInit+0x160>)
 800160c:	2200      	movs	r2, #0
 800160e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001610:	4b14      	ldr	r3, [pc, #80]	@ (8001664 <HAL_UART_MspInit+0x160>)
 8001612:	2280      	movs	r2, #128	@ 0x80
 8001614:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001616:	4b13      	ldr	r3, [pc, #76]	@ (8001664 <HAL_UART_MspInit+0x160>)
 8001618:	2200      	movs	r2, #0
 800161a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800161c:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <HAL_UART_MspInit+0x160>)
 800161e:	2200      	movs	r2, #0
 8001620:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8001622:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <HAL_UART_MspInit+0x160>)
 8001624:	2200      	movs	r2, #0
 8001626:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001628:	4b0e      	ldr	r3, [pc, #56]	@ (8001664 <HAL_UART_MspInit+0x160>)
 800162a:	2200      	movs	r2, #0
 800162c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800162e:	480d      	ldr	r0, [pc, #52]	@ (8001664 <HAL_UART_MspInit+0x160>)
 8001630:	f001 fefe 	bl	8003430 <HAL_DMA_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800163a:	f7ff feb7 	bl	80013ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a08      	ldr	r2, [pc, #32]	@ (8001664 <HAL_UART_MspInit+0x160>)
 8001642:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001644:	4a07      	ldr	r2, [pc, #28]	@ (8001664 <HAL_UART_MspInit+0x160>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800164a:	bf00      	nop
 800164c:	3778      	adds	r7, #120	@ 0x78
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40008000 	.word	0x40008000
 8001658:	40021000 	.word	0x40021000
 800165c:	20000188 	.word	0x20000188
 8001660:	4002001c 	.word	0x4002001c
 8001664:	200001e8 	.word	0x200001e8
 8001668:	40020030 	.word	0x40020030

0800166c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0a      	ldr	r2, [pc, #40]	@ (80016a4 <HAL_TIM_Base_MspInit+0x38>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d10b      	bne.n	8001696 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800167e:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <HAL_TIM_Base_MspInit+0x3c>)
 8001680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001682:	4a09      	ldr	r2, [pc, #36]	@ (80016a8 <HAL_TIM_Base_MspInit+0x3c>)
 8001684:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001688:	6613      	str	r3, [r2, #96]	@ 0x60
 800168a:	4b07      	ldr	r3, [pc, #28]	@ (80016a8 <HAL_TIM_Base_MspInit+0x3c>)
 800168c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800168e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001696:	bf00      	nop
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40012c00 	.word	0x40012c00
 80016a8:	40021000 	.word	0x40021000

080016ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a11      	ldr	r2, [pc, #68]	@ (8001710 <HAL_TIM_MspPostInit+0x64>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d11b      	bne.n	8001706 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ce:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <HAL_TIM_MspPostInit+0x68>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d2:	4a10      	ldr	r2, [pc, #64]	@ (8001714 <HAL_TIM_MspPostInit+0x68>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016da:	4b0e      	ldr	r3, [pc, #56]	@ (8001714 <HAL_TIM_MspPostInit+0x68>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016e6:	2303      	movs	r3, #3
 80016e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80016f6:	2302      	movs	r3, #2
 80016f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fa:	f107 030c 	add.w	r3, r7, #12
 80016fe:	4619      	mov	r1, r3
 8001700:	4805      	ldr	r0, [pc, #20]	@ (8001718 <HAL_TIM_MspPostInit+0x6c>)
 8001702:	f002 f907 	bl	8003914 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001706:	bf00      	nop
 8001708:	3720      	adds	r7, #32
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40012c00 	.word	0x40012c00
 8001714:	40021000 	.word	0x40021000
 8001718:	48000800 	.word	0x48000800

0800171c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <NMI_Handler+0x4>

08001724 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <HardFault_Handler+0x4>

0800172c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <MemManage_Handler+0x4>

08001734 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <BusFault_Handler+0x4>

0800173c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <UsageFault_Handler+0x4>

08001744 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001772:	f000 f8b7 	bl	80018e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001780:	4802      	ldr	r0, [pc, #8]	@ (800178c <DMA1_Channel1_IRQHandler+0x10>)
 8001782:	f001 ff78 	bl	8003676 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000094 	.word	0x20000094

08001790 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001794:	4802      	ldr	r0, [pc, #8]	@ (80017a0 <DMA1_Channel2_IRQHandler+0x10>)
 8001796:	f001 ff6e 	bl	8003676 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000188 	.word	0x20000188

080017a4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80017a8:	4802      	ldr	r0, [pc, #8]	@ (80017b4 <DMA1_Channel3_IRQHandler+0x10>)
 80017aa:	f001 ff64 	bl	8003676 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200001e8 	.word	0x200001e8

080017b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80017bc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80017c0:	f002 fa5c 	bl	8003c7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <SystemInit+0x20>)
 80017ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017d2:	4a05      	ldr	r2, [pc, #20]	@ (80017e8 <SystemInit+0x20>)
 80017d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017ec:	480d      	ldr	r0, [pc, #52]	@ (8001824 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017f0:	f7ff ffea 	bl	80017c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f4:	480c      	ldr	r0, [pc, #48]	@ (8001828 <LoopForever+0x6>)
  ldr r1, =_edata
 80017f6:	490d      	ldr	r1, [pc, #52]	@ (800182c <LoopForever+0xa>)
  ldr r2, =_sidata
 80017f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001830 <LoopForever+0xe>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80017fc:	e002      	b.n	8001804 <LoopCopyDataInit>

080017fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001802:	3304      	adds	r3, #4

08001804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001808:	d3f9      	bcc.n	80017fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180a:	4a0a      	ldr	r2, [pc, #40]	@ (8001834 <LoopForever+0x12>)
  ldr r4, =_ebss
 800180c:	4c0a      	ldr	r4, [pc, #40]	@ (8001838 <LoopForever+0x16>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001810:	e001      	b.n	8001816 <LoopFillZerobss>

08001812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001814:	3204      	adds	r2, #4

08001816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001818:	d3fb      	bcc.n	8001812 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800181a:	f005 fe55 	bl	80074c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800181e:	f7ff fa73 	bl	8000d08 <main>

08001822 <LoopForever>:

LoopForever:
    b LoopForever
 8001822:	e7fe      	b.n	8001822 <LoopForever>
  ldr   r0, =_estack
 8001824:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800182c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001830:	08007578 	.word	0x08007578
  ldr r2, =_sbss
 8001834:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001838:	200002b0 	.word	0x200002b0

0800183c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800183c:	e7fe      	b.n	800183c <ADC1_2_IRQHandler>

0800183e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001848:	2003      	movs	r0, #3
 800184a:	f001 fdb1 	bl	80033b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800184e:	2000      	movs	r0, #0
 8001850:	f000 f80e 	bl	8001870 <HAL_InitTick>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d002      	beq.n	8001860 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	71fb      	strb	r3, [r7, #7]
 800185e:	e001      	b.n	8001864 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001860:	f7ff fdaa 	bl	80013b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001864:	79fb      	ldrb	r3, [r7, #7]

}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001878:	2300      	movs	r3, #0
 800187a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800187c:	4b16      	ldr	r3, [pc, #88]	@ (80018d8 <HAL_InitTick+0x68>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d022      	beq.n	80018ca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001884:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <HAL_InitTick+0x6c>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b13      	ldr	r3, [pc, #76]	@ (80018d8 <HAL_InitTick+0x68>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001890:	fbb1 f3f3 	udiv	r3, r1, r3
 8001894:	fbb2 f3f3 	udiv	r3, r2, r3
 8001898:	4618      	mov	r0, r3
 800189a:	f001 fdbc 	bl	8003416 <HAL_SYSTICK_Config>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10f      	bne.n	80018c4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b0f      	cmp	r3, #15
 80018a8:	d809      	bhi.n	80018be <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018aa:	2200      	movs	r2, #0
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	f04f 30ff 	mov.w	r0, #4294967295
 80018b2:	f001 fd88 	bl	80033c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018b6:	4a0a      	ldr	r2, [pc, #40]	@ (80018e0 <HAL_InitTick+0x70>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	e007      	b.n	80018ce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	73fb      	strb	r3, [r7, #15]
 80018c2:	e004      	b.n	80018ce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	73fb      	strb	r3, [r7, #15]
 80018c8:	e001      	b.n	80018ce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000008 	.word	0x20000008
 80018dc:	20000000 	.word	0x20000000
 80018e0:	20000004 	.word	0x20000004

080018e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e8:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <HAL_IncTick+0x1c>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <HAL_IncTick+0x20>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4413      	add	r3, r2
 80018f2:	4a03      	ldr	r2, [pc, #12]	@ (8001900 <HAL_IncTick+0x1c>)
 80018f4:	6013      	str	r3, [r2, #0]
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	200002ac 	.word	0x200002ac
 8001904:	20000008 	.word	0x20000008

08001908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return uwTick;
 800190c:	4b03      	ldr	r3, [pc, #12]	@ (800191c <HAL_GetTick+0x14>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	200002ac 	.word	0x200002ac

08001920 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	431a      	orrs	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	609a      	str	r2, [r3, #8]
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	609a      	str	r2, [r3, #8]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001988:	b480      	push	{r7}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
 8001994:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	3360      	adds	r3, #96	@ 0x60
 800199a:	461a      	mov	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b08      	ldr	r3, [pc, #32]	@ (80019cc <LL_ADC_SetOffset+0x44>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	4313      	orrs	r3, r2
 80019b8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019c0:	bf00      	nop
 80019c2:	371c      	adds	r7, #28
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	03fff000 	.word	0x03fff000

080019d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3360      	adds	r3, #96	@ 0x60
 80019de:	461a      	mov	r2, r3
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	3360      	adds	r3, #96	@ 0x60
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	431a      	orrs	r2, r3
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a26:	bf00      	nop
 8001a28:	371c      	adds	r7, #28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b087      	sub	sp, #28
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	60f8      	str	r0, [r7, #12]
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	3360      	adds	r3, #96	@ 0x60
 8001a42:	461a      	mov	r2, r3
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	431a      	orrs	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001a5c:	bf00      	nop
 8001a5e:	371c      	adds	r7, #28
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	3360      	adds	r3, #96	@ 0x60
 8001a78:	461a      	mov	r2, r3
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001a92:	bf00      	nop
 8001a94:	371c      	adds	r7, #28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	615a      	str	r2, [r3, #20]
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e000      	b.n	8001ade <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b087      	sub	sp, #28
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	3330      	adds	r3, #48	@ 0x30
 8001afa:	461a      	mov	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	0a1b      	lsrs	r3, r3, #8
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	f003 030c 	and.w	r3, r3, #12
 8001b06:	4413      	add	r3, r2
 8001b08:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	f003 031f 	and.w	r3, r3, #31
 8001b14:	211f      	movs	r1, #31
 8001b16:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	401a      	ands	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	0e9b      	lsrs	r3, r3, #26
 8001b22:	f003 011f 	and.w	r1, r3, #31
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	f003 031f 	and.w	r3, r3, #31
 8001b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b30:	431a      	orrs	r2, r3
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b36:	bf00      	nop
 8001b38:	371c      	adds	r7, #28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b087      	sub	sp, #28
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	60f8      	str	r0, [r7, #12]
 8001b4a:	60b9      	str	r1, [r7, #8]
 8001b4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	3314      	adds	r3, #20
 8001b52:	461a      	mov	r2, r3
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	0e5b      	lsrs	r3, r3, #25
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	4413      	add	r3, r2
 8001b60:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	0d1b      	lsrs	r3, r3, #20
 8001b6a:	f003 031f 	and.w	r3, r3, #31
 8001b6e:	2107      	movs	r1, #7
 8001b70:	fa01 f303 	lsl.w	r3, r1, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	401a      	ands	r2, r3
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	0d1b      	lsrs	r3, r3, #20
 8001b7c:	f003 031f 	and.w	r3, r3, #31
 8001b80:	6879      	ldr	r1, [r7, #4]
 8001b82:	fa01 f303 	lsl.w	r3, r1, r3
 8001b86:	431a      	orrs	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b8c:	bf00      	nop
 8001b8e:	371c      	adds	r7, #28
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	401a      	ands	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f003 0318 	and.w	r3, r3, #24
 8001bba:	4908      	ldr	r1, [pc, #32]	@ (8001bdc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001bbc:	40d9      	lsrs	r1, r3
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	400b      	ands	r3, r1
 8001bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001bce:	bf00      	nop
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	0007ffff 	.word	0x0007ffff

08001be0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 031f 	and.w	r3, r3, #31
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6093      	str	r3, [r2, #8]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c34:	d101      	bne.n	8001c3a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001c58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c5c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c84:	d101      	bne.n	8001c8a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ca8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cac:	f043 0201 	orr.w	r2, r3, #1
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001cd0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cd4:	f043 0202 	orr.w	r2, r3, #2
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <LL_ADC_IsEnabled+0x18>
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e000      	b.n	8001d02 <LL_ADC_IsEnabled+0x1a>
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d101      	bne.n	8001d26 <LL_ADC_IsDisableOngoing+0x18>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <LL_ADC_IsDisableOngoing+0x1a>
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d48:	f043 0204 	orr.w	r2, r3, #4
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d101      	bne.n	8001d74 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d101      	bne.n	8001d9a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001da8:	b590      	push	{r4, r7, lr}
 8001daa:	b089      	sub	sp, #36	@ 0x24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e1a9      	b.n	8002116 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d109      	bne.n	8001de4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff fb15 	bl	8001400 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff19 	bl	8001c20 <LL_ADC_IsDeepPowerDownEnabled>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d004      	beq.n	8001dfe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff feff 	bl	8001bfc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff ff34 	bl	8001c70 <LL_ADC_IsInternalRegulatorEnabled>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d115      	bne.n	8001e3a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff ff18 	bl	8001c48 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e18:	4b9c      	ldr	r3, [pc, #624]	@ (800208c <HAL_ADC_Init+0x2e4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	099b      	lsrs	r3, r3, #6
 8001e1e:	4a9c      	ldr	r2, [pc, #624]	@ (8002090 <HAL_ADC_Init+0x2e8>)
 8001e20:	fba2 2303 	umull	r2, r3, r2, r3
 8001e24:	099b      	lsrs	r3, r3, #6
 8001e26:	3301      	adds	r3, #1
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e2c:	e002      	b.n	8001e34 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	3b01      	subs	r3, #1
 8001e32:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f9      	bne.n	8001e2e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff ff16 	bl	8001c70 <LL_ADC_IsInternalRegulatorEnabled>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10d      	bne.n	8001e66 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e4e:	f043 0210 	orr.w	r2, r3, #16
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e5a:	f043 0201 	orr.w	r2, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff ff76 	bl	8001d5c <LL_ADC_REG_IsConversionOngoing>
 8001e70:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e76:	f003 0310 	and.w	r3, r3, #16
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f040 8142 	bne.w	8002104 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f040 813e 	bne.w	8002104 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e90:	f043 0202 	orr.w	r2, r3, #2
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff23 	bl	8001ce8 <LL_ADC_IsEnabled>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d141      	bne.n	8001f2c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001eb0:	d004      	beq.n	8001ebc <HAL_ADC_Init+0x114>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a77      	ldr	r2, [pc, #476]	@ (8002094 <HAL_ADC_Init+0x2ec>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d10f      	bne.n	8001edc <HAL_ADC_Init+0x134>
 8001ebc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001ec0:	f7ff ff12 	bl	8001ce8 <LL_ADC_IsEnabled>
 8001ec4:	4604      	mov	r4, r0
 8001ec6:	4873      	ldr	r0, [pc, #460]	@ (8002094 <HAL_ADC_Init+0x2ec>)
 8001ec8:	f7ff ff0e 	bl	8001ce8 <LL_ADC_IsEnabled>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	4323      	orrs	r3, r4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf0c      	ite	eq
 8001ed4:	2301      	moveq	r3, #1
 8001ed6:	2300      	movne	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	e012      	b.n	8001f02 <HAL_ADC_Init+0x15a>
 8001edc:	486e      	ldr	r0, [pc, #440]	@ (8002098 <HAL_ADC_Init+0x2f0>)
 8001ede:	f7ff ff03 	bl	8001ce8 <LL_ADC_IsEnabled>
 8001ee2:	4604      	mov	r4, r0
 8001ee4:	486d      	ldr	r0, [pc, #436]	@ (800209c <HAL_ADC_Init+0x2f4>)
 8001ee6:	f7ff feff 	bl	8001ce8 <LL_ADC_IsEnabled>
 8001eea:	4603      	mov	r3, r0
 8001eec:	431c      	orrs	r4, r3
 8001eee:	486c      	ldr	r0, [pc, #432]	@ (80020a0 <HAL_ADC_Init+0x2f8>)
 8001ef0:	f7ff fefa 	bl	8001ce8 <LL_ADC_IsEnabled>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	4323      	orrs	r3, r4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf0c      	ite	eq
 8001efc:	2301      	moveq	r3, #1
 8001efe:	2300      	movne	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d012      	beq.n	8001f2c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f0e:	d004      	beq.n	8001f1a <HAL_ADC_Init+0x172>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a5f      	ldr	r2, [pc, #380]	@ (8002094 <HAL_ADC_Init+0x2ec>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d101      	bne.n	8001f1e <HAL_ADC_Init+0x176>
 8001f1a:	4a62      	ldr	r2, [pc, #392]	@ (80020a4 <HAL_ADC_Init+0x2fc>)
 8001f1c:	e000      	b.n	8001f20 <HAL_ADC_Init+0x178>
 8001f1e:	4a62      	ldr	r2, [pc, #392]	@ (80020a8 <HAL_ADC_Init+0x300>)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	4619      	mov	r1, r3
 8001f26:	4610      	mov	r0, r2
 8001f28:	f7ff fcfa 	bl	8001920 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	7f5b      	ldrb	r3, [r3, #29]
 8001f30:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f36:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f3c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f42:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f4a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d106      	bne.n	8001f68 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	045b      	lsls	r3, r3, #17
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d009      	beq.n	8001f84 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f74:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	4b48      	ldr	r3, [pc, #288]	@ (80020ac <HAL_ADC_Init+0x304>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6812      	ldr	r2, [r2, #0]
 8001f92:	69b9      	ldr	r1, [r7, #24]
 8001f94:	430b      	orrs	r3, r1
 8001f96:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fee5 	bl	8001d82 <LL_ADC_INJ_IsConversionOngoing>
 8001fb8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d17f      	bne.n	80020c0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d17c      	bne.n	80020c0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fca:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001fd2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001fe2:	f023 0302 	bic.w	r3, r3, #2
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6812      	ldr	r2, [r2, #0]
 8001fea:	69b9      	ldr	r1, [r7, #24]
 8001fec:	430b      	orrs	r3, r1
 8001fee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d017      	beq.n	8002028 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	691a      	ldr	r2, [r3, #16]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002006:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002010:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002014:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6911      	ldr	r1, [r2, #16]
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	430b      	orrs	r3, r1
 8002022:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002026:	e013      	b.n	8002050 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	691a      	ldr	r2, [r3, #16]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002036:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002048:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800204c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002056:	2b01      	cmp	r3, #1
 8002058:	d12a      	bne.n	80020b0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002064:	f023 0304 	bic.w	r3, r3, #4
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002070:	4311      	orrs	r1, r2
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002076:	4311      	orrs	r1, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800207c:	430a      	orrs	r2, r1
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f042 0201 	orr.w	r2, r2, #1
 8002088:	611a      	str	r2, [r3, #16]
 800208a:	e019      	b.n	80020c0 <HAL_ADC_Init+0x318>
 800208c:	20000000 	.word	0x20000000
 8002090:	053e2d63 	.word	0x053e2d63
 8002094:	50000100 	.word	0x50000100
 8002098:	50000400 	.word	0x50000400
 800209c:	50000500 	.word	0x50000500
 80020a0:	50000600 	.word	0x50000600
 80020a4:	50000300 	.word	0x50000300
 80020a8:	50000700 	.word	0x50000700
 80020ac:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691a      	ldr	r2, [r3, #16]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0201 	bic.w	r2, r2, #1
 80020be:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d10c      	bne.n	80020e2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	f023 010f 	bic.w	r1, r3, #15
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	1e5a      	subs	r2, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	631a      	str	r2, [r3, #48]	@ 0x30
 80020e0:	e007      	b.n	80020f2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 020f 	bic.w	r2, r2, #15
 80020f0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f6:	f023 0303 	bic.w	r3, r3, #3
 80020fa:	f043 0201 	orr.w	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002102:	e007      	b.n	8002114 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002108:	f043 0210 	orr.w	r2, r3, #16
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002114:	7ffb      	ldrb	r3, [r7, #31]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3724      	adds	r7, #36	@ 0x24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd90      	pop	{r4, r7, pc}
 800211e:	bf00      	nop

08002120 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002134:	d004      	beq.n	8002140 <HAL_ADC_Start_DMA+0x20>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a5a      	ldr	r2, [pc, #360]	@ (80022a4 <HAL_ADC_Start_DMA+0x184>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d101      	bne.n	8002144 <HAL_ADC_Start_DMA+0x24>
 8002140:	4b59      	ldr	r3, [pc, #356]	@ (80022a8 <HAL_ADC_Start_DMA+0x188>)
 8002142:	e000      	b.n	8002146 <HAL_ADC_Start_DMA+0x26>
 8002144:	4b59      	ldr	r3, [pc, #356]	@ (80022ac <HAL_ADC_Start_DMA+0x18c>)
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fd4a 	bl	8001be0 <LL_ADC_GetMultimode>
 800214c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fe02 	bl	8001d5c <LL_ADC_REG_IsConversionOngoing>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	f040 809b 	bne.w	8002296 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_ADC_Start_DMA+0x4e>
 800216a:	2302      	movs	r3, #2
 800216c:	e096      	b.n	800229c <HAL_ADC_Start_DMA+0x17c>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a4d      	ldr	r2, [pc, #308]	@ (80022b0 <HAL_ADC_Start_DMA+0x190>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d008      	beq.n	8002192 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d005      	beq.n	8002192 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	2b05      	cmp	r3, #5
 800218a:	d002      	beq.n	8002192 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	2b09      	cmp	r3, #9
 8002190:	d17a      	bne.n	8002288 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 fcf6 	bl	8002b84 <ADC_Enable>
 8002198:	4603      	mov	r3, r0
 800219a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800219c:	7dfb      	ldrb	r3, [r7, #23]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d16d      	bne.n	800227e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80021aa:	f023 0301 	bic.w	r3, r3, #1
 80021ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a3a      	ldr	r2, [pc, #232]	@ (80022a4 <HAL_ADC_Start_DMA+0x184>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d009      	beq.n	80021d4 <HAL_ADC_Start_DMA+0xb4>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a3b      	ldr	r2, [pc, #236]	@ (80022b4 <HAL_ADC_Start_DMA+0x194>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d002      	beq.n	80021d0 <HAL_ADC_Start_DMA+0xb0>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	e003      	b.n	80021d8 <HAL_ADC_Start_DMA+0xb8>
 80021d0:	4b39      	ldr	r3, [pc, #228]	@ (80022b8 <HAL_ADC_Start_DMA+0x198>)
 80021d2:	e001      	b.n	80021d8 <HAL_ADC_Start_DMA+0xb8>
 80021d4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	4293      	cmp	r3, r2
 80021de:	d002      	beq.n	80021e6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d105      	bne.n	80021f2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ea:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d006      	beq.n	800220c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002202:	f023 0206 	bic.w	r2, r3, #6
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	661a      	str	r2, [r3, #96]	@ 0x60
 800220a:	e002      	b.n	8002212 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002216:	4a29      	ldr	r2, [pc, #164]	@ (80022bc <HAL_ADC_Start_DMA+0x19c>)
 8002218:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221e:	4a28      	ldr	r2, [pc, #160]	@ (80022c0 <HAL_ADC_Start_DMA+0x1a0>)
 8002220:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002226:	4a27      	ldr	r2, [pc, #156]	@ (80022c4 <HAL_ADC_Start_DMA+0x1a4>)
 8002228:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	221c      	movs	r2, #28
 8002230:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 0210 	orr.w	r2, r2, #16
 8002248:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 0201 	orr.w	r2, r2, #1
 8002258:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	3340      	adds	r3, #64	@ 0x40
 8002264:	4619      	mov	r1, r3
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f001 f989 	bl	8003580 <HAL_DMA_Start_IT>
 800226e:	4603      	mov	r3, r0
 8002270:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff fd5c 	bl	8001d34 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800227c:	e00d      	b.n	800229a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002286:	e008      	b.n	800229a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002294:	e001      	b.n	800229a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002296:	2302      	movs	r3, #2
 8002298:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800229a:	7dfb      	ldrb	r3, [r7, #23]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	50000100 	.word	0x50000100
 80022a8:	50000300 	.word	0x50000300
 80022ac:	50000700 	.word	0x50000700
 80022b0:	50000600 	.word	0x50000600
 80022b4:	50000500 	.word	0x50000500
 80022b8:	50000400 	.word	0x50000400
 80022bc:	08002d6f 	.word	0x08002d6f
 80022c0:	08002e47 	.word	0x08002e47
 80022c4:	08002e63 	.word	0x08002e63

080022c8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b0b6      	sub	sp, #216	@ 0xd8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002314:	2300      	movs	r3, #0
 8002316:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800231e:	2b01      	cmp	r3, #1
 8002320:	d102      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x24>
 8002322:	2302      	movs	r3, #2
 8002324:	f000 bc13 	b.w	8002b4e <HAL_ADC_ConfigChannel+0x84a>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fd11 	bl	8001d5c <LL_ADC_REG_IsConversionOngoing>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	f040 83f3 	bne.w	8002b28 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6818      	ldr	r0, [r3, #0]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	6859      	ldr	r1, [r3, #4]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	f7ff fbcb 	bl	8001aea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fcff 	bl	8001d5c <LL_ADC_REG_IsConversionOngoing>
 800235e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fd0b 	bl	8001d82 <LL_ADC_INJ_IsConversionOngoing>
 800236c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002370:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002374:	2b00      	cmp	r3, #0
 8002376:	f040 81d9 	bne.w	800272c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800237a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800237e:	2b00      	cmp	r3, #0
 8002380:	f040 81d4 	bne.w	800272c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800238c:	d10f      	bne.n	80023ae <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6818      	ldr	r0, [r3, #0]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2200      	movs	r2, #0
 8002398:	4619      	mov	r1, r3
 800239a:	f7ff fbd2 	bl	8001b42 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fb79 	bl	8001a9e <LL_ADC_SetSamplingTimeCommonConfig>
 80023ac:	e00e      	b.n	80023cc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	6819      	ldr	r1, [r3, #0]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	461a      	mov	r2, r3
 80023bc:	f7ff fbc1 	bl	8001b42 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2100      	movs	r1, #0
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff fb69 	bl	8001a9e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	695a      	ldr	r2, [r3, #20]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	08db      	lsrs	r3, r3, #3
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d022      	beq.n	8002434 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	6919      	ldr	r1, [r3, #16]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80023fe:	f7ff fac3 	bl	8001988 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	6919      	ldr	r1, [r3, #16]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	461a      	mov	r2, r3
 8002410:	f7ff fb0f 	bl	8001a32 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6818      	ldr	r0, [r3, #0]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002420:	2b01      	cmp	r3, #1
 8002422:	d102      	bne.n	800242a <HAL_ADC_ConfigChannel+0x126>
 8002424:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002428:	e000      	b.n	800242c <HAL_ADC_ConfigChannel+0x128>
 800242a:	2300      	movs	r3, #0
 800242c:	461a      	mov	r2, r3
 800242e:	f7ff fb1b 	bl	8001a68 <LL_ADC_SetOffsetSaturation>
 8002432:	e17b      	b.n	800272c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2100      	movs	r1, #0
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fac8 	bl	80019d0 <LL_ADC_GetOffsetChannel>
 8002440:	4603      	mov	r3, r0
 8002442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10a      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x15c>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2100      	movs	r1, #0
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fabd 	bl	80019d0 <LL_ADC_GetOffsetChannel>
 8002456:	4603      	mov	r3, r0
 8002458:	0e9b      	lsrs	r3, r3, #26
 800245a:	f003 021f 	and.w	r2, r3, #31
 800245e:	e01e      	b.n	800249e <HAL_ADC_ConfigChannel+0x19a>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2100      	movs	r1, #0
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fab2 	bl	80019d0 <LL_ADC_GetOffsetChannel>
 800246c:	4603      	mov	r3, r0
 800246e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002476:	fa93 f3a3 	rbit	r3, r3
 800247a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800247e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002482:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002486:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800248e:	2320      	movs	r3, #32
 8002490:	e004      	b.n	800249c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002492:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002496:	fab3 f383 	clz	r3, r3
 800249a:	b2db      	uxtb	r3, r3
 800249c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d105      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x1b2>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	0e9b      	lsrs	r3, r3, #26
 80024b0:	f003 031f 	and.w	r3, r3, #31
 80024b4:	e018      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x1e4>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024c2:	fa93 f3a3 	rbit	r3, r3
 80024c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80024ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80024d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80024da:	2320      	movs	r3, #32
 80024dc:	e004      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80024de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024e2:	fab3 f383 	clz	r3, r3
 80024e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d106      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2200      	movs	r2, #0
 80024f2:	2100      	movs	r1, #0
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff fa81 	bl	80019fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2101      	movs	r1, #1
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff fa65 	bl	80019d0 <LL_ADC_GetOffsetChannel>
 8002506:	4603      	mov	r3, r0
 8002508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10a      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x222>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2101      	movs	r1, #1
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff fa5a 	bl	80019d0 <LL_ADC_GetOffsetChannel>
 800251c:	4603      	mov	r3, r0
 800251e:	0e9b      	lsrs	r3, r3, #26
 8002520:	f003 021f 	and.w	r2, r3, #31
 8002524:	e01e      	b.n	8002564 <HAL_ADC_ConfigChannel+0x260>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2101      	movs	r1, #1
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fa4f 	bl	80019d0 <LL_ADC_GetOffsetChannel>
 8002532:	4603      	mov	r3, r0
 8002534:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002538:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800253c:	fa93 f3a3 	rbit	r3, r3
 8002540:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002544:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002548:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800254c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002554:	2320      	movs	r3, #32
 8002556:	e004      	b.n	8002562 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002558:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800255c:	fab3 f383 	clz	r3, r3
 8002560:	b2db      	uxtb	r3, r3
 8002562:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800256c:	2b00      	cmp	r3, #0
 800256e:	d105      	bne.n	800257c <HAL_ADC_ConfigChannel+0x278>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	0e9b      	lsrs	r3, r3, #26
 8002576:	f003 031f 	and.w	r3, r3, #31
 800257a:	e018      	b.n	80025ae <HAL_ADC_ConfigChannel+0x2aa>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002584:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002588:	fa93 f3a3 	rbit	r3, r3
 800258c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002590:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002594:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002598:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80025a0:	2320      	movs	r3, #32
 80025a2:	e004      	b.n	80025ae <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80025a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025a8:	fab3 f383 	clz	r3, r3
 80025ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d106      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2200      	movs	r2, #0
 80025b8:	2101      	movs	r1, #1
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff fa1e 	bl	80019fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2102      	movs	r1, #2
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff fa02 	bl	80019d0 <LL_ADC_GetOffsetChannel>
 80025cc:	4603      	mov	r3, r0
 80025ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10a      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x2e8>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2102      	movs	r1, #2
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff f9f7 	bl	80019d0 <LL_ADC_GetOffsetChannel>
 80025e2:	4603      	mov	r3, r0
 80025e4:	0e9b      	lsrs	r3, r3, #26
 80025e6:	f003 021f 	and.w	r2, r3, #31
 80025ea:	e01e      	b.n	800262a <HAL_ADC_ConfigChannel+0x326>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2102      	movs	r1, #2
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff f9ec 	bl	80019d0 <LL_ADC_GetOffsetChannel>
 80025f8:	4603      	mov	r3, r0
 80025fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002602:	fa93 f3a3 	rbit	r3, r3
 8002606:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800260a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800260e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002612:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800261a:	2320      	movs	r3, #32
 800261c:	e004      	b.n	8002628 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800261e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002622:	fab3 f383 	clz	r3, r3
 8002626:	b2db      	uxtb	r3, r3
 8002628:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002632:	2b00      	cmp	r3, #0
 8002634:	d105      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x33e>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	0e9b      	lsrs	r3, r3, #26
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	e016      	b.n	8002670 <HAL_ADC_ConfigChannel+0x36c>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800264e:	fa93 f3a3 	rbit	r3, r3
 8002652:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002654:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002656:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800265a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002662:	2320      	movs	r3, #32
 8002664:	e004      	b.n	8002670 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002666:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800266a:	fab3 f383 	clz	r3, r3
 800266e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002670:	429a      	cmp	r2, r3
 8002672:	d106      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2200      	movs	r2, #0
 800267a:	2102      	movs	r1, #2
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff f9bd 	bl	80019fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2103      	movs	r1, #3
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff f9a1 	bl	80019d0 <LL_ADC_GetOffsetChannel>
 800268e:	4603      	mov	r3, r0
 8002690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10a      	bne.n	80026ae <HAL_ADC_ConfigChannel+0x3aa>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2103      	movs	r1, #3
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff f996 	bl	80019d0 <LL_ADC_GetOffsetChannel>
 80026a4:	4603      	mov	r3, r0
 80026a6:	0e9b      	lsrs	r3, r3, #26
 80026a8:	f003 021f 	and.w	r2, r3, #31
 80026ac:	e017      	b.n	80026de <HAL_ADC_ConfigChannel+0x3da>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2103      	movs	r1, #3
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff f98b 	bl	80019d0 <LL_ADC_GetOffsetChannel>
 80026ba:	4603      	mov	r3, r0
 80026bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80026c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026c8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80026ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80026d0:	2320      	movs	r3, #32
 80026d2:	e003      	b.n	80026dc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80026d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d105      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x3f2>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	0e9b      	lsrs	r3, r3, #26
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	e011      	b.n	800271a <HAL_ADC_ConfigChannel+0x416>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026fe:	fa93 f3a3 	rbit	r3, r3
 8002702:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002704:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002706:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002708:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800270e:	2320      	movs	r3, #32
 8002710:	e003      	b.n	800271a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002712:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002714:	fab3 f383 	clz	r3, r3
 8002718:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800271a:	429a      	cmp	r2, r3
 800271c:	d106      	bne.n	800272c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2200      	movs	r2, #0
 8002724:	2103      	movs	r1, #3
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff f968 	bl	80019fc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fad9 	bl	8001ce8 <LL_ADC_IsEnabled>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	f040 813d 	bne.w	80029b8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	6819      	ldr	r1, [r3, #0]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	461a      	mov	r2, r3
 800274c:	f7ff fa24 	bl	8001b98 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	4aa2      	ldr	r2, [pc, #648]	@ (80029e0 <HAL_ADC_ConfigChannel+0x6dc>)
 8002756:	4293      	cmp	r3, r2
 8002758:	f040 812e 	bne.w	80029b8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10b      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x480>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	0e9b      	lsrs	r3, r3, #26
 8002772:	3301      	adds	r3, #1
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	2b09      	cmp	r3, #9
 800277a:	bf94      	ite	ls
 800277c:	2301      	movls	r3, #1
 800277e:	2300      	movhi	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	e019      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x4b4>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800278c:	fa93 f3a3 	rbit	r3, r3
 8002790:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002792:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002794:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002796:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800279c:	2320      	movs	r3, #32
 800279e:	e003      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80027a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027a2:	fab3 f383 	clz	r3, r3
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	3301      	adds	r3, #1
 80027aa:	f003 031f 	and.w	r3, r3, #31
 80027ae:	2b09      	cmp	r3, #9
 80027b0:	bf94      	ite	ls
 80027b2:	2301      	movls	r3, #1
 80027b4:	2300      	movhi	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d079      	beq.n	80028b0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d107      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x4d4>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	0e9b      	lsrs	r3, r3, #26
 80027ce:	3301      	adds	r3, #1
 80027d0:	069b      	lsls	r3, r3, #26
 80027d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027d6:	e015      	b.n	8002804 <HAL_ADC_ConfigChannel+0x500>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027e0:	fa93 f3a3 	rbit	r3, r3
 80027e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80027e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027e8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80027ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80027f0:	2320      	movs	r3, #32
 80027f2:	e003      	b.n	80027fc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80027f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027f6:	fab3 f383 	clz	r3, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	3301      	adds	r3, #1
 80027fe:	069b      	lsls	r3, r3, #26
 8002800:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800280c:	2b00      	cmp	r3, #0
 800280e:	d109      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x520>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	0e9b      	lsrs	r3, r3, #26
 8002816:	3301      	adds	r3, #1
 8002818:	f003 031f 	and.w	r3, r3, #31
 800281c:	2101      	movs	r1, #1
 800281e:	fa01 f303 	lsl.w	r3, r1, r3
 8002822:	e017      	b.n	8002854 <HAL_ADC_ConfigChannel+0x550>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800282a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800282c:	fa93 f3a3 	rbit	r3, r3
 8002830:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002834:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002836:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800283c:	2320      	movs	r3, #32
 800283e:	e003      	b.n	8002848 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002840:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002842:	fab3 f383 	clz	r3, r3
 8002846:	b2db      	uxtb	r3, r3
 8002848:	3301      	adds	r3, #1
 800284a:	f003 031f 	and.w	r3, r3, #31
 800284e:	2101      	movs	r1, #1
 8002850:	fa01 f303 	lsl.w	r3, r1, r3
 8002854:	ea42 0103 	orr.w	r1, r2, r3
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10a      	bne.n	800287a <HAL_ADC_ConfigChannel+0x576>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	0e9b      	lsrs	r3, r3, #26
 800286a:	3301      	adds	r3, #1
 800286c:	f003 021f 	and.w	r2, r3, #31
 8002870:	4613      	mov	r3, r2
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	4413      	add	r3, r2
 8002876:	051b      	lsls	r3, r3, #20
 8002878:	e018      	b.n	80028ac <HAL_ADC_ConfigChannel+0x5a8>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800288a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800288c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002892:	2320      	movs	r3, #32
 8002894:	e003      	b.n	800289e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002898:	fab3 f383 	clz	r3, r3
 800289c:	b2db      	uxtb	r3, r3
 800289e:	3301      	adds	r3, #1
 80028a0:	f003 021f 	and.w	r2, r3, #31
 80028a4:	4613      	mov	r3, r2
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	4413      	add	r3, r2
 80028aa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028ac:	430b      	orrs	r3, r1
 80028ae:	e07e      	b.n	80029ae <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d107      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x5c8>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	0e9b      	lsrs	r3, r3, #26
 80028c2:	3301      	adds	r3, #1
 80028c4:	069b      	lsls	r3, r3, #26
 80028c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028ca:	e015      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x5f4>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028d4:	fa93 f3a3 	rbit	r3, r3
 80028d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80028da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028dc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80028de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80028e4:	2320      	movs	r3, #32
 80028e6:	e003      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80028e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ea:	fab3 f383 	clz	r3, r3
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	3301      	adds	r3, #1
 80028f2:	069b      	lsls	r3, r3, #26
 80028f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002900:	2b00      	cmp	r3, #0
 8002902:	d109      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x614>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	0e9b      	lsrs	r3, r3, #26
 800290a:	3301      	adds	r3, #1
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	2101      	movs	r1, #1
 8002912:	fa01 f303 	lsl.w	r3, r1, r3
 8002916:	e017      	b.n	8002948 <HAL_ADC_ConfigChannel+0x644>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	6a3b      	ldr	r3, [r7, #32]
 8002920:	fa93 f3a3 	rbit	r3, r3
 8002924:	61fb      	str	r3, [r7, #28]
  return result;
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800292a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002930:	2320      	movs	r3, #32
 8002932:	e003      	b.n	800293c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002936:	fab3 f383 	clz	r3, r3
 800293a:	b2db      	uxtb	r3, r3
 800293c:	3301      	adds	r3, #1
 800293e:	f003 031f 	and.w	r3, r3, #31
 8002942:	2101      	movs	r1, #1
 8002944:	fa01 f303 	lsl.w	r3, r1, r3
 8002948:	ea42 0103 	orr.w	r1, r2, r3
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10d      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x670>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	0e9b      	lsrs	r3, r3, #26
 800295e:	3301      	adds	r3, #1
 8002960:	f003 021f 	and.w	r2, r3, #31
 8002964:	4613      	mov	r3, r2
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	4413      	add	r3, r2
 800296a:	3b1e      	subs	r3, #30
 800296c:	051b      	lsls	r3, r3, #20
 800296e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002972:	e01b      	b.n	80029ac <HAL_ADC_ConfigChannel+0x6a8>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	fa93 f3a3 	rbit	r3, r3
 8002980:	613b      	str	r3, [r7, #16]
  return result;
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800298c:	2320      	movs	r3, #32
 800298e:	e003      	b.n	8002998 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	fab3 f383 	clz	r3, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	3301      	adds	r3, #1
 800299a:	f003 021f 	and.w	r2, r3, #31
 800299e:	4613      	mov	r3, r2
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	4413      	add	r3, r2
 80029a4:	3b1e      	subs	r3, #30
 80029a6:	051b      	lsls	r3, r3, #20
 80029a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029ac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029b2:	4619      	mov	r1, r3
 80029b4:	f7ff f8c5 	bl	8001b42 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	4b09      	ldr	r3, [pc, #36]	@ (80029e4 <HAL_ADC_ConfigChannel+0x6e0>)
 80029be:	4013      	ands	r3, r2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80be 	beq.w	8002b42 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029ce:	d004      	beq.n	80029da <HAL_ADC_ConfigChannel+0x6d6>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a04      	ldr	r2, [pc, #16]	@ (80029e8 <HAL_ADC_ConfigChannel+0x6e4>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d10a      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x6ec>
 80029da:	4b04      	ldr	r3, [pc, #16]	@ (80029ec <HAL_ADC_ConfigChannel+0x6e8>)
 80029dc:	e009      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x6ee>
 80029de:	bf00      	nop
 80029e0:	407f0000 	.word	0x407f0000
 80029e4:	80080000 	.word	0x80080000
 80029e8:	50000100 	.word	0x50000100
 80029ec:	50000300 	.word	0x50000300
 80029f0:	4b59      	ldr	r3, [pc, #356]	@ (8002b58 <HAL_ADC_ConfigChannel+0x854>)
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe ffba 	bl	800196c <LL_ADC_GetCommonPathInternalCh>
 80029f8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a56      	ldr	r2, [pc, #344]	@ (8002b5c <HAL_ADC_ConfigChannel+0x858>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d004      	beq.n	8002a10 <HAL_ADC_ConfigChannel+0x70c>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a55      	ldr	r2, [pc, #340]	@ (8002b60 <HAL_ADC_ConfigChannel+0x85c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d13a      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d134      	bne.n	8002a86 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a24:	d005      	beq.n	8002a32 <HAL_ADC_ConfigChannel+0x72e>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a4e      	ldr	r2, [pc, #312]	@ (8002b64 <HAL_ADC_ConfigChannel+0x860>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	f040 8085 	bne.w	8002b3c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a3a:	d004      	beq.n	8002a46 <HAL_ADC_ConfigChannel+0x742>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a49      	ldr	r2, [pc, #292]	@ (8002b68 <HAL_ADC_ConfigChannel+0x864>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d101      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x746>
 8002a46:	4a49      	ldr	r2, [pc, #292]	@ (8002b6c <HAL_ADC_ConfigChannel+0x868>)
 8002a48:	e000      	b.n	8002a4c <HAL_ADC_ConfigChannel+0x748>
 8002a4a:	4a43      	ldr	r2, [pc, #268]	@ (8002b58 <HAL_ADC_ConfigChannel+0x854>)
 8002a4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a54:	4619      	mov	r1, r3
 8002a56:	4610      	mov	r0, r2
 8002a58:	f7fe ff75 	bl	8001946 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a5c:	4b44      	ldr	r3, [pc, #272]	@ (8002b70 <HAL_ADC_ConfigChannel+0x86c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	099b      	lsrs	r3, r3, #6
 8002a62:	4a44      	ldr	r2, [pc, #272]	@ (8002b74 <HAL_ADC_ConfigChannel+0x870>)
 8002a64:	fba2 2303 	umull	r2, r3, r2, r3
 8002a68:	099b      	lsrs	r3, r3, #6
 8002a6a:	1c5a      	adds	r2, r3, #1
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	4413      	add	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a76:	e002      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1f9      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a84:	e05a      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a3b      	ldr	r2, [pc, #236]	@ (8002b78 <HAL_ADC_ConfigChannel+0x874>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d125      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d11f      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a31      	ldr	r2, [pc, #196]	@ (8002b68 <HAL_ADC_ConfigChannel+0x864>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d104      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x7ac>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a34      	ldr	r2, [pc, #208]	@ (8002b7c <HAL_ADC_ConfigChannel+0x878>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d047      	beq.n	8002b40 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ab8:	d004      	beq.n	8002ac4 <HAL_ADC_ConfigChannel+0x7c0>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a2a      	ldr	r2, [pc, #168]	@ (8002b68 <HAL_ADC_ConfigChannel+0x864>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d101      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x7c4>
 8002ac4:	4a29      	ldr	r2, [pc, #164]	@ (8002b6c <HAL_ADC_ConfigChannel+0x868>)
 8002ac6:	e000      	b.n	8002aca <HAL_ADC_ConfigChannel+0x7c6>
 8002ac8:	4a23      	ldr	r2, [pc, #140]	@ (8002b58 <HAL_ADC_ConfigChannel+0x854>)
 8002aca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ace:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	f7fe ff36 	bl	8001946 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ada:	e031      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a27      	ldr	r2, [pc, #156]	@ (8002b80 <HAL_ADC_ConfigChannel+0x87c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d12d      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ae6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002aea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d127      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a1c      	ldr	r2, [pc, #112]	@ (8002b68 <HAL_ADC_ConfigChannel+0x864>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d022      	beq.n	8002b42 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b04:	d004      	beq.n	8002b10 <HAL_ADC_ConfigChannel+0x80c>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a17      	ldr	r2, [pc, #92]	@ (8002b68 <HAL_ADC_ConfigChannel+0x864>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d101      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x810>
 8002b10:	4a16      	ldr	r2, [pc, #88]	@ (8002b6c <HAL_ADC_ConfigChannel+0x868>)
 8002b12:	e000      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x812>
 8002b14:	4a10      	ldr	r2, [pc, #64]	@ (8002b58 <HAL_ADC_ConfigChannel+0x854>)
 8002b16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b1a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4610      	mov	r0, r2
 8002b22:	f7fe ff10 	bl	8001946 <LL_ADC_SetCommonPathInternalCh>
 8002b26:	e00c      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b2c:	f043 0220 	orr.w	r2, r3, #32
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002b3a:	e002      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b3c:	bf00      	nop
 8002b3e:	e000      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b40:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002b4a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	37d8      	adds	r7, #216	@ 0xd8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	50000700 	.word	0x50000700
 8002b5c:	c3210000 	.word	0xc3210000
 8002b60:	90c00010 	.word	0x90c00010
 8002b64:	50000600 	.word	0x50000600
 8002b68:	50000100 	.word	0x50000100
 8002b6c:	50000300 	.word	0x50000300
 8002b70:	20000000 	.word	0x20000000
 8002b74:	053e2d63 	.word	0x053e2d63
 8002b78:	c7520000 	.word	0xc7520000
 8002b7c:	50000500 	.word	0x50000500
 8002b80:	cb840000 	.word	0xcb840000

08002b84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff f8a7 	bl	8001ce8 <LL_ADC_IsEnabled>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d176      	bne.n	8002c8e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	4b3c      	ldr	r3, [pc, #240]	@ (8002c98 <ADC_Enable+0x114>)
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00d      	beq.n	8002bca <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb2:	f043 0210 	orr.w	r2, r3, #16
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bbe:	f043 0201 	orr.w	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e062      	b.n	8002c90 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff f862 	bl	8001c98 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bdc:	d004      	beq.n	8002be8 <ADC_Enable+0x64>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a2e      	ldr	r2, [pc, #184]	@ (8002c9c <ADC_Enable+0x118>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d101      	bne.n	8002bec <ADC_Enable+0x68>
 8002be8:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca0 <ADC_Enable+0x11c>)
 8002bea:	e000      	b.n	8002bee <ADC_Enable+0x6a>
 8002bec:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca4 <ADC_Enable+0x120>)
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fe febc 	bl	800196c <LL_ADC_GetCommonPathInternalCh>
 8002bf4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002bf6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d013      	beq.n	8002c26 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca8 <ADC_Enable+0x124>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	099b      	lsrs	r3, r3, #6
 8002c04:	4a29      	ldr	r2, [pc, #164]	@ (8002cac <ADC_Enable+0x128>)
 8002c06:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0a:	099b      	lsrs	r3, r3, #6
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	4613      	mov	r3, r2
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	4413      	add	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c18:	e002      	b.n	8002c20 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f9      	bne.n	8002c1a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c26:	f7fe fe6f 	bl	8001908 <HAL_GetTick>
 8002c2a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c2c:	e028      	b.n	8002c80 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff f858 	bl	8001ce8 <LL_ADC_IsEnabled>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d104      	bne.n	8002c48 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff f828 	bl	8001c98 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c48:	f7fe fe5e 	bl	8001908 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d914      	bls.n	8002c80 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d00d      	beq.n	8002c80 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c68:	f043 0210 	orr.w	r2, r3, #16
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c74:	f043 0201 	orr.w	r2, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e007      	b.n	8002c90 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d1cf      	bne.n	8002c2e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	8000003f 	.word	0x8000003f
 8002c9c:	50000100 	.word	0x50000100
 8002ca0:	50000300 	.word	0x50000300
 8002ca4:	50000700 	.word	0x50000700
 8002ca8:	20000000 	.word	0x20000000
 8002cac:	053e2d63 	.word	0x053e2d63

08002cb0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff f826 	bl	8001d0e <LL_ADC_IsDisableOngoing>
 8002cc2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff f80d 	bl	8001ce8 <LL_ADC_IsEnabled>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d047      	beq.n	8002d64 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d144      	bne.n	8002d64 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 030d 	and.w	r3, r3, #13
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d10c      	bne.n	8002d02 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fe ffe7 	bl	8001cc0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cfa:	f7fe fe05 	bl	8001908 <HAL_GetTick>
 8002cfe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d00:	e029      	b.n	8002d56 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d06:	f043 0210 	orr.w	r2, r3, #16
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d12:	f043 0201 	orr.w	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e023      	b.n	8002d66 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d1e:	f7fe fdf3 	bl	8001908 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d914      	bls.n	8002d56 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00d      	beq.n	8002d56 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3e:	f043 0210 	orr.w	r2, r3, #16
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d4a:	f043 0201 	orr.w	r2, r3, #1
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e007      	b.n	8002d66 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1dc      	bne.n	8002d1e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b084      	sub	sp, #16
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d80:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d14b      	bne.n	8002e20 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d8c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d021      	beq.n	8002de6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fe fe8c 	bl	8001ac4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d032      	beq.n	8002e18 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d12b      	bne.n	8002e18 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d11f      	bne.n	8002e18 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ddc:	f043 0201 	orr.w	r2, r3, #1
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002de4:	e018      	b.n	8002e18 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d111      	bne.n	8002e18 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d105      	bne.n	8002e18 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e10:	f043 0201 	orr.w	r2, r3, #1
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f7ff fa55 	bl	80022c8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e1e:	e00e      	b.n	8002e3e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f7ff fa5f 	bl	80022f0 <HAL_ADC_ErrorCallback>
}
 8002e32:	e004      	b.n	8002e3e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	4798      	blx	r3
}
 8002e3e:	bf00      	nop
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b084      	sub	sp, #16
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e52:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f7ff fa41 	bl	80022dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e5a:	bf00      	nop
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b084      	sub	sp, #16
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e74:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e80:	f043 0204 	orr.w	r2, r3, #4
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f7ff fa31 	bl	80022f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e8e:	bf00      	nop
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <LL_ADC_IsEnabled>:
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <LL_ADC_IsEnabled+0x18>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <LL_ADC_IsEnabled+0x1a>
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <LL_ADC_StartCalibration>:
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002ece:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	609a      	str	r2, [r3, #8]
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <LL_ADC_IsCalibrationOnGoing>:
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002efe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f02:	d101      	bne.n	8002f08 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <LL_ADC_REG_IsConversionOngoing>:
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d101      	bne.n	8002f2e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002f46:	2300      	movs	r3, #0
 8002f48:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_ADCEx_Calibration_Start+0x1c>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e04d      	b.n	8002ff4 <HAL_ADCEx_Calibration_Start+0xb8>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f7ff fea5 	bl	8002cb0 <ADC_Disable>
 8002f66:	4603      	mov	r3, r0
 8002f68:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d136      	bne.n	8002fde <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f74:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f78:	f023 0302 	bic.w	r3, r3, #2
 8002f7c:	f043 0202 	orr.w	r2, r3, #2
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6839      	ldr	r1, [r7, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff ff96 	bl	8002ebc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002f90:	e014      	b.n	8002fbc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	3301      	adds	r3, #1
 8002f96:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4a18      	ldr	r2, [pc, #96]	@ (8002ffc <HAL_ADCEx_Calibration_Start+0xc0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d90d      	bls.n	8002fbc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa4:	f023 0312 	bic.w	r3, r3, #18
 8002fa8:	f043 0210 	orr.w	r2, r3, #16
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e01b      	b.n	8002ff4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff ff94 	bl	8002eee <LL_ADC_IsCalibrationOnGoing>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1e2      	bne.n	8002f92 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd0:	f023 0303 	bic.w	r3, r3, #3
 8002fd4:	f043 0201 	orr.w	r2, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002fdc:	e005      	b.n	8002fea <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe2:	f043 0210 	orr.w	r2, r3, #16
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	0004de01 	.word	0x0004de01

08003000 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003000:	b590      	push	{r4, r7, lr}
 8003002:	b0a1      	sub	sp, #132	@ 0x84
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003016:	2b01      	cmp	r3, #1
 8003018:	d101      	bne.n	800301e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800301a:	2302      	movs	r3, #2
 800301c:	e0e7      	b.n	80031ee <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003026:	2300      	movs	r3, #0
 8003028:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800302a:	2300      	movs	r3, #0
 800302c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003036:	d102      	bne.n	800303e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003038:	4b6f      	ldr	r3, [pc, #444]	@ (80031f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800303a:	60bb      	str	r3, [r7, #8]
 800303c:	e009      	b.n	8003052 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a6e      	ldr	r2, [pc, #440]	@ (80031fc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d102      	bne.n	800304e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003048:	4b6d      	ldr	r3, [pc, #436]	@ (8003200 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	e001      	b.n	8003052 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800304e:	2300      	movs	r3, #0
 8003050:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10b      	bne.n	8003070 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800305c:	f043 0220 	orr.w	r2, r3, #32
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e0be      	b.n	80031ee <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff ff4f 	bl	8002f16 <LL_ADC_REG_IsConversionOngoing>
 8003078:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff ff49 	bl	8002f16 <LL_ADC_REG_IsConversionOngoing>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	f040 80a0 	bne.w	80031cc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800308c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800308e:	2b00      	cmp	r3, #0
 8003090:	f040 809c 	bne.w	80031cc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800309c:	d004      	beq.n	80030a8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a55      	ldr	r2, [pc, #340]	@ (80031f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d101      	bne.n	80030ac <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80030a8:	4b56      	ldr	r3, [pc, #344]	@ (8003204 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80030aa:	e000      	b.n	80030ae <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80030ac:	4b56      	ldr	r3, [pc, #344]	@ (8003208 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80030ae:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d04b      	beq.n	8003150 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80030b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	6859      	ldr	r1, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80030ca:	035b      	lsls	r3, r3, #13
 80030cc:	430b      	orrs	r3, r1
 80030ce:	431a      	orrs	r2, r3
 80030d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030d2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030dc:	d004      	beq.n	80030e8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a45      	ldr	r2, [pc, #276]	@ (80031f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d10f      	bne.n	8003108 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80030e8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80030ec:	f7ff fed3 	bl	8002e96 <LL_ADC_IsEnabled>
 80030f0:	4604      	mov	r4, r0
 80030f2:	4841      	ldr	r0, [pc, #260]	@ (80031f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80030f4:	f7ff fecf 	bl	8002e96 <LL_ADC_IsEnabled>
 80030f8:	4603      	mov	r3, r0
 80030fa:	4323      	orrs	r3, r4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf0c      	ite	eq
 8003100:	2301      	moveq	r3, #1
 8003102:	2300      	movne	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	e012      	b.n	800312e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003108:	483c      	ldr	r0, [pc, #240]	@ (80031fc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800310a:	f7ff fec4 	bl	8002e96 <LL_ADC_IsEnabled>
 800310e:	4604      	mov	r4, r0
 8003110:	483b      	ldr	r0, [pc, #236]	@ (8003200 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003112:	f7ff fec0 	bl	8002e96 <LL_ADC_IsEnabled>
 8003116:	4603      	mov	r3, r0
 8003118:	431c      	orrs	r4, r3
 800311a:	483c      	ldr	r0, [pc, #240]	@ (800320c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800311c:	f7ff febb 	bl	8002e96 <LL_ADC_IsEnabled>
 8003120:	4603      	mov	r3, r0
 8003122:	4323      	orrs	r3, r4
 8003124:	2b00      	cmp	r3, #0
 8003126:	bf0c      	ite	eq
 8003128:	2301      	moveq	r3, #1
 800312a:	2300      	movne	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d056      	beq.n	80031e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003132:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800313a:	f023 030f 	bic.w	r3, r3, #15
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	6811      	ldr	r1, [r2, #0]
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	6892      	ldr	r2, [r2, #8]
 8003146:	430a      	orrs	r2, r1
 8003148:	431a      	orrs	r2, r3
 800314a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800314c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800314e:	e047      	b.n	80031e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003150:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003158:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800315a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003164:	d004      	beq.n	8003170 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a23      	ldr	r2, [pc, #140]	@ (80031f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d10f      	bne.n	8003190 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003170:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003174:	f7ff fe8f 	bl	8002e96 <LL_ADC_IsEnabled>
 8003178:	4604      	mov	r4, r0
 800317a:	481f      	ldr	r0, [pc, #124]	@ (80031f8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800317c:	f7ff fe8b 	bl	8002e96 <LL_ADC_IsEnabled>
 8003180:	4603      	mov	r3, r0
 8003182:	4323      	orrs	r3, r4
 8003184:	2b00      	cmp	r3, #0
 8003186:	bf0c      	ite	eq
 8003188:	2301      	moveq	r3, #1
 800318a:	2300      	movne	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	e012      	b.n	80031b6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003190:	481a      	ldr	r0, [pc, #104]	@ (80031fc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003192:	f7ff fe80 	bl	8002e96 <LL_ADC_IsEnabled>
 8003196:	4604      	mov	r4, r0
 8003198:	4819      	ldr	r0, [pc, #100]	@ (8003200 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800319a:	f7ff fe7c 	bl	8002e96 <LL_ADC_IsEnabled>
 800319e:	4603      	mov	r3, r0
 80031a0:	431c      	orrs	r4, r3
 80031a2:	481a      	ldr	r0, [pc, #104]	@ (800320c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80031a4:	f7ff fe77 	bl	8002e96 <LL_ADC_IsEnabled>
 80031a8:	4603      	mov	r3, r0
 80031aa:	4323      	orrs	r3, r4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	bf0c      	ite	eq
 80031b0:	2301      	moveq	r3, #1
 80031b2:	2300      	movne	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d012      	beq.n	80031e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80031ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80031c2:	f023 030f 	bic.w	r3, r3, #15
 80031c6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80031c8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031ca:	e009      	b.n	80031e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d0:	f043 0220 	orr.w	r2, r3, #32
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80031de:	e000      	b.n	80031e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80031ea:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3784      	adds	r7, #132	@ 0x84
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd90      	pop	{r4, r7, pc}
 80031f6:	bf00      	nop
 80031f8:	50000100 	.word	0x50000100
 80031fc:	50000400 	.word	0x50000400
 8003200:	50000500 	.word	0x50000500
 8003204:	50000300 	.word	0x50000300
 8003208:	50000700 	.word	0x50000700
 800320c:	50000600 	.word	0x50000600

08003210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003220:	4b0c      	ldr	r3, [pc, #48]	@ (8003254 <__NVIC_SetPriorityGrouping+0x44>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800322c:	4013      	ands	r3, r2
 800322e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003238:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800323c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003242:	4a04      	ldr	r2, [pc, #16]	@ (8003254 <__NVIC_SetPriorityGrouping+0x44>)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	60d3      	str	r3, [r2, #12]
}
 8003248:	bf00      	nop
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	e000ed00 	.word	0xe000ed00

08003258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800325c:	4b04      	ldr	r3, [pc, #16]	@ (8003270 <__NVIC_GetPriorityGrouping+0x18>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	0a1b      	lsrs	r3, r3, #8
 8003262:	f003 0307 	and.w	r3, r3, #7
}
 8003266:	4618      	mov	r0, r3
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800327e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003282:	2b00      	cmp	r3, #0
 8003284:	db0b      	blt.n	800329e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	f003 021f 	and.w	r2, r3, #31
 800328c:	4907      	ldr	r1, [pc, #28]	@ (80032ac <__NVIC_EnableIRQ+0x38>)
 800328e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	2001      	movs	r0, #1
 8003296:	fa00 f202 	lsl.w	r2, r0, r2
 800329a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	e000e100 	.word	0xe000e100

080032b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	6039      	str	r1, [r7, #0]
 80032ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	db0a      	blt.n	80032da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	490c      	ldr	r1, [pc, #48]	@ (80032fc <__NVIC_SetPriority+0x4c>)
 80032ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ce:	0112      	lsls	r2, r2, #4
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	440b      	add	r3, r1
 80032d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032d8:	e00a      	b.n	80032f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	4908      	ldr	r1, [pc, #32]	@ (8003300 <__NVIC_SetPriority+0x50>)
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	3b04      	subs	r3, #4
 80032e8:	0112      	lsls	r2, r2, #4
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	440b      	add	r3, r1
 80032ee:	761a      	strb	r2, [r3, #24]
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	e000e100 	.word	0xe000e100
 8003300:	e000ed00 	.word	0xe000ed00

08003304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003304:	b480      	push	{r7}
 8003306:	b089      	sub	sp, #36	@ 0x24
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f1c3 0307 	rsb	r3, r3, #7
 800331e:	2b04      	cmp	r3, #4
 8003320:	bf28      	it	cs
 8003322:	2304      	movcs	r3, #4
 8003324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	3304      	adds	r3, #4
 800332a:	2b06      	cmp	r3, #6
 800332c:	d902      	bls.n	8003334 <NVIC_EncodePriority+0x30>
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	3b03      	subs	r3, #3
 8003332:	e000      	b.n	8003336 <NVIC_EncodePriority+0x32>
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003338:	f04f 32ff 	mov.w	r2, #4294967295
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	43da      	mvns	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	401a      	ands	r2, r3
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800334c:	f04f 31ff 	mov.w	r1, #4294967295
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	fa01 f303 	lsl.w	r3, r1, r3
 8003356:	43d9      	mvns	r1, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800335c:	4313      	orrs	r3, r2
         );
}
 800335e:	4618      	mov	r0, r3
 8003360:	3724      	adds	r7, #36	@ 0x24
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
	...

0800336c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3b01      	subs	r3, #1
 8003378:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800337c:	d301      	bcc.n	8003382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800337e:	2301      	movs	r3, #1
 8003380:	e00f      	b.n	80033a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003382:	4a0a      	ldr	r2, [pc, #40]	@ (80033ac <SysTick_Config+0x40>)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3b01      	subs	r3, #1
 8003388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800338a:	210f      	movs	r1, #15
 800338c:	f04f 30ff 	mov.w	r0, #4294967295
 8003390:	f7ff ff8e 	bl	80032b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003394:	4b05      	ldr	r3, [pc, #20]	@ (80033ac <SysTick_Config+0x40>)
 8003396:	2200      	movs	r2, #0
 8003398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800339a:	4b04      	ldr	r3, [pc, #16]	@ (80033ac <SysTick_Config+0x40>)
 800339c:	2207      	movs	r2, #7
 800339e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	e000e010 	.word	0xe000e010

080033b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff ff29 	bl	8003210 <__NVIC_SetPriorityGrouping>
}
 80033be:	bf00      	nop
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b086      	sub	sp, #24
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	4603      	mov	r3, r0
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	607a      	str	r2, [r7, #4]
 80033d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033d4:	f7ff ff40 	bl	8003258 <__NVIC_GetPriorityGrouping>
 80033d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	68b9      	ldr	r1, [r7, #8]
 80033de:	6978      	ldr	r0, [r7, #20]
 80033e0:	f7ff ff90 	bl	8003304 <NVIC_EncodePriority>
 80033e4:	4602      	mov	r2, r0
 80033e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ea:	4611      	mov	r1, r2
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff ff5f 	bl	80032b0 <__NVIC_SetPriority>
}
 80033f2:	bf00      	nop
 80033f4:	3718      	adds	r7, #24
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b082      	sub	sp, #8
 80033fe:	af00      	add	r7, sp, #0
 8003400:	4603      	mov	r3, r0
 8003402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff ff33 	bl	8003274 <__NVIC_EnableIRQ>
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7ff ffa4 	bl	800336c <SysTick_Config>
 8003424:	4603      	mov	r3, r0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e08d      	b.n	800355e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	4b47      	ldr	r3, [pc, #284]	@ (8003568 <HAL_DMA_Init+0x138>)
 800344a:	429a      	cmp	r2, r3
 800344c:	d80f      	bhi.n	800346e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	461a      	mov	r2, r3
 8003454:	4b45      	ldr	r3, [pc, #276]	@ (800356c <HAL_DMA_Init+0x13c>)
 8003456:	4413      	add	r3, r2
 8003458:	4a45      	ldr	r2, [pc, #276]	@ (8003570 <HAL_DMA_Init+0x140>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	091b      	lsrs	r3, r3, #4
 8003460:	009a      	lsls	r2, r3, #2
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a42      	ldr	r2, [pc, #264]	@ (8003574 <HAL_DMA_Init+0x144>)
 800346a:	641a      	str	r2, [r3, #64]	@ 0x40
 800346c:	e00e      	b.n	800348c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	461a      	mov	r2, r3
 8003474:	4b40      	ldr	r3, [pc, #256]	@ (8003578 <HAL_DMA_Init+0x148>)
 8003476:	4413      	add	r3, r2
 8003478:	4a3d      	ldr	r2, [pc, #244]	@ (8003570 <HAL_DMA_Init+0x140>)
 800347a:	fba2 2303 	umull	r2, r3, r2, r3
 800347e:	091b      	lsrs	r3, r3, #4
 8003480:	009a      	lsls	r2, r3, #2
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a3c      	ldr	r2, [pc, #240]	@ (800357c <HAL_DMA_Init+0x14c>)
 800348a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80034a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80034b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f9b6 	bl	8003850 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034ec:	d102      	bne.n	80034f4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034fc:	b2d2      	uxtb	r2, r2
 80034fe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003508:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d010      	beq.n	8003534 <HAL_DMA_Init+0x104>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b04      	cmp	r3, #4
 8003518:	d80c      	bhi.n	8003534 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f9d6 	bl	80038cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003530:	605a      	str	r2, [r3, #4]
 8003532:	e008      	b.n	8003546 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40020407 	.word	0x40020407
 800356c:	bffdfff8 	.word	0xbffdfff8
 8003570:	cccccccd 	.word	0xcccccccd
 8003574:	40020000 	.word	0x40020000
 8003578:	bffdfbf8 	.word	0xbffdfbf8
 800357c:	40020400 	.word	0x40020400

08003580 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003598:	2b01      	cmp	r3, #1
 800359a:	d101      	bne.n	80035a0 <HAL_DMA_Start_IT+0x20>
 800359c:	2302      	movs	r3, #2
 800359e:	e066      	b.n	800366e <HAL_DMA_Start_IT+0xee>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d155      	bne.n	8003660 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0201 	bic.w	r2, r2, #1
 80035d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	68b9      	ldr	r1, [r7, #8]
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 f8fb 	bl	80037d4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d008      	beq.n	80035f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f042 020e 	orr.w	r2, r2, #14
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	e00f      	b.n	8003618 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0204 	bic.w	r2, r2, #4
 8003606:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 020a 	orr.w	r2, r2, #10
 8003616:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d007      	beq.n	8003636 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003630:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003634:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800363a:	2b00      	cmp	r3, #0
 800363c:	d007      	beq.n	800364e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003648:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800364c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0201 	orr.w	r2, r2, #1
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	e005      	b.n	800366c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003668:	2302      	movs	r3, #2
 800366a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800366c:	7dfb      	ldrb	r3, [r7, #23]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b084      	sub	sp, #16
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003692:	f003 031f 	and.w	r3, r3, #31
 8003696:	2204      	movs	r2, #4
 8003698:	409a      	lsls	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4013      	ands	r3, r2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d026      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x7a>
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d021      	beq.n	80036f0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0320 	and.w	r3, r3, #32
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d107      	bne.n	80036ca <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0204 	bic.w	r2, r2, #4
 80036c8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ce:	f003 021f 	and.w	r2, r3, #31
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d6:	2104      	movs	r1, #4
 80036d8:	fa01 f202 	lsl.w	r2, r1, r2
 80036dc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d071      	beq.n	80037ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80036ee:	e06c      	b.n	80037ca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f4:	f003 031f 	and.w	r3, r3, #31
 80036f8:	2202      	movs	r2, #2
 80036fa:	409a      	lsls	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4013      	ands	r3, r2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d02e      	beq.n	8003762 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d029      	beq.n	8003762 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10b      	bne.n	8003734 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 020a 	bic.w	r2, r2, #10
 800372a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003738:	f003 021f 	and.w	r2, r3, #31
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003740:	2102      	movs	r1, #2
 8003742:	fa01 f202 	lsl.w	r2, r1, r2
 8003746:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003754:	2b00      	cmp	r3, #0
 8003756:	d038      	beq.n	80037ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003760:	e033      	b.n	80037ca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003766:	f003 031f 	and.w	r3, r3, #31
 800376a:	2208      	movs	r2, #8
 800376c:	409a      	lsls	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4013      	ands	r3, r2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d02a      	beq.n	80037cc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b00      	cmp	r3, #0
 800377e:	d025      	beq.n	80037cc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 020e 	bic.w	r2, r2, #14
 800378e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003794:	f003 021f 	and.w	r2, r3, #31
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379c:	2101      	movs	r1, #1
 800379e:	fa01 f202 	lsl.w	r2, r1, r2
 80037a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d004      	beq.n	80037cc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80037ca:	bf00      	nop
 80037cc:	bf00      	nop
}
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80037ea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d004      	beq.n	80037fe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80037fc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003802:	f003 021f 	and.w	r2, r3, #31
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380a:	2101      	movs	r1, #1
 800380c:	fa01 f202 	lsl.w	r2, r1, r2
 8003810:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	2b10      	cmp	r3, #16
 8003820:	d108      	bne.n	8003834 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003832:	e007      	b.n	8003844 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	60da      	str	r2, [r3, #12]
}
 8003844:	bf00      	nop
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003850:	b480      	push	{r7}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	461a      	mov	r2, r3
 800385e:	4b16      	ldr	r3, [pc, #88]	@ (80038b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003860:	429a      	cmp	r2, r3
 8003862:	d802      	bhi.n	800386a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003864:	4b15      	ldr	r3, [pc, #84]	@ (80038bc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	e001      	b.n	800386e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800386a:	4b15      	ldr	r3, [pc, #84]	@ (80038c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800386c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	b2db      	uxtb	r3, r3
 8003878:	3b08      	subs	r3, #8
 800387a:	4a12      	ldr	r2, [pc, #72]	@ (80038c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800387c:	fba2 2303 	umull	r2, r3, r2, r3
 8003880:	091b      	lsrs	r3, r3, #4
 8003882:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003888:	089b      	lsrs	r3, r3, #2
 800388a:	009a      	lsls	r2, r3, #2
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	4413      	add	r3, r2
 8003890:	461a      	mov	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a0b      	ldr	r2, [pc, #44]	@ (80038c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800389a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f003 031f 	and.w	r3, r3, #31
 80038a2:	2201      	movs	r2, #1
 80038a4:	409a      	lsls	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80038aa:	bf00      	nop
 80038ac:	371c      	adds	r7, #28
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	40020407 	.word	0x40020407
 80038bc:	40020800 	.word	0x40020800
 80038c0:	40020820 	.word	0x40020820
 80038c4:	cccccccd 	.word	0xcccccccd
 80038c8:	40020880 	.word	0x40020880

080038cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4b0b      	ldr	r3, [pc, #44]	@ (800390c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80038e0:	4413      	add	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	461a      	mov	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a08      	ldr	r2, [pc, #32]	@ (8003910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80038ee:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	f003 031f 	and.w	r3, r3, #31
 80038f8:	2201      	movs	r2, #1
 80038fa:	409a      	lsls	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003900:	bf00      	nop
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	1000823f 	.word	0x1000823f
 8003910:	40020940 	.word	0x40020940

08003914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800391e:	2300      	movs	r3, #0
 8003920:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003922:	e15a      	b.n	8003bda <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	2101      	movs	r1, #1
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	fa01 f303 	lsl.w	r3, r1, r3
 8003930:	4013      	ands	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 814c 	beq.w	8003bd4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 0303 	and.w	r3, r3, #3
 8003944:	2b01      	cmp	r3, #1
 8003946:	d005      	beq.n	8003954 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003950:	2b02      	cmp	r3, #2
 8003952:	d130      	bne.n	80039b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	2203      	movs	r2, #3
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	43db      	mvns	r3, r3
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	4013      	ands	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4313      	orrs	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800398a:	2201      	movs	r2, #1
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	43db      	mvns	r3, r3
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4013      	ands	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	091b      	lsrs	r3, r3, #4
 80039a0:	f003 0201 	and.w	r2, r3, #1
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	2b03      	cmp	r3, #3
 80039c0:	d017      	beq.n	80039f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	2203      	movs	r2, #3
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	43db      	mvns	r3, r3
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4013      	ands	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	689a      	ldr	r2, [r3, #8]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f003 0303 	and.w	r3, r3, #3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d123      	bne.n	8003a46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	08da      	lsrs	r2, r3, #3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3208      	adds	r2, #8
 8003a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	220f      	movs	r2, #15
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	691a      	ldr	r2, [r3, #16]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	08da      	lsrs	r2, r3, #3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3208      	adds	r2, #8
 8003a40:	6939      	ldr	r1, [r7, #16]
 8003a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	2203      	movs	r2, #3
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43db      	mvns	r3, r3
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f003 0203 	and.w	r2, r3, #3
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 80a6 	beq.w	8003bd4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a88:	4b5b      	ldr	r3, [pc, #364]	@ (8003bf8 <HAL_GPIO_Init+0x2e4>)
 8003a8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a8c:	4a5a      	ldr	r2, [pc, #360]	@ (8003bf8 <HAL_GPIO_Init+0x2e4>)
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a94:	4b58      	ldr	r3, [pc, #352]	@ (8003bf8 <HAL_GPIO_Init+0x2e4>)
 8003a96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003aa0:	4a56      	ldr	r2, [pc, #344]	@ (8003bfc <HAL_GPIO_Init+0x2e8>)
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	089b      	lsrs	r3, r3, #2
 8003aa6:	3302      	adds	r3, #2
 8003aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	f003 0303 	and.w	r3, r3, #3
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	220f      	movs	r2, #15
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	43db      	mvns	r3, r3
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003aca:	d01f      	beq.n	8003b0c <HAL_GPIO_Init+0x1f8>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a4c      	ldr	r2, [pc, #304]	@ (8003c00 <HAL_GPIO_Init+0x2ec>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d019      	beq.n	8003b08 <HAL_GPIO_Init+0x1f4>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a4b      	ldr	r2, [pc, #300]	@ (8003c04 <HAL_GPIO_Init+0x2f0>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d013      	beq.n	8003b04 <HAL_GPIO_Init+0x1f0>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a4a      	ldr	r2, [pc, #296]	@ (8003c08 <HAL_GPIO_Init+0x2f4>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d00d      	beq.n	8003b00 <HAL_GPIO_Init+0x1ec>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a49      	ldr	r2, [pc, #292]	@ (8003c0c <HAL_GPIO_Init+0x2f8>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d007      	beq.n	8003afc <HAL_GPIO_Init+0x1e8>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a48      	ldr	r2, [pc, #288]	@ (8003c10 <HAL_GPIO_Init+0x2fc>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d101      	bne.n	8003af8 <HAL_GPIO_Init+0x1e4>
 8003af4:	2305      	movs	r3, #5
 8003af6:	e00a      	b.n	8003b0e <HAL_GPIO_Init+0x1fa>
 8003af8:	2306      	movs	r3, #6
 8003afa:	e008      	b.n	8003b0e <HAL_GPIO_Init+0x1fa>
 8003afc:	2304      	movs	r3, #4
 8003afe:	e006      	b.n	8003b0e <HAL_GPIO_Init+0x1fa>
 8003b00:	2303      	movs	r3, #3
 8003b02:	e004      	b.n	8003b0e <HAL_GPIO_Init+0x1fa>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e002      	b.n	8003b0e <HAL_GPIO_Init+0x1fa>
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <HAL_GPIO_Init+0x1fa>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	f002 0203 	and.w	r2, r2, #3
 8003b14:	0092      	lsls	r2, r2, #2
 8003b16:	4093      	lsls	r3, r2
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b1e:	4937      	ldr	r1, [pc, #220]	@ (8003bfc <HAL_GPIO_Init+0x2e8>)
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	089b      	lsrs	r3, r3, #2
 8003b24:	3302      	adds	r3, #2
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b2c:	4b39      	ldr	r3, [pc, #228]	@ (8003c14 <HAL_GPIO_Init+0x300>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	43db      	mvns	r3, r3
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b50:	4a30      	ldr	r2, [pc, #192]	@ (8003c14 <HAL_GPIO_Init+0x300>)
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b56:	4b2f      	ldr	r3, [pc, #188]	@ (8003c14 <HAL_GPIO_Init+0x300>)
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	43db      	mvns	r3, r3
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4013      	ands	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b7a:	4a26      	ldr	r2, [pc, #152]	@ (8003c14 <HAL_GPIO_Init+0x300>)
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003b80:	4b24      	ldr	r3, [pc, #144]	@ (8003c14 <HAL_GPIO_Init+0x300>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	43db      	mvns	r3, r3
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8003c14 <HAL_GPIO_Init+0x300>)
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003baa:	4b1a      	ldr	r3, [pc, #104]	@ (8003c14 <HAL_GPIO_Init+0x300>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bce:	4a11      	ldr	r2, [pc, #68]	@ (8003c14 <HAL_GPIO_Init+0x300>)
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	fa22 f303 	lsr.w	r3, r2, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f47f ae9d 	bne.w	8003924 <HAL_GPIO_Init+0x10>
  }
}
 8003bea:	bf00      	nop
 8003bec:	bf00      	nop
 8003bee:	371c      	adds	r7, #28
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	40010000 	.word	0x40010000
 8003c00:	48000400 	.word	0x48000400
 8003c04:	48000800 	.word	0x48000800
 8003c08:	48000c00 	.word	0x48000c00
 8003c0c:	48001000 	.word	0x48001000
 8003c10:	48001400 	.word	0x48001400
 8003c14:	40010400 	.word	0x40010400

08003c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	807b      	strh	r3, [r7, #2]
 8003c24:	4613      	mov	r3, r2
 8003c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c28:	787b      	ldrb	r3, [r7, #1]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c2e:	887a      	ldrh	r2, [r7, #2]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c34:	e002      	b.n	8003c3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c36:	887a      	ldrh	r2, [r7, #2]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	460b      	mov	r3, r1
 8003c52:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c5a:	887a      	ldrh	r2, [r7, #2]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	041a      	lsls	r2, r3, #16
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	43d9      	mvns	r1, r3
 8003c66:	887b      	ldrh	r3, [r7, #2]
 8003c68:	400b      	ands	r3, r1
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	619a      	str	r2, [r3, #24]
}
 8003c70:	bf00      	nop
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c86:	4b08      	ldr	r3, [pc, #32]	@ (8003ca8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c88:	695a      	ldr	r2, [r3, #20]
 8003c8a:	88fb      	ldrh	r3, [r7, #6]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d006      	beq.n	8003ca0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c92:	4a05      	ldr	r2, [pc, #20]	@ (8003ca8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c94:	88fb      	ldrh	r3, [r7, #6]
 8003c96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c98:	88fb      	ldrh	r3, [r7, #6]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fd fb6a 	bl	8001374 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ca0:	bf00      	nop
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40010400 	.word	0x40010400

08003cac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d141      	bne.n	8003d3e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cba:	4b4b      	ldr	r3, [pc, #300]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003cc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cc6:	d131      	bne.n	8003d2c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cc8:	4b47      	ldr	r3, [pc, #284]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cce:	4a46      	ldr	r2, [pc, #280]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cd4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cd8:	4b43      	ldr	r3, [pc, #268]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ce0:	4a41      	ldr	r2, [pc, #260]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ce2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ce6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ce8:	4b40      	ldr	r3, [pc, #256]	@ (8003dec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2232      	movs	r2, #50	@ 0x32
 8003cee:	fb02 f303 	mul.w	r3, r2, r3
 8003cf2:	4a3f      	ldr	r2, [pc, #252]	@ (8003df0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf8:	0c9b      	lsrs	r3, r3, #18
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cfe:	e002      	b.n	8003d06 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d06:	4b38      	ldr	r3, [pc, #224]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d12:	d102      	bne.n	8003d1a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f2      	bne.n	8003d00 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d1a:	4b33      	ldr	r3, [pc, #204]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d26:	d158      	bne.n	8003dda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e057      	b.n	8003ddc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d2c:	4b2e      	ldr	r3, [pc, #184]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d32:	4a2d      	ldr	r2, [pc, #180]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003d3c:	e04d      	b.n	8003dda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d44:	d141      	bne.n	8003dca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d46:	4b28      	ldr	r3, [pc, #160]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d52:	d131      	bne.n	8003db8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d54:	4b24      	ldr	r3, [pc, #144]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d5a:	4a23      	ldr	r2, [pc, #140]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d64:	4b20      	ldr	r3, [pc, #128]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d6c:	4a1e      	ldr	r2, [pc, #120]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d74:	4b1d      	ldr	r3, [pc, #116]	@ (8003dec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2232      	movs	r2, #50	@ 0x32
 8003d7a:	fb02 f303 	mul.w	r3, r2, r3
 8003d7e:	4a1c      	ldr	r2, [pc, #112]	@ (8003df0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d80:	fba2 2303 	umull	r2, r3, r2, r3
 8003d84:	0c9b      	lsrs	r3, r3, #18
 8003d86:	3301      	adds	r3, #1
 8003d88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d8a:	e002      	b.n	8003d92 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d92:	4b15      	ldr	r3, [pc, #84]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d9e:	d102      	bne.n	8003da6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f2      	bne.n	8003d8c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003da6:	4b10      	ldr	r3, [pc, #64]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003db2:	d112      	bne.n	8003dda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e011      	b.n	8003ddc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003db8:	4b0b      	ldr	r3, [pc, #44]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003dc8:	e007      	b.n	8003dda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003dca:	4b07      	ldr	r3, [pc, #28]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003dd2:	4a05      	ldr	r2, [pc, #20]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003dd8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	40007000 	.word	0x40007000
 8003dec:	20000000 	.word	0x20000000
 8003df0:	431bde83 	.word	0x431bde83

08003df4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003df8:	4b05      	ldr	r3, [pc, #20]	@ (8003e10 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	4a04      	ldr	r2, [pc, #16]	@ (8003e10 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003dfe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e02:	6093      	str	r3, [r2, #8]
}
 8003e04:	bf00      	nop
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	40007000 	.word	0x40007000

08003e14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b088      	sub	sp, #32
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e2fe      	b.n	8004424 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d075      	beq.n	8003f1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e32:	4b97      	ldr	r3, [pc, #604]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 030c 	and.w	r3, r3, #12
 8003e3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e3c:	4b94      	ldr	r3, [pc, #592]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f003 0303 	and.w	r3, r3, #3
 8003e44:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	2b0c      	cmp	r3, #12
 8003e4a:	d102      	bne.n	8003e52 <HAL_RCC_OscConfig+0x3e>
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d002      	beq.n	8003e58 <HAL_RCC_OscConfig+0x44>
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d10b      	bne.n	8003e70 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e58:	4b8d      	ldr	r3, [pc, #564]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d05b      	beq.n	8003f1c <HAL_RCC_OscConfig+0x108>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d157      	bne.n	8003f1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e2d9      	b.n	8004424 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e78:	d106      	bne.n	8003e88 <HAL_RCC_OscConfig+0x74>
 8003e7a:	4b85      	ldr	r3, [pc, #532]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a84      	ldr	r2, [pc, #528]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003e80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	e01d      	b.n	8003ec4 <HAL_RCC_OscConfig+0xb0>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e90:	d10c      	bne.n	8003eac <HAL_RCC_OscConfig+0x98>
 8003e92:	4b7f      	ldr	r3, [pc, #508]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a7e      	ldr	r2, [pc, #504]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003e98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e9c:	6013      	str	r3, [r2, #0]
 8003e9e:	4b7c      	ldr	r3, [pc, #496]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a7b      	ldr	r2, [pc, #492]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003ea4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ea8:	6013      	str	r3, [r2, #0]
 8003eaa:	e00b      	b.n	8003ec4 <HAL_RCC_OscConfig+0xb0>
 8003eac:	4b78      	ldr	r3, [pc, #480]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a77      	ldr	r2, [pc, #476]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003eb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eb6:	6013      	str	r3, [r2, #0]
 8003eb8:	4b75      	ldr	r3, [pc, #468]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a74      	ldr	r2, [pc, #464]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003ebe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ec2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d013      	beq.n	8003ef4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ecc:	f7fd fd1c 	bl	8001908 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ed4:	f7fd fd18 	bl	8001908 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b64      	cmp	r3, #100	@ 0x64
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e29e      	b.n	8004424 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ee6:	4b6a      	ldr	r3, [pc, #424]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0xc0>
 8003ef2:	e014      	b.n	8003f1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef4:	f7fd fd08 	bl	8001908 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003efc:	f7fd fd04 	bl	8001908 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b64      	cmp	r3, #100	@ 0x64
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e28a      	b.n	8004424 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f0e:	4b60      	ldr	r3, [pc, #384]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f0      	bne.n	8003efc <HAL_RCC_OscConfig+0xe8>
 8003f1a:	e000      	b.n	8003f1e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d075      	beq.n	8004016 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f2a:	4b59      	ldr	r3, [pc, #356]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
 8003f32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f34:	4b56      	ldr	r3, [pc, #344]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	2b0c      	cmp	r3, #12
 8003f42:	d102      	bne.n	8003f4a <HAL_RCC_OscConfig+0x136>
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d002      	beq.n	8003f50 <HAL_RCC_OscConfig+0x13c>
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	2b04      	cmp	r3, #4
 8003f4e:	d11f      	bne.n	8003f90 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f50:	4b4f      	ldr	r3, [pc, #316]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d005      	beq.n	8003f68 <HAL_RCC_OscConfig+0x154>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e25d      	b.n	8004424 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f68:	4b49      	ldr	r3, [pc, #292]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	061b      	lsls	r3, r3, #24
 8003f76:	4946      	ldr	r1, [pc, #280]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003f7c:	4b45      	ldr	r3, [pc, #276]	@ (8004094 <HAL_RCC_OscConfig+0x280>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fd fc75 	bl	8001870 <HAL_InitTick>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d043      	beq.n	8004014 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e249      	b.n	8004424 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d023      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f98:	4b3d      	ldr	r3, [pc, #244]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a3c      	ldr	r2, [pc, #240]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003f9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa4:	f7fd fcb0 	bl	8001908 <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fac:	f7fd fcac 	bl	8001908 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e232      	b.n	8004424 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fbe:	4b34      	ldr	r3, [pc, #208]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0f0      	beq.n	8003fac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fca:	4b31      	ldr	r3, [pc, #196]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	061b      	lsls	r3, r3, #24
 8003fd8:	492d      	ldr	r1, [pc, #180]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	604b      	str	r3, [r1, #4]
 8003fde:	e01a      	b.n	8004016 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a2a      	ldr	r2, [pc, #168]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8003fe6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fec:	f7fd fc8c 	bl	8001908 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ff4:	f7fd fc88 	bl	8001908 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e20e      	b.n	8004424 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004006:	4b22      	ldr	r3, [pc, #136]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f0      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x1e0>
 8004012:	e000      	b.n	8004016 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004014:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d041      	beq.n	80040a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d01c      	beq.n	8004064 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800402a:	4b19      	ldr	r3, [pc, #100]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 800402c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004030:	4a17      	ldr	r2, [pc, #92]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403a:	f7fd fc65 	bl	8001908 <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004040:	e008      	b.n	8004054 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004042:	f7fd fc61 	bl	8001908 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e1e7      	b.n	8004424 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004054:	4b0e      	ldr	r3, [pc, #56]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8004056:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0ef      	beq.n	8004042 <HAL_RCC_OscConfig+0x22e>
 8004062:	e020      	b.n	80040a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004064:	4b0a      	ldr	r3, [pc, #40]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 8004066:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800406a:	4a09      	ldr	r2, [pc, #36]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 800406c:	f023 0301 	bic.w	r3, r3, #1
 8004070:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004074:	f7fd fc48 	bl	8001908 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800407a:	e00d      	b.n	8004098 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800407c:	f7fd fc44 	bl	8001908 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d906      	bls.n	8004098 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e1ca      	b.n	8004424 <HAL_RCC_OscConfig+0x610>
 800408e:	bf00      	nop
 8004090:	40021000 	.word	0x40021000
 8004094:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004098:	4b8c      	ldr	r3, [pc, #560]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 800409a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1ea      	bne.n	800407c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0304 	and.w	r3, r3, #4
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 80a6 	beq.w	8004200 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040b4:	2300      	movs	r3, #0
 80040b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040b8:	4b84      	ldr	r3, [pc, #528]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 80040ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_RCC_OscConfig+0x2b4>
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <HAL_RCC_OscConfig+0x2b6>
 80040c8:	2300      	movs	r3, #0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00d      	beq.n	80040ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ce:	4b7f      	ldr	r3, [pc, #508]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 80040d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d2:	4a7e      	ldr	r2, [pc, #504]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 80040d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80040da:	4b7c      	ldr	r3, [pc, #496]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 80040dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80040e6:	2301      	movs	r3, #1
 80040e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040ea:	4b79      	ldr	r3, [pc, #484]	@ (80042d0 <HAL_RCC_OscConfig+0x4bc>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d118      	bne.n	8004128 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040f6:	4b76      	ldr	r3, [pc, #472]	@ (80042d0 <HAL_RCC_OscConfig+0x4bc>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a75      	ldr	r2, [pc, #468]	@ (80042d0 <HAL_RCC_OscConfig+0x4bc>)
 80040fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004100:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004102:	f7fd fc01 	bl	8001908 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800410a:	f7fd fbfd 	bl	8001908 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e183      	b.n	8004424 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800411c:	4b6c      	ldr	r3, [pc, #432]	@ (80042d0 <HAL_RCC_OscConfig+0x4bc>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0f0      	beq.n	800410a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d108      	bne.n	8004142 <HAL_RCC_OscConfig+0x32e>
 8004130:	4b66      	ldr	r3, [pc, #408]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 8004132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004136:	4a65      	ldr	r2, [pc, #404]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 8004138:	f043 0301 	orr.w	r3, r3, #1
 800413c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004140:	e024      	b.n	800418c <HAL_RCC_OscConfig+0x378>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2b05      	cmp	r3, #5
 8004148:	d110      	bne.n	800416c <HAL_RCC_OscConfig+0x358>
 800414a:	4b60      	ldr	r3, [pc, #384]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 800414c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004150:	4a5e      	ldr	r2, [pc, #376]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 8004152:	f043 0304 	orr.w	r3, r3, #4
 8004156:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800415a:	4b5c      	ldr	r3, [pc, #368]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004160:	4a5a      	ldr	r2, [pc, #360]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800416a:	e00f      	b.n	800418c <HAL_RCC_OscConfig+0x378>
 800416c:	4b57      	ldr	r3, [pc, #348]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 800416e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004172:	4a56      	ldr	r2, [pc, #344]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 8004174:	f023 0301 	bic.w	r3, r3, #1
 8004178:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800417c:	4b53      	ldr	r3, [pc, #332]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004182:	4a52      	ldr	r2, [pc, #328]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 8004184:	f023 0304 	bic.w	r3, r3, #4
 8004188:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d016      	beq.n	80041c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004194:	f7fd fbb8 	bl	8001908 <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800419a:	e00a      	b.n	80041b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800419c:	f7fd fbb4 	bl	8001908 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e138      	b.n	8004424 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041b2:	4b46      	ldr	r3, [pc, #280]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 80041b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0ed      	beq.n	800419c <HAL_RCC_OscConfig+0x388>
 80041c0:	e015      	b.n	80041ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c2:	f7fd fba1 	bl	8001908 <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041c8:	e00a      	b.n	80041e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ca:	f7fd fb9d 	bl	8001908 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041d8:	4293      	cmp	r3, r2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e121      	b.n	8004424 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041e0:	4b3a      	ldr	r3, [pc, #232]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 80041e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1ed      	bne.n	80041ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041ee:	7ffb      	ldrb	r3, [r7, #31]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d105      	bne.n	8004200 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041f4:	4b35      	ldr	r3, [pc, #212]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 80041f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f8:	4a34      	ldr	r2, [pc, #208]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 80041fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041fe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0320 	and.w	r3, r3, #32
 8004208:	2b00      	cmp	r3, #0
 800420a:	d03c      	beq.n	8004286 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d01c      	beq.n	800424e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004214:	4b2d      	ldr	r3, [pc, #180]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 8004216:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800421a:	4a2c      	ldr	r2, [pc, #176]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 800421c:	f043 0301 	orr.w	r3, r3, #1
 8004220:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004224:	f7fd fb70 	bl	8001908 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800422c:	f7fd fb6c 	bl	8001908 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e0f2      	b.n	8004424 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800423e:	4b23      	ldr	r3, [pc, #140]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 8004240:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0ef      	beq.n	800422c <HAL_RCC_OscConfig+0x418>
 800424c:	e01b      	b.n	8004286 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800424e:	4b1f      	ldr	r3, [pc, #124]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 8004250:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004254:	4a1d      	ldr	r2, [pc, #116]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 8004256:	f023 0301 	bic.w	r3, r3, #1
 800425a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800425e:	f7fd fb53 	bl	8001908 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004266:	f7fd fb4f 	bl	8001908 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e0d5      	b.n	8004424 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004278:	4b14      	ldr	r3, [pc, #80]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 800427a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1ef      	bne.n	8004266 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 80c9 	beq.w	8004422 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004290:	4b0e      	ldr	r3, [pc, #56]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f003 030c 	and.w	r3, r3, #12
 8004298:	2b0c      	cmp	r3, #12
 800429a:	f000 8083 	beq.w	80043a4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d15e      	bne.n	8004364 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a6:	4b09      	ldr	r3, [pc, #36]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a08      	ldr	r2, [pc, #32]	@ (80042cc <HAL_RCC_OscConfig+0x4b8>)
 80042ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b2:	f7fd fb29 	bl	8001908 <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042b8:	e00c      	b.n	80042d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ba:	f7fd fb25 	bl	8001908 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d905      	bls.n	80042d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e0ab      	b.n	8004424 <HAL_RCC_OscConfig+0x610>
 80042cc:	40021000 	.word	0x40021000
 80042d0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042d4:	4b55      	ldr	r3, [pc, #340]	@ (800442c <HAL_RCC_OscConfig+0x618>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1ec      	bne.n	80042ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042e0:	4b52      	ldr	r3, [pc, #328]	@ (800442c <HAL_RCC_OscConfig+0x618>)
 80042e2:	68da      	ldr	r2, [r3, #12]
 80042e4:	4b52      	ldr	r3, [pc, #328]	@ (8004430 <HAL_RCC_OscConfig+0x61c>)
 80042e6:	4013      	ands	r3, r2
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6a11      	ldr	r1, [r2, #32]
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042f0:	3a01      	subs	r2, #1
 80042f2:	0112      	lsls	r2, r2, #4
 80042f4:	4311      	orrs	r1, r2
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80042fa:	0212      	lsls	r2, r2, #8
 80042fc:	4311      	orrs	r1, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004302:	0852      	lsrs	r2, r2, #1
 8004304:	3a01      	subs	r2, #1
 8004306:	0552      	lsls	r2, r2, #21
 8004308:	4311      	orrs	r1, r2
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800430e:	0852      	lsrs	r2, r2, #1
 8004310:	3a01      	subs	r2, #1
 8004312:	0652      	lsls	r2, r2, #25
 8004314:	4311      	orrs	r1, r2
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800431a:	06d2      	lsls	r2, r2, #27
 800431c:	430a      	orrs	r2, r1
 800431e:	4943      	ldr	r1, [pc, #268]	@ (800442c <HAL_RCC_OscConfig+0x618>)
 8004320:	4313      	orrs	r3, r2
 8004322:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004324:	4b41      	ldr	r3, [pc, #260]	@ (800442c <HAL_RCC_OscConfig+0x618>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a40      	ldr	r2, [pc, #256]	@ (800442c <HAL_RCC_OscConfig+0x618>)
 800432a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800432e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004330:	4b3e      	ldr	r3, [pc, #248]	@ (800442c <HAL_RCC_OscConfig+0x618>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	4a3d      	ldr	r2, [pc, #244]	@ (800442c <HAL_RCC_OscConfig+0x618>)
 8004336:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800433a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7fd fae4 	bl	8001908 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004344:	f7fd fae0 	bl	8001908 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e066      	b.n	8004424 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004356:	4b35      	ldr	r3, [pc, #212]	@ (800442c <HAL_RCC_OscConfig+0x618>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0f0      	beq.n	8004344 <HAL_RCC_OscConfig+0x530>
 8004362:	e05e      	b.n	8004422 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004364:	4b31      	ldr	r3, [pc, #196]	@ (800442c <HAL_RCC_OscConfig+0x618>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a30      	ldr	r2, [pc, #192]	@ (800442c <HAL_RCC_OscConfig+0x618>)
 800436a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800436e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004370:	f7fd faca 	bl	8001908 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004378:	f7fd fac6 	bl	8001908 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e04c      	b.n	8004424 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800438a:	4b28      	ldr	r3, [pc, #160]	@ (800442c <HAL_RCC_OscConfig+0x618>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f0      	bne.n	8004378 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004396:	4b25      	ldr	r3, [pc, #148]	@ (800442c <HAL_RCC_OscConfig+0x618>)
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	4924      	ldr	r1, [pc, #144]	@ (800442c <HAL_RCC_OscConfig+0x618>)
 800439c:	4b25      	ldr	r3, [pc, #148]	@ (8004434 <HAL_RCC_OscConfig+0x620>)
 800439e:	4013      	ands	r3, r2
 80043a0:	60cb      	str	r3, [r1, #12]
 80043a2:	e03e      	b.n	8004422 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d101      	bne.n	80043b0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e039      	b.n	8004424 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80043b0:	4b1e      	ldr	r3, [pc, #120]	@ (800442c <HAL_RCC_OscConfig+0x618>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f003 0203 	and.w	r2, r3, #3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d12c      	bne.n	800441e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ce:	3b01      	subs	r3, #1
 80043d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d123      	bne.n	800441e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d11b      	bne.n	800441e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d113      	bne.n	800441e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004400:	085b      	lsrs	r3, r3, #1
 8004402:	3b01      	subs	r3, #1
 8004404:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004406:	429a      	cmp	r2, r3
 8004408:	d109      	bne.n	800441e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004414:	085b      	lsrs	r3, r3, #1
 8004416:	3b01      	subs	r3, #1
 8004418:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800441a:	429a      	cmp	r2, r3
 800441c:	d001      	beq.n	8004422 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e000      	b.n	8004424 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3720      	adds	r7, #32
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40021000 	.word	0x40021000
 8004430:	019f800c 	.word	0x019f800c
 8004434:	feeefffc 	.word	0xfeeefffc

08004438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004442:	2300      	movs	r3, #0
 8004444:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e11e      	b.n	800468e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004450:	4b91      	ldr	r3, [pc, #580]	@ (8004698 <HAL_RCC_ClockConfig+0x260>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 030f 	and.w	r3, r3, #15
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	429a      	cmp	r2, r3
 800445c:	d910      	bls.n	8004480 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800445e:	4b8e      	ldr	r3, [pc, #568]	@ (8004698 <HAL_RCC_ClockConfig+0x260>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f023 020f 	bic.w	r2, r3, #15
 8004466:	498c      	ldr	r1, [pc, #560]	@ (8004698 <HAL_RCC_ClockConfig+0x260>)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	4313      	orrs	r3, r2
 800446c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800446e:	4b8a      	ldr	r3, [pc, #552]	@ (8004698 <HAL_RCC_ClockConfig+0x260>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	429a      	cmp	r2, r3
 800447a:	d001      	beq.n	8004480 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e106      	b.n	800468e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d073      	beq.n	8004574 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2b03      	cmp	r3, #3
 8004492:	d129      	bne.n	80044e8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004494:	4b81      	ldr	r3, [pc, #516]	@ (800469c <HAL_RCC_ClockConfig+0x264>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e0f4      	b.n	800468e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80044a4:	f000 f99e 	bl	80047e4 <RCC_GetSysClockFreqFromPLLSource>
 80044a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	4a7c      	ldr	r2, [pc, #496]	@ (80046a0 <HAL_RCC_ClockConfig+0x268>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d93f      	bls.n	8004532 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044b2:	4b7a      	ldr	r3, [pc, #488]	@ (800469c <HAL_RCC_ClockConfig+0x264>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d009      	beq.n	80044d2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d033      	beq.n	8004532 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d12f      	bne.n	8004532 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044d2:	4b72      	ldr	r3, [pc, #456]	@ (800469c <HAL_RCC_ClockConfig+0x264>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044da:	4a70      	ldr	r2, [pc, #448]	@ (800469c <HAL_RCC_ClockConfig+0x264>)
 80044dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044e2:	2380      	movs	r3, #128	@ 0x80
 80044e4:	617b      	str	r3, [r7, #20]
 80044e6:	e024      	b.n	8004532 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d107      	bne.n	8004500 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044f0:	4b6a      	ldr	r3, [pc, #424]	@ (800469c <HAL_RCC_ClockConfig+0x264>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d109      	bne.n	8004510 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e0c6      	b.n	800468e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004500:	4b66      	ldr	r3, [pc, #408]	@ (800469c <HAL_RCC_ClockConfig+0x264>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e0be      	b.n	800468e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004510:	f000 f8ce 	bl	80046b0 <HAL_RCC_GetSysClockFreq>
 8004514:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	4a61      	ldr	r2, [pc, #388]	@ (80046a0 <HAL_RCC_ClockConfig+0x268>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d909      	bls.n	8004532 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800451e:	4b5f      	ldr	r3, [pc, #380]	@ (800469c <HAL_RCC_ClockConfig+0x264>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004526:	4a5d      	ldr	r2, [pc, #372]	@ (800469c <HAL_RCC_ClockConfig+0x264>)
 8004528:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800452c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800452e:	2380      	movs	r3, #128	@ 0x80
 8004530:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004532:	4b5a      	ldr	r3, [pc, #360]	@ (800469c <HAL_RCC_ClockConfig+0x264>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f023 0203 	bic.w	r2, r3, #3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	4957      	ldr	r1, [pc, #348]	@ (800469c <HAL_RCC_ClockConfig+0x264>)
 8004540:	4313      	orrs	r3, r2
 8004542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004544:	f7fd f9e0 	bl	8001908 <HAL_GetTick>
 8004548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454a:	e00a      	b.n	8004562 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800454c:	f7fd f9dc 	bl	8001908 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800455a:	4293      	cmp	r3, r2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e095      	b.n	800468e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004562:	4b4e      	ldr	r3, [pc, #312]	@ (800469c <HAL_RCC_ClockConfig+0x264>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 020c 	and.w	r2, r3, #12
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	429a      	cmp	r2, r3
 8004572:	d1eb      	bne.n	800454c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d023      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	d005      	beq.n	8004598 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800458c:	4b43      	ldr	r3, [pc, #268]	@ (800469c <HAL_RCC_ClockConfig+0x264>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	4a42      	ldr	r2, [pc, #264]	@ (800469c <HAL_RCC_ClockConfig+0x264>)
 8004592:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004596:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0308 	and.w	r3, r3, #8
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d007      	beq.n	80045b4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80045a4:	4b3d      	ldr	r3, [pc, #244]	@ (800469c <HAL_RCC_ClockConfig+0x264>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80045ac:	4a3b      	ldr	r2, [pc, #236]	@ (800469c <HAL_RCC_ClockConfig+0x264>)
 80045ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80045b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045b4:	4b39      	ldr	r3, [pc, #228]	@ (800469c <HAL_RCC_ClockConfig+0x264>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	4936      	ldr	r1, [pc, #216]	@ (800469c <HAL_RCC_ClockConfig+0x264>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	608b      	str	r3, [r1, #8]
 80045c6:	e008      	b.n	80045da <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	2b80      	cmp	r3, #128	@ 0x80
 80045cc:	d105      	bne.n	80045da <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80045ce:	4b33      	ldr	r3, [pc, #204]	@ (800469c <HAL_RCC_ClockConfig+0x264>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	4a32      	ldr	r2, [pc, #200]	@ (800469c <HAL_RCC_ClockConfig+0x264>)
 80045d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045d8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045da:	4b2f      	ldr	r3, [pc, #188]	@ (8004698 <HAL_RCC_ClockConfig+0x260>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d21d      	bcs.n	8004624 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004698 <HAL_RCC_ClockConfig+0x260>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f023 020f 	bic.w	r2, r3, #15
 80045f0:	4929      	ldr	r1, [pc, #164]	@ (8004698 <HAL_RCC_ClockConfig+0x260>)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80045f8:	f7fd f986 	bl	8001908 <HAL_GetTick>
 80045fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045fe:	e00a      	b.n	8004616 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004600:	f7fd f982 	bl	8001908 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800460e:	4293      	cmp	r3, r2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e03b      	b.n	800468e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004616:	4b20      	ldr	r3, [pc, #128]	@ (8004698 <HAL_RCC_ClockConfig+0x260>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	429a      	cmp	r2, r3
 8004622:	d1ed      	bne.n	8004600 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d008      	beq.n	8004642 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004630:	4b1a      	ldr	r3, [pc, #104]	@ (800469c <HAL_RCC_ClockConfig+0x264>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	4917      	ldr	r1, [pc, #92]	@ (800469c <HAL_RCC_ClockConfig+0x264>)
 800463e:	4313      	orrs	r3, r2
 8004640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d009      	beq.n	8004662 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800464e:	4b13      	ldr	r3, [pc, #76]	@ (800469c <HAL_RCC_ClockConfig+0x264>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	490f      	ldr	r1, [pc, #60]	@ (800469c <HAL_RCC_ClockConfig+0x264>)
 800465e:	4313      	orrs	r3, r2
 8004660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004662:	f000 f825 	bl	80046b0 <HAL_RCC_GetSysClockFreq>
 8004666:	4602      	mov	r2, r0
 8004668:	4b0c      	ldr	r3, [pc, #48]	@ (800469c <HAL_RCC_ClockConfig+0x264>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	091b      	lsrs	r3, r3, #4
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	490c      	ldr	r1, [pc, #48]	@ (80046a4 <HAL_RCC_ClockConfig+0x26c>)
 8004674:	5ccb      	ldrb	r3, [r1, r3]
 8004676:	f003 031f 	and.w	r3, r3, #31
 800467a:	fa22 f303 	lsr.w	r3, r2, r3
 800467e:	4a0a      	ldr	r2, [pc, #40]	@ (80046a8 <HAL_RCC_ClockConfig+0x270>)
 8004680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004682:	4b0a      	ldr	r3, [pc, #40]	@ (80046ac <HAL_RCC_ClockConfig+0x274>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f7fd f8f2 	bl	8001870 <HAL_InitTick>
 800468c:	4603      	mov	r3, r0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	40022000 	.word	0x40022000
 800469c:	40021000 	.word	0x40021000
 80046a0:	04c4b400 	.word	0x04c4b400
 80046a4:	08007528 	.word	0x08007528
 80046a8:	20000000 	.word	0x20000000
 80046ac:	20000004 	.word	0x20000004

080046b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80046b6:	4b2c      	ldr	r3, [pc, #176]	@ (8004768 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 030c 	and.w	r3, r3, #12
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d102      	bne.n	80046c8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046c2:	4b2a      	ldr	r3, [pc, #168]	@ (800476c <HAL_RCC_GetSysClockFreq+0xbc>)
 80046c4:	613b      	str	r3, [r7, #16]
 80046c6:	e047      	b.n	8004758 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80046c8:	4b27      	ldr	r3, [pc, #156]	@ (8004768 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f003 030c 	and.w	r3, r3, #12
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d102      	bne.n	80046da <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046d4:	4b26      	ldr	r3, [pc, #152]	@ (8004770 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046d6:	613b      	str	r3, [r7, #16]
 80046d8:	e03e      	b.n	8004758 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80046da:	4b23      	ldr	r3, [pc, #140]	@ (8004768 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 030c 	and.w	r3, r3, #12
 80046e2:	2b0c      	cmp	r3, #12
 80046e4:	d136      	bne.n	8004754 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046e6:	4b20      	ldr	r3, [pc, #128]	@ (8004768 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004768 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	091b      	lsrs	r3, r3, #4
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	3301      	adds	r3, #1
 80046fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2b03      	cmp	r3, #3
 8004702:	d10c      	bne.n	800471e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004704:	4a1a      	ldr	r2, [pc, #104]	@ (8004770 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	fbb2 f3f3 	udiv	r3, r2, r3
 800470c:	4a16      	ldr	r2, [pc, #88]	@ (8004768 <HAL_RCC_GetSysClockFreq+0xb8>)
 800470e:	68d2      	ldr	r2, [r2, #12]
 8004710:	0a12      	lsrs	r2, r2, #8
 8004712:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004716:	fb02 f303 	mul.w	r3, r2, r3
 800471a:	617b      	str	r3, [r7, #20]
      break;
 800471c:	e00c      	b.n	8004738 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800471e:	4a13      	ldr	r2, [pc, #76]	@ (800476c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	fbb2 f3f3 	udiv	r3, r2, r3
 8004726:	4a10      	ldr	r2, [pc, #64]	@ (8004768 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004728:	68d2      	ldr	r2, [r2, #12]
 800472a:	0a12      	lsrs	r2, r2, #8
 800472c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004730:	fb02 f303 	mul.w	r3, r2, r3
 8004734:	617b      	str	r3, [r7, #20]
      break;
 8004736:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004738:	4b0b      	ldr	r3, [pc, #44]	@ (8004768 <HAL_RCC_GetSysClockFreq+0xb8>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	0e5b      	lsrs	r3, r3, #25
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	3301      	adds	r3, #1
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004750:	613b      	str	r3, [r7, #16]
 8004752:	e001      	b.n	8004758 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004758:	693b      	ldr	r3, [r7, #16]
}
 800475a:	4618      	mov	r0, r3
 800475c:	371c      	adds	r7, #28
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	40021000 	.word	0x40021000
 800476c:	00f42400 	.word	0x00f42400
 8004770:	016e3600 	.word	0x016e3600

08004774 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004778:	4b03      	ldr	r3, [pc, #12]	@ (8004788 <HAL_RCC_GetHCLKFreq+0x14>)
 800477a:	681b      	ldr	r3, [r3, #0]
}
 800477c:	4618      	mov	r0, r3
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	20000000 	.word	0x20000000

0800478c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004790:	f7ff fff0 	bl	8004774 <HAL_RCC_GetHCLKFreq>
 8004794:	4602      	mov	r2, r0
 8004796:	4b06      	ldr	r3, [pc, #24]	@ (80047b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	0a1b      	lsrs	r3, r3, #8
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	4904      	ldr	r1, [pc, #16]	@ (80047b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047a2:	5ccb      	ldrb	r3, [r1, r3]
 80047a4:	f003 031f 	and.w	r3, r3, #31
 80047a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	40021000 	.word	0x40021000
 80047b4:	08007538 	.word	0x08007538

080047b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047bc:	f7ff ffda 	bl	8004774 <HAL_RCC_GetHCLKFreq>
 80047c0:	4602      	mov	r2, r0
 80047c2:	4b06      	ldr	r3, [pc, #24]	@ (80047dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	0adb      	lsrs	r3, r3, #11
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	4904      	ldr	r1, [pc, #16]	@ (80047e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047ce:	5ccb      	ldrb	r3, [r1, r3]
 80047d0:	f003 031f 	and.w	r3, r3, #31
 80047d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047d8:	4618      	mov	r0, r3
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40021000 	.word	0x40021000
 80047e0:	08007538 	.word	0x08007538

080047e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004864 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004864 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	091b      	lsrs	r3, r3, #4
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	3301      	adds	r3, #1
 8004800:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	2b03      	cmp	r3, #3
 8004806:	d10c      	bne.n	8004822 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004808:	4a17      	ldr	r2, [pc, #92]	@ (8004868 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004810:	4a14      	ldr	r2, [pc, #80]	@ (8004864 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004812:	68d2      	ldr	r2, [r2, #12]
 8004814:	0a12      	lsrs	r2, r2, #8
 8004816:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800481a:	fb02 f303 	mul.w	r3, r2, r3
 800481e:	617b      	str	r3, [r7, #20]
    break;
 8004820:	e00c      	b.n	800483c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004822:	4a12      	ldr	r2, [pc, #72]	@ (800486c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	fbb2 f3f3 	udiv	r3, r2, r3
 800482a:	4a0e      	ldr	r2, [pc, #56]	@ (8004864 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800482c:	68d2      	ldr	r2, [r2, #12]
 800482e:	0a12      	lsrs	r2, r2, #8
 8004830:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004834:	fb02 f303 	mul.w	r3, r2, r3
 8004838:	617b      	str	r3, [r7, #20]
    break;
 800483a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800483c:	4b09      	ldr	r3, [pc, #36]	@ (8004864 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	0e5b      	lsrs	r3, r3, #25
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	3301      	adds	r3, #1
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	fbb2 f3f3 	udiv	r3, r2, r3
 8004854:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004856:	687b      	ldr	r3, [r7, #4]
}
 8004858:	4618      	mov	r0, r3
 800485a:	371c      	adds	r7, #28
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	40021000 	.word	0x40021000
 8004868:	016e3600 	.word	0x016e3600
 800486c:	00f42400 	.word	0x00f42400

08004870 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004878:	2300      	movs	r3, #0
 800487a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800487c:	2300      	movs	r3, #0
 800487e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 8098 	beq.w	80049be <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800488e:	2300      	movs	r3, #0
 8004890:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004892:	4b43      	ldr	r3, [pc, #268]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10d      	bne.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800489e:	4b40      	ldr	r3, [pc, #256]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a2:	4a3f      	ldr	r2, [pc, #252]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80048aa:	4b3d      	ldr	r3, [pc, #244]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048b2:	60bb      	str	r3, [r7, #8]
 80048b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048b6:	2301      	movs	r3, #1
 80048b8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048ba:	4b3a      	ldr	r3, [pc, #232]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a39      	ldr	r2, [pc, #228]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048c6:	f7fd f81f 	bl	8001908 <HAL_GetTick>
 80048ca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048cc:	e009      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ce:	f7fd f81b 	bl	8001908 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d902      	bls.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	74fb      	strb	r3, [r7, #19]
        break;
 80048e0:	e005      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048e2:	4b30      	ldr	r3, [pc, #192]	@ (80049a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0ef      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80048ee:	7cfb      	ldrb	r3, [r7, #19]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d159      	bne.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048f4:	4b2a      	ldr	r3, [pc, #168]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048fe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d01e      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	429a      	cmp	r2, r3
 800490e:	d019      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004910:	4b23      	ldr	r3, [pc, #140]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004916:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800491a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800491c:	4b20      	ldr	r3, [pc, #128]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800491e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004922:	4a1f      	ldr	r2, [pc, #124]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004924:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004928:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800492c:	4b1c      	ldr	r3, [pc, #112]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800492e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004932:	4a1b      	ldr	r2, [pc, #108]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004934:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004938:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800493c:	4a18      	ldr	r2, [pc, #96]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d016      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494e:	f7fc ffdb 	bl	8001908 <HAL_GetTick>
 8004952:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004954:	e00b      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004956:	f7fc ffd7 	bl	8001908 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004964:	4293      	cmp	r3, r2
 8004966:	d902      	bls.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	74fb      	strb	r3, [r7, #19]
            break;
 800496c:	e006      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800496e:	4b0c      	ldr	r3, [pc, #48]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004970:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0ec      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800497c:	7cfb      	ldrb	r3, [r7, #19]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10b      	bne.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004982:	4b07      	ldr	r3, [pc, #28]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004988:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004990:	4903      	ldr	r1, [pc, #12]	@ (80049a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004992:	4313      	orrs	r3, r2
 8004994:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004998:	e008      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800499a:	7cfb      	ldrb	r3, [r7, #19]
 800499c:	74bb      	strb	r3, [r7, #18]
 800499e:	e005      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80049a0:	40021000 	.word	0x40021000
 80049a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a8:	7cfb      	ldrb	r3, [r7, #19]
 80049aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049ac:	7c7b      	ldrb	r3, [r7, #17]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d105      	bne.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049b2:	4ba7      	ldr	r3, [pc, #668]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049b6:	4aa6      	ldr	r2, [pc, #664]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049bc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049ca:	4ba1      	ldr	r3, [pc, #644]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d0:	f023 0203 	bic.w	r2, r3, #3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	499d      	ldr	r1, [pc, #628]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049ec:	4b98      	ldr	r3, [pc, #608]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f2:	f023 020c 	bic.w	r2, r3, #12
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	4995      	ldr	r1, [pc, #596]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0304 	and.w	r3, r3, #4
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a0e:	4b90      	ldr	r3, [pc, #576]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a14:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	498c      	ldr	r1, [pc, #560]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0308 	and.w	r3, r3, #8
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a30:	4b87      	ldr	r3, [pc, #540]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a36:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	4984      	ldr	r1, [pc, #528]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0310 	and.w	r3, r3, #16
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a52:	4b7f      	ldr	r3, [pc, #508]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	497b      	ldr	r1, [pc, #492]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0320 	and.w	r3, r3, #32
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d00a      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a74:	4b76      	ldr	r3, [pc, #472]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a7a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	4973      	ldr	r1, [pc, #460]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00a      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a96:	4b6e      	ldr	r3, [pc, #440]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a9c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	496a      	ldr	r1, [pc, #424]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00a      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ab8:	4b65      	ldr	r3, [pc, #404]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004abe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	4962      	ldr	r1, [pc, #392]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00a      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ada:	4b5d      	ldr	r3, [pc, #372]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ae0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae8:	4959      	ldr	r1, [pc, #356]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00a      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004afc:	4b54      	ldr	r3, [pc, #336]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004afe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b02:	f023 0203 	bic.w	r2, r3, #3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0a:	4951      	ldr	r1, [pc, #324]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b1e:	4b4c      	ldr	r3, [pc, #304]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b24:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2c:	4948      	ldr	r1, [pc, #288]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d015      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b40:	4b43      	ldr	r3, [pc, #268]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b4e:	4940      	ldr	r1, [pc, #256]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b5e:	d105      	bne.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b60:	4b3b      	ldr	r3, [pc, #236]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	4a3a      	ldr	r2, [pc, #232]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b6a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d015      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b78:	4b35      	ldr	r3, [pc, #212]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b7e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b86:	4932      	ldr	r1, [pc, #200]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b96:	d105      	bne.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b98:	4b2d      	ldr	r3, [pc, #180]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	4a2c      	ldr	r2, [pc, #176]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ba2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d015      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004bb0:	4b27      	ldr	r3, [pc, #156]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bbe:	4924      	ldr	r1, [pc, #144]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bce:	d105      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	4a1e      	ldr	r2, [pc, #120]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bda:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d015      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004be8:	4b19      	ldr	r3, [pc, #100]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf6:	4916      	ldr	r1, [pc, #88]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c06:	d105      	bne.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c08:	4b11      	ldr	r3, [pc, #68]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	4a10      	ldr	r2, [pc, #64]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c12:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d019      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c20:	4b0b      	ldr	r3, [pc, #44]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c26:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2e:	4908      	ldr	r1, [pc, #32]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c3e:	d109      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c40:	4b03      	ldr	r3, [pc, #12]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	4a02      	ldr	r2, [pc, #8]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c4a:	60d3      	str	r3, [r2, #12]
 8004c4c:	e002      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004c4e:	bf00      	nop
 8004c50:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d015      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c60:	4b29      	ldr	r3, [pc, #164]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c66:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c6e:	4926      	ldr	r1, [pc, #152]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c7e:	d105      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c80:	4b21      	ldr	r3, [pc, #132]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	4a20      	ldr	r2, [pc, #128]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c8a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d015      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004c98:	4b1b      	ldr	r3, [pc, #108]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c9e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ca6:	4918      	ldr	r1, [pc, #96]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cb6:	d105      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004cb8:	4b13      	ldr	r3, [pc, #76]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	4a12      	ldr	r2, [pc, #72]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cc2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d015      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cd6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cde:	490a      	ldr	r1, [pc, #40]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cee:	d105      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cf0:	4b05      	ldr	r3, [pc, #20]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	4a04      	ldr	r2, [pc, #16]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cfa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004cfc:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3718      	adds	r7, #24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	40021000 	.word	0x40021000

08004d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e049      	b.n	8004db2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d106      	bne.n	8004d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7fc fc9a 	bl	800166c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3304      	adds	r3, #4
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	f000 fc44 	bl	80055d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d001      	beq.n	8004dd4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e04c      	b.n	8004e6e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a26      	ldr	r2, [pc, #152]	@ (8004e7c <HAL_TIM_Base_Start+0xc0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d022      	beq.n	8004e2c <HAL_TIM_Base_Start+0x70>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dee:	d01d      	beq.n	8004e2c <HAL_TIM_Base_Start+0x70>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a22      	ldr	r2, [pc, #136]	@ (8004e80 <HAL_TIM_Base_Start+0xc4>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d018      	beq.n	8004e2c <HAL_TIM_Base_Start+0x70>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a21      	ldr	r2, [pc, #132]	@ (8004e84 <HAL_TIM_Base_Start+0xc8>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d013      	beq.n	8004e2c <HAL_TIM_Base_Start+0x70>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a1f      	ldr	r2, [pc, #124]	@ (8004e88 <HAL_TIM_Base_Start+0xcc>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d00e      	beq.n	8004e2c <HAL_TIM_Base_Start+0x70>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a1e      	ldr	r2, [pc, #120]	@ (8004e8c <HAL_TIM_Base_Start+0xd0>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d009      	beq.n	8004e2c <HAL_TIM_Base_Start+0x70>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a1c      	ldr	r2, [pc, #112]	@ (8004e90 <HAL_TIM_Base_Start+0xd4>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d004      	beq.n	8004e2c <HAL_TIM_Base_Start+0x70>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a1b      	ldr	r2, [pc, #108]	@ (8004e94 <HAL_TIM_Base_Start+0xd8>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d115      	bne.n	8004e58 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689a      	ldr	r2, [r3, #8]
 8004e32:	4b19      	ldr	r3, [pc, #100]	@ (8004e98 <HAL_TIM_Base_Start+0xdc>)
 8004e34:	4013      	ands	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b06      	cmp	r3, #6
 8004e3c:	d015      	beq.n	8004e6a <HAL_TIM_Base_Start+0xae>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e44:	d011      	beq.n	8004e6a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f042 0201 	orr.w	r2, r2, #1
 8004e54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e56:	e008      	b.n	8004e6a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0201 	orr.w	r2, r2, #1
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	e000      	b.n	8004e6c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	40012c00 	.word	0x40012c00
 8004e80:	40000400 	.word	0x40000400
 8004e84:	40000800 	.word	0x40000800
 8004e88:	40000c00 	.word	0x40000c00
 8004e8c:	40013400 	.word	0x40013400
 8004e90:	40014000 	.word	0x40014000
 8004e94:	40015000 	.word	0x40015000
 8004e98:	00010007 	.word	0x00010007

08004e9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e049      	b.n	8004f42 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d106      	bne.n	8004ec8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f841 	bl	8004f4a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	3304      	adds	r3, #4
 8004ed8:	4619      	mov	r1, r3
 8004eda:	4610      	mov	r0, r2
 8004edc:	f000 fb7c 	bl	80055d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
	...

08004f60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d109      	bne.n	8004f84 <HAL_TIM_PWM_Start+0x24>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	bf14      	ite	ne
 8004f7c:	2301      	movne	r3, #1
 8004f7e:	2300      	moveq	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	e03c      	b.n	8004ffe <HAL_TIM_PWM_Start+0x9e>
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d109      	bne.n	8004f9e <HAL_TIM_PWM_Start+0x3e>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	bf14      	ite	ne
 8004f96:	2301      	movne	r3, #1
 8004f98:	2300      	moveq	r3, #0
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	e02f      	b.n	8004ffe <HAL_TIM_PWM_Start+0x9e>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	2b08      	cmp	r3, #8
 8004fa2:	d109      	bne.n	8004fb8 <HAL_TIM_PWM_Start+0x58>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	bf14      	ite	ne
 8004fb0:	2301      	movne	r3, #1
 8004fb2:	2300      	moveq	r3, #0
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	e022      	b.n	8004ffe <HAL_TIM_PWM_Start+0x9e>
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	2b0c      	cmp	r3, #12
 8004fbc:	d109      	bne.n	8004fd2 <HAL_TIM_PWM_Start+0x72>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	bf14      	ite	ne
 8004fca:	2301      	movne	r3, #1
 8004fcc:	2300      	moveq	r3, #0
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	e015      	b.n	8004ffe <HAL_TIM_PWM_Start+0x9e>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b10      	cmp	r3, #16
 8004fd6:	d109      	bne.n	8004fec <HAL_TIM_PWM_Start+0x8c>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	bf14      	ite	ne
 8004fe4:	2301      	movne	r3, #1
 8004fe6:	2300      	moveq	r3, #0
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	e008      	b.n	8004ffe <HAL_TIM_PWM_Start+0x9e>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	bf14      	ite	ne
 8004ff8:	2301      	movne	r3, #1
 8004ffa:	2300      	moveq	r3, #0
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e0a6      	b.n	8005154 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d104      	bne.n	8005016 <HAL_TIM_PWM_Start+0xb6>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005014:	e023      	b.n	800505e <HAL_TIM_PWM_Start+0xfe>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b04      	cmp	r3, #4
 800501a:	d104      	bne.n	8005026 <HAL_TIM_PWM_Start+0xc6>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005024:	e01b      	b.n	800505e <HAL_TIM_PWM_Start+0xfe>
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	2b08      	cmp	r3, #8
 800502a:	d104      	bne.n	8005036 <HAL_TIM_PWM_Start+0xd6>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005034:	e013      	b.n	800505e <HAL_TIM_PWM_Start+0xfe>
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	2b0c      	cmp	r3, #12
 800503a:	d104      	bne.n	8005046 <HAL_TIM_PWM_Start+0xe6>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2202      	movs	r2, #2
 8005040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005044:	e00b      	b.n	800505e <HAL_TIM_PWM_Start+0xfe>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b10      	cmp	r3, #16
 800504a:	d104      	bne.n	8005056 <HAL_TIM_PWM_Start+0xf6>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005054:	e003      	b.n	800505e <HAL_TIM_PWM_Start+0xfe>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2202      	movs	r2, #2
 800505a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2201      	movs	r2, #1
 8005064:	6839      	ldr	r1, [r7, #0]
 8005066:	4618      	mov	r0, r3
 8005068:	f000 ff30 	bl	8005ecc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a3a      	ldr	r2, [pc, #232]	@ (800515c <HAL_TIM_PWM_Start+0x1fc>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d018      	beq.n	80050a8 <HAL_TIM_PWM_Start+0x148>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a39      	ldr	r2, [pc, #228]	@ (8005160 <HAL_TIM_PWM_Start+0x200>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d013      	beq.n	80050a8 <HAL_TIM_PWM_Start+0x148>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a37      	ldr	r2, [pc, #220]	@ (8005164 <HAL_TIM_PWM_Start+0x204>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d00e      	beq.n	80050a8 <HAL_TIM_PWM_Start+0x148>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a36      	ldr	r2, [pc, #216]	@ (8005168 <HAL_TIM_PWM_Start+0x208>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d009      	beq.n	80050a8 <HAL_TIM_PWM_Start+0x148>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a34      	ldr	r2, [pc, #208]	@ (800516c <HAL_TIM_PWM_Start+0x20c>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d004      	beq.n	80050a8 <HAL_TIM_PWM_Start+0x148>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a33      	ldr	r2, [pc, #204]	@ (8005170 <HAL_TIM_PWM_Start+0x210>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d101      	bne.n	80050ac <HAL_TIM_PWM_Start+0x14c>
 80050a8:	2301      	movs	r3, #1
 80050aa:	e000      	b.n	80050ae <HAL_TIM_PWM_Start+0x14e>
 80050ac:	2300      	movs	r3, #0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d007      	beq.n	80050c2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a25      	ldr	r2, [pc, #148]	@ (800515c <HAL_TIM_PWM_Start+0x1fc>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d022      	beq.n	8005112 <HAL_TIM_PWM_Start+0x1b2>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050d4:	d01d      	beq.n	8005112 <HAL_TIM_PWM_Start+0x1b2>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a26      	ldr	r2, [pc, #152]	@ (8005174 <HAL_TIM_PWM_Start+0x214>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d018      	beq.n	8005112 <HAL_TIM_PWM_Start+0x1b2>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a24      	ldr	r2, [pc, #144]	@ (8005178 <HAL_TIM_PWM_Start+0x218>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d013      	beq.n	8005112 <HAL_TIM_PWM_Start+0x1b2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a23      	ldr	r2, [pc, #140]	@ (800517c <HAL_TIM_PWM_Start+0x21c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d00e      	beq.n	8005112 <HAL_TIM_PWM_Start+0x1b2>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a19      	ldr	r2, [pc, #100]	@ (8005160 <HAL_TIM_PWM_Start+0x200>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d009      	beq.n	8005112 <HAL_TIM_PWM_Start+0x1b2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a18      	ldr	r2, [pc, #96]	@ (8005164 <HAL_TIM_PWM_Start+0x204>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d004      	beq.n	8005112 <HAL_TIM_PWM_Start+0x1b2>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a18      	ldr	r2, [pc, #96]	@ (8005170 <HAL_TIM_PWM_Start+0x210>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d115      	bne.n	800513e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	4b19      	ldr	r3, [pc, #100]	@ (8005180 <HAL_TIM_PWM_Start+0x220>)
 800511a:	4013      	ands	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b06      	cmp	r3, #6
 8005122:	d015      	beq.n	8005150 <HAL_TIM_PWM_Start+0x1f0>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800512a:	d011      	beq.n	8005150 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0201 	orr.w	r2, r2, #1
 800513a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800513c:	e008      	b.n	8005150 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f042 0201 	orr.w	r2, r2, #1
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	e000      	b.n	8005152 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005150:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	40012c00 	.word	0x40012c00
 8005160:	40013400 	.word	0x40013400
 8005164:	40014000 	.word	0x40014000
 8005168:	40014400 	.word	0x40014400
 800516c:	40014800 	.word	0x40014800
 8005170:	40015000 	.word	0x40015000
 8005174:	40000400 	.word	0x40000400
 8005178:	40000800 	.word	0x40000800
 800517c:	40000c00 	.word	0x40000c00
 8005180:	00010007 	.word	0x00010007

08005184 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005190:	2300      	movs	r3, #0
 8005192:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800519a:	2b01      	cmp	r3, #1
 800519c:	d101      	bne.n	80051a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800519e:	2302      	movs	r3, #2
 80051a0:	e0ff      	b.n	80053a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b14      	cmp	r3, #20
 80051ae:	f200 80f0 	bhi.w	8005392 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80051b2:	a201      	add	r2, pc, #4	@ (adr r2, 80051b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b8:	0800520d 	.word	0x0800520d
 80051bc:	08005393 	.word	0x08005393
 80051c0:	08005393 	.word	0x08005393
 80051c4:	08005393 	.word	0x08005393
 80051c8:	0800524d 	.word	0x0800524d
 80051cc:	08005393 	.word	0x08005393
 80051d0:	08005393 	.word	0x08005393
 80051d4:	08005393 	.word	0x08005393
 80051d8:	0800528f 	.word	0x0800528f
 80051dc:	08005393 	.word	0x08005393
 80051e0:	08005393 	.word	0x08005393
 80051e4:	08005393 	.word	0x08005393
 80051e8:	080052cf 	.word	0x080052cf
 80051ec:	08005393 	.word	0x08005393
 80051f0:	08005393 	.word	0x08005393
 80051f4:	08005393 	.word	0x08005393
 80051f8:	08005311 	.word	0x08005311
 80051fc:	08005393 	.word	0x08005393
 8005200:	08005393 	.word	0x08005393
 8005204:	08005393 	.word	0x08005393
 8005208:	08005351 	.word	0x08005351
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68b9      	ldr	r1, [r7, #8]
 8005212:	4618      	mov	r0, r3
 8005214:	f000 fa94 	bl	8005740 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	699a      	ldr	r2, [r3, #24]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f042 0208 	orr.w	r2, r2, #8
 8005226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	699a      	ldr	r2, [r3, #24]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 0204 	bic.w	r2, r2, #4
 8005236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6999      	ldr	r1, [r3, #24]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	691a      	ldr	r2, [r3, #16]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	619a      	str	r2, [r3, #24]
      break;
 800524a:	e0a5      	b.n	8005398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68b9      	ldr	r1, [r7, #8]
 8005252:	4618      	mov	r0, r3
 8005254:	f000 fb0e 	bl	8005874 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699a      	ldr	r2, [r3, #24]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005266:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	699a      	ldr	r2, [r3, #24]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6999      	ldr	r1, [r3, #24]
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	021a      	lsls	r2, r3, #8
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	619a      	str	r2, [r3, #24]
      break;
 800528c:	e084      	b.n	8005398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68b9      	ldr	r1, [r7, #8]
 8005294:	4618      	mov	r0, r3
 8005296:	f000 fb81 	bl	800599c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	69da      	ldr	r2, [r3, #28]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f042 0208 	orr.w	r2, r2, #8
 80052a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	69da      	ldr	r2, [r3, #28]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f022 0204 	bic.w	r2, r2, #4
 80052b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	69d9      	ldr	r1, [r3, #28]
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	691a      	ldr	r2, [r3, #16]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	61da      	str	r2, [r3, #28]
      break;
 80052cc:	e064      	b.n	8005398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68b9      	ldr	r1, [r7, #8]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f000 fbf3 	bl	8005ac0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69da      	ldr	r2, [r3, #28]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	69da      	ldr	r2, [r3, #28]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69d9      	ldr	r1, [r3, #28]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	691b      	ldr	r3, [r3, #16]
 8005304:	021a      	lsls	r2, r3, #8
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	430a      	orrs	r2, r1
 800530c:	61da      	str	r2, [r3, #28]
      break;
 800530e:	e043      	b.n	8005398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68b9      	ldr	r1, [r7, #8]
 8005316:	4618      	mov	r0, r3
 8005318:	f000 fc66 	bl	8005be8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 0208 	orr.w	r2, r2, #8
 800532a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 0204 	bic.w	r2, r2, #4
 800533a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	691a      	ldr	r2, [r3, #16]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800534e:	e023      	b.n	8005398 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68b9      	ldr	r1, [r7, #8]
 8005356:	4618      	mov	r0, r3
 8005358:	f000 fcb0 	bl	8005cbc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800536a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800537a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	021a      	lsls	r2, r3, #8
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005390:	e002      	b.n	8005398 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	75fb      	strb	r3, [r7, #23]
      break;
 8005396:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80053a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop

080053ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053b6:	2300      	movs	r3, #0
 80053b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d101      	bne.n	80053c8 <HAL_TIM_ConfigClockSource+0x1c>
 80053c4:	2302      	movs	r3, #2
 80053c6:	e0f6      	b.n	80055b6 <HAL_TIM_ConfigClockSource+0x20a>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2202      	movs	r2, #2
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80053e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80053ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a6f      	ldr	r2, [pc, #444]	@ (80055c0 <HAL_TIM_ConfigClockSource+0x214>)
 8005402:	4293      	cmp	r3, r2
 8005404:	f000 80c1 	beq.w	800558a <HAL_TIM_ConfigClockSource+0x1de>
 8005408:	4a6d      	ldr	r2, [pc, #436]	@ (80055c0 <HAL_TIM_ConfigClockSource+0x214>)
 800540a:	4293      	cmp	r3, r2
 800540c:	f200 80c6 	bhi.w	800559c <HAL_TIM_ConfigClockSource+0x1f0>
 8005410:	4a6c      	ldr	r2, [pc, #432]	@ (80055c4 <HAL_TIM_ConfigClockSource+0x218>)
 8005412:	4293      	cmp	r3, r2
 8005414:	f000 80b9 	beq.w	800558a <HAL_TIM_ConfigClockSource+0x1de>
 8005418:	4a6a      	ldr	r2, [pc, #424]	@ (80055c4 <HAL_TIM_ConfigClockSource+0x218>)
 800541a:	4293      	cmp	r3, r2
 800541c:	f200 80be 	bhi.w	800559c <HAL_TIM_ConfigClockSource+0x1f0>
 8005420:	4a69      	ldr	r2, [pc, #420]	@ (80055c8 <HAL_TIM_ConfigClockSource+0x21c>)
 8005422:	4293      	cmp	r3, r2
 8005424:	f000 80b1 	beq.w	800558a <HAL_TIM_ConfigClockSource+0x1de>
 8005428:	4a67      	ldr	r2, [pc, #412]	@ (80055c8 <HAL_TIM_ConfigClockSource+0x21c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	f200 80b6 	bhi.w	800559c <HAL_TIM_ConfigClockSource+0x1f0>
 8005430:	4a66      	ldr	r2, [pc, #408]	@ (80055cc <HAL_TIM_ConfigClockSource+0x220>)
 8005432:	4293      	cmp	r3, r2
 8005434:	f000 80a9 	beq.w	800558a <HAL_TIM_ConfigClockSource+0x1de>
 8005438:	4a64      	ldr	r2, [pc, #400]	@ (80055cc <HAL_TIM_ConfigClockSource+0x220>)
 800543a:	4293      	cmp	r3, r2
 800543c:	f200 80ae 	bhi.w	800559c <HAL_TIM_ConfigClockSource+0x1f0>
 8005440:	4a63      	ldr	r2, [pc, #396]	@ (80055d0 <HAL_TIM_ConfigClockSource+0x224>)
 8005442:	4293      	cmp	r3, r2
 8005444:	f000 80a1 	beq.w	800558a <HAL_TIM_ConfigClockSource+0x1de>
 8005448:	4a61      	ldr	r2, [pc, #388]	@ (80055d0 <HAL_TIM_ConfigClockSource+0x224>)
 800544a:	4293      	cmp	r3, r2
 800544c:	f200 80a6 	bhi.w	800559c <HAL_TIM_ConfigClockSource+0x1f0>
 8005450:	4a60      	ldr	r2, [pc, #384]	@ (80055d4 <HAL_TIM_ConfigClockSource+0x228>)
 8005452:	4293      	cmp	r3, r2
 8005454:	f000 8099 	beq.w	800558a <HAL_TIM_ConfigClockSource+0x1de>
 8005458:	4a5e      	ldr	r2, [pc, #376]	@ (80055d4 <HAL_TIM_ConfigClockSource+0x228>)
 800545a:	4293      	cmp	r3, r2
 800545c:	f200 809e 	bhi.w	800559c <HAL_TIM_ConfigClockSource+0x1f0>
 8005460:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005464:	f000 8091 	beq.w	800558a <HAL_TIM_ConfigClockSource+0x1de>
 8005468:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800546c:	f200 8096 	bhi.w	800559c <HAL_TIM_ConfigClockSource+0x1f0>
 8005470:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005474:	f000 8089 	beq.w	800558a <HAL_TIM_ConfigClockSource+0x1de>
 8005478:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800547c:	f200 808e 	bhi.w	800559c <HAL_TIM_ConfigClockSource+0x1f0>
 8005480:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005484:	d03e      	beq.n	8005504 <HAL_TIM_ConfigClockSource+0x158>
 8005486:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800548a:	f200 8087 	bhi.w	800559c <HAL_TIM_ConfigClockSource+0x1f0>
 800548e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005492:	f000 8086 	beq.w	80055a2 <HAL_TIM_ConfigClockSource+0x1f6>
 8005496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800549a:	d87f      	bhi.n	800559c <HAL_TIM_ConfigClockSource+0x1f0>
 800549c:	2b70      	cmp	r3, #112	@ 0x70
 800549e:	d01a      	beq.n	80054d6 <HAL_TIM_ConfigClockSource+0x12a>
 80054a0:	2b70      	cmp	r3, #112	@ 0x70
 80054a2:	d87b      	bhi.n	800559c <HAL_TIM_ConfigClockSource+0x1f0>
 80054a4:	2b60      	cmp	r3, #96	@ 0x60
 80054a6:	d050      	beq.n	800554a <HAL_TIM_ConfigClockSource+0x19e>
 80054a8:	2b60      	cmp	r3, #96	@ 0x60
 80054aa:	d877      	bhi.n	800559c <HAL_TIM_ConfigClockSource+0x1f0>
 80054ac:	2b50      	cmp	r3, #80	@ 0x50
 80054ae:	d03c      	beq.n	800552a <HAL_TIM_ConfigClockSource+0x17e>
 80054b0:	2b50      	cmp	r3, #80	@ 0x50
 80054b2:	d873      	bhi.n	800559c <HAL_TIM_ConfigClockSource+0x1f0>
 80054b4:	2b40      	cmp	r3, #64	@ 0x40
 80054b6:	d058      	beq.n	800556a <HAL_TIM_ConfigClockSource+0x1be>
 80054b8:	2b40      	cmp	r3, #64	@ 0x40
 80054ba:	d86f      	bhi.n	800559c <HAL_TIM_ConfigClockSource+0x1f0>
 80054bc:	2b30      	cmp	r3, #48	@ 0x30
 80054be:	d064      	beq.n	800558a <HAL_TIM_ConfigClockSource+0x1de>
 80054c0:	2b30      	cmp	r3, #48	@ 0x30
 80054c2:	d86b      	bhi.n	800559c <HAL_TIM_ConfigClockSource+0x1f0>
 80054c4:	2b20      	cmp	r3, #32
 80054c6:	d060      	beq.n	800558a <HAL_TIM_ConfigClockSource+0x1de>
 80054c8:	2b20      	cmp	r3, #32
 80054ca:	d867      	bhi.n	800559c <HAL_TIM_ConfigClockSource+0x1f0>
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d05c      	beq.n	800558a <HAL_TIM_ConfigClockSource+0x1de>
 80054d0:	2b10      	cmp	r3, #16
 80054d2:	d05a      	beq.n	800558a <HAL_TIM_ConfigClockSource+0x1de>
 80054d4:	e062      	b.n	800559c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054e6:	f000 fcd1 	bl	8005e8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80054f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	609a      	str	r2, [r3, #8]
      break;
 8005502:	e04f      	b.n	80055a4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005514:	f000 fcba 	bl	8005e8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	689a      	ldr	r2, [r3, #8]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005526:	609a      	str	r2, [r3, #8]
      break;
 8005528:	e03c      	b.n	80055a4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005536:	461a      	mov	r2, r3
 8005538:	f000 fc2c 	bl	8005d94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2150      	movs	r1, #80	@ 0x50
 8005542:	4618      	mov	r0, r3
 8005544:	f000 fc85 	bl	8005e52 <TIM_ITRx_SetConfig>
      break;
 8005548:	e02c      	b.n	80055a4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005556:	461a      	mov	r2, r3
 8005558:	f000 fc4b 	bl	8005df2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2160      	movs	r1, #96	@ 0x60
 8005562:	4618      	mov	r0, r3
 8005564:	f000 fc75 	bl	8005e52 <TIM_ITRx_SetConfig>
      break;
 8005568:	e01c      	b.n	80055a4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005576:	461a      	mov	r2, r3
 8005578:	f000 fc0c 	bl	8005d94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2140      	movs	r1, #64	@ 0x40
 8005582:	4618      	mov	r0, r3
 8005584:	f000 fc65 	bl	8005e52 <TIM_ITRx_SetConfig>
      break;
 8005588:	e00c      	b.n	80055a4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4619      	mov	r1, r3
 8005594:	4610      	mov	r0, r2
 8005596:	f000 fc5c 	bl	8005e52 <TIM_ITRx_SetConfig>
      break;
 800559a:	e003      	b.n	80055a4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	73fb      	strb	r3, [r7, #15]
      break;
 80055a0:	e000      	b.n	80055a4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80055a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	00100070 	.word	0x00100070
 80055c4:	00100060 	.word	0x00100060
 80055c8:	00100050 	.word	0x00100050
 80055cc:	00100040 	.word	0x00100040
 80055d0:	00100030 	.word	0x00100030
 80055d4:	00100020 	.word	0x00100020

080055d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a4c      	ldr	r2, [pc, #304]	@ (800571c <TIM_Base_SetConfig+0x144>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d017      	beq.n	8005620 <TIM_Base_SetConfig+0x48>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f6:	d013      	beq.n	8005620 <TIM_Base_SetConfig+0x48>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a49      	ldr	r2, [pc, #292]	@ (8005720 <TIM_Base_SetConfig+0x148>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d00f      	beq.n	8005620 <TIM_Base_SetConfig+0x48>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a48      	ldr	r2, [pc, #288]	@ (8005724 <TIM_Base_SetConfig+0x14c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d00b      	beq.n	8005620 <TIM_Base_SetConfig+0x48>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a47      	ldr	r2, [pc, #284]	@ (8005728 <TIM_Base_SetConfig+0x150>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d007      	beq.n	8005620 <TIM_Base_SetConfig+0x48>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a46      	ldr	r2, [pc, #280]	@ (800572c <TIM_Base_SetConfig+0x154>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d003      	beq.n	8005620 <TIM_Base_SetConfig+0x48>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a45      	ldr	r2, [pc, #276]	@ (8005730 <TIM_Base_SetConfig+0x158>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d108      	bne.n	8005632 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005626:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	4313      	orrs	r3, r2
 8005630:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a39      	ldr	r2, [pc, #228]	@ (800571c <TIM_Base_SetConfig+0x144>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d023      	beq.n	8005682 <TIM_Base_SetConfig+0xaa>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005640:	d01f      	beq.n	8005682 <TIM_Base_SetConfig+0xaa>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a36      	ldr	r2, [pc, #216]	@ (8005720 <TIM_Base_SetConfig+0x148>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d01b      	beq.n	8005682 <TIM_Base_SetConfig+0xaa>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a35      	ldr	r2, [pc, #212]	@ (8005724 <TIM_Base_SetConfig+0x14c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d017      	beq.n	8005682 <TIM_Base_SetConfig+0xaa>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a34      	ldr	r2, [pc, #208]	@ (8005728 <TIM_Base_SetConfig+0x150>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d013      	beq.n	8005682 <TIM_Base_SetConfig+0xaa>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a33      	ldr	r2, [pc, #204]	@ (800572c <TIM_Base_SetConfig+0x154>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d00f      	beq.n	8005682 <TIM_Base_SetConfig+0xaa>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a33      	ldr	r2, [pc, #204]	@ (8005734 <TIM_Base_SetConfig+0x15c>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d00b      	beq.n	8005682 <TIM_Base_SetConfig+0xaa>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a32      	ldr	r2, [pc, #200]	@ (8005738 <TIM_Base_SetConfig+0x160>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d007      	beq.n	8005682 <TIM_Base_SetConfig+0xaa>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a31      	ldr	r2, [pc, #196]	@ (800573c <TIM_Base_SetConfig+0x164>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d003      	beq.n	8005682 <TIM_Base_SetConfig+0xaa>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a2c      	ldr	r2, [pc, #176]	@ (8005730 <TIM_Base_SetConfig+0x158>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d108      	bne.n	8005694 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	4313      	orrs	r3, r2
 8005692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a18      	ldr	r2, [pc, #96]	@ (800571c <TIM_Base_SetConfig+0x144>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d013      	beq.n	80056e8 <TIM_Base_SetConfig+0x110>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a1a      	ldr	r2, [pc, #104]	@ (800572c <TIM_Base_SetConfig+0x154>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d00f      	beq.n	80056e8 <TIM_Base_SetConfig+0x110>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a1a      	ldr	r2, [pc, #104]	@ (8005734 <TIM_Base_SetConfig+0x15c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d00b      	beq.n	80056e8 <TIM_Base_SetConfig+0x110>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a19      	ldr	r2, [pc, #100]	@ (8005738 <TIM_Base_SetConfig+0x160>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d007      	beq.n	80056e8 <TIM_Base_SetConfig+0x110>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a18      	ldr	r2, [pc, #96]	@ (800573c <TIM_Base_SetConfig+0x164>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d003      	beq.n	80056e8 <TIM_Base_SetConfig+0x110>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a13      	ldr	r2, [pc, #76]	@ (8005730 <TIM_Base_SetConfig+0x158>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d103      	bne.n	80056f0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	691a      	ldr	r2, [r3, #16]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d105      	bne.n	800570e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f023 0201 	bic.w	r2, r3, #1
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	611a      	str	r2, [r3, #16]
  }
}
 800570e:	bf00      	nop
 8005710:	3714      	adds	r7, #20
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	40012c00 	.word	0x40012c00
 8005720:	40000400 	.word	0x40000400
 8005724:	40000800 	.word	0x40000800
 8005728:	40000c00 	.word	0x40000c00
 800572c:	40013400 	.word	0x40013400
 8005730:	40015000 	.word	0x40015000
 8005734:	40014000 	.word	0x40014000
 8005738:	40014400 	.word	0x40014400
 800573c:	40014800 	.word	0x40014800

08005740 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	f023 0201 	bic.w	r2, r3, #1
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800576e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0303 	bic.w	r3, r3, #3
 800577a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f023 0302 	bic.w	r3, r3, #2
 800578c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	4313      	orrs	r3, r2
 8005796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a30      	ldr	r2, [pc, #192]	@ (800585c <TIM_OC1_SetConfig+0x11c>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d013      	beq.n	80057c8 <TIM_OC1_SetConfig+0x88>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a2f      	ldr	r2, [pc, #188]	@ (8005860 <TIM_OC1_SetConfig+0x120>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d00f      	beq.n	80057c8 <TIM_OC1_SetConfig+0x88>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a2e      	ldr	r2, [pc, #184]	@ (8005864 <TIM_OC1_SetConfig+0x124>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d00b      	beq.n	80057c8 <TIM_OC1_SetConfig+0x88>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a2d      	ldr	r2, [pc, #180]	@ (8005868 <TIM_OC1_SetConfig+0x128>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d007      	beq.n	80057c8 <TIM_OC1_SetConfig+0x88>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a2c      	ldr	r2, [pc, #176]	@ (800586c <TIM_OC1_SetConfig+0x12c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d003      	beq.n	80057c8 <TIM_OC1_SetConfig+0x88>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a2b      	ldr	r2, [pc, #172]	@ (8005870 <TIM_OC1_SetConfig+0x130>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d10c      	bne.n	80057e2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f023 0308 	bic.w	r3, r3, #8
 80057ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f023 0304 	bic.w	r3, r3, #4
 80057e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a1d      	ldr	r2, [pc, #116]	@ (800585c <TIM_OC1_SetConfig+0x11c>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d013      	beq.n	8005812 <TIM_OC1_SetConfig+0xd2>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a1c      	ldr	r2, [pc, #112]	@ (8005860 <TIM_OC1_SetConfig+0x120>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00f      	beq.n	8005812 <TIM_OC1_SetConfig+0xd2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005864 <TIM_OC1_SetConfig+0x124>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d00b      	beq.n	8005812 <TIM_OC1_SetConfig+0xd2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a1a      	ldr	r2, [pc, #104]	@ (8005868 <TIM_OC1_SetConfig+0x128>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d007      	beq.n	8005812 <TIM_OC1_SetConfig+0xd2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a19      	ldr	r2, [pc, #100]	@ (800586c <TIM_OC1_SetConfig+0x12c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d003      	beq.n	8005812 <TIM_OC1_SetConfig+0xd2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a18      	ldr	r2, [pc, #96]	@ (8005870 <TIM_OC1_SetConfig+0x130>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d111      	bne.n	8005836 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	4313      	orrs	r3, r2
 800582a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	4313      	orrs	r3, r2
 8005834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	621a      	str	r2, [r3, #32]
}
 8005850:	bf00      	nop
 8005852:	371c      	adds	r7, #28
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	40012c00 	.word	0x40012c00
 8005860:	40013400 	.word	0x40013400
 8005864:	40014000 	.word	0x40014000
 8005868:	40014400 	.word	0x40014400
 800586c:	40014800 	.word	0x40014800
 8005870:	40015000 	.word	0x40015000

08005874 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005874:	b480      	push	{r7}
 8005876:	b087      	sub	sp, #28
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	f023 0210 	bic.w	r2, r3, #16
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	021b      	lsls	r3, r3, #8
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f023 0320 	bic.w	r3, r3, #32
 80058c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	011b      	lsls	r3, r3, #4
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a2c      	ldr	r2, [pc, #176]	@ (8005984 <TIM_OC2_SetConfig+0x110>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d007      	beq.n	80058e8 <TIM_OC2_SetConfig+0x74>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a2b      	ldr	r2, [pc, #172]	@ (8005988 <TIM_OC2_SetConfig+0x114>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d003      	beq.n	80058e8 <TIM_OC2_SetConfig+0x74>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a2a      	ldr	r2, [pc, #168]	@ (800598c <TIM_OC2_SetConfig+0x118>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d10d      	bne.n	8005904 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	011b      	lsls	r3, r3, #4
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005902:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a1f      	ldr	r2, [pc, #124]	@ (8005984 <TIM_OC2_SetConfig+0x110>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d013      	beq.n	8005934 <TIM_OC2_SetConfig+0xc0>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a1e      	ldr	r2, [pc, #120]	@ (8005988 <TIM_OC2_SetConfig+0x114>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d00f      	beq.n	8005934 <TIM_OC2_SetConfig+0xc0>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a1e      	ldr	r2, [pc, #120]	@ (8005990 <TIM_OC2_SetConfig+0x11c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00b      	beq.n	8005934 <TIM_OC2_SetConfig+0xc0>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a1d      	ldr	r2, [pc, #116]	@ (8005994 <TIM_OC2_SetConfig+0x120>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d007      	beq.n	8005934 <TIM_OC2_SetConfig+0xc0>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a1c      	ldr	r2, [pc, #112]	@ (8005998 <TIM_OC2_SetConfig+0x124>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d003      	beq.n	8005934 <TIM_OC2_SetConfig+0xc0>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a17      	ldr	r2, [pc, #92]	@ (800598c <TIM_OC2_SetConfig+0x118>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d113      	bne.n	800595c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800593a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005942:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	4313      	orrs	r3, r2
 800594e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	4313      	orrs	r3, r2
 800595a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	621a      	str	r2, [r3, #32]
}
 8005976:	bf00      	nop
 8005978:	371c      	adds	r7, #28
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	40012c00 	.word	0x40012c00
 8005988:	40013400 	.word	0x40013400
 800598c:	40015000 	.word	0x40015000
 8005990:	40014000 	.word	0x40014000
 8005994:	40014400 	.word	0x40014400
 8005998:	40014800 	.word	0x40014800

0800599c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800599c:	b480      	push	{r7}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69db      	ldr	r3, [r3, #28]
 80059c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 0303 	bic.w	r3, r3, #3
 80059d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	021b      	lsls	r3, r3, #8
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a2b      	ldr	r2, [pc, #172]	@ (8005aa8 <TIM_OC3_SetConfig+0x10c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d007      	beq.n	8005a0e <TIM_OC3_SetConfig+0x72>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a2a      	ldr	r2, [pc, #168]	@ (8005aac <TIM_OC3_SetConfig+0x110>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d003      	beq.n	8005a0e <TIM_OC3_SetConfig+0x72>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a29      	ldr	r2, [pc, #164]	@ (8005ab0 <TIM_OC3_SetConfig+0x114>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d10d      	bne.n	8005a2a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	021b      	lsls	r3, r3, #8
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a1e      	ldr	r2, [pc, #120]	@ (8005aa8 <TIM_OC3_SetConfig+0x10c>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d013      	beq.n	8005a5a <TIM_OC3_SetConfig+0xbe>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a1d      	ldr	r2, [pc, #116]	@ (8005aac <TIM_OC3_SetConfig+0x110>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d00f      	beq.n	8005a5a <TIM_OC3_SetConfig+0xbe>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ab4 <TIM_OC3_SetConfig+0x118>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d00b      	beq.n	8005a5a <TIM_OC3_SetConfig+0xbe>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a1c      	ldr	r2, [pc, #112]	@ (8005ab8 <TIM_OC3_SetConfig+0x11c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d007      	beq.n	8005a5a <TIM_OC3_SetConfig+0xbe>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a1b      	ldr	r2, [pc, #108]	@ (8005abc <TIM_OC3_SetConfig+0x120>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d003      	beq.n	8005a5a <TIM_OC3_SetConfig+0xbe>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a16      	ldr	r2, [pc, #88]	@ (8005ab0 <TIM_OC3_SetConfig+0x114>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d113      	bne.n	8005a82 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	011b      	lsls	r3, r3, #4
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	011b      	lsls	r3, r3, #4
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	621a      	str	r2, [r3, #32]
}
 8005a9c:	bf00      	nop
 8005a9e:	371c      	adds	r7, #28
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	40012c00 	.word	0x40012c00
 8005aac:	40013400 	.word	0x40013400
 8005ab0:	40015000 	.word	0x40015000
 8005ab4:	40014000 	.word	0x40014000
 8005ab8:	40014400 	.word	0x40014400
 8005abc:	40014800 	.word	0x40014800

08005ac0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005aee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	021b      	lsls	r3, r3, #8
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	031b      	lsls	r3, r3, #12
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a2c      	ldr	r2, [pc, #176]	@ (8005bd0 <TIM_OC4_SetConfig+0x110>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d007      	beq.n	8005b34 <TIM_OC4_SetConfig+0x74>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a2b      	ldr	r2, [pc, #172]	@ (8005bd4 <TIM_OC4_SetConfig+0x114>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d003      	beq.n	8005b34 <TIM_OC4_SetConfig+0x74>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a2a      	ldr	r2, [pc, #168]	@ (8005bd8 <TIM_OC4_SetConfig+0x118>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d10d      	bne.n	8005b50 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	031b      	lsls	r3, r3, #12
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a1f      	ldr	r2, [pc, #124]	@ (8005bd0 <TIM_OC4_SetConfig+0x110>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d013      	beq.n	8005b80 <TIM_OC4_SetConfig+0xc0>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a1e      	ldr	r2, [pc, #120]	@ (8005bd4 <TIM_OC4_SetConfig+0x114>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00f      	beq.n	8005b80 <TIM_OC4_SetConfig+0xc0>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a1e      	ldr	r2, [pc, #120]	@ (8005bdc <TIM_OC4_SetConfig+0x11c>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d00b      	beq.n	8005b80 <TIM_OC4_SetConfig+0xc0>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a1d      	ldr	r2, [pc, #116]	@ (8005be0 <TIM_OC4_SetConfig+0x120>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d007      	beq.n	8005b80 <TIM_OC4_SetConfig+0xc0>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a1c      	ldr	r2, [pc, #112]	@ (8005be4 <TIM_OC4_SetConfig+0x124>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d003      	beq.n	8005b80 <TIM_OC4_SetConfig+0xc0>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a17      	ldr	r2, [pc, #92]	@ (8005bd8 <TIM_OC4_SetConfig+0x118>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d113      	bne.n	8005ba8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b86:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005b8e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	019b      	lsls	r3, r3, #6
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	019b      	lsls	r3, r3, #6
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	621a      	str	r2, [r3, #32]
}
 8005bc2:	bf00      	nop
 8005bc4:	371c      	adds	r7, #28
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	40012c00 	.word	0x40012c00
 8005bd4:	40013400 	.word	0x40013400
 8005bd8:	40015000 	.word	0x40015000
 8005bdc:	40014000 	.word	0x40014000
 8005be0:	40014400 	.word	0x40014400
 8005be4:	40014800 	.word	0x40014800

08005be8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005c2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	041b      	lsls	r3, r3, #16
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a19      	ldr	r2, [pc, #100]	@ (8005ca4 <TIM_OC5_SetConfig+0xbc>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d013      	beq.n	8005c6a <TIM_OC5_SetConfig+0x82>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a18      	ldr	r2, [pc, #96]	@ (8005ca8 <TIM_OC5_SetConfig+0xc0>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d00f      	beq.n	8005c6a <TIM_OC5_SetConfig+0x82>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a17      	ldr	r2, [pc, #92]	@ (8005cac <TIM_OC5_SetConfig+0xc4>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d00b      	beq.n	8005c6a <TIM_OC5_SetConfig+0x82>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a16      	ldr	r2, [pc, #88]	@ (8005cb0 <TIM_OC5_SetConfig+0xc8>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d007      	beq.n	8005c6a <TIM_OC5_SetConfig+0x82>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a15      	ldr	r2, [pc, #84]	@ (8005cb4 <TIM_OC5_SetConfig+0xcc>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d003      	beq.n	8005c6a <TIM_OC5_SetConfig+0x82>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a14      	ldr	r2, [pc, #80]	@ (8005cb8 <TIM_OC5_SetConfig+0xd0>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d109      	bne.n	8005c7e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	021b      	lsls	r3, r3, #8
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	693a      	ldr	r2, [r7, #16]
 8005c96:	621a      	str	r2, [r3, #32]
}
 8005c98:	bf00      	nop
 8005c9a:	371c      	adds	r7, #28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	40012c00 	.word	0x40012c00
 8005ca8:	40013400 	.word	0x40013400
 8005cac:	40014000 	.word	0x40014000
 8005cb0:	40014400 	.word	0x40014400
 8005cb4:	40014800 	.word	0x40014800
 8005cb8:	40015000 	.word	0x40015000

08005cbc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	021b      	lsls	r3, r3, #8
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005d02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	051b      	lsls	r3, r3, #20
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a1a      	ldr	r2, [pc, #104]	@ (8005d7c <TIM_OC6_SetConfig+0xc0>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d013      	beq.n	8005d40 <TIM_OC6_SetConfig+0x84>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a19      	ldr	r2, [pc, #100]	@ (8005d80 <TIM_OC6_SetConfig+0xc4>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d00f      	beq.n	8005d40 <TIM_OC6_SetConfig+0x84>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a18      	ldr	r2, [pc, #96]	@ (8005d84 <TIM_OC6_SetConfig+0xc8>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d00b      	beq.n	8005d40 <TIM_OC6_SetConfig+0x84>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a17      	ldr	r2, [pc, #92]	@ (8005d88 <TIM_OC6_SetConfig+0xcc>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d007      	beq.n	8005d40 <TIM_OC6_SetConfig+0x84>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a16      	ldr	r2, [pc, #88]	@ (8005d8c <TIM_OC6_SetConfig+0xd0>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d003      	beq.n	8005d40 <TIM_OC6_SetConfig+0x84>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a15      	ldr	r2, [pc, #84]	@ (8005d90 <TIM_OC6_SetConfig+0xd4>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d109      	bne.n	8005d54 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	029b      	lsls	r3, r3, #10
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	621a      	str	r2, [r3, #32]
}
 8005d6e:	bf00      	nop
 8005d70:	371c      	adds	r7, #28
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	40012c00 	.word	0x40012c00
 8005d80:	40013400 	.word	0x40013400
 8005d84:	40014000 	.word	0x40014000
 8005d88:	40014400 	.word	0x40014400
 8005d8c:	40014800 	.word	0x40014800
 8005d90:	40015000 	.word	0x40015000

08005d94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	f023 0201 	bic.w	r2, r3, #1
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	011b      	lsls	r3, r3, #4
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f023 030a 	bic.w	r3, r3, #10
 8005dd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	621a      	str	r2, [r3, #32]
}
 8005de6:	bf00      	nop
 8005de8:	371c      	adds	r7, #28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b087      	sub	sp, #28
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	60f8      	str	r0, [r7, #12]
 8005dfa:	60b9      	str	r1, [r7, #8]
 8005dfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6a1b      	ldr	r3, [r3, #32]
 8005e08:	f023 0210 	bic.w	r2, r3, #16
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	031b      	lsls	r3, r3, #12
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e2e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	011b      	lsls	r3, r3, #4
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	621a      	str	r2, [r3, #32]
}
 8005e46:	bf00      	nop
 8005e48:	371c      	adds	r7, #28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b085      	sub	sp, #20
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
 8005e5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005e68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	f043 0307 	orr.w	r3, r3, #7
 8005e78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	609a      	str	r2, [r3, #8]
}
 8005e80:	bf00      	nop
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ea6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	021a      	lsls	r2, r3, #8
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	609a      	str	r2, [r3, #8]
}
 8005ec0:	bf00      	nop
 8005ec2:	371c      	adds	r7, #28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	f003 031f 	and.w	r3, r3, #31
 8005ede:	2201      	movs	r2, #1
 8005ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6a1a      	ldr	r2, [r3, #32]
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	43db      	mvns	r3, r3
 8005eee:	401a      	ands	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6a1a      	ldr	r2, [r3, #32]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f003 031f 	and.w	r3, r3, #31
 8005efe:	6879      	ldr	r1, [r7, #4]
 8005f00:	fa01 f303 	lsl.w	r3, r1, r3
 8005f04:	431a      	orrs	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	621a      	str	r2, [r3, #32]
}
 8005f0a:	bf00      	nop
 8005f0c:	371c      	adds	r7, #28
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
	...

08005f18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d101      	bne.n	8005f30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	e074      	b.n	800601a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a34      	ldr	r2, [pc, #208]	@ (8006028 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d009      	beq.n	8005f6e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a33      	ldr	r2, [pc, #204]	@ (800602c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d004      	beq.n	8005f6e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a31      	ldr	r2, [pc, #196]	@ (8006030 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d108      	bne.n	8005f80 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005f74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005f86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a21      	ldr	r2, [pc, #132]	@ (8006028 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d022      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fb0:	d01d      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a1f      	ldr	r2, [pc, #124]	@ (8006034 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d018      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8006038 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d013      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a1c      	ldr	r2, [pc, #112]	@ (800603c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d00e      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a15      	ldr	r2, [pc, #84]	@ (800602c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d009      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a18      	ldr	r2, [pc, #96]	@ (8006040 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d004      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a11      	ldr	r2, [pc, #68]	@ (8006030 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d10c      	bne.n	8006008 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ff4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	40012c00 	.word	0x40012c00
 800602c:	40013400 	.word	0x40013400
 8006030:	40015000 	.word	0x40015000
 8006034:	40000400 	.word	0x40000400
 8006038:	40000800 	.word	0x40000800
 800603c:	40000c00 	.word	0x40000c00
 8006040:	40014000 	.word	0x40014000

08006044 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006058:	2b01      	cmp	r3, #1
 800605a:	d101      	bne.n	8006060 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800605c:	2302      	movs	r3, #2
 800605e:	e078      	b.n	8006152 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	4313      	orrs	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	4313      	orrs	r3, r2
 8006082:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	4313      	orrs	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4313      	orrs	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060c6:	4313      	orrs	r3, r2
 80060c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	041b      	lsls	r3, r3, #16
 80060d6:	4313      	orrs	r3, r2
 80060d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a1c      	ldr	r2, [pc, #112]	@ (8006160 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d009      	beq.n	8006106 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a1b      	ldr	r2, [pc, #108]	@ (8006164 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d004      	beq.n	8006106 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a19      	ldr	r2, [pc, #100]	@ (8006168 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d11c      	bne.n	8006140 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006110:	051b      	lsls	r3, r3, #20
 8006112:	4313      	orrs	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	4313      	orrs	r3, r2
 8006122:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800612e:	4313      	orrs	r3, r2
 8006130:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800613c:	4313      	orrs	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	40012c00 	.word	0x40012c00
 8006164:	40013400 	.word	0x40013400
 8006168:	40015000 	.word	0x40015000

0800616c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d101      	bne.n	800617e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e042      	b.n	8006204 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006184:	2b00      	cmp	r3, #0
 8006186:	d106      	bne.n	8006196 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f7fb f9b7 	bl	8001504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2224      	movs	r2, #36	@ 0x24
 800619a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 0201 	bic.w	r2, r2, #1
 80061ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d002      	beq.n	80061bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fc24 	bl	8006a04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f925 	bl	800640c <UART_SetConfig>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d101      	bne.n	80061cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e01b      	b.n	8006204 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80061da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	689a      	ldr	r2, [r3, #8]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80061ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f042 0201 	orr.w	r2, r2, #1
 80061fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 fca3 	bl	8006b48 <UART_CheckIdleState>
 8006202:	4603      	mov	r3, r0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b08a      	sub	sp, #40	@ 0x28
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	4613      	mov	r3, r2
 8006218:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006220:	2b20      	cmp	r3, #32
 8006222:	d167      	bne.n	80062f4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d002      	beq.n	8006230 <HAL_UART_Transmit_DMA+0x24>
 800622a:	88fb      	ldrh	r3, [r7, #6]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d101      	bne.n	8006234 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e060      	b.n	80062f6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	88fa      	ldrh	r2, [r7, #6]
 800623e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	88fa      	ldrh	r2, [r7, #6]
 8006246:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2221      	movs	r2, #33	@ 0x21
 8006256:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800625e:	2b00      	cmp	r3, #0
 8006260:	d028      	beq.n	80062b4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006266:	4a26      	ldr	r2, [pc, #152]	@ (8006300 <HAL_UART_Transmit_DMA+0xf4>)
 8006268:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800626e:	4a25      	ldr	r2, [pc, #148]	@ (8006304 <HAL_UART_Transmit_DMA+0xf8>)
 8006270:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006276:	4a24      	ldr	r2, [pc, #144]	@ (8006308 <HAL_UART_Transmit_DMA+0xfc>)
 8006278:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800627e:	2200      	movs	r2, #0
 8006280:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800628a:	4619      	mov	r1, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	3328      	adds	r3, #40	@ 0x28
 8006292:	461a      	mov	r2, r3
 8006294:	88fb      	ldrh	r3, [r7, #6]
 8006296:	f7fd f973 	bl	8003580 <HAL_DMA_Start_IT>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d009      	beq.n	80062b4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2210      	movs	r2, #16
 80062a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2220      	movs	r2, #32
 80062ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e020      	b.n	80062f6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2240      	movs	r2, #64	@ 0x40
 80062ba:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3308      	adds	r3, #8
 80062c2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	e853 3f00 	ldrex	r3, [r3]
 80062ca:	613b      	str	r3, [r7, #16]
   return(result);
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	3308      	adds	r3, #8
 80062da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062dc:	623a      	str	r2, [r7, #32]
 80062de:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e0:	69f9      	ldr	r1, [r7, #28]
 80062e2:	6a3a      	ldr	r2, [r7, #32]
 80062e4:	e841 2300 	strex	r3, r2, [r1]
 80062e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1e5      	bne.n	80062bc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	e000      	b.n	80062f6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80062f4:	2302      	movs	r3, #2
  }
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3728      	adds	r7, #40	@ 0x28
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	08007013 	.word	0x08007013
 8006304:	080070ad 	.word	0x080070ad
 8006308:	08007233 	.word	0x08007233

0800630c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b08a      	sub	sp, #40	@ 0x28
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	4613      	mov	r3, r2
 8006318:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006320:	2b20      	cmp	r3, #32
 8006322:	d137      	bne.n	8006394 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d002      	beq.n	8006330 <HAL_UART_Receive_DMA+0x24>
 800632a:	88fb      	ldrh	r3, [r7, #6]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e030      	b.n	8006396 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a18      	ldr	r2, [pc, #96]	@ (80063a0 <HAL_UART_Receive_DMA+0x94>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d01f      	beq.n	8006384 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d018      	beq.n	8006384 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	e853 3f00 	ldrex	r3, [r3]
 800635e:	613b      	str	r3, [r7, #16]
   return(result);
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006366:	627b      	str	r3, [r7, #36]	@ 0x24
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	461a      	mov	r2, r3
 800636e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006370:	623b      	str	r3, [r7, #32]
 8006372:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006374:	69f9      	ldr	r1, [r7, #28]
 8006376:	6a3a      	ldr	r2, [r7, #32]
 8006378:	e841 2300 	strex	r3, r2, [r1]
 800637c:	61bb      	str	r3, [r7, #24]
   return(result);
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1e6      	bne.n	8006352 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006384:	88fb      	ldrh	r3, [r7, #6]
 8006386:	461a      	mov	r2, r3
 8006388:	68b9      	ldr	r1, [r7, #8]
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 fcf4 	bl	8006d78 <UART_Start_Receive_DMA>
 8006390:	4603      	mov	r3, r0
 8006392:	e000      	b.n	8006396 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006394:	2302      	movs	r3, #2
  }
}
 8006396:	4618      	mov	r0, r3
 8006398:	3728      	adds	r7, #40	@ 0x28
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	40008000 	.word	0x40008000

080063a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	460b      	mov	r3, r1
 80063fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800640c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006410:	b08c      	sub	sp, #48	@ 0x30
 8006412:	af00      	add	r7, sp, #0
 8006414:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006416:	2300      	movs	r3, #0
 8006418:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	689a      	ldr	r2, [r3, #8]
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	431a      	orrs	r2, r3
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	695b      	ldr	r3, [r3, #20]
 800642a:	431a      	orrs	r2, r3
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	4313      	orrs	r3, r2
 8006432:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	4baa      	ldr	r3, [pc, #680]	@ (80066e4 <UART_SetConfig+0x2d8>)
 800643c:	4013      	ands	r3, r2
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	6812      	ldr	r2, [r2, #0]
 8006442:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006444:	430b      	orrs	r3, r1
 8006446:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	430a      	orrs	r2, r1
 800645c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a9f      	ldr	r2, [pc, #636]	@ (80066e8 <UART_SetConfig+0x2dc>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d004      	beq.n	8006478 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006474:	4313      	orrs	r3, r2
 8006476:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006482:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	6812      	ldr	r2, [r2, #0]
 800648a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800648c:	430b      	orrs	r3, r1
 800648e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006496:	f023 010f 	bic.w	r1, r3, #15
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a90      	ldr	r2, [pc, #576]	@ (80066ec <UART_SetConfig+0x2e0>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d125      	bne.n	80064fc <UART_SetConfig+0xf0>
 80064b0:	4b8f      	ldr	r3, [pc, #572]	@ (80066f0 <UART_SetConfig+0x2e4>)
 80064b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064b6:	f003 0303 	and.w	r3, r3, #3
 80064ba:	2b03      	cmp	r3, #3
 80064bc:	d81a      	bhi.n	80064f4 <UART_SetConfig+0xe8>
 80064be:	a201      	add	r2, pc, #4	@ (adr r2, 80064c4 <UART_SetConfig+0xb8>)
 80064c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c4:	080064d5 	.word	0x080064d5
 80064c8:	080064e5 	.word	0x080064e5
 80064cc:	080064dd 	.word	0x080064dd
 80064d0:	080064ed 	.word	0x080064ed
 80064d4:	2301      	movs	r3, #1
 80064d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064da:	e116      	b.n	800670a <UART_SetConfig+0x2fe>
 80064dc:	2302      	movs	r3, #2
 80064de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064e2:	e112      	b.n	800670a <UART_SetConfig+0x2fe>
 80064e4:	2304      	movs	r3, #4
 80064e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064ea:	e10e      	b.n	800670a <UART_SetConfig+0x2fe>
 80064ec:	2308      	movs	r3, #8
 80064ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064f2:	e10a      	b.n	800670a <UART_SetConfig+0x2fe>
 80064f4:	2310      	movs	r3, #16
 80064f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064fa:	e106      	b.n	800670a <UART_SetConfig+0x2fe>
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a7c      	ldr	r2, [pc, #496]	@ (80066f4 <UART_SetConfig+0x2e8>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d138      	bne.n	8006578 <UART_SetConfig+0x16c>
 8006506:	4b7a      	ldr	r3, [pc, #488]	@ (80066f0 <UART_SetConfig+0x2e4>)
 8006508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800650c:	f003 030c 	and.w	r3, r3, #12
 8006510:	2b0c      	cmp	r3, #12
 8006512:	d82d      	bhi.n	8006570 <UART_SetConfig+0x164>
 8006514:	a201      	add	r2, pc, #4	@ (adr r2, 800651c <UART_SetConfig+0x110>)
 8006516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651a:	bf00      	nop
 800651c:	08006551 	.word	0x08006551
 8006520:	08006571 	.word	0x08006571
 8006524:	08006571 	.word	0x08006571
 8006528:	08006571 	.word	0x08006571
 800652c:	08006561 	.word	0x08006561
 8006530:	08006571 	.word	0x08006571
 8006534:	08006571 	.word	0x08006571
 8006538:	08006571 	.word	0x08006571
 800653c:	08006559 	.word	0x08006559
 8006540:	08006571 	.word	0x08006571
 8006544:	08006571 	.word	0x08006571
 8006548:	08006571 	.word	0x08006571
 800654c:	08006569 	.word	0x08006569
 8006550:	2300      	movs	r3, #0
 8006552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006556:	e0d8      	b.n	800670a <UART_SetConfig+0x2fe>
 8006558:	2302      	movs	r3, #2
 800655a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800655e:	e0d4      	b.n	800670a <UART_SetConfig+0x2fe>
 8006560:	2304      	movs	r3, #4
 8006562:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006566:	e0d0      	b.n	800670a <UART_SetConfig+0x2fe>
 8006568:	2308      	movs	r3, #8
 800656a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800656e:	e0cc      	b.n	800670a <UART_SetConfig+0x2fe>
 8006570:	2310      	movs	r3, #16
 8006572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006576:	e0c8      	b.n	800670a <UART_SetConfig+0x2fe>
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a5e      	ldr	r2, [pc, #376]	@ (80066f8 <UART_SetConfig+0x2ec>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d125      	bne.n	80065ce <UART_SetConfig+0x1c2>
 8006582:	4b5b      	ldr	r3, [pc, #364]	@ (80066f0 <UART_SetConfig+0x2e4>)
 8006584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006588:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800658c:	2b30      	cmp	r3, #48	@ 0x30
 800658e:	d016      	beq.n	80065be <UART_SetConfig+0x1b2>
 8006590:	2b30      	cmp	r3, #48	@ 0x30
 8006592:	d818      	bhi.n	80065c6 <UART_SetConfig+0x1ba>
 8006594:	2b20      	cmp	r3, #32
 8006596:	d00a      	beq.n	80065ae <UART_SetConfig+0x1a2>
 8006598:	2b20      	cmp	r3, #32
 800659a:	d814      	bhi.n	80065c6 <UART_SetConfig+0x1ba>
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <UART_SetConfig+0x19a>
 80065a0:	2b10      	cmp	r3, #16
 80065a2:	d008      	beq.n	80065b6 <UART_SetConfig+0x1aa>
 80065a4:	e00f      	b.n	80065c6 <UART_SetConfig+0x1ba>
 80065a6:	2300      	movs	r3, #0
 80065a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065ac:	e0ad      	b.n	800670a <UART_SetConfig+0x2fe>
 80065ae:	2302      	movs	r3, #2
 80065b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065b4:	e0a9      	b.n	800670a <UART_SetConfig+0x2fe>
 80065b6:	2304      	movs	r3, #4
 80065b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065bc:	e0a5      	b.n	800670a <UART_SetConfig+0x2fe>
 80065be:	2308      	movs	r3, #8
 80065c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065c4:	e0a1      	b.n	800670a <UART_SetConfig+0x2fe>
 80065c6:	2310      	movs	r3, #16
 80065c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065cc:	e09d      	b.n	800670a <UART_SetConfig+0x2fe>
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a4a      	ldr	r2, [pc, #296]	@ (80066fc <UART_SetConfig+0x2f0>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d125      	bne.n	8006624 <UART_SetConfig+0x218>
 80065d8:	4b45      	ldr	r3, [pc, #276]	@ (80066f0 <UART_SetConfig+0x2e4>)
 80065da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80065e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80065e4:	d016      	beq.n	8006614 <UART_SetConfig+0x208>
 80065e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80065e8:	d818      	bhi.n	800661c <UART_SetConfig+0x210>
 80065ea:	2b80      	cmp	r3, #128	@ 0x80
 80065ec:	d00a      	beq.n	8006604 <UART_SetConfig+0x1f8>
 80065ee:	2b80      	cmp	r3, #128	@ 0x80
 80065f0:	d814      	bhi.n	800661c <UART_SetConfig+0x210>
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <UART_SetConfig+0x1f0>
 80065f6:	2b40      	cmp	r3, #64	@ 0x40
 80065f8:	d008      	beq.n	800660c <UART_SetConfig+0x200>
 80065fa:	e00f      	b.n	800661c <UART_SetConfig+0x210>
 80065fc:	2300      	movs	r3, #0
 80065fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006602:	e082      	b.n	800670a <UART_SetConfig+0x2fe>
 8006604:	2302      	movs	r3, #2
 8006606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800660a:	e07e      	b.n	800670a <UART_SetConfig+0x2fe>
 800660c:	2304      	movs	r3, #4
 800660e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006612:	e07a      	b.n	800670a <UART_SetConfig+0x2fe>
 8006614:	2308      	movs	r3, #8
 8006616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800661a:	e076      	b.n	800670a <UART_SetConfig+0x2fe>
 800661c:	2310      	movs	r3, #16
 800661e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006622:	e072      	b.n	800670a <UART_SetConfig+0x2fe>
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a35      	ldr	r2, [pc, #212]	@ (8006700 <UART_SetConfig+0x2f4>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d12a      	bne.n	8006684 <UART_SetConfig+0x278>
 800662e:	4b30      	ldr	r3, [pc, #192]	@ (80066f0 <UART_SetConfig+0x2e4>)
 8006630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006634:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006638:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800663c:	d01a      	beq.n	8006674 <UART_SetConfig+0x268>
 800663e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006642:	d81b      	bhi.n	800667c <UART_SetConfig+0x270>
 8006644:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006648:	d00c      	beq.n	8006664 <UART_SetConfig+0x258>
 800664a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800664e:	d815      	bhi.n	800667c <UART_SetConfig+0x270>
 8006650:	2b00      	cmp	r3, #0
 8006652:	d003      	beq.n	800665c <UART_SetConfig+0x250>
 8006654:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006658:	d008      	beq.n	800666c <UART_SetConfig+0x260>
 800665a:	e00f      	b.n	800667c <UART_SetConfig+0x270>
 800665c:	2300      	movs	r3, #0
 800665e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006662:	e052      	b.n	800670a <UART_SetConfig+0x2fe>
 8006664:	2302      	movs	r3, #2
 8006666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800666a:	e04e      	b.n	800670a <UART_SetConfig+0x2fe>
 800666c:	2304      	movs	r3, #4
 800666e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006672:	e04a      	b.n	800670a <UART_SetConfig+0x2fe>
 8006674:	2308      	movs	r3, #8
 8006676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800667a:	e046      	b.n	800670a <UART_SetConfig+0x2fe>
 800667c:	2310      	movs	r3, #16
 800667e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006682:	e042      	b.n	800670a <UART_SetConfig+0x2fe>
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a17      	ldr	r2, [pc, #92]	@ (80066e8 <UART_SetConfig+0x2dc>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d13a      	bne.n	8006704 <UART_SetConfig+0x2f8>
 800668e:	4b18      	ldr	r3, [pc, #96]	@ (80066f0 <UART_SetConfig+0x2e4>)
 8006690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006694:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006698:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800669c:	d01a      	beq.n	80066d4 <UART_SetConfig+0x2c8>
 800669e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066a2:	d81b      	bhi.n	80066dc <UART_SetConfig+0x2d0>
 80066a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066a8:	d00c      	beq.n	80066c4 <UART_SetConfig+0x2b8>
 80066aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066ae:	d815      	bhi.n	80066dc <UART_SetConfig+0x2d0>
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <UART_SetConfig+0x2b0>
 80066b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066b8:	d008      	beq.n	80066cc <UART_SetConfig+0x2c0>
 80066ba:	e00f      	b.n	80066dc <UART_SetConfig+0x2d0>
 80066bc:	2300      	movs	r3, #0
 80066be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066c2:	e022      	b.n	800670a <UART_SetConfig+0x2fe>
 80066c4:	2302      	movs	r3, #2
 80066c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066ca:	e01e      	b.n	800670a <UART_SetConfig+0x2fe>
 80066cc:	2304      	movs	r3, #4
 80066ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066d2:	e01a      	b.n	800670a <UART_SetConfig+0x2fe>
 80066d4:	2308      	movs	r3, #8
 80066d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066da:	e016      	b.n	800670a <UART_SetConfig+0x2fe>
 80066dc:	2310      	movs	r3, #16
 80066de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066e2:	e012      	b.n	800670a <UART_SetConfig+0x2fe>
 80066e4:	cfff69f3 	.word	0xcfff69f3
 80066e8:	40008000 	.word	0x40008000
 80066ec:	40013800 	.word	0x40013800
 80066f0:	40021000 	.word	0x40021000
 80066f4:	40004400 	.word	0x40004400
 80066f8:	40004800 	.word	0x40004800
 80066fc:	40004c00 	.word	0x40004c00
 8006700:	40005000 	.word	0x40005000
 8006704:	2310      	movs	r3, #16
 8006706:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4aae      	ldr	r2, [pc, #696]	@ (80069c8 <UART_SetConfig+0x5bc>)
 8006710:	4293      	cmp	r3, r2
 8006712:	f040 8097 	bne.w	8006844 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006716:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800671a:	2b08      	cmp	r3, #8
 800671c:	d823      	bhi.n	8006766 <UART_SetConfig+0x35a>
 800671e:	a201      	add	r2, pc, #4	@ (adr r2, 8006724 <UART_SetConfig+0x318>)
 8006720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006724:	08006749 	.word	0x08006749
 8006728:	08006767 	.word	0x08006767
 800672c:	08006751 	.word	0x08006751
 8006730:	08006767 	.word	0x08006767
 8006734:	08006757 	.word	0x08006757
 8006738:	08006767 	.word	0x08006767
 800673c:	08006767 	.word	0x08006767
 8006740:	08006767 	.word	0x08006767
 8006744:	0800675f 	.word	0x0800675f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006748:	f7fe f820 	bl	800478c <HAL_RCC_GetPCLK1Freq>
 800674c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800674e:	e010      	b.n	8006772 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006750:	4b9e      	ldr	r3, [pc, #632]	@ (80069cc <UART_SetConfig+0x5c0>)
 8006752:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006754:	e00d      	b.n	8006772 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006756:	f7fd ffab 	bl	80046b0 <HAL_RCC_GetSysClockFreq>
 800675a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800675c:	e009      	b.n	8006772 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800675e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006762:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006764:	e005      	b.n	8006772 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006766:	2300      	movs	r3, #0
 8006768:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006770:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 8130 	beq.w	80069da <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677e:	4a94      	ldr	r2, [pc, #592]	@ (80069d0 <UART_SetConfig+0x5c4>)
 8006780:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006784:	461a      	mov	r2, r3
 8006786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006788:	fbb3 f3f2 	udiv	r3, r3, r2
 800678c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	4613      	mov	r3, r2
 8006794:	005b      	lsls	r3, r3, #1
 8006796:	4413      	add	r3, r2
 8006798:	69ba      	ldr	r2, [r7, #24]
 800679a:	429a      	cmp	r2, r3
 800679c:	d305      	bcc.n	80067aa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d903      	bls.n	80067b2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80067b0:	e113      	b.n	80069da <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b4:	2200      	movs	r2, #0
 80067b6:	60bb      	str	r3, [r7, #8]
 80067b8:	60fa      	str	r2, [r7, #12]
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067be:	4a84      	ldr	r2, [pc, #528]	@ (80069d0 <UART_SetConfig+0x5c4>)
 80067c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	2200      	movs	r2, #0
 80067c8:	603b      	str	r3, [r7, #0]
 80067ca:	607a      	str	r2, [r7, #4]
 80067cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80067d4:	f7fa f91e 	bl	8000a14 <__aeabi_uldivmod>
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	4610      	mov	r0, r2
 80067de:	4619      	mov	r1, r3
 80067e0:	f04f 0200 	mov.w	r2, #0
 80067e4:	f04f 0300 	mov.w	r3, #0
 80067e8:	020b      	lsls	r3, r1, #8
 80067ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80067ee:	0202      	lsls	r2, r0, #8
 80067f0:	6979      	ldr	r1, [r7, #20]
 80067f2:	6849      	ldr	r1, [r1, #4]
 80067f4:	0849      	lsrs	r1, r1, #1
 80067f6:	2000      	movs	r0, #0
 80067f8:	460c      	mov	r4, r1
 80067fa:	4605      	mov	r5, r0
 80067fc:	eb12 0804 	adds.w	r8, r2, r4
 8006800:	eb43 0905 	adc.w	r9, r3, r5
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	469a      	mov	sl, r3
 800680c:	4693      	mov	fp, r2
 800680e:	4652      	mov	r2, sl
 8006810:	465b      	mov	r3, fp
 8006812:	4640      	mov	r0, r8
 8006814:	4649      	mov	r1, r9
 8006816:	f7fa f8fd 	bl	8000a14 <__aeabi_uldivmod>
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	4613      	mov	r3, r2
 8006820:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006822:	6a3b      	ldr	r3, [r7, #32]
 8006824:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006828:	d308      	bcc.n	800683c <UART_SetConfig+0x430>
 800682a:	6a3b      	ldr	r3, [r7, #32]
 800682c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006830:	d204      	bcs.n	800683c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	6a3a      	ldr	r2, [r7, #32]
 8006838:	60da      	str	r2, [r3, #12]
 800683a:	e0ce      	b.n	80069da <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006842:	e0ca      	b.n	80069da <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	69db      	ldr	r3, [r3, #28]
 8006848:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800684c:	d166      	bne.n	800691c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800684e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006852:	2b08      	cmp	r3, #8
 8006854:	d827      	bhi.n	80068a6 <UART_SetConfig+0x49a>
 8006856:	a201      	add	r2, pc, #4	@ (adr r2, 800685c <UART_SetConfig+0x450>)
 8006858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685c:	08006881 	.word	0x08006881
 8006860:	08006889 	.word	0x08006889
 8006864:	08006891 	.word	0x08006891
 8006868:	080068a7 	.word	0x080068a7
 800686c:	08006897 	.word	0x08006897
 8006870:	080068a7 	.word	0x080068a7
 8006874:	080068a7 	.word	0x080068a7
 8006878:	080068a7 	.word	0x080068a7
 800687c:	0800689f 	.word	0x0800689f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006880:	f7fd ff84 	bl	800478c <HAL_RCC_GetPCLK1Freq>
 8006884:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006886:	e014      	b.n	80068b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006888:	f7fd ff96 	bl	80047b8 <HAL_RCC_GetPCLK2Freq>
 800688c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800688e:	e010      	b.n	80068b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006890:	4b4e      	ldr	r3, [pc, #312]	@ (80069cc <UART_SetConfig+0x5c0>)
 8006892:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006894:	e00d      	b.n	80068b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006896:	f7fd ff0b 	bl	80046b0 <HAL_RCC_GetSysClockFreq>
 800689a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800689c:	e009      	b.n	80068b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800689e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80068a4:	e005      	b.n	80068b2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80068a6:	2300      	movs	r3, #0
 80068a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80068b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f000 8090 	beq.w	80069da <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068be:	4a44      	ldr	r2, [pc, #272]	@ (80069d0 <UART_SetConfig+0x5c4>)
 80068c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068c4:	461a      	mov	r2, r3
 80068c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80068cc:	005a      	lsls	r2, r3, #1
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	085b      	lsrs	r3, r3, #1
 80068d4:	441a      	add	r2, r3
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	fbb2 f3f3 	udiv	r3, r2, r3
 80068de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	2b0f      	cmp	r3, #15
 80068e4:	d916      	bls.n	8006914 <UART_SetConfig+0x508>
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068ec:	d212      	bcs.n	8006914 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	f023 030f 	bic.w	r3, r3, #15
 80068f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	085b      	lsrs	r3, r3, #1
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	f003 0307 	and.w	r3, r3, #7
 8006902:	b29a      	uxth	r2, r3
 8006904:	8bfb      	ldrh	r3, [r7, #30]
 8006906:	4313      	orrs	r3, r2
 8006908:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	8bfa      	ldrh	r2, [r7, #30]
 8006910:	60da      	str	r2, [r3, #12]
 8006912:	e062      	b.n	80069da <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800691a:	e05e      	b.n	80069da <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800691c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006920:	2b08      	cmp	r3, #8
 8006922:	d828      	bhi.n	8006976 <UART_SetConfig+0x56a>
 8006924:	a201      	add	r2, pc, #4	@ (adr r2, 800692c <UART_SetConfig+0x520>)
 8006926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800692a:	bf00      	nop
 800692c:	08006951 	.word	0x08006951
 8006930:	08006959 	.word	0x08006959
 8006934:	08006961 	.word	0x08006961
 8006938:	08006977 	.word	0x08006977
 800693c:	08006967 	.word	0x08006967
 8006940:	08006977 	.word	0x08006977
 8006944:	08006977 	.word	0x08006977
 8006948:	08006977 	.word	0x08006977
 800694c:	0800696f 	.word	0x0800696f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006950:	f7fd ff1c 	bl	800478c <HAL_RCC_GetPCLK1Freq>
 8006954:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006956:	e014      	b.n	8006982 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006958:	f7fd ff2e 	bl	80047b8 <HAL_RCC_GetPCLK2Freq>
 800695c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800695e:	e010      	b.n	8006982 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006960:	4b1a      	ldr	r3, [pc, #104]	@ (80069cc <UART_SetConfig+0x5c0>)
 8006962:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006964:	e00d      	b.n	8006982 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006966:	f7fd fea3 	bl	80046b0 <HAL_RCC_GetSysClockFreq>
 800696a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800696c:	e009      	b.n	8006982 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800696e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006972:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006974:	e005      	b.n	8006982 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006980:	bf00      	nop
    }

    if (pclk != 0U)
 8006982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006984:	2b00      	cmp	r3, #0
 8006986:	d028      	beq.n	80069da <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698c:	4a10      	ldr	r2, [pc, #64]	@ (80069d0 <UART_SetConfig+0x5c4>)
 800698e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006992:	461a      	mov	r2, r3
 8006994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006996:	fbb3 f2f2 	udiv	r2, r3, r2
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	085b      	lsrs	r3, r3, #1
 80069a0:	441a      	add	r2, r3
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069ac:	6a3b      	ldr	r3, [r7, #32]
 80069ae:	2b0f      	cmp	r3, #15
 80069b0:	d910      	bls.n	80069d4 <UART_SetConfig+0x5c8>
 80069b2:	6a3b      	ldr	r3, [r7, #32]
 80069b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069b8:	d20c      	bcs.n	80069d4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80069ba:	6a3b      	ldr	r3, [r7, #32]
 80069bc:	b29a      	uxth	r2, r3
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	60da      	str	r2, [r3, #12]
 80069c4:	e009      	b.n	80069da <UART_SetConfig+0x5ce>
 80069c6:	bf00      	nop
 80069c8:	40008000 	.word	0x40008000
 80069cc:	00f42400 	.word	0x00f42400
 80069d0:	08007540 	.word	0x08007540
      }
      else
      {
        ret = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2201      	movs	r2, #1
 80069de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	2200      	movs	r2, #0
 80069ee:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	2200      	movs	r2, #0
 80069f4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80069f6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3730      	adds	r7, #48	@ 0x30
 80069fe:	46bd      	mov	sp, r7
 8006a00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006a04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a10:	f003 0308 	and.w	r3, r3, #8
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d00a      	beq.n	8006a2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d00a      	beq.n	8006a50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	430a      	orrs	r2, r1
 8006a4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a54:	f003 0302 	and.w	r3, r3, #2
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00a      	beq.n	8006a72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a76:	f003 0304 	and.w	r3, r3, #4
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00a      	beq.n	8006a94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a98:	f003 0310 	and.w	r3, r3, #16
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00a      	beq.n	8006ab6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aba:	f003 0320 	and.w	r3, r3, #32
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00a      	beq.n	8006ad8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	430a      	orrs	r2, r1
 8006ad6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d01a      	beq.n	8006b1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	430a      	orrs	r2, r1
 8006af8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006afe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b02:	d10a      	bne.n	8006b1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00a      	beq.n	8006b3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	430a      	orrs	r2, r1
 8006b3a:	605a      	str	r2, [r3, #4]
  }
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b098      	sub	sp, #96	@ 0x60
 8006b4c:	af02      	add	r7, sp, #8
 8006b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b58:	f7fa fed6 	bl	8001908 <HAL_GetTick>
 8006b5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0308 	and.w	r3, r3, #8
 8006b68:	2b08      	cmp	r3, #8
 8006b6a:	d12f      	bne.n	8006bcc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b74:	2200      	movs	r2, #0
 8006b76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 f88e 	bl	8006c9c <UART_WaitOnFlagUntilTimeout>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d022      	beq.n	8006bcc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b8e:	e853 3f00 	ldrex	r3, [r3]
 8006b92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ba4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ba6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006baa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006bac:	e841 2300 	strex	r3, r2, [r1]
 8006bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1e6      	bne.n	8006b86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e063      	b.n	8006c94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0304 	and.w	r3, r3, #4
 8006bd6:	2b04      	cmp	r3, #4
 8006bd8:	d149      	bne.n	8006c6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bda:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006be2:	2200      	movs	r2, #0
 8006be4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f857 	bl	8006c9c <UART_WaitOnFlagUntilTimeout>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d03c      	beq.n	8006c6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfc:	e853 3f00 	ldrex	r3, [r3]
 8006c00:	623b      	str	r3, [r7, #32]
   return(result);
 8006c02:	6a3b      	ldr	r3, [r7, #32]
 8006c04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c12:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c14:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c1a:	e841 2300 	strex	r3, r2, [r1]
 8006c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1e6      	bne.n	8006bf4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	3308      	adds	r3, #8
 8006c2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	e853 3f00 	ldrex	r3, [r3]
 8006c34:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f023 0301 	bic.w	r3, r3, #1
 8006c3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3308      	adds	r3, #8
 8006c44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c46:	61fa      	str	r2, [r7, #28]
 8006c48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4a:	69b9      	ldr	r1, [r7, #24]
 8006c4c:	69fa      	ldr	r2, [r7, #28]
 8006c4e:	e841 2300 	strex	r3, r2, [r1]
 8006c52:	617b      	str	r3, [r7, #20]
   return(result);
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1e5      	bne.n	8006c26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2220      	movs	r2, #32
 8006c5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e012      	b.n	8006c94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2220      	movs	r2, #32
 8006c72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2220      	movs	r2, #32
 8006c7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3758      	adds	r7, #88	@ 0x58
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	603b      	str	r3, [r7, #0]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cac:	e04f      	b.n	8006d4e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb4:	d04b      	beq.n	8006d4e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cb6:	f7fa fe27 	bl	8001908 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	69ba      	ldr	r2, [r7, #24]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d302      	bcc.n	8006ccc <UART_WaitOnFlagUntilTimeout+0x30>
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d101      	bne.n	8006cd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e04e      	b.n	8006d6e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 0304 	and.w	r3, r3, #4
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d037      	beq.n	8006d4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	2b80      	cmp	r3, #128	@ 0x80
 8006ce2:	d034      	beq.n	8006d4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	2b40      	cmp	r3, #64	@ 0x40
 8006ce8:	d031      	beq.n	8006d4e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	69db      	ldr	r3, [r3, #28]
 8006cf0:	f003 0308 	and.w	r3, r3, #8
 8006cf4:	2b08      	cmp	r3, #8
 8006cf6:	d110      	bne.n	8006d1a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2208      	movs	r2, #8
 8006cfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f000 f920 	bl	8006f46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2208      	movs	r2, #8
 8006d0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e029      	b.n	8006d6e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d28:	d111      	bne.n	8006d4e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f000 f906 	bl	8006f46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e00f      	b.n	8006d6e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	69da      	ldr	r2, [r3, #28]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	4013      	ands	r3, r2
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	bf0c      	ite	eq
 8006d5e:	2301      	moveq	r3, #1
 8006d60:	2300      	movne	r3, #0
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	461a      	mov	r2, r3
 8006d66:	79fb      	ldrb	r3, [r7, #7]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d0a0      	beq.n	8006cae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
	...

08006d78 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b096      	sub	sp, #88	@ 0x58
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	4613      	mov	r3, r2
 8006d84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	88fa      	ldrh	r2, [r7, #6]
 8006d90:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2222      	movs	r2, #34	@ 0x22
 8006da0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d02d      	beq.n	8006e0a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006db4:	4a40      	ldr	r2, [pc, #256]	@ (8006eb8 <UART_Start_Receive_DMA+0x140>)
 8006db6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dbe:	4a3f      	ldr	r2, [pc, #252]	@ (8006ebc <UART_Start_Receive_DMA+0x144>)
 8006dc0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dc8:	4a3d      	ldr	r2, [pc, #244]	@ (8006ec0 <UART_Start_Receive_DMA+0x148>)
 8006dca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	3324      	adds	r3, #36	@ 0x24
 8006de2:	4619      	mov	r1, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006de8:	461a      	mov	r2, r3
 8006dea:	88fb      	ldrh	r3, [r7, #6]
 8006dec:	f7fc fbc8 	bl	8003580 <HAL_DMA_Start_IT>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d009      	beq.n	8006e0a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2210      	movs	r2, #16
 8006dfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2220      	movs	r2, #32
 8006e02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e051      	b.n	8006eae <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d018      	beq.n	8006e44 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e1a:	e853 3f00 	ldrex	r3, [r3]
 8006e1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e26:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e32:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e34:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006e36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e38:	e841 2300 	strex	r3, r2, [r1]
 8006e3c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006e3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1e6      	bne.n	8006e12 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3308      	adds	r3, #8
 8006e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e4e:	e853 3f00 	ldrex	r3, [r3]
 8006e52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e56:	f043 0301 	orr.w	r3, r3, #1
 8006e5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3308      	adds	r3, #8
 8006e62:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006e64:	637a      	str	r2, [r7, #52]	@ 0x34
 8006e66:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006e6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e6c:	e841 2300 	strex	r3, r2, [r1]
 8006e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e5      	bne.n	8006e44 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	3308      	adds	r3, #8
 8006e7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	e853 3f00 	ldrex	r3, [r3]
 8006e86:	613b      	str	r3, [r7, #16]
   return(result);
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	3308      	adds	r3, #8
 8006e96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e98:	623a      	str	r2, [r7, #32]
 8006e9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9c:	69f9      	ldr	r1, [r7, #28]
 8006e9e:	6a3a      	ldr	r2, [r7, #32]
 8006ea0:	e841 2300 	strex	r3, r2, [r1]
 8006ea4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1e5      	bne.n	8006e78 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3758      	adds	r7, #88	@ 0x58
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	080070c9 	.word	0x080070c9
 8006ebc:	080071f5 	.word	0x080071f5
 8006ec0:	08007233 	.word	0x08007233

08006ec4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b08f      	sub	sp, #60	@ 0x3c
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed2:	6a3b      	ldr	r3, [r7, #32]
 8006ed4:	e853 3f00 	ldrex	r3, [r3]
 8006ed8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006ee0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006eec:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ef0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ef2:	e841 2300 	strex	r3, r2, [r1]
 8006ef6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d1e6      	bne.n	8006ecc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	3308      	adds	r3, #8
 8006f04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	e853 3f00 	ldrex	r3, [r3]
 8006f0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006f14:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	3308      	adds	r3, #8
 8006f1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f1e:	61ba      	str	r2, [r7, #24]
 8006f20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f22:	6979      	ldr	r1, [r7, #20]
 8006f24:	69ba      	ldr	r2, [r7, #24]
 8006f26:	e841 2300 	strex	r3, r2, [r1]
 8006f2a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1e5      	bne.n	8006efe <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2220      	movs	r2, #32
 8006f36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8006f3a:	bf00      	nop
 8006f3c:	373c      	adds	r7, #60	@ 0x3c
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b095      	sub	sp, #84	@ 0x54
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f56:	e853 3f00 	ldrex	r3, [r3]
 8006f5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	461a      	mov	r2, r3
 8006f6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f6e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f74:	e841 2300 	strex	r3, r2, [r1]
 8006f78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1e6      	bne.n	8006f4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3308      	adds	r3, #8
 8006f86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f88:	6a3b      	ldr	r3, [r7, #32]
 8006f8a:	e853 3f00 	ldrex	r3, [r3]
 8006f8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f96:	f023 0301 	bic.w	r3, r3, #1
 8006f9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3308      	adds	r3, #8
 8006fa2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fa4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006faa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fac:	e841 2300 	strex	r3, r2, [r1]
 8006fb0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1e3      	bne.n	8006f80 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d118      	bne.n	8006ff2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	e853 3f00 	ldrex	r3, [r3]
 8006fcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	f023 0310 	bic.w	r3, r3, #16
 8006fd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fde:	61bb      	str	r3, [r7, #24]
 8006fe0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe2:	6979      	ldr	r1, [r7, #20]
 8006fe4:	69ba      	ldr	r2, [r7, #24]
 8006fe6:	e841 2300 	strex	r3, r2, [r1]
 8006fea:	613b      	str	r3, [r7, #16]
   return(result);
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1e6      	bne.n	8006fc0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2220      	movs	r2, #32
 8006ff6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007006:	bf00      	nop
 8007008:	3754      	adds	r7, #84	@ 0x54
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b090      	sub	sp, #64	@ 0x40
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800701e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0320 	and.w	r3, r3, #32
 800702a:	2b00      	cmp	r3, #0
 800702c:	d137      	bne.n	800709e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800702e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007030:	2200      	movs	r2, #0
 8007032:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	3308      	adds	r3, #8
 800703c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007040:	e853 3f00 	ldrex	r3, [r3]
 8007044:	623b      	str	r3, [r7, #32]
   return(result);
 8007046:	6a3b      	ldr	r3, [r7, #32]
 8007048:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800704c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800704e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	3308      	adds	r3, #8
 8007054:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007056:	633a      	str	r2, [r7, #48]	@ 0x30
 8007058:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800705c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800705e:	e841 2300 	strex	r3, r2, [r1]
 8007062:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1e5      	bne.n	8007036 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800706a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	e853 3f00 	ldrex	r3, [r3]
 8007076:	60fb      	str	r3, [r7, #12]
   return(result);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800707e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	461a      	mov	r2, r3
 8007086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007088:	61fb      	str	r3, [r7, #28]
 800708a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708c:	69b9      	ldr	r1, [r7, #24]
 800708e:	69fa      	ldr	r2, [r7, #28]
 8007090:	e841 2300 	strex	r3, r2, [r1]
 8007094:	617b      	str	r3, [r7, #20]
   return(result);
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1e6      	bne.n	800706a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800709c:	e002      	b.n	80070a4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800709e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80070a0:	f7ff f980 	bl	80063a4 <HAL_UART_TxCpltCallback>
}
 80070a4:	bf00      	nop
 80070a6:	3740      	adds	r7, #64	@ 0x40
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f7ff f97c 	bl	80063b8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070c0:	bf00      	nop
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b09c      	sub	sp, #112	@ 0x70
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0320 	and.w	r3, r3, #32
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d171      	bne.n	80071c8 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80070e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070e6:	2200      	movs	r2, #0
 80070e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070f4:	e853 3f00 	ldrex	r3, [r3]
 80070f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80070fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007100:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007102:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	461a      	mov	r2, r3
 8007108:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800710a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800710c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007110:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007112:	e841 2300 	strex	r3, r2, [r1]
 8007116:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007118:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1e6      	bne.n	80070ec <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800711e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	3308      	adds	r3, #8
 8007124:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007128:	e853 3f00 	ldrex	r3, [r3]
 800712c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800712e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007130:	f023 0301 	bic.w	r3, r3, #1
 8007134:	667b      	str	r3, [r7, #100]	@ 0x64
 8007136:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	3308      	adds	r3, #8
 800713c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800713e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007140:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007142:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007144:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007146:	e841 2300 	strex	r3, r2, [r1]
 800714a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800714c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1e5      	bne.n	800711e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007152:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	3308      	adds	r3, #8
 8007158:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715c:	e853 3f00 	ldrex	r3, [r3]
 8007160:	623b      	str	r3, [r7, #32]
   return(result);
 8007162:	6a3b      	ldr	r3, [r7, #32]
 8007164:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007168:	663b      	str	r3, [r7, #96]	@ 0x60
 800716a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	3308      	adds	r3, #8
 8007170:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007172:	633a      	str	r2, [r7, #48]	@ 0x30
 8007174:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007176:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007178:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800717a:	e841 2300 	strex	r3, r2, [r1]
 800717e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1e5      	bne.n	8007152 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007186:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007188:	2220      	movs	r2, #32
 800718a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800718e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007190:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007192:	2b01      	cmp	r3, #1
 8007194:	d118      	bne.n	80071c8 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007196:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	e853 3f00 	ldrex	r3, [r3]
 80071a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f023 0310 	bic.w	r3, r3, #16
 80071aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	461a      	mov	r2, r3
 80071b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071b4:	61fb      	str	r3, [r7, #28]
 80071b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b8:	69b9      	ldr	r1, [r7, #24]
 80071ba:	69fa      	ldr	r2, [r7, #28]
 80071bc:	e841 2300 	strex	r3, r2, [r1]
 80071c0:	617b      	str	r3, [r7, #20]
   return(result);
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1e6      	bne.n	8007196 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071ca:	2200      	movs	r2, #0
 80071cc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d107      	bne.n	80071e6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80071dc:	4619      	mov	r1, r3
 80071de:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80071e0:	f7ff f908 	bl	80063f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80071e4:	e002      	b.n	80071ec <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80071e6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80071e8:	f7fa f8aa 	bl	8001340 <HAL_UART_RxCpltCallback>
}
 80071ec:	bf00      	nop
 80071ee:	3770      	adds	r7, #112	@ 0x70
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007200:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2201      	movs	r2, #1
 8007206:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800720c:	2b01      	cmp	r3, #1
 800720e:	d109      	bne.n	8007224 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007216:	085b      	lsrs	r3, r3, #1
 8007218:	b29b      	uxth	r3, r3
 800721a:	4619      	mov	r1, r3
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f7ff f8e9 	bl	80063f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007222:	e002      	b.n	800722a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f7ff f8d1 	bl	80063cc <HAL_UART_RxHalfCpltCallback>
}
 800722a:	bf00      	nop
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b086      	sub	sp, #24
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800723e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007246:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800724e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800725a:	2b80      	cmp	r3, #128	@ 0x80
 800725c:	d109      	bne.n	8007272 <UART_DMAError+0x40>
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	2b21      	cmp	r3, #33	@ 0x21
 8007262:	d106      	bne.n	8007272 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	2200      	movs	r2, #0
 8007268:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800726c:	6978      	ldr	r0, [r7, #20]
 800726e:	f7ff fe29 	bl	8006ec4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800727c:	2b40      	cmp	r3, #64	@ 0x40
 800727e:	d109      	bne.n	8007294 <UART_DMAError+0x62>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2b22      	cmp	r3, #34	@ 0x22
 8007284:	d106      	bne.n	8007294 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	2200      	movs	r2, #0
 800728a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800728e:	6978      	ldr	r0, [r7, #20]
 8007290:	f7ff fe59 	bl	8006f46 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800729a:	f043 0210 	orr.w	r2, r3, #16
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072a4:	6978      	ldr	r0, [r7, #20]
 80072a6:	f7ff f89b 	bl	80063e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072aa:	bf00      	nop
 80072ac:	3718      	adds	r7, #24
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b085      	sub	sp, #20
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d101      	bne.n	80072c8 <HAL_UARTEx_DisableFifoMode+0x16>
 80072c4:	2302      	movs	r3, #2
 80072c6:	e027      	b.n	8007318 <HAL_UARTEx_DisableFifoMode+0x66>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2224      	movs	r2, #36	@ 0x24
 80072d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f022 0201 	bic.w	r2, r2, #1
 80072ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80072f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2220      	movs	r2, #32
 800730a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007334:	2b01      	cmp	r3, #1
 8007336:	d101      	bne.n	800733c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007338:	2302      	movs	r3, #2
 800733a:	e02d      	b.n	8007398 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2224      	movs	r2, #36	@ 0x24
 8007348:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f022 0201 	bic.w	r2, r2, #1
 8007362:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	430a      	orrs	r2, r1
 8007376:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f84f 	bl	800741c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2220      	movs	r2, #32
 800738a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d101      	bne.n	80073b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80073b4:	2302      	movs	r3, #2
 80073b6:	e02d      	b.n	8007414 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2224      	movs	r2, #36	@ 0x24
 80073c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f022 0201 	bic.w	r2, r2, #1
 80073de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	430a      	orrs	r2, r1
 80073f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 f811 	bl	800741c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2220      	movs	r2, #32
 8007406:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3710      	adds	r7, #16
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007428:	2b00      	cmp	r3, #0
 800742a:	d108      	bne.n	800743e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800743c:	e031      	b.n	80074a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800743e:	2308      	movs	r3, #8
 8007440:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007442:	2308      	movs	r3, #8
 8007444:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	0e5b      	lsrs	r3, r3, #25
 800744e:	b2db      	uxtb	r3, r3
 8007450:	f003 0307 	and.w	r3, r3, #7
 8007454:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	0f5b      	lsrs	r3, r3, #29
 800745e:	b2db      	uxtb	r3, r3
 8007460:	f003 0307 	and.w	r3, r3, #7
 8007464:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007466:	7bbb      	ldrb	r3, [r7, #14]
 8007468:	7b3a      	ldrb	r2, [r7, #12]
 800746a:	4911      	ldr	r1, [pc, #68]	@ (80074b0 <UARTEx_SetNbDataToProcess+0x94>)
 800746c:	5c8a      	ldrb	r2, [r1, r2]
 800746e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007472:	7b3a      	ldrb	r2, [r7, #12]
 8007474:	490f      	ldr	r1, [pc, #60]	@ (80074b4 <UARTEx_SetNbDataToProcess+0x98>)
 8007476:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007478:	fb93 f3f2 	sdiv	r3, r3, r2
 800747c:	b29a      	uxth	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007484:	7bfb      	ldrb	r3, [r7, #15]
 8007486:	7b7a      	ldrb	r2, [r7, #13]
 8007488:	4909      	ldr	r1, [pc, #36]	@ (80074b0 <UARTEx_SetNbDataToProcess+0x94>)
 800748a:	5c8a      	ldrb	r2, [r1, r2]
 800748c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007490:	7b7a      	ldrb	r2, [r7, #13]
 8007492:	4908      	ldr	r1, [pc, #32]	@ (80074b4 <UARTEx_SetNbDataToProcess+0x98>)
 8007494:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007496:	fb93 f3f2 	sdiv	r3, r3, r2
 800749a:	b29a      	uxth	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80074a2:	bf00      	nop
 80074a4:	3714      	adds	r7, #20
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	08007558 	.word	0x08007558
 80074b4:	08007560 	.word	0x08007560

080074b8 <memset>:
 80074b8:	4402      	add	r2, r0
 80074ba:	4603      	mov	r3, r0
 80074bc:	4293      	cmp	r3, r2
 80074be:	d100      	bne.n	80074c2 <memset+0xa>
 80074c0:	4770      	bx	lr
 80074c2:	f803 1b01 	strb.w	r1, [r3], #1
 80074c6:	e7f9      	b.n	80074bc <memset+0x4>

080074c8 <__libc_init_array>:
 80074c8:	b570      	push	{r4, r5, r6, lr}
 80074ca:	4d0d      	ldr	r5, [pc, #52]	@ (8007500 <__libc_init_array+0x38>)
 80074cc:	4c0d      	ldr	r4, [pc, #52]	@ (8007504 <__libc_init_array+0x3c>)
 80074ce:	1b64      	subs	r4, r4, r5
 80074d0:	10a4      	asrs	r4, r4, #2
 80074d2:	2600      	movs	r6, #0
 80074d4:	42a6      	cmp	r6, r4
 80074d6:	d109      	bne.n	80074ec <__libc_init_array+0x24>
 80074d8:	4d0b      	ldr	r5, [pc, #44]	@ (8007508 <__libc_init_array+0x40>)
 80074da:	4c0c      	ldr	r4, [pc, #48]	@ (800750c <__libc_init_array+0x44>)
 80074dc:	f000 f818 	bl	8007510 <_init>
 80074e0:	1b64      	subs	r4, r4, r5
 80074e2:	10a4      	asrs	r4, r4, #2
 80074e4:	2600      	movs	r6, #0
 80074e6:	42a6      	cmp	r6, r4
 80074e8:	d105      	bne.n	80074f6 <__libc_init_array+0x2e>
 80074ea:	bd70      	pop	{r4, r5, r6, pc}
 80074ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80074f0:	4798      	blx	r3
 80074f2:	3601      	adds	r6, #1
 80074f4:	e7ee      	b.n	80074d4 <__libc_init_array+0xc>
 80074f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80074fa:	4798      	blx	r3
 80074fc:	3601      	adds	r6, #1
 80074fe:	e7f2      	b.n	80074e6 <__libc_init_array+0x1e>
 8007500:	08007570 	.word	0x08007570
 8007504:	08007570 	.word	0x08007570
 8007508:	08007570 	.word	0x08007570
 800750c:	08007574 	.word	0x08007574

08007510 <_init>:
 8007510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007512:	bf00      	nop
 8007514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007516:	bc08      	pop	{r3}
 8007518:	469e      	mov	lr, r3
 800751a:	4770      	bx	lr

0800751c <_fini>:
 800751c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751e:	bf00      	nop
 8007520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007522:	bc08      	pop	{r3}
 8007524:	469e      	mov	lr, r3
 8007526:	4770      	bx	lr
