
LAB2_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007464  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800763c  0800763c  0000863c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800767c  0800767c  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  0800767c  0800767c  0000867c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007684  08007684  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007684  08007684  00008684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007688  08007688  00008688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800768c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  2000000c  08007698  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08007698  00009348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016cb5  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a01  00000000  00000000  0001fcf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001480  00000000  00000000  000226f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001004  00000000  00000000  00023b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000284e7  00000000  00000000  00024b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017626  00000000  00000000  0004d063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001121e1  00000000  00000000  00064689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017686a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a30  00000000  00000000  001768b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  0017c2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007624 	.word	0x08007624

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08007624 	.word	0x08007624

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	@ 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2iz>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009cc:	d215      	bcs.n	80009fa <__aeabi_d2iz+0x36>
 80009ce:	d511      	bpl.n	80009f4 <__aeabi_d2iz+0x30>
 80009d0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d912      	bls.n	8000a00 <__aeabi_d2iz+0x3c>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009ea:	fa23 f002 	lsr.w	r0, r3, r2
 80009ee:	bf18      	it	ne
 80009f0:	4240      	negne	r0, r0
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009fe:	d105      	bne.n	8000a0c <__aeabi_d2iz+0x48>
 8000a00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a04:	bf08      	it	eq
 8000a06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a0a:	4770      	bx	lr
 8000a0c:	f04f 0000 	mov.w	r0, #0
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b96a 	b.w	8000d00 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	460c      	mov	r4, r1
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d14e      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a50:	4694      	mov	ip, r2
 8000a52:	458c      	cmp	ip, r1
 8000a54:	4686      	mov	lr, r0
 8000a56:	fab2 f282 	clz	r2, r2
 8000a5a:	d962      	bls.n	8000b22 <__udivmoddi4+0xde>
 8000a5c:	b14a      	cbz	r2, 8000a72 <__udivmoddi4+0x2e>
 8000a5e:	f1c2 0320 	rsb	r3, r2, #32
 8000a62:	4091      	lsls	r1, r2
 8000a64:	fa20 f303 	lsr.w	r3, r0, r3
 8000a68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6c:	4319      	orrs	r1, r3
 8000a6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a76:	fa1f f68c 	uxth.w	r6, ip
 8000a7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a82:	fb07 1114 	mls	r1, r7, r4, r1
 8000a86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a8a:	fb04 f106 	mul.w	r1, r4, r6
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a9a:	f080 8112 	bcs.w	8000cc2 <__udivmoddi4+0x27e>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 810f 	bls.w	8000cc2 <__udivmoddi4+0x27e>
 8000aa4:	3c02      	subs	r4, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a59      	subs	r1, r3, r1
 8000aaa:	fa1f f38e 	uxth.w	r3, lr
 8000aae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ab2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ab6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aba:	fb00 f606 	mul.w	r6, r0, r6
 8000abe:	429e      	cmp	r6, r3
 8000ac0:	d90a      	bls.n	8000ad8 <__udivmoddi4+0x94>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aca:	f080 80fc 	bcs.w	8000cc6 <__udivmoddi4+0x282>
 8000ace:	429e      	cmp	r6, r3
 8000ad0:	f240 80f9 	bls.w	8000cc6 <__udivmoddi4+0x282>
 8000ad4:	4463      	add	r3, ip
 8000ad6:	3802      	subs	r0, #2
 8000ad8:	1b9b      	subs	r3, r3, r6
 8000ada:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ade:	2100      	movs	r1, #0
 8000ae0:	b11d      	cbz	r5, 8000aea <__udivmoddi4+0xa6>
 8000ae2:	40d3      	lsrs	r3, r2
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	e9c5 3200 	strd	r3, r2, [r5]
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d905      	bls.n	8000afe <__udivmoddi4+0xba>
 8000af2:	b10d      	cbz	r5, 8000af8 <__udivmoddi4+0xb4>
 8000af4:	e9c5 0100 	strd	r0, r1, [r5]
 8000af8:	2100      	movs	r1, #0
 8000afa:	4608      	mov	r0, r1
 8000afc:	e7f5      	b.n	8000aea <__udivmoddi4+0xa6>
 8000afe:	fab3 f183 	clz	r1, r3
 8000b02:	2900      	cmp	r1, #0
 8000b04:	d146      	bne.n	8000b94 <__udivmoddi4+0x150>
 8000b06:	42a3      	cmp	r3, r4
 8000b08:	d302      	bcc.n	8000b10 <__udivmoddi4+0xcc>
 8000b0a:	4290      	cmp	r0, r2
 8000b0c:	f0c0 80f0 	bcc.w	8000cf0 <__udivmoddi4+0x2ac>
 8000b10:	1a86      	subs	r6, r0, r2
 8000b12:	eb64 0303 	sbc.w	r3, r4, r3
 8000b16:	2001      	movs	r0, #1
 8000b18:	2d00      	cmp	r5, #0
 8000b1a:	d0e6      	beq.n	8000aea <__udivmoddi4+0xa6>
 8000b1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b20:	e7e3      	b.n	8000aea <__udivmoddi4+0xa6>
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	f040 8090 	bne.w	8000c48 <__udivmoddi4+0x204>
 8000b28:	eba1 040c 	sub.w	r4, r1, ip
 8000b2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b30:	fa1f f78c 	uxth.w	r7, ip
 8000b34:	2101      	movs	r1, #1
 8000b36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b46:	fb07 f006 	mul.w	r0, r7, r6
 8000b4a:	4298      	cmp	r0, r3
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x11c>
 8000b4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x11a>
 8000b58:	4298      	cmp	r0, r3
 8000b5a:	f200 80cd 	bhi.w	8000cf8 <__udivmoddi4+0x2b4>
 8000b5e:	4626      	mov	r6, r4
 8000b60:	1a1c      	subs	r4, r3, r0
 8000b62:	fa1f f38e 	uxth.w	r3, lr
 8000b66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b72:	fb00 f707 	mul.w	r7, r0, r7
 8000b76:	429f      	cmp	r7, r3
 8000b78:	d908      	bls.n	8000b8c <__udivmoddi4+0x148>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b82:	d202      	bcs.n	8000b8a <__udivmoddi4+0x146>
 8000b84:	429f      	cmp	r7, r3
 8000b86:	f200 80b0 	bhi.w	8000cea <__udivmoddi4+0x2a6>
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	1bdb      	subs	r3, r3, r7
 8000b8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b92:	e7a5      	b.n	8000ae0 <__udivmoddi4+0x9c>
 8000b94:	f1c1 0620 	rsb	r6, r1, #32
 8000b98:	408b      	lsls	r3, r1
 8000b9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b9e:	431f      	orrs	r7, r3
 8000ba0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ba4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ba8:	ea43 030c 	orr.w	r3, r3, ip
 8000bac:	40f4      	lsrs	r4, r6
 8000bae:	fa00 f801 	lsl.w	r8, r0, r1
 8000bb2:	0c38      	lsrs	r0, r7, #16
 8000bb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bbc:	fa1f fc87 	uxth.w	ip, r7
 8000bc0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bc4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bc8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bcc:	45a1      	cmp	r9, r4
 8000bce:	fa02 f201 	lsl.w	r2, r2, r1
 8000bd2:	d90a      	bls.n	8000bea <__udivmoddi4+0x1a6>
 8000bd4:	193c      	adds	r4, r7, r4
 8000bd6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bda:	f080 8084 	bcs.w	8000ce6 <__udivmoddi4+0x2a2>
 8000bde:	45a1      	cmp	r9, r4
 8000be0:	f240 8081 	bls.w	8000ce6 <__udivmoddi4+0x2a2>
 8000be4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000be8:	443c      	add	r4, r7
 8000bea:	eba4 0409 	sub.w	r4, r4, r9
 8000bee:	fa1f f983 	uxth.w	r9, r3
 8000bf2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bf6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bfa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bfe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c02:	45a4      	cmp	ip, r4
 8000c04:	d907      	bls.n	8000c16 <__udivmoddi4+0x1d2>
 8000c06:	193c      	adds	r4, r7, r4
 8000c08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c0c:	d267      	bcs.n	8000cde <__udivmoddi4+0x29a>
 8000c0e:	45a4      	cmp	ip, r4
 8000c10:	d965      	bls.n	8000cde <__udivmoddi4+0x29a>
 8000c12:	3b02      	subs	r3, #2
 8000c14:	443c      	add	r4, r7
 8000c16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c1e:	eba4 040c 	sub.w	r4, r4, ip
 8000c22:	429c      	cmp	r4, r3
 8000c24:	46ce      	mov	lr, r9
 8000c26:	469c      	mov	ip, r3
 8000c28:	d351      	bcc.n	8000cce <__udivmoddi4+0x28a>
 8000c2a:	d04e      	beq.n	8000cca <__udivmoddi4+0x286>
 8000c2c:	b155      	cbz	r5, 8000c44 <__udivmoddi4+0x200>
 8000c2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c32:	eb64 040c 	sbc.w	r4, r4, ip
 8000c36:	fa04 f606 	lsl.w	r6, r4, r6
 8000c3a:	40cb      	lsrs	r3, r1
 8000c3c:	431e      	orrs	r6, r3
 8000c3e:	40cc      	lsrs	r4, r1
 8000c40:	e9c5 6400 	strd	r6, r4, [r5]
 8000c44:	2100      	movs	r1, #0
 8000c46:	e750      	b.n	8000aea <__udivmoddi4+0xa6>
 8000c48:	f1c2 0320 	rsb	r3, r2, #32
 8000c4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c54:	fa24 f303 	lsr.w	r3, r4, r3
 8000c58:	4094      	lsls	r4, r2
 8000c5a:	430c      	orrs	r4, r1
 8000c5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c64:	fa1f f78c 	uxth.w	r7, ip
 8000c68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c70:	0c23      	lsrs	r3, r4, #16
 8000c72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c76:	fb00 f107 	mul.w	r1, r0, r7
 8000c7a:	4299      	cmp	r1, r3
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0x24c>
 8000c7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c86:	d22c      	bcs.n	8000ce2 <__udivmoddi4+0x29e>
 8000c88:	4299      	cmp	r1, r3
 8000c8a:	d92a      	bls.n	8000ce2 <__udivmoddi4+0x29e>
 8000c8c:	3802      	subs	r0, #2
 8000c8e:	4463      	add	r3, ip
 8000c90:	1a5b      	subs	r3, r3, r1
 8000c92:	b2a4      	uxth	r4, r4
 8000c94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c98:	fb08 3311 	mls	r3, r8, r1, r3
 8000c9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca0:	fb01 f307 	mul.w	r3, r1, r7
 8000ca4:	42a3      	cmp	r3, r4
 8000ca6:	d908      	bls.n	8000cba <__udivmoddi4+0x276>
 8000ca8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cb0:	d213      	bcs.n	8000cda <__udivmoddi4+0x296>
 8000cb2:	42a3      	cmp	r3, r4
 8000cb4:	d911      	bls.n	8000cda <__udivmoddi4+0x296>
 8000cb6:	3902      	subs	r1, #2
 8000cb8:	4464      	add	r4, ip
 8000cba:	1ae4      	subs	r4, r4, r3
 8000cbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cc0:	e739      	b.n	8000b36 <__udivmoddi4+0xf2>
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	e6f0      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000cc6:	4608      	mov	r0, r1
 8000cc8:	e706      	b.n	8000ad8 <__udivmoddi4+0x94>
 8000cca:	45c8      	cmp	r8, r9
 8000ccc:	d2ae      	bcs.n	8000c2c <__udivmoddi4+0x1e8>
 8000cce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cd6:	3801      	subs	r0, #1
 8000cd8:	e7a8      	b.n	8000c2c <__udivmoddi4+0x1e8>
 8000cda:	4631      	mov	r1, r6
 8000cdc:	e7ed      	b.n	8000cba <__udivmoddi4+0x276>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	e799      	b.n	8000c16 <__udivmoddi4+0x1d2>
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	e7d4      	b.n	8000c90 <__udivmoddi4+0x24c>
 8000ce6:	46d6      	mov	lr, sl
 8000ce8:	e77f      	b.n	8000bea <__udivmoddi4+0x1a6>
 8000cea:	4463      	add	r3, ip
 8000cec:	3802      	subs	r0, #2
 8000cee:	e74d      	b.n	8000b8c <__udivmoddi4+0x148>
 8000cf0:	4606      	mov	r6, r0
 8000cf2:	4623      	mov	r3, r4
 8000cf4:	4608      	mov	r0, r1
 8000cf6:	e70f      	b.n	8000b18 <__udivmoddi4+0xd4>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	e730      	b.n	8000b60 <__udivmoddi4+0x11c>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_idiv0>:
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	0000      	movs	r0, r0
	...

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0c:	f000 fd93 	bl	8001836 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d10:	f000 f892 	bl	8000e38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d14:	f000 fa94 	bl	8001240 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d18:	f000 fa58 	bl	80011cc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000d1c:	f000 f950 	bl	8000fc0 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000d20:	f000 f8d6 	bl	8000ed0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d24:	f000 f996 	bl	8001054 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000d28:	217f      	movs	r1, #127	@ 0x7f
 8000d2a:	4839      	ldr	r0, [pc, #228]	@ (8000e10 <main+0x108>)
 8000d2c:	f002 f902 	bl	8002f34 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 40);
 8000d30:	2228      	movs	r2, #40	@ 0x28
 8000d32:	4938      	ldr	r1, [pc, #224]	@ (8000e14 <main+0x10c>)
 8000d34:	4836      	ldr	r0, [pc, #216]	@ (8000e10 <main+0x108>)
 8000d36:	f001 f9ef 	bl	8002118 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim1);
 8000d3a:	4837      	ldr	r0, [pc, #220]	@ (8000e18 <main+0x110>)
 8000d3c:	f004 f83a 	bl	8004db4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d40:	2100      	movs	r1, #0
 8000d42:	4835      	ldr	r0, [pc, #212]	@ (8000e18 <main+0x110>)
 8000d44:	f004 f908 	bl	8004f58 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000d48:	2104      	movs	r1, #4
 8000d4a:	4833      	ldr	r0, [pc, #204]	@ (8000e18 <main+0x110>)
 8000d4c:	f004 f904 	bl	8004f58 <HAL_TIM_PWM_Start>
  UARTDMAConfig();
 8000d50:	f000 fae4 	bl	800131c <UARTDMAConfig>
  ADCBytes[0] = (uint8_t)(ADC_RawRead[0] & 0xFF); // Lower byte
 8000d54:	4b2f      	ldr	r3, [pc, #188]	@ (8000e14 <main+0x10c>)
 8000d56:	881b      	ldrh	r3, [r3, #0]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4b30      	ldr	r3, [pc, #192]	@ (8000e1c <main+0x114>)
 8000d5c:	701a      	strb	r2, [r3, #0]
  ADCBytes[1] = (uint8_t)((ADC_RawRead[0] >> 8) & 0xFF); // Upper byte
 8000d5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000e14 <main+0x10c>)
 8000d60:	881b      	ldrh	r3, [r3, #0]
 8000d62:	0a1b      	lsrs	r3, r3, #8
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	4b2c      	ldr	r3, [pc, #176]	@ (8000e1c <main+0x114>)
 8000d6a:	705a      	strb	r2, [r3, #1]
  HAL_UART_Transmit(&hlpuart1, ADCBytes , 80 ,10);
 8000d6c:	230a      	movs	r3, #10
 8000d6e:	2250      	movs	r2, #80	@ 0x50
 8000d70:	492a      	ldr	r1, [pc, #168]	@ (8000e1c <main+0x114>)
 8000d72:	482b      	ldr	r0, [pc, #172]	@ (8000e20 <main+0x118>)
 8000d74:	f005 fa46 	bl	8006204 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Degree_position = (ADC_RawRead[0]*360.0)/4095.0;
 8000d78:	4b26      	ldr	r3, [pc, #152]	@ (8000e14 <main+0x10c>)
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fba5 	bl	80004cc <__aeabi_i2d>
 8000d82:	f04f 0200 	mov.w	r2, #0
 8000d86:	4b27      	ldr	r3, [pc, #156]	@ (8000e24 <main+0x11c>)
 8000d88:	f7ff fc0a 	bl	80005a0 <__aeabi_dmul>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	460b      	mov	r3, r1
 8000d90:	4610      	mov	r0, r2
 8000d92:	4619      	mov	r1, r3
 8000d94:	a31a      	add	r3, pc, #104	@ (adr r3, 8000e00 <main+0xf8>)
 8000d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d9a:	f7ff fd2b 	bl	80007f4 <__aeabi_ddiv>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	460b      	mov	r3, r1
 8000da2:	4610      	mov	r0, r2
 8000da4:	4619      	mov	r1, r3
 8000da6:	f7ff fe0d 	bl	80009c4 <__aeabi_d2iz>
 8000daa:	4603      	mov	r3, r0
 8000dac:	4a1e      	ldr	r2, [pc, #120]	@ (8000e28 <main+0x120>)
 8000dae:	6013      	str	r3, [r2, #0]
	  Rad_position = (ADC_RawRead[0]*3.14)/4095.0;
 8000db0:	4b18      	ldr	r3, [pc, #96]	@ (8000e14 <main+0x10c>)
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fb89 	bl	80004cc <__aeabi_i2d>
 8000dba:	a313      	add	r3, pc, #76	@ (adr r3, 8000e08 <main+0x100>)
 8000dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc0:	f7ff fbee 	bl	80005a0 <__aeabi_dmul>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	4610      	mov	r0, r2
 8000dca:	4619      	mov	r1, r3
 8000dcc:	a30c      	add	r3, pc, #48	@ (adr r3, 8000e00 <main+0xf8>)
 8000dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd2:	f7ff fd0f 	bl	80007f4 <__aeabi_ddiv>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	460b      	mov	r3, r1
 8000dda:	4610      	mov	r0, r2
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f7ff fdf1 	bl	80009c4 <__aeabi_d2iz>
 8000de2:	4603      	mov	r3, r0
 8000de4:	4a11      	ldr	r2, [pc, #68]	@ (8000e2c <main+0x124>)
 8000de6:	6013      	str	r3, [r2, #0]
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM1);
 8000de8:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <main+0x128>)
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	4b0a      	ldr	r3, [pc, #40]	@ (8000e18 <main+0x110>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM2);
 8000df2:	4b10      	ldr	r3, [pc, #64]	@ (8000e34 <main+0x12c>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <main+0x110>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	639a      	str	r2, [r3, #56]	@ 0x38
	  Degree_position = (ADC_RawRead[0]*360.0)/4095.0;
 8000dfc:	bf00      	nop
 8000dfe:	e7bb      	b.n	8000d78 <main+0x70>
 8000e00:	00000000 	.word	0x00000000
 8000e04:	40affe00 	.word	0x40affe00
 8000e08:	51eb851f 	.word	0x51eb851f
 8000e0c:	40091eb8 	.word	0x40091eb8
 8000e10:	20000028 	.word	0x20000028
 8000e14:	20000294 	.word	0x20000294
 8000e18:	20000248 	.word	0x20000248
 8000e1c:	200002e4 	.word	0x200002e4
 8000e20:	200000f4 	.word	0x200000f4
 8000e24:	40768000 	.word	0x40768000
 8000e28:	20000334 	.word	0x20000334
 8000e2c:	20000338 	.word	0x20000338
 8000e30:	2000033c 	.word	0x2000033c
 8000e34:	20000340 	.word	0x20000340

08000e38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b094      	sub	sp, #80	@ 0x50
 8000e3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3e:	f107 0318 	add.w	r3, r7, #24
 8000e42:	2238      	movs	r2, #56	@ 0x38
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f006 fbc0 	bl	80075cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f002 ff22 	bl	8003ca4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e60:	2302      	movs	r3, #2
 8000e62:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e6a:	2340      	movs	r3, #64	@ 0x40
 8000e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e72:	2302      	movs	r3, #2
 8000e74:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000e76:	2304      	movs	r3, #4
 8000e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000e7a:	2355      	movs	r3, #85	@ 0x55
 8000e7c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e82:	2302      	movs	r3, #2
 8000e84:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e86:	2302      	movs	r3, #2
 8000e88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8a:	f107 0318 	add.w	r3, r7, #24
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f002 ffbc 	bl	8003e0c <HAL_RCC_OscConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e9a:	f000 fa83 	bl	80013a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9e:	230f      	movs	r3, #15
 8000ea0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f003 faba 	bl	8004430 <HAL_RCC_ClockConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000ec2:	f000 fa6f 	bl	80013a4 <Error_Handler>
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	3750      	adds	r7, #80	@ 0x50
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08c      	sub	sp, #48	@ 0x30
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ed6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2220      	movs	r2, #32
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f006 fb6f 	bl	80075cc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000eee:	4b32      	ldr	r3, [pc, #200]	@ (8000fb8 <MX_ADC1_Init+0xe8>)
 8000ef0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000ef4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ef6:	4b30      	ldr	r3, [pc, #192]	@ (8000fb8 <MX_ADC1_Init+0xe8>)
 8000ef8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000efc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000efe:	4b2e      	ldr	r3, [pc, #184]	@ (8000fb8 <MX_ADC1_Init+0xe8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f04:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb8 <MX_ADC1_Init+0xe8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f0a:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb8 <MX_ADC1_Init+0xe8>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f10:	4b29      	ldr	r3, [pc, #164]	@ (8000fb8 <MX_ADC1_Init+0xe8>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f16:	4b28      	ldr	r3, [pc, #160]	@ (8000fb8 <MX_ADC1_Init+0xe8>)
 8000f18:	2204      	movs	r2, #4
 8000f1a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f1c:	4b26      	ldr	r3, [pc, #152]	@ (8000fb8 <MX_ADC1_Init+0xe8>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f22:	4b25      	ldr	r3, [pc, #148]	@ (8000fb8 <MX_ADC1_Init+0xe8>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f28:	4b23      	ldr	r3, [pc, #140]	@ (8000fb8 <MX_ADC1_Init+0xe8>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f2e:	4b22      	ldr	r3, [pc, #136]	@ (8000fb8 <MX_ADC1_Init+0xe8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f36:	4b20      	ldr	r3, [pc, #128]	@ (8000fb8 <MX_ADC1_Init+0xe8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb8 <MX_ADC1_Init+0xe8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f42:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb8 <MX_ADC1_Init+0xe8>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb8 <MX_ADC1_Init+0xe8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f50:	4b19      	ldr	r3, [pc, #100]	@ (8000fb8 <MX_ADC1_Init+0xe8>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f58:	4817      	ldr	r0, [pc, #92]	@ (8000fb8 <MX_ADC1_Init+0xe8>)
 8000f5a:	f000 ff21 	bl	8001da0 <HAL_ADC_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f64:	f000 fa1e 	bl	80013a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f70:	4619      	mov	r1, r3
 8000f72:	4811      	ldr	r0, [pc, #68]	@ (8000fb8 <MX_ADC1_Init+0xe8>)
 8000f74:	f002 f840 	bl	8002ff8 <HAL_ADCEx_MultiModeConfigChannel>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f7e:	f000 fa11 	bl	80013a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	@ (8000fbc <MX_ADC1_Init+0xec>)
 8000f84:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f86:	2306      	movs	r3, #6
 8000f88:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f8e:	237f      	movs	r3, #127	@ 0x7f
 8000f90:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f92:	2304      	movs	r3, #4
 8000f94:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4806      	ldr	r0, [pc, #24]	@ (8000fb8 <MX_ADC1_Init+0xe8>)
 8000fa0:	f001 f9ac 	bl	80022fc <HAL_ADC_ConfigChannel>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000faa:	f000 f9fb 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fae:	bf00      	nop
 8000fb0:	3730      	adds	r7, #48	@ 0x30
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000028 	.word	0x20000028
 8000fbc:	04300002 	.word	0x04300002

08000fc0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000fc4:	4b21      	ldr	r3, [pc, #132]	@ (800104c <MX_LPUART1_UART_Init+0x8c>)
 8000fc6:	4a22      	ldr	r2, [pc, #136]	@ (8001050 <MX_LPUART1_UART_Init+0x90>)
 8000fc8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000fca:	4b20      	ldr	r3, [pc, #128]	@ (800104c <MX_LPUART1_UART_Init+0x8c>)
 8000fcc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fd0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd2:	4b1e      	ldr	r3, [pc, #120]	@ (800104c <MX_LPUART1_UART_Init+0x8c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000fd8:	4b1c      	ldr	r3, [pc, #112]	@ (800104c <MX_LPUART1_UART_Init+0x8c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000fde:	4b1b      	ldr	r3, [pc, #108]	@ (800104c <MX_LPUART1_UART_Init+0x8c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000fe4:	4b19      	ldr	r3, [pc, #100]	@ (800104c <MX_LPUART1_UART_Init+0x8c>)
 8000fe6:	220c      	movs	r2, #12
 8000fe8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fea:	4b18      	ldr	r3, [pc, #96]	@ (800104c <MX_LPUART1_UART_Init+0x8c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ff0:	4b16      	ldr	r3, [pc, #88]	@ (800104c <MX_LPUART1_UART_Init+0x8c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ff6:	4b15      	ldr	r3, [pc, #84]	@ (800104c <MX_LPUART1_UART_Init+0x8c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ffc:	4b13      	ldr	r3, [pc, #76]	@ (800104c <MX_LPUART1_UART_Init+0x8c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001002:	4812      	ldr	r0, [pc, #72]	@ (800104c <MX_LPUART1_UART_Init+0x8c>)
 8001004:	f005 f8ae 	bl	8006164 <HAL_UART_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800100e:	f000 f9c9 	bl	80013a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001012:	2100      	movs	r1, #0
 8001014:	480d      	ldr	r0, [pc, #52]	@ (800104c <MX_LPUART1_UART_Init+0x8c>)
 8001016:	f006 fa0f 	bl	8007438 <HAL_UARTEx_SetTxFifoThreshold>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001020:	f000 f9c0 	bl	80013a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001024:	2100      	movs	r1, #0
 8001026:	4809      	ldr	r0, [pc, #36]	@ (800104c <MX_LPUART1_UART_Init+0x8c>)
 8001028:	f006 fa44 	bl	80074b4 <HAL_UARTEx_SetRxFifoThreshold>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001032:	f000 f9b7 	bl	80013a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001036:	4805      	ldr	r0, [pc, #20]	@ (800104c <MX_LPUART1_UART_Init+0x8c>)
 8001038:	f006 f9c5 	bl	80073c6 <HAL_UARTEx_DisableFifoMode>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001042:	f000 f9af 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200000f4 	.word	0x200000f4
 8001050:	40008000 	.word	0x40008000

08001054 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b09c      	sub	sp, #112	@ 0x70
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800105a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001068:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001074:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
 8001084:	615a      	str	r2, [r3, #20]
 8001086:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2234      	movs	r2, #52	@ 0x34
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f006 fa9c 	bl	80075cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001094:	4b4b      	ldr	r3, [pc, #300]	@ (80011c4 <MX_TIM1_Init+0x170>)
 8001096:	4a4c      	ldr	r2, [pc, #304]	@ (80011c8 <MX_TIM1_Init+0x174>)
 8001098:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16;
 800109a:	4b4a      	ldr	r3, [pc, #296]	@ (80011c4 <MX_TIM1_Init+0x170>)
 800109c:	2210      	movs	r2, #16
 800109e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a0:	4b48      	ldr	r3, [pc, #288]	@ (80011c4 <MX_TIM1_Init+0x170>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80010a6:	4b47      	ldr	r3, [pc, #284]	@ (80011c4 <MX_TIM1_Init+0x170>)
 80010a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ae:	4b45      	ldr	r3, [pc, #276]	@ (80011c4 <MX_TIM1_Init+0x170>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010b4:	4b43      	ldr	r3, [pc, #268]	@ (80011c4 <MX_TIM1_Init+0x170>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ba:	4b42      	ldr	r3, [pc, #264]	@ (80011c4 <MX_TIM1_Init+0x170>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010c0:	4840      	ldr	r0, [pc, #256]	@ (80011c4 <MX_TIM1_Init+0x170>)
 80010c2:	f003 fe1f 	bl	8004d04 <HAL_TIM_Base_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80010cc:	f000 f96a 	bl	80013a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010d4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010d6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80010da:	4619      	mov	r1, r3
 80010dc:	4839      	ldr	r0, [pc, #228]	@ (80011c4 <MX_TIM1_Init+0x170>)
 80010de:	f004 f961 	bl	80053a4 <HAL_TIM_ConfigClockSource>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80010e8:	f000 f95c 	bl	80013a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010ec:	4835      	ldr	r0, [pc, #212]	@ (80011c4 <MX_TIM1_Init+0x170>)
 80010ee:	f003 fed1 	bl	8004e94 <HAL_TIM_PWM_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80010f8:	f000 f954 	bl	80013a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fc:	2300      	movs	r3, #0
 80010fe:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001100:	2300      	movs	r3, #0
 8001102:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001104:	2300      	movs	r3, #0
 8001106:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001108:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800110c:	4619      	mov	r1, r3
 800110e:	482d      	ldr	r0, [pc, #180]	@ (80011c4 <MX_TIM1_Init+0x170>)
 8001110:	f004 fefe 	bl	8005f10 <HAL_TIMEx_MasterConfigSynchronization>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800111a:	f000 f943 	bl	80013a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800111e:	2360      	movs	r3, #96	@ 0x60
 8001120:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001126:	2300      	movs	r3, #0
 8001128:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800112a:	2300      	movs	r3, #0
 800112c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800112e:	2300      	movs	r3, #0
 8001130:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001132:	2300      	movs	r3, #0
 8001134:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001136:	2300      	movs	r3, #0
 8001138:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800113a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800113e:	2200      	movs	r2, #0
 8001140:	4619      	mov	r1, r3
 8001142:	4820      	ldr	r0, [pc, #128]	@ (80011c4 <MX_TIM1_Init+0x170>)
 8001144:	f004 f81a 	bl	800517c <HAL_TIM_PWM_ConfigChannel>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800114e:	f000 f929 	bl	80013a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001152:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001156:	2204      	movs	r2, #4
 8001158:	4619      	mov	r1, r3
 800115a:	481a      	ldr	r0, [pc, #104]	@ (80011c4 <MX_TIM1_Init+0x170>)
 800115c:	f004 f80e 	bl	800517c <HAL_TIM_PWM_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001166:	f000 f91d 	bl	80013a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800117e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001182:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001190:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001194:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800119a:	2300      	movs	r3, #0
 800119c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800119e:	2300      	movs	r3, #0
 80011a0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	4619      	mov	r1, r3
 80011a6:	4807      	ldr	r0, [pc, #28]	@ (80011c4 <MX_TIM1_Init+0x170>)
 80011a8:	f004 ff48 	bl	800603c <HAL_TIMEx_ConfigBreakDeadTime>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 80011b2:	f000 f8f7 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011b6:	4803      	ldr	r0, [pc, #12]	@ (80011c4 <MX_TIM1_Init+0x170>)
 80011b8:	f000 fa74 	bl	80016a4 <HAL_TIM_MspPostInit>

}
 80011bc:	bf00      	nop
 80011be:	3770      	adds	r7, #112	@ 0x70
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000248 	.word	0x20000248
 80011c8:	40012c00 	.word	0x40012c00

080011cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011d2:	4b1a      	ldr	r3, [pc, #104]	@ (800123c <MX_DMA_Init+0x70>)
 80011d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011d6:	4a19      	ldr	r2, [pc, #100]	@ (800123c <MX_DMA_Init+0x70>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	6493      	str	r3, [r2, #72]	@ 0x48
 80011de:	4b17      	ldr	r3, [pc, #92]	@ (800123c <MX_DMA_Init+0x70>)
 80011e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ea:	4b14      	ldr	r3, [pc, #80]	@ (800123c <MX_DMA_Init+0x70>)
 80011ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011ee:	4a13      	ldr	r2, [pc, #76]	@ (800123c <MX_DMA_Init+0x70>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80011f6:	4b11      	ldr	r3, [pc, #68]	@ (800123c <MX_DMA_Init+0x70>)
 80011f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	200b      	movs	r0, #11
 8001208:	f002 f8d9 	bl	80033be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800120c:	200b      	movs	r0, #11
 800120e:	f002 f8f0 	bl	80033f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	200c      	movs	r0, #12
 8001218:	f002 f8d1 	bl	80033be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800121c:	200c      	movs	r0, #12
 800121e:	f002 f8e8 	bl	80033f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	200d      	movs	r0, #13
 8001228:	f002 f8c9 	bl	80033be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800122c:	200d      	movs	r0, #13
 800122e:	f002 f8e0 	bl	80033f2 <HAL_NVIC_EnableIRQ>

}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40021000 	.word	0x40021000

08001240 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	@ 0x28
 8001244:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001256:	4b2f      	ldr	r3, [pc, #188]	@ (8001314 <MX_GPIO_Init+0xd4>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125a:	4a2e      	ldr	r2, [pc, #184]	@ (8001314 <MX_GPIO_Init+0xd4>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001262:	4b2c      	ldr	r3, [pc, #176]	@ (8001314 <MX_GPIO_Init+0xd4>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800126e:	4b29      	ldr	r3, [pc, #164]	@ (8001314 <MX_GPIO_Init+0xd4>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001272:	4a28      	ldr	r2, [pc, #160]	@ (8001314 <MX_GPIO_Init+0xd4>)
 8001274:	f043 0320 	orr.w	r3, r3, #32
 8001278:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127a:	4b26      	ldr	r3, [pc, #152]	@ (8001314 <MX_GPIO_Init+0xd4>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127e:	f003 0320 	and.w	r3, r3, #32
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	4b23      	ldr	r3, [pc, #140]	@ (8001314 <MX_GPIO_Init+0xd4>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128a:	4a22      	ldr	r2, [pc, #136]	@ (8001314 <MX_GPIO_Init+0xd4>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001292:	4b20      	ldr	r3, [pc, #128]	@ (8001314 <MX_GPIO_Init+0xd4>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129e:	4b1d      	ldr	r3, [pc, #116]	@ (8001314 <MX_GPIO_Init+0xd4>)
 80012a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001314 <MX_GPIO_Init+0xd4>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001314 <MX_GPIO_Init+0xd4>)
 80012ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2120      	movs	r1, #32
 80012ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012be:	f002 fca7 	bl	8003c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	480f      	ldr	r0, [pc, #60]	@ (8001318 <MX_GPIO_Init+0xd8>)
 80012da:	f002 fb17 	bl	800390c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012de:	2320      	movs	r3, #32
 80012e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012f8:	f002 fb08 	bl	800390c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2100      	movs	r1, #0
 8001300:	2028      	movs	r0, #40	@ 0x28
 8001302:	f002 f85c 	bl	80033be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001306:	2028      	movs	r0, #40	@ 0x28
 8001308:	f002 f873 	bl	80033f2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800130c:	bf00      	nop
 800130e:	3728      	adds	r7, #40	@ 0x28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40021000 	.word	0x40021000
 8001318:	48000800 	.word	0x48000800

0800131c <UARTDMAConfig>:

/* USER CODE BEGIN 4 */
void UARTDMAConfig()
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&hlpuart1, ADCBytes, sizeof(ADCBytes));
 8001320:	2250      	movs	r2, #80	@ 0x50
 8001322:	4903      	ldr	r1, [pc, #12]	@ (8001330 <UARTDMAConfig+0x14>)
 8001324:	4803      	ldr	r0, [pc, #12]	@ (8001334 <UARTDMAConfig+0x18>)
 8001326:	f005 f87b 	bl	8006420 <HAL_UART_Receive_DMA>
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200002e4 	.word	0x200002e4
 8001334:	200000f4 	.word	0x200000f4

08001338 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	if(huart == &hlpuart1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a08      	ldr	r2, [pc, #32]	@ (8001364 <HAL_UART_RxCpltCallback+0x2c>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d109      	bne.n	800135c <HAL_UART_RxCpltCallback+0x24>
	{
		//(for string only) Add string stop symbol 10 to end string
		//RxBuffer[10] = '\0';
		//return received char
//		sprintf((char*) TxBuffer, "Received: %s\r\n", RxBuffer);
		HAL_UART_Transmit_DMA(&hlpuart1, ADCBytes, strlen((char*) ADCBytes));
 8001348:	4807      	ldr	r0, [pc, #28]	@ (8001368 <HAL_UART_RxCpltCallback+0x30>)
 800134a:	f7fe ff65 	bl	8000218 <strlen>
 800134e:	4603      	mov	r3, r0
 8001350:	b29b      	uxth	r3, r3
 8001352:	461a      	mov	r2, r3
 8001354:	4904      	ldr	r1, [pc, #16]	@ (8001368 <HAL_UART_RxCpltCallback+0x30>)
 8001356:	4803      	ldr	r0, [pc, #12]	@ (8001364 <HAL_UART_RxCpltCallback+0x2c>)
 8001358:	f004 ffe2 	bl	8006320 <HAL_UART_Transmit_DMA>
	}
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	200000f4 	.word	0x200000f4
 8001368:	200002e4 	.word	0x200002e4

0800136c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	80fb      	strh	r3, [r7, #6]

    if(GPIO_Pin == GPIO_PIN_13){
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800137c:	d109      	bne.n	8001392 <HAL_GPIO_EXTI_Callback+0x26>
//        RxBuffer[10]=  '\0';
    	//TxBuffer[1] = ADC_RawRead[0];
        HAL_UART_Transmit_DMA(&hlpuart1, ADCBytes, 10);
 800137e:	220a      	movs	r2, #10
 8001380:	4906      	ldr	r1, [pc, #24]	@ (800139c <HAL_GPIO_EXTI_Callback+0x30>)
 8001382:	4807      	ldr	r0, [pc, #28]	@ (80013a0 <HAL_GPIO_EXTI_Callback+0x34>)
 8001384:	f004 ffcc 	bl	8006320 <HAL_UART_Transmit_DMA>
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001388:	2120      	movs	r1, #32
 800138a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800138e:	f002 fc57 	bl	8003c40 <HAL_GPIO_TogglePin>
    }
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200002e4 	.word	0x200002e4
 80013a0:	200000f4 	.word	0x200000f4

080013a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a8:	b672      	cpsid	i
}
 80013aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <Error_Handler+0x8>

080013b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	4b0f      	ldr	r3, [pc, #60]	@ (80013f4 <HAL_MspInit+0x44>)
 80013b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ba:	4a0e      	ldr	r2, [pc, #56]	@ (80013f4 <HAL_MspInit+0x44>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80013c2:	4b0c      	ldr	r3, [pc, #48]	@ (80013f4 <HAL_MspInit+0x44>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4b09      	ldr	r3, [pc, #36]	@ (80013f4 <HAL_MspInit+0x44>)
 80013d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d2:	4a08      	ldr	r2, [pc, #32]	@ (80013f4 <HAL_MspInit+0x44>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80013da:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <HAL_MspInit+0x44>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80013e6:	f002 fd01 	bl	8003dec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000

080013f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b09e      	sub	sp, #120	@ 0x78
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	2254      	movs	r2, #84	@ 0x54
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f006 f8d7 	bl	80075cc <memset>
  if(hadc->Instance==ADC1)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001426:	d15f      	bne.n	80014e8 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001428:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800142c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800142e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001432:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	4618      	mov	r0, r3
 800143a:	f003 fa15 	bl	8004868 <HAL_RCCEx_PeriphCLKConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001444:	f7ff ffae 	bl	80013a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001448:	4b29      	ldr	r3, [pc, #164]	@ (80014f0 <HAL_ADC_MspInit+0xf8>)
 800144a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800144c:	4a28      	ldr	r2, [pc, #160]	@ (80014f0 <HAL_ADC_MspInit+0xf8>)
 800144e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001452:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001454:	4b26      	ldr	r3, [pc, #152]	@ (80014f0 <HAL_ADC_MspInit+0xf8>)
 8001456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001458:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001460:	4b23      	ldr	r3, [pc, #140]	@ (80014f0 <HAL_ADC_MspInit+0xf8>)
 8001462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001464:	4a22      	ldr	r2, [pc, #136]	@ (80014f0 <HAL_ADC_MspInit+0xf8>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800146c:	4b20      	ldr	r3, [pc, #128]	@ (80014f0 <HAL_ADC_MspInit+0xf8>)
 800146e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001478:	2301      	movs	r3, #1
 800147a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800147c:	2303      	movs	r3, #3
 800147e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001484:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001488:	4619      	mov	r1, r3
 800148a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800148e:	f002 fa3d 	bl	800390c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001492:	4b18      	ldr	r3, [pc, #96]	@ (80014f4 <HAL_ADC_MspInit+0xfc>)
 8001494:	4a18      	ldr	r2, [pc, #96]	@ (80014f8 <HAL_ADC_MspInit+0x100>)
 8001496:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001498:	4b16      	ldr	r3, [pc, #88]	@ (80014f4 <HAL_ADC_MspInit+0xfc>)
 800149a:	2205      	movs	r2, #5
 800149c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800149e:	4b15      	ldr	r3, [pc, #84]	@ (80014f4 <HAL_ADC_MspInit+0xfc>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a4:	4b13      	ldr	r3, [pc, #76]	@ (80014f4 <HAL_ADC_MspInit+0xfc>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014aa:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <HAL_ADC_MspInit+0xfc>)
 80014ac:	2280      	movs	r2, #128	@ 0x80
 80014ae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014b0:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <HAL_ADC_MspInit+0xfc>)
 80014b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014b6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014b8:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <HAL_ADC_MspInit+0xfc>)
 80014ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014be:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <HAL_ADC_MspInit+0xfc>)
 80014c2:	2220      	movs	r2, #32
 80014c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <HAL_ADC_MspInit+0xfc>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014cc:	4809      	ldr	r0, [pc, #36]	@ (80014f4 <HAL_ADC_MspInit+0xfc>)
 80014ce:	f001 ffab 	bl	8003428 <HAL_DMA_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80014d8:	f7ff ff64 	bl	80013a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a05      	ldr	r2, [pc, #20]	@ (80014f4 <HAL_ADC_MspInit+0xfc>)
 80014e0:	655a      	str	r2, [r3, #84]	@ 0x54
 80014e2:	4a04      	ldr	r2, [pc, #16]	@ (80014f4 <HAL_ADC_MspInit+0xfc>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014e8:	bf00      	nop
 80014ea:	3778      	adds	r7, #120	@ 0x78
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40021000 	.word	0x40021000
 80014f4:	20000094 	.word	0x20000094
 80014f8:	40020008 	.word	0x40020008

080014fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b09e      	sub	sp, #120	@ 0x78
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	2254      	movs	r2, #84	@ 0x54
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f006 f855 	bl	80075cc <memset>
  if(huart->Instance==LPUART1)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a49      	ldr	r2, [pc, #292]	@ (800164c <HAL_UART_MspInit+0x150>)
 8001528:	4293      	cmp	r3, r2
 800152a:	f040 808a 	bne.w	8001642 <HAL_UART_MspInit+0x146>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800152e:	2320      	movs	r3, #32
 8001530:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001532:	2300      	movs	r3, #0
 8001534:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001536:	f107 0310 	add.w	r3, r7, #16
 800153a:	4618      	mov	r0, r3
 800153c:	f003 f994 	bl	8004868 <HAL_RCCEx_PeriphCLKConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001546:	f7ff ff2d 	bl	80013a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800154a:	4b41      	ldr	r3, [pc, #260]	@ (8001650 <HAL_UART_MspInit+0x154>)
 800154c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800154e:	4a40      	ldr	r2, [pc, #256]	@ (8001650 <HAL_UART_MspInit+0x154>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001556:	4b3e      	ldr	r3, [pc, #248]	@ (8001650 <HAL_UART_MspInit+0x154>)
 8001558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001562:	4b3b      	ldr	r3, [pc, #236]	@ (8001650 <HAL_UART_MspInit+0x154>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001566:	4a3a      	ldr	r2, [pc, #232]	@ (8001650 <HAL_UART_MspInit+0x154>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156e:	4b38      	ldr	r3, [pc, #224]	@ (8001650 <HAL_UART_MspInit+0x154>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800157a:	230c      	movs	r3, #12
 800157c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800158a:	230c      	movs	r3, #12
 800158c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001592:	4619      	mov	r1, r3
 8001594:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001598:	f002 f9b8 	bl	800390c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 800159c:	4b2d      	ldr	r3, [pc, #180]	@ (8001654 <HAL_UART_MspInit+0x158>)
 800159e:	4a2e      	ldr	r2, [pc, #184]	@ (8001658 <HAL_UART_MspInit+0x15c>)
 80015a0:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80015a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001654 <HAL_UART_MspInit+0x158>)
 80015a4:	2222      	movs	r2, #34	@ 0x22
 80015a6:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001654 <HAL_UART_MspInit+0x158>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015ae:	4b29      	ldr	r3, [pc, #164]	@ (8001654 <HAL_UART_MspInit+0x158>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015b4:	4b27      	ldr	r3, [pc, #156]	@ (8001654 <HAL_UART_MspInit+0x158>)
 80015b6:	2280      	movs	r2, #128	@ 0x80
 80015b8:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ba:	4b26      	ldr	r3, [pc, #152]	@ (8001654 <HAL_UART_MspInit+0x158>)
 80015bc:	2200      	movs	r2, #0
 80015be:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015c0:	4b24      	ldr	r3, [pc, #144]	@ (8001654 <HAL_UART_MspInit+0x158>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80015c6:	4b23      	ldr	r3, [pc, #140]	@ (8001654 <HAL_UART_MspInit+0x158>)
 80015c8:	2220      	movs	r2, #32
 80015ca:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015cc:	4b21      	ldr	r3, [pc, #132]	@ (8001654 <HAL_UART_MspInit+0x158>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80015d2:	4820      	ldr	r0, [pc, #128]	@ (8001654 <HAL_UART_MspInit+0x158>)
 80015d4:	f001 ff28 	bl	8003428 <HAL_DMA_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80015de:	f7ff fee1 	bl	80013a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001654 <HAL_UART_MspInit+0x158>)
 80015e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80015ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001654 <HAL_UART_MspInit+0x158>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel3;
 80015f0:	4b1a      	ldr	r3, [pc, #104]	@ (800165c <HAL_UART_MspInit+0x160>)
 80015f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001660 <HAL_UART_MspInit+0x164>)
 80015f4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80015f6:	4b19      	ldr	r3, [pc, #100]	@ (800165c <HAL_UART_MspInit+0x160>)
 80015f8:	2223      	movs	r2, #35	@ 0x23
 80015fa:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015fc:	4b17      	ldr	r3, [pc, #92]	@ (800165c <HAL_UART_MspInit+0x160>)
 80015fe:	2210      	movs	r2, #16
 8001600:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001602:	4b16      	ldr	r3, [pc, #88]	@ (800165c <HAL_UART_MspInit+0x160>)
 8001604:	2200      	movs	r2, #0
 8001606:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001608:	4b14      	ldr	r3, [pc, #80]	@ (800165c <HAL_UART_MspInit+0x160>)
 800160a:	2280      	movs	r2, #128	@ 0x80
 800160c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800160e:	4b13      	ldr	r3, [pc, #76]	@ (800165c <HAL_UART_MspInit+0x160>)
 8001610:	2200      	movs	r2, #0
 8001612:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001614:	4b11      	ldr	r3, [pc, #68]	@ (800165c <HAL_UART_MspInit+0x160>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800161a:	4b10      	ldr	r3, [pc, #64]	@ (800165c <HAL_UART_MspInit+0x160>)
 800161c:	2200      	movs	r2, #0
 800161e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001620:	4b0e      	ldr	r3, [pc, #56]	@ (800165c <HAL_UART_MspInit+0x160>)
 8001622:	2200      	movs	r2, #0
 8001624:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001626:	480d      	ldr	r0, [pc, #52]	@ (800165c <HAL_UART_MspInit+0x160>)
 8001628:	f001 fefe 	bl	8003428 <HAL_DMA_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8001632:	f7ff feb7 	bl	80013a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a08      	ldr	r2, [pc, #32]	@ (800165c <HAL_UART_MspInit+0x160>)
 800163a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800163c:	4a07      	ldr	r2, [pc, #28]	@ (800165c <HAL_UART_MspInit+0x160>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001642:	bf00      	nop
 8001644:	3778      	adds	r7, #120	@ 0x78
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40008000 	.word	0x40008000
 8001650:	40021000 	.word	0x40021000
 8001654:	20000188 	.word	0x20000188
 8001658:	4002001c 	.word	0x4002001c
 800165c:	200001e8 	.word	0x200001e8
 8001660:	40020030 	.word	0x40020030

08001664 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0a      	ldr	r2, [pc, #40]	@ (800169c <HAL_TIM_Base_MspInit+0x38>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d10b      	bne.n	800168e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001676:	4b0a      	ldr	r3, [pc, #40]	@ (80016a0 <HAL_TIM_Base_MspInit+0x3c>)
 8001678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800167a:	4a09      	ldr	r2, [pc, #36]	@ (80016a0 <HAL_TIM_Base_MspInit+0x3c>)
 800167c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001680:	6613      	str	r3, [r2, #96]	@ 0x60
 8001682:	4b07      	ldr	r3, [pc, #28]	@ (80016a0 <HAL_TIM_Base_MspInit+0x3c>)
 8001684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001686:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	40012c00 	.word	0x40012c00
 80016a0:	40021000 	.word	0x40021000

080016a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 030c 	add.w	r3, r7, #12
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a11      	ldr	r2, [pc, #68]	@ (8001708 <HAL_TIM_MspPostInit+0x64>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d11b      	bne.n	80016fe <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c6:	4b11      	ldr	r3, [pc, #68]	@ (800170c <HAL_TIM_MspPostInit+0x68>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ca:	4a10      	ldr	r2, [pc, #64]	@ (800170c <HAL_TIM_MspPostInit+0x68>)
 80016cc:	f043 0304 	orr.w	r3, r3, #4
 80016d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016d2:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <HAL_TIM_MspPostInit+0x68>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d6:	f003 0304 	and.w	r3, r3, #4
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016de:	2303      	movs	r3, #3
 80016e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80016ee:	2302      	movs	r3, #2
 80016f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f2:	f107 030c 	add.w	r3, r7, #12
 80016f6:	4619      	mov	r1, r3
 80016f8:	4805      	ldr	r0, [pc, #20]	@ (8001710 <HAL_TIM_MspPostInit+0x6c>)
 80016fa:	f002 f907 	bl	800390c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016fe:	bf00      	nop
 8001700:	3720      	adds	r7, #32
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40012c00 	.word	0x40012c00
 800170c:	40021000 	.word	0x40021000
 8001710:	48000800 	.word	0x48000800

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <NMI_Handler+0x4>

0800171c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <HardFault_Handler+0x4>

08001724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <MemManage_Handler+0x4>

0800172c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <BusFault_Handler+0x4>

08001734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <UsageFault_Handler+0x4>

0800173c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800176a:	f000 f8b7 	bl	80018dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001778:	4802      	ldr	r0, [pc, #8]	@ (8001784 <DMA1_Channel1_IRQHandler+0x10>)
 800177a:	f001 ff78 	bl	800366e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000094 	.word	0x20000094

08001788 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800178c:	4802      	ldr	r0, [pc, #8]	@ (8001798 <DMA1_Channel2_IRQHandler+0x10>)
 800178e:	f001 ff6e 	bl	800366e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000188 	.word	0x20000188

0800179c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80017a0:	4802      	ldr	r0, [pc, #8]	@ (80017ac <DMA1_Channel3_IRQHandler+0x10>)
 80017a2:	f001 ff64 	bl	800366e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200001e8 	.word	0x200001e8

080017b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80017b4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80017b8:	f002 fa5c 	bl	8003c74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}

080017c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <SystemInit+0x20>)
 80017c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ca:	4a05      	ldr	r2, [pc, #20]	@ (80017e0 <SystemInit+0x20>)
 80017cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017e4:	480d      	ldr	r0, [pc, #52]	@ (800181c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017e6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017e8:	f7ff ffea 	bl	80017c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017ec:	480c      	ldr	r0, [pc, #48]	@ (8001820 <LoopForever+0x6>)
  ldr r1, =_edata
 80017ee:	490d      	ldr	r1, [pc, #52]	@ (8001824 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001828 <LoopForever+0xe>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80017f4:	e002      	b.n	80017fc <LoopCopyDataInit>

080017f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fa:	3304      	adds	r3, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001800:	d3f9      	bcc.n	80017f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001802:	4a0a      	ldr	r2, [pc, #40]	@ (800182c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001804:	4c0a      	ldr	r4, [pc, #40]	@ (8001830 <LoopForever+0x16>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001808:	e001      	b.n	800180e <LoopFillZerobss>

0800180a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800180c:	3204      	adds	r2, #4

0800180e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001810:	d3fb      	bcc.n	800180a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001812:	f005 fee3 	bl	80075dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001816:	f7ff fa77 	bl	8000d08 <main>

0800181a <LoopForever>:

LoopForever:
    b LoopForever
 800181a:	e7fe      	b.n	800181a <LoopForever>
  ldr   r0, =_estack
 800181c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001824:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001828:	0800768c 	.word	0x0800768c
  ldr r2, =_sbss
 800182c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001830:	20000348 	.word	0x20000348

08001834 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001834:	e7fe      	b.n	8001834 <ADC1_2_IRQHandler>

08001836 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001840:	2003      	movs	r0, #3
 8001842:	f001 fdb1 	bl	80033a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001846:	2000      	movs	r0, #0
 8001848:	f000 f80e 	bl	8001868 <HAL_InitTick>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d002      	beq.n	8001858 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	71fb      	strb	r3, [r7, #7]
 8001856:	e001      	b.n	800185c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001858:	f7ff fdaa 	bl	80013b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800185c:	79fb      	ldrb	r3, [r7, #7]

}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001870:	2300      	movs	r3, #0
 8001872:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001874:	4b16      	ldr	r3, [pc, #88]	@ (80018d0 <HAL_InitTick+0x68>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d022      	beq.n	80018c2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800187c:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <HAL_InitTick+0x6c>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b13      	ldr	r3, [pc, #76]	@ (80018d0 <HAL_InitTick+0x68>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001888:	fbb1 f3f3 	udiv	r3, r1, r3
 800188c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001890:	4618      	mov	r0, r3
 8001892:	f001 fdbc 	bl	800340e <HAL_SYSTICK_Config>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10f      	bne.n	80018bc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b0f      	cmp	r3, #15
 80018a0:	d809      	bhi.n	80018b6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a2:	2200      	movs	r2, #0
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	f04f 30ff 	mov.w	r0, #4294967295
 80018aa:	f001 fd88 	bl	80033be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018ae:	4a0a      	ldr	r2, [pc, #40]	@ (80018d8 <HAL_InitTick+0x70>)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	e007      	b.n	80018c6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	73fb      	strb	r3, [r7, #15]
 80018ba:	e004      	b.n	80018c6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	73fb      	strb	r3, [r7, #15]
 80018c0:	e001      	b.n	80018c6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000008 	.word	0x20000008
 80018d4:	20000000 	.word	0x20000000
 80018d8:	20000004 	.word	0x20000004

080018dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e0:	4b05      	ldr	r3, [pc, #20]	@ (80018f8 <HAL_IncTick+0x1c>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b05      	ldr	r3, [pc, #20]	@ (80018fc <HAL_IncTick+0x20>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4413      	add	r3, r2
 80018ea:	4a03      	ldr	r2, [pc, #12]	@ (80018f8 <HAL_IncTick+0x1c>)
 80018ec:	6013      	str	r3, [r2, #0]
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	20000344 	.word	0x20000344
 80018fc:	20000008 	.word	0x20000008

08001900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return uwTick;
 8001904:	4b03      	ldr	r3, [pc, #12]	@ (8001914 <HAL_GetTick+0x14>)
 8001906:	681b      	ldr	r3, [r3, #0]
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	20000344 	.word	0x20000344

08001918 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	431a      	orrs	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	609a      	str	r2, [r3, #8]
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	609a      	str	r2, [r3, #8]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001974:	4618      	mov	r0, r3
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001980:	b480      	push	{r7}
 8001982:	b087      	sub	sp, #28
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
 800198c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	3360      	adds	r3, #96	@ 0x60
 8001992:	461a      	mov	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	4b08      	ldr	r3, [pc, #32]	@ (80019c4 <LL_ADC_SetOffset+0x44>)
 80019a2:	4013      	ands	r3, r2
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	4313      	orrs	r3, r2
 80019b0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019b8:	bf00      	nop
 80019ba:	371c      	adds	r7, #28
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	03fff000 	.word	0x03fff000

080019c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3360      	adds	r3, #96	@ 0x60
 80019d6:	461a      	mov	r2, r3
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b087      	sub	sp, #28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	3360      	adds	r3, #96	@ 0x60
 8001a04:	461a      	mov	r2, r3
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a1e:	bf00      	nop
 8001a20:	371c      	adds	r7, #28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b087      	sub	sp, #28
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	60f8      	str	r0, [r7, #12]
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	3360      	adds	r3, #96	@ 0x60
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001a54:	bf00      	nop
 8001a56:	371c      	adds	r7, #28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b087      	sub	sp, #28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	3360      	adds	r3, #96	@ 0x60
 8001a70:	461a      	mov	r2, r3
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	431a      	orrs	r2, r3
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001a8a:	bf00      	nop
 8001a8c:	371c      	adds	r7, #28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	615a      	str	r2, [r3, #20]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b087      	sub	sp, #28
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	3330      	adds	r3, #48	@ 0x30
 8001af2:	461a      	mov	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	0a1b      	lsrs	r3, r3, #8
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	f003 030c 	and.w	r3, r3, #12
 8001afe:	4413      	add	r3, r2
 8001b00:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	f003 031f 	and.w	r3, r3, #31
 8001b0c:	211f      	movs	r1, #31
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	401a      	ands	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	0e9b      	lsrs	r3, r3, #26
 8001b1a:	f003 011f 	and.w	r1, r3, #31
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	f003 031f 	and.w	r3, r3, #31
 8001b24:	fa01 f303 	lsl.w	r3, r1, r3
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b2e:	bf00      	nop
 8001b30:	371c      	adds	r7, #28
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	b087      	sub	sp, #28
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	3314      	adds	r3, #20
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	0e5b      	lsrs	r3, r3, #25
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	4413      	add	r3, r2
 8001b58:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	0d1b      	lsrs	r3, r3, #20
 8001b62:	f003 031f 	and.w	r3, r3, #31
 8001b66:	2107      	movs	r1, #7
 8001b68:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	401a      	ands	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	0d1b      	lsrs	r3, r3, #20
 8001b74:	f003 031f 	and.w	r3, r3, #31
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b84:	bf00      	nop
 8001b86:	371c      	adds	r7, #28
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	401a      	ands	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f003 0318 	and.w	r3, r3, #24
 8001bb2:	4908      	ldr	r1, [pc, #32]	@ (8001bd4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001bb4:	40d9      	lsrs	r1, r3
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	400b      	ands	r3, r1
 8001bba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001bc6:	bf00      	nop
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	0007ffff 	.word	0x0007ffff

08001bd8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 031f 	and.w	r3, r3, #31
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6093      	str	r3, [r2, #8]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c2c:	d101      	bne.n	8001c32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001c50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c54:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c7c:	d101      	bne.n	8001c82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001ca0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ca4:	f043 0201 	orr.w	r2, r3, #1
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001cc8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ccc:	f043 0202 	orr.w	r2, r3, #2
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <LL_ADC_IsEnabled+0x18>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <LL_ADC_IsEnabled+0x1a>
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d101      	bne.n	8001d1e <LL_ADC_IsDisableOngoing+0x18>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <LL_ADC_IsDisableOngoing+0x1a>
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d40:	f043 0204 	orr.w	r2, r3, #4
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d101      	bne.n	8001d6c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e000      	b.n	8001d6e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d101      	bne.n	8001d92 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001da0:	b590      	push	{r4, r7, lr}
 8001da2:	b089      	sub	sp, #36	@ 0x24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001da8:	2300      	movs	r3, #0
 8001daa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e1a9      	b.n	800210e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d109      	bne.n	8001ddc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff fb15 	bl	80013f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ff19 	bl	8001c18 <LL_ADC_IsDeepPowerDownEnabled>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d004      	beq.n	8001df6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff feff 	bl	8001bf4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff ff34 	bl	8001c68 <LL_ADC_IsInternalRegulatorEnabled>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d115      	bne.n	8001e32 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff ff18 	bl	8001c40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e10:	4b9c      	ldr	r3, [pc, #624]	@ (8002084 <HAL_ADC_Init+0x2e4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	099b      	lsrs	r3, r3, #6
 8001e16:	4a9c      	ldr	r2, [pc, #624]	@ (8002088 <HAL_ADC_Init+0x2e8>)
 8001e18:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1c:	099b      	lsrs	r3, r3, #6
 8001e1e:	3301      	adds	r3, #1
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e24:	e002      	b.n	8001e2c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f9      	bne.n	8001e26 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff ff16 	bl	8001c68 <LL_ADC_IsInternalRegulatorEnabled>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10d      	bne.n	8001e5e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e46:	f043 0210 	orr.w	r2, r3, #16
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e52:	f043 0201 	orr.w	r2, r3, #1
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff ff76 	bl	8001d54 <LL_ADC_REG_IsConversionOngoing>
 8001e68:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e6e:	f003 0310 	and.w	r3, r3, #16
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f040 8142 	bne.w	80020fc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f040 813e 	bne.w	80020fc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e84:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e88:	f043 0202 	orr.w	r2, r3, #2
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff23 	bl	8001ce0 <LL_ADC_IsEnabled>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d141      	bne.n	8001f24 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ea8:	d004      	beq.n	8001eb4 <HAL_ADC_Init+0x114>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a77      	ldr	r2, [pc, #476]	@ (800208c <HAL_ADC_Init+0x2ec>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d10f      	bne.n	8001ed4 <HAL_ADC_Init+0x134>
 8001eb4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001eb8:	f7ff ff12 	bl	8001ce0 <LL_ADC_IsEnabled>
 8001ebc:	4604      	mov	r4, r0
 8001ebe:	4873      	ldr	r0, [pc, #460]	@ (800208c <HAL_ADC_Init+0x2ec>)
 8001ec0:	f7ff ff0e 	bl	8001ce0 <LL_ADC_IsEnabled>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	4323      	orrs	r3, r4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	bf0c      	ite	eq
 8001ecc:	2301      	moveq	r3, #1
 8001ece:	2300      	movne	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	e012      	b.n	8001efa <HAL_ADC_Init+0x15a>
 8001ed4:	486e      	ldr	r0, [pc, #440]	@ (8002090 <HAL_ADC_Init+0x2f0>)
 8001ed6:	f7ff ff03 	bl	8001ce0 <LL_ADC_IsEnabled>
 8001eda:	4604      	mov	r4, r0
 8001edc:	486d      	ldr	r0, [pc, #436]	@ (8002094 <HAL_ADC_Init+0x2f4>)
 8001ede:	f7ff feff 	bl	8001ce0 <LL_ADC_IsEnabled>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	431c      	orrs	r4, r3
 8001ee6:	486c      	ldr	r0, [pc, #432]	@ (8002098 <HAL_ADC_Init+0x2f8>)
 8001ee8:	f7ff fefa 	bl	8001ce0 <LL_ADC_IsEnabled>
 8001eec:	4603      	mov	r3, r0
 8001eee:	4323      	orrs	r3, r4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	bf0c      	ite	eq
 8001ef4:	2301      	moveq	r3, #1
 8001ef6:	2300      	movne	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d012      	beq.n	8001f24 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f06:	d004      	beq.n	8001f12 <HAL_ADC_Init+0x172>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a5f      	ldr	r2, [pc, #380]	@ (800208c <HAL_ADC_Init+0x2ec>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d101      	bne.n	8001f16 <HAL_ADC_Init+0x176>
 8001f12:	4a62      	ldr	r2, [pc, #392]	@ (800209c <HAL_ADC_Init+0x2fc>)
 8001f14:	e000      	b.n	8001f18 <HAL_ADC_Init+0x178>
 8001f16:	4a62      	ldr	r2, [pc, #392]	@ (80020a0 <HAL_ADC_Init+0x300>)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4610      	mov	r0, r2
 8001f20:	f7ff fcfa 	bl	8001918 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	7f5b      	ldrb	r3, [r3, #29]
 8001f28:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f2e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f34:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f3a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f42:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d106      	bne.n	8001f60 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f56:	3b01      	subs	r3, #1
 8001f58:	045b      	lsls	r3, r3, #17
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d009      	beq.n	8001f7c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f74:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	4b48      	ldr	r3, [pc, #288]	@ (80020a4 <HAL_ADC_Init+0x304>)
 8001f84:	4013      	ands	r3, r2
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	69b9      	ldr	r1, [r7, #24]
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fee5 	bl	8001d7a <LL_ADC_INJ_IsConversionOngoing>
 8001fb0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d17f      	bne.n	80020b8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d17c      	bne.n	80020b8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fc2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001fca:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001fda:	f023 0302 	bic.w	r3, r3, #2
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	69b9      	ldr	r1, [r7, #24]
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d017      	beq.n	8002020 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	691a      	ldr	r2, [r3, #16]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001ffe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002008:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800200c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6911      	ldr	r1, [r2, #16]
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6812      	ldr	r2, [r2, #0]
 8002018:	430b      	orrs	r3, r1
 800201a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800201e:	e013      	b.n	8002048 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	691a      	ldr	r2, [r3, #16]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800202e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6812      	ldr	r2, [r2, #0]
 800203c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002040:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002044:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800204e:	2b01      	cmp	r3, #1
 8002050:	d12a      	bne.n	80020a8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800205c:	f023 0304 	bic.w	r3, r3, #4
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002068:	4311      	orrs	r1, r2
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800206e:	4311      	orrs	r1, r2
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002074:	430a      	orrs	r2, r1
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f042 0201 	orr.w	r2, r2, #1
 8002080:	611a      	str	r2, [r3, #16]
 8002082:	e019      	b.n	80020b8 <HAL_ADC_Init+0x318>
 8002084:	20000000 	.word	0x20000000
 8002088:	053e2d63 	.word	0x053e2d63
 800208c:	50000100 	.word	0x50000100
 8002090:	50000400 	.word	0x50000400
 8002094:	50000500 	.word	0x50000500
 8002098:	50000600 	.word	0x50000600
 800209c:	50000300 	.word	0x50000300
 80020a0:	50000700 	.word	0x50000700
 80020a4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691a      	ldr	r2, [r3, #16]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0201 	bic.w	r2, r2, #1
 80020b6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d10c      	bne.n	80020da <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c6:	f023 010f 	bic.w	r1, r3, #15
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	1e5a      	subs	r2, r3, #1
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80020d8:	e007      	b.n	80020ea <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 020f 	bic.w	r2, r2, #15
 80020e8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ee:	f023 0303 	bic.w	r3, r3, #3
 80020f2:	f043 0201 	orr.w	r2, r3, #1
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80020fa:	e007      	b.n	800210c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002100:	f043 0210 	orr.w	r2, r3, #16
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800210c:	7ffb      	ldrb	r3, [r7, #31]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3724      	adds	r7, #36	@ 0x24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd90      	pop	{r4, r7, pc}
 8002116:	bf00      	nop

08002118 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800212c:	d004      	beq.n	8002138 <HAL_ADC_Start_DMA+0x20>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a5a      	ldr	r2, [pc, #360]	@ (800229c <HAL_ADC_Start_DMA+0x184>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d101      	bne.n	800213c <HAL_ADC_Start_DMA+0x24>
 8002138:	4b59      	ldr	r3, [pc, #356]	@ (80022a0 <HAL_ADC_Start_DMA+0x188>)
 800213a:	e000      	b.n	800213e <HAL_ADC_Start_DMA+0x26>
 800213c:	4b59      	ldr	r3, [pc, #356]	@ (80022a4 <HAL_ADC_Start_DMA+0x18c>)
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fd4a 	bl	8001bd8 <LL_ADC_GetMultimode>
 8002144:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fe02 	bl	8001d54 <LL_ADC_REG_IsConversionOngoing>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	f040 809b 	bne.w	800228e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800215e:	2b01      	cmp	r3, #1
 8002160:	d101      	bne.n	8002166 <HAL_ADC_Start_DMA+0x4e>
 8002162:	2302      	movs	r3, #2
 8002164:	e096      	b.n	8002294 <HAL_ADC_Start_DMA+0x17c>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a4d      	ldr	r2, [pc, #308]	@ (80022a8 <HAL_ADC_Start_DMA+0x190>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d008      	beq.n	800218a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d005      	beq.n	800218a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	2b05      	cmp	r3, #5
 8002182:	d002      	beq.n	800218a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	2b09      	cmp	r3, #9
 8002188:	d17a      	bne.n	8002280 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f000 fcf6 	bl	8002b7c <ADC_Enable>
 8002190:	4603      	mov	r3, r0
 8002192:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002194:	7dfb      	ldrb	r3, [r7, #23]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d16d      	bne.n	8002276 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80021a2:	f023 0301 	bic.w	r3, r3, #1
 80021a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a3a      	ldr	r2, [pc, #232]	@ (800229c <HAL_ADC_Start_DMA+0x184>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d009      	beq.n	80021cc <HAL_ADC_Start_DMA+0xb4>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a3b      	ldr	r2, [pc, #236]	@ (80022ac <HAL_ADC_Start_DMA+0x194>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d002      	beq.n	80021c8 <HAL_ADC_Start_DMA+0xb0>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	e003      	b.n	80021d0 <HAL_ADC_Start_DMA+0xb8>
 80021c8:	4b39      	ldr	r3, [pc, #228]	@ (80022b0 <HAL_ADC_Start_DMA+0x198>)
 80021ca:	e001      	b.n	80021d0 <HAL_ADC_Start_DMA+0xb8>
 80021cc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	6812      	ldr	r2, [r2, #0]
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d002      	beq.n	80021de <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d105      	bne.n	80021ea <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d006      	beq.n	8002204 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021fa:	f023 0206 	bic.w	r2, r3, #6
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	661a      	str	r2, [r3, #96]	@ 0x60
 8002202:	e002      	b.n	800220a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800220e:	4a29      	ldr	r2, [pc, #164]	@ (80022b4 <HAL_ADC_Start_DMA+0x19c>)
 8002210:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002216:	4a28      	ldr	r2, [pc, #160]	@ (80022b8 <HAL_ADC_Start_DMA+0x1a0>)
 8002218:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221e:	4a27      	ldr	r2, [pc, #156]	@ (80022bc <HAL_ADC_Start_DMA+0x1a4>)
 8002220:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	221c      	movs	r2, #28
 8002228:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f042 0210 	orr.w	r2, r2, #16
 8002240:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f042 0201 	orr.w	r2, r2, #1
 8002250:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	3340      	adds	r3, #64	@ 0x40
 800225c:	4619      	mov	r1, r3
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f001 f989 	bl	8003578 <HAL_DMA_Start_IT>
 8002266:	4603      	mov	r3, r0
 8002268:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fd5c 	bl	8001d2c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002274:	e00d      	b.n	8002292 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800227e:	e008      	b.n	8002292 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800228c:	e001      	b.n	8002292 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800228e:	2302      	movs	r3, #2
 8002290:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002292:	7dfb      	ldrb	r3, [r7, #23]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	50000100 	.word	0x50000100
 80022a0:	50000300 	.word	0x50000300
 80022a4:	50000700 	.word	0x50000700
 80022a8:	50000600 	.word	0x50000600
 80022ac:	50000500 	.word	0x50000500
 80022b0:	50000400 	.word	0x50000400
 80022b4:	08002d67 	.word	0x08002d67
 80022b8:	08002e3f 	.word	0x08002e3f
 80022bc:	08002e5b 	.word	0x08002e5b

080022c0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b0b6      	sub	sp, #216	@ 0xd8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800230c:	2300      	movs	r3, #0
 800230e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002316:	2b01      	cmp	r3, #1
 8002318:	d102      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x24>
 800231a:	2302      	movs	r3, #2
 800231c:	f000 bc13 	b.w	8002b46 <HAL_ADC_ConfigChannel+0x84a>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff fd11 	bl	8001d54 <LL_ADC_REG_IsConversionOngoing>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	f040 83f3 	bne.w	8002b20 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	6859      	ldr	r1, [r3, #4]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	f7ff fbcb 	bl	8001ae2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fcff 	bl	8001d54 <LL_ADC_REG_IsConversionOngoing>
 8002356:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fd0b 	bl	8001d7a <LL_ADC_INJ_IsConversionOngoing>
 8002364:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002368:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800236c:	2b00      	cmp	r3, #0
 800236e:	f040 81d9 	bne.w	8002724 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002372:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002376:	2b00      	cmp	r3, #0
 8002378:	f040 81d4 	bne.w	8002724 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002384:	d10f      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6818      	ldr	r0, [r3, #0]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2200      	movs	r2, #0
 8002390:	4619      	mov	r1, r3
 8002392:	f7ff fbd2 	bl	8001b3a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fb79 	bl	8001a96 <LL_ADC_SetSamplingTimeCommonConfig>
 80023a4:	e00e      	b.n	80023c4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6818      	ldr	r0, [r3, #0]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	6819      	ldr	r1, [r3, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	461a      	mov	r2, r3
 80023b4:	f7ff fbc1 	bl	8001b3a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2100      	movs	r1, #0
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fb69 	bl	8001a96 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	695a      	ldr	r2, [r3, #20]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	08db      	lsrs	r3, r3, #3
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d022      	beq.n	800242c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	6919      	ldr	r1, [r3, #16]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80023f6:	f7ff fac3 	bl	8001980 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	6919      	ldr	r1, [r3, #16]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	461a      	mov	r2, r3
 8002408:	f7ff fb0f 	bl	8001a2a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6818      	ldr	r0, [r3, #0]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002418:	2b01      	cmp	r3, #1
 800241a:	d102      	bne.n	8002422 <HAL_ADC_ConfigChannel+0x126>
 800241c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002420:	e000      	b.n	8002424 <HAL_ADC_ConfigChannel+0x128>
 8002422:	2300      	movs	r3, #0
 8002424:	461a      	mov	r2, r3
 8002426:	f7ff fb1b 	bl	8001a60 <LL_ADC_SetOffsetSaturation>
 800242a:	e17b      	b.n	8002724 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2100      	movs	r1, #0
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff fac8 	bl	80019c8 <LL_ADC_GetOffsetChannel>
 8002438:	4603      	mov	r3, r0
 800243a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10a      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x15c>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2100      	movs	r1, #0
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fabd 	bl	80019c8 <LL_ADC_GetOffsetChannel>
 800244e:	4603      	mov	r3, r0
 8002450:	0e9b      	lsrs	r3, r3, #26
 8002452:	f003 021f 	and.w	r2, r3, #31
 8002456:	e01e      	b.n	8002496 <HAL_ADC_ConfigChannel+0x19a>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2100      	movs	r1, #0
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fab2 	bl	80019c8 <LL_ADC_GetOffsetChannel>
 8002464:	4603      	mov	r3, r0
 8002466:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800246e:	fa93 f3a3 	rbit	r3, r3
 8002472:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002476:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800247a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800247e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002486:	2320      	movs	r3, #32
 8002488:	e004      	b.n	8002494 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800248a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800248e:	fab3 f383 	clz	r3, r3
 8002492:	b2db      	uxtb	r3, r3
 8002494:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d105      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x1b2>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	0e9b      	lsrs	r3, r3, #26
 80024a8:	f003 031f 	and.w	r3, r3, #31
 80024ac:	e018      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x1e4>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024ba:	fa93 f3a3 	rbit	r3, r3
 80024be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80024c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80024ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80024d2:	2320      	movs	r3, #32
 80024d4:	e004      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80024d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024da:	fab3 f383 	clz	r3, r3
 80024de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d106      	bne.n	80024f2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2200      	movs	r2, #0
 80024ea:	2100      	movs	r1, #0
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fa81 	bl	80019f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2101      	movs	r1, #1
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff fa65 	bl	80019c8 <LL_ADC_GetOffsetChannel>
 80024fe:	4603      	mov	r3, r0
 8002500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10a      	bne.n	800251e <HAL_ADC_ConfigChannel+0x222>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2101      	movs	r1, #1
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fa5a 	bl	80019c8 <LL_ADC_GetOffsetChannel>
 8002514:	4603      	mov	r3, r0
 8002516:	0e9b      	lsrs	r3, r3, #26
 8002518:	f003 021f 	and.w	r2, r3, #31
 800251c:	e01e      	b.n	800255c <HAL_ADC_ConfigChannel+0x260>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2101      	movs	r1, #1
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fa4f 	bl	80019c8 <LL_ADC_GetOffsetChannel>
 800252a:	4603      	mov	r3, r0
 800252c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002534:	fa93 f3a3 	rbit	r3, r3
 8002538:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800253c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002540:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002544:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800254c:	2320      	movs	r3, #32
 800254e:	e004      	b.n	800255a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002550:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002554:	fab3 f383 	clz	r3, r3
 8002558:	b2db      	uxtb	r3, r3
 800255a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002564:	2b00      	cmp	r3, #0
 8002566:	d105      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x278>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	0e9b      	lsrs	r3, r3, #26
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	e018      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x2aa>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002580:	fa93 f3a3 	rbit	r3, r3
 8002584:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002588:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800258c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002590:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002598:	2320      	movs	r3, #32
 800259a:	e004      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800259c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025a0:	fab3 f383 	clz	r3, r3
 80025a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d106      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2200      	movs	r2, #0
 80025b0:	2101      	movs	r1, #1
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff fa1e 	bl	80019f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2102      	movs	r1, #2
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fa02 	bl	80019c8 <LL_ADC_GetOffsetChannel>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10a      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x2e8>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2102      	movs	r1, #2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff f9f7 	bl	80019c8 <LL_ADC_GetOffsetChannel>
 80025da:	4603      	mov	r3, r0
 80025dc:	0e9b      	lsrs	r3, r3, #26
 80025de:	f003 021f 	and.w	r2, r3, #31
 80025e2:	e01e      	b.n	8002622 <HAL_ADC_ConfigChannel+0x326>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2102      	movs	r1, #2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff f9ec 	bl	80019c8 <LL_ADC_GetOffsetChannel>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025fa:	fa93 f3a3 	rbit	r3, r3
 80025fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002602:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002606:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800260a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002612:	2320      	movs	r3, #32
 8002614:	e004      	b.n	8002620 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002616:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800261a:	fab3 f383 	clz	r3, r3
 800261e:	b2db      	uxtb	r3, r3
 8002620:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800262a:	2b00      	cmp	r3, #0
 800262c:	d105      	bne.n	800263a <HAL_ADC_ConfigChannel+0x33e>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	0e9b      	lsrs	r3, r3, #26
 8002634:	f003 031f 	and.w	r3, r3, #31
 8002638:	e016      	b.n	8002668 <HAL_ADC_ConfigChannel+0x36c>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800264c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800264e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002652:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800265a:	2320      	movs	r3, #32
 800265c:	e004      	b.n	8002668 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800265e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002668:	429a      	cmp	r2, r3
 800266a:	d106      	bne.n	800267a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2200      	movs	r2, #0
 8002672:	2102      	movs	r1, #2
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff f9bd 	bl	80019f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2103      	movs	r1, #3
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff f9a1 	bl	80019c8 <LL_ADC_GetOffsetChannel>
 8002686:	4603      	mov	r3, r0
 8002688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10a      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x3aa>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2103      	movs	r1, #3
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff f996 	bl	80019c8 <LL_ADC_GetOffsetChannel>
 800269c:	4603      	mov	r3, r0
 800269e:	0e9b      	lsrs	r3, r3, #26
 80026a0:	f003 021f 	and.w	r2, r3, #31
 80026a4:	e017      	b.n	80026d6 <HAL_ADC_ConfigChannel+0x3da>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2103      	movs	r1, #3
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff f98b 	bl	80019c8 <LL_ADC_GetOffsetChannel>
 80026b2:	4603      	mov	r3, r0
 80026b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026b8:	fa93 f3a3 	rbit	r3, r3
 80026bc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80026be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026c0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80026c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80026c8:	2320      	movs	r3, #32
 80026ca:	e003      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80026cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026ce:	fab3 f383 	clz	r3, r3
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d105      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x3f2>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	0e9b      	lsrs	r3, r3, #26
 80026e8:	f003 031f 	and.w	r3, r3, #31
 80026ec:	e011      	b.n	8002712 <HAL_ADC_ConfigChannel+0x416>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026f6:	fa93 f3a3 	rbit	r3, r3
 80026fa:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80026fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002700:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002706:	2320      	movs	r3, #32
 8002708:	e003      	b.n	8002712 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800270a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800270c:	fab3 f383 	clz	r3, r3
 8002710:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002712:	429a      	cmp	r2, r3
 8002714:	d106      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2200      	movs	r2, #0
 800271c:	2103      	movs	r1, #3
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff f968 	bl	80019f4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fad9 	bl	8001ce0 <LL_ADC_IsEnabled>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	f040 813d 	bne.w	80029b0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6818      	ldr	r0, [r3, #0]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	6819      	ldr	r1, [r3, #0]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	461a      	mov	r2, r3
 8002744:	f7ff fa24 	bl	8001b90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4aa2      	ldr	r2, [pc, #648]	@ (80029d8 <HAL_ADC_ConfigChannel+0x6dc>)
 800274e:	4293      	cmp	r3, r2
 8002750:	f040 812e 	bne.w	80029b0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10b      	bne.n	800277c <HAL_ADC_ConfigChannel+0x480>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	0e9b      	lsrs	r3, r3, #26
 800276a:	3301      	adds	r3, #1
 800276c:	f003 031f 	and.w	r3, r3, #31
 8002770:	2b09      	cmp	r3, #9
 8002772:	bf94      	ite	ls
 8002774:	2301      	movls	r3, #1
 8002776:	2300      	movhi	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	e019      	b.n	80027b0 <HAL_ADC_ConfigChannel+0x4b4>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002782:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002784:	fa93 f3a3 	rbit	r3, r3
 8002788:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800278a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800278c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800278e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002790:	2b00      	cmp	r3, #0
 8002792:	d101      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002794:	2320      	movs	r3, #32
 8002796:	e003      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002798:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	3301      	adds	r3, #1
 80027a2:	f003 031f 	and.w	r3, r3, #31
 80027a6:	2b09      	cmp	r3, #9
 80027a8:	bf94      	ite	ls
 80027aa:	2301      	movls	r3, #1
 80027ac:	2300      	movhi	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d079      	beq.n	80028a8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d107      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x4d4>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	0e9b      	lsrs	r3, r3, #26
 80027c6:	3301      	adds	r3, #1
 80027c8:	069b      	lsls	r3, r3, #26
 80027ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027ce:	e015      	b.n	80027fc <HAL_ADC_ConfigChannel+0x500>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027d8:	fa93 f3a3 	rbit	r3, r3
 80027dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80027de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027e0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80027e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80027e8:	2320      	movs	r3, #32
 80027ea:	e003      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80027ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027ee:	fab3 f383 	clz	r3, r3
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	3301      	adds	r3, #1
 80027f6:	069b      	lsls	r3, r3, #26
 80027f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002804:	2b00      	cmp	r3, #0
 8002806:	d109      	bne.n	800281c <HAL_ADC_ConfigChannel+0x520>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	0e9b      	lsrs	r3, r3, #26
 800280e:	3301      	adds	r3, #1
 8002810:	f003 031f 	and.w	r3, r3, #31
 8002814:	2101      	movs	r1, #1
 8002816:	fa01 f303 	lsl.w	r3, r1, r3
 800281a:	e017      	b.n	800284c <HAL_ADC_ConfigChannel+0x550>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002822:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002824:	fa93 f3a3 	rbit	r3, r3
 8002828:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800282a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800282c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800282e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002834:	2320      	movs	r3, #32
 8002836:	e003      	b.n	8002840 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002838:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800283a:	fab3 f383 	clz	r3, r3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	3301      	adds	r3, #1
 8002842:	f003 031f 	and.w	r3, r3, #31
 8002846:	2101      	movs	r1, #1
 8002848:	fa01 f303 	lsl.w	r3, r1, r3
 800284c:	ea42 0103 	orr.w	r1, r2, r3
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10a      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x576>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	0e9b      	lsrs	r3, r3, #26
 8002862:	3301      	adds	r3, #1
 8002864:	f003 021f 	and.w	r2, r3, #31
 8002868:	4613      	mov	r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	4413      	add	r3, r2
 800286e:	051b      	lsls	r3, r3, #20
 8002870:	e018      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x5a8>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800287a:	fa93 f3a3 	rbit	r3, r3
 800287e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002882:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800288a:	2320      	movs	r3, #32
 800288c:	e003      	b.n	8002896 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800288e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002890:	fab3 f383 	clz	r3, r3
 8002894:	b2db      	uxtb	r3, r3
 8002896:	3301      	adds	r3, #1
 8002898:	f003 021f 	and.w	r2, r3, #31
 800289c:	4613      	mov	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028a4:	430b      	orrs	r3, r1
 80028a6:	e07e      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d107      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x5c8>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	0e9b      	lsrs	r3, r3, #26
 80028ba:	3301      	adds	r3, #1
 80028bc:	069b      	lsls	r3, r3, #26
 80028be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028c2:	e015      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x5f4>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028cc:	fa93 f3a3 	rbit	r3, r3
 80028d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80028d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80028d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80028dc:	2320      	movs	r3, #32
 80028de:	e003      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80028e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e2:	fab3 f383 	clz	r3, r3
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	3301      	adds	r3, #1
 80028ea:	069b      	lsls	r3, r3, #26
 80028ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d109      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x614>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	0e9b      	lsrs	r3, r3, #26
 8002902:	3301      	adds	r3, #1
 8002904:	f003 031f 	and.w	r3, r3, #31
 8002908:	2101      	movs	r1, #1
 800290a:	fa01 f303 	lsl.w	r3, r1, r3
 800290e:	e017      	b.n	8002940 <HAL_ADC_ConfigChannel+0x644>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	fa93 f3a3 	rbit	r3, r3
 800291c:	61fb      	str	r3, [r7, #28]
  return result;
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	2b00      	cmp	r3, #0
 8002926:	d101      	bne.n	800292c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002928:	2320      	movs	r3, #32
 800292a:	e003      	b.n	8002934 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800292c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292e:	fab3 f383 	clz	r3, r3
 8002932:	b2db      	uxtb	r3, r3
 8002934:	3301      	adds	r3, #1
 8002936:	f003 031f 	and.w	r3, r3, #31
 800293a:	2101      	movs	r1, #1
 800293c:	fa01 f303 	lsl.w	r3, r1, r3
 8002940:	ea42 0103 	orr.w	r1, r2, r3
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10d      	bne.n	800296c <HAL_ADC_ConfigChannel+0x670>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	0e9b      	lsrs	r3, r3, #26
 8002956:	3301      	adds	r3, #1
 8002958:	f003 021f 	and.w	r2, r3, #31
 800295c:	4613      	mov	r3, r2
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	4413      	add	r3, r2
 8002962:	3b1e      	subs	r3, #30
 8002964:	051b      	lsls	r3, r3, #20
 8002966:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800296a:	e01b      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x6a8>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	fa93 f3a3 	rbit	r3, r3
 8002978:	613b      	str	r3, [r7, #16]
  return result;
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002984:	2320      	movs	r3, #32
 8002986:	e003      	b.n	8002990 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	fab3 f383 	clz	r3, r3
 800298e:	b2db      	uxtb	r3, r3
 8002990:	3301      	adds	r3, #1
 8002992:	f003 021f 	and.w	r2, r3, #31
 8002996:	4613      	mov	r3, r2
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	4413      	add	r3, r2
 800299c:	3b1e      	subs	r3, #30
 800299e:	051b      	lsls	r3, r3, #20
 80029a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029a4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029aa:	4619      	mov	r1, r3
 80029ac:	f7ff f8c5 	bl	8001b3a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4b09      	ldr	r3, [pc, #36]	@ (80029dc <HAL_ADC_ConfigChannel+0x6e0>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80be 	beq.w	8002b3a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029c6:	d004      	beq.n	80029d2 <HAL_ADC_ConfigChannel+0x6d6>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a04      	ldr	r2, [pc, #16]	@ (80029e0 <HAL_ADC_ConfigChannel+0x6e4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d10a      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x6ec>
 80029d2:	4b04      	ldr	r3, [pc, #16]	@ (80029e4 <HAL_ADC_ConfigChannel+0x6e8>)
 80029d4:	e009      	b.n	80029ea <HAL_ADC_ConfigChannel+0x6ee>
 80029d6:	bf00      	nop
 80029d8:	407f0000 	.word	0x407f0000
 80029dc:	80080000 	.word	0x80080000
 80029e0:	50000100 	.word	0x50000100
 80029e4:	50000300 	.word	0x50000300
 80029e8:	4b59      	ldr	r3, [pc, #356]	@ (8002b50 <HAL_ADC_ConfigChannel+0x854>)
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe ffba 	bl	8001964 <LL_ADC_GetCommonPathInternalCh>
 80029f0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a56      	ldr	r2, [pc, #344]	@ (8002b54 <HAL_ADC_ConfigChannel+0x858>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d004      	beq.n	8002a08 <HAL_ADC_ConfigChannel+0x70c>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a55      	ldr	r2, [pc, #340]	@ (8002b58 <HAL_ADC_ConfigChannel+0x85c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d13a      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d134      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a1c:	d005      	beq.n	8002a2a <HAL_ADC_ConfigChannel+0x72e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a4e      	ldr	r2, [pc, #312]	@ (8002b5c <HAL_ADC_ConfigChannel+0x860>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	f040 8085 	bne.w	8002b34 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a32:	d004      	beq.n	8002a3e <HAL_ADC_ConfigChannel+0x742>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a49      	ldr	r2, [pc, #292]	@ (8002b60 <HAL_ADC_ConfigChannel+0x864>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d101      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x746>
 8002a3e:	4a49      	ldr	r2, [pc, #292]	@ (8002b64 <HAL_ADC_ConfigChannel+0x868>)
 8002a40:	e000      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x748>
 8002a42:	4a43      	ldr	r2, [pc, #268]	@ (8002b50 <HAL_ADC_ConfigChannel+0x854>)
 8002a44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a48:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4610      	mov	r0, r2
 8002a50:	f7fe ff75 	bl	800193e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a54:	4b44      	ldr	r3, [pc, #272]	@ (8002b68 <HAL_ADC_ConfigChannel+0x86c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	099b      	lsrs	r3, r3, #6
 8002a5a:	4a44      	ldr	r2, [pc, #272]	@ (8002b6c <HAL_ADC_ConfigChannel+0x870>)
 8002a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a60:	099b      	lsrs	r3, r3, #6
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	4613      	mov	r3, r2
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4413      	add	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a6e:	e002      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1f9      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a7c:	e05a      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a3b      	ldr	r2, [pc, #236]	@ (8002b70 <HAL_ADC_ConfigChannel+0x874>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d125      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d11f      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a31      	ldr	r2, [pc, #196]	@ (8002b60 <HAL_ADC_ConfigChannel+0x864>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d104      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x7ac>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a34      	ldr	r2, [pc, #208]	@ (8002b74 <HAL_ADC_ConfigChannel+0x878>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d047      	beq.n	8002b38 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ab0:	d004      	beq.n	8002abc <HAL_ADC_ConfigChannel+0x7c0>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a2a      	ldr	r2, [pc, #168]	@ (8002b60 <HAL_ADC_ConfigChannel+0x864>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d101      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x7c4>
 8002abc:	4a29      	ldr	r2, [pc, #164]	@ (8002b64 <HAL_ADC_ConfigChannel+0x868>)
 8002abe:	e000      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x7c6>
 8002ac0:	4a23      	ldr	r2, [pc, #140]	@ (8002b50 <HAL_ADC_ConfigChannel+0x854>)
 8002ac2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ac6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aca:	4619      	mov	r1, r3
 8002acc:	4610      	mov	r0, r2
 8002ace:	f7fe ff36 	bl	800193e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ad2:	e031      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a27      	ldr	r2, [pc, #156]	@ (8002b78 <HAL_ADC_ConfigChannel+0x87c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d12d      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ade:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ae2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d127      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a1c      	ldr	r2, [pc, #112]	@ (8002b60 <HAL_ADC_ConfigChannel+0x864>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d022      	beq.n	8002b3a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002afc:	d004      	beq.n	8002b08 <HAL_ADC_ConfigChannel+0x80c>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a17      	ldr	r2, [pc, #92]	@ (8002b60 <HAL_ADC_ConfigChannel+0x864>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d101      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x810>
 8002b08:	4a16      	ldr	r2, [pc, #88]	@ (8002b64 <HAL_ADC_ConfigChannel+0x868>)
 8002b0a:	e000      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x812>
 8002b0c:	4a10      	ldr	r2, [pc, #64]	@ (8002b50 <HAL_ADC_ConfigChannel+0x854>)
 8002b0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b16:	4619      	mov	r1, r3
 8002b18:	4610      	mov	r0, r2
 8002b1a:	f7fe ff10 	bl	800193e <LL_ADC_SetCommonPathInternalCh>
 8002b1e:	e00c      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b24:	f043 0220 	orr.w	r2, r3, #32
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002b32:	e002      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b34:	bf00      	nop
 8002b36:	e000      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b38:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002b42:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	37d8      	adds	r7, #216	@ 0xd8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	50000700 	.word	0x50000700
 8002b54:	c3210000 	.word	0xc3210000
 8002b58:	90c00010 	.word	0x90c00010
 8002b5c:	50000600 	.word	0x50000600
 8002b60:	50000100 	.word	0x50000100
 8002b64:	50000300 	.word	0x50000300
 8002b68:	20000000 	.word	0x20000000
 8002b6c:	053e2d63 	.word	0x053e2d63
 8002b70:	c7520000 	.word	0xc7520000
 8002b74:	50000500 	.word	0x50000500
 8002b78:	cb840000 	.word	0xcb840000

08002b7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff f8a7 	bl	8001ce0 <LL_ADC_IsEnabled>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d176      	bne.n	8002c86 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	4b3c      	ldr	r3, [pc, #240]	@ (8002c90 <ADC_Enable+0x114>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00d      	beq.n	8002bc2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002baa:	f043 0210 	orr.w	r2, r3, #16
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bb6:	f043 0201 	orr.w	r2, r3, #1
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e062      	b.n	8002c88 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff f862 	bl	8001c90 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bd4:	d004      	beq.n	8002be0 <ADC_Enable+0x64>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a2e      	ldr	r2, [pc, #184]	@ (8002c94 <ADC_Enable+0x118>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d101      	bne.n	8002be4 <ADC_Enable+0x68>
 8002be0:	4b2d      	ldr	r3, [pc, #180]	@ (8002c98 <ADC_Enable+0x11c>)
 8002be2:	e000      	b.n	8002be6 <ADC_Enable+0x6a>
 8002be4:	4b2d      	ldr	r3, [pc, #180]	@ (8002c9c <ADC_Enable+0x120>)
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe febc 	bl	8001964 <LL_ADC_GetCommonPathInternalCh>
 8002bec:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002bee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d013      	beq.n	8002c1e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca0 <ADC_Enable+0x124>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	099b      	lsrs	r3, r3, #6
 8002bfc:	4a29      	ldr	r2, [pc, #164]	@ (8002ca4 <ADC_Enable+0x128>)
 8002bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002c02:	099b      	lsrs	r3, r3, #6
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	4613      	mov	r3, r2
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c10:	e002      	b.n	8002c18 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	3b01      	subs	r3, #1
 8002c16:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f9      	bne.n	8002c12 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c1e:	f7fe fe6f 	bl	8001900 <HAL_GetTick>
 8002c22:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c24:	e028      	b.n	8002c78 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff f858 	bl	8001ce0 <LL_ADC_IsEnabled>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d104      	bne.n	8002c40 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff f828 	bl	8001c90 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c40:	f7fe fe5e 	bl	8001900 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d914      	bls.n	8002c78 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d00d      	beq.n	8002c78 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c60:	f043 0210 	orr.w	r2, r3, #16
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c6c:	f043 0201 	orr.w	r2, r3, #1
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e007      	b.n	8002c88 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d1cf      	bne.n	8002c26 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	8000003f 	.word	0x8000003f
 8002c94:	50000100 	.word	0x50000100
 8002c98:	50000300 	.word	0x50000300
 8002c9c:	50000700 	.word	0x50000700
 8002ca0:	20000000 	.word	0x20000000
 8002ca4:	053e2d63 	.word	0x053e2d63

08002ca8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff f826 	bl	8001d06 <LL_ADC_IsDisableOngoing>
 8002cba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff f80d 	bl	8001ce0 <LL_ADC_IsEnabled>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d047      	beq.n	8002d5c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d144      	bne.n	8002d5c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 030d 	and.w	r3, r3, #13
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d10c      	bne.n	8002cfa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fe ffe7 	bl	8001cb8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2203      	movs	r2, #3
 8002cf0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cf2:	f7fe fe05 	bl	8001900 <HAL_GetTick>
 8002cf6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cf8:	e029      	b.n	8002d4e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cfe:	f043 0210 	orr.w	r2, r3, #16
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d0a:	f043 0201 	orr.w	r2, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e023      	b.n	8002d5e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d16:	f7fe fdf3 	bl	8001900 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d914      	bls.n	8002d4e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00d      	beq.n	8002d4e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d36:	f043 0210 	orr.w	r2, r3, #16
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d42:	f043 0201 	orr.w	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e007      	b.n	8002d5e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1dc      	bne.n	8002d16 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d14b      	bne.n	8002e18 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d84:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d021      	beq.n	8002dde <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe fe8c 	bl	8001abc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d032      	beq.n	8002e10 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d12b      	bne.n	8002e10 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d11f      	bne.n	8002e10 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd4:	f043 0201 	orr.w	r2, r3, #1
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002ddc:	e018      	b.n	8002e10 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d111      	bne.n	8002e10 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d105      	bne.n	8002e10 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e08:	f043 0201 	orr.w	r2, r3, #1
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f7ff fa55 	bl	80022c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e16:	e00e      	b.n	8002e36 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e1c:	f003 0310 	and.w	r3, r3, #16
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f7ff fa5f 	bl	80022e8 <HAL_ADC_ErrorCallback>
}
 8002e2a:	e004      	b.n	8002e36 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	4798      	blx	r3
}
 8002e36:	bf00      	nop
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b084      	sub	sp, #16
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f7ff fa41 	bl	80022d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e52:	bf00      	nop
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b084      	sub	sp, #16
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e78:	f043 0204 	orr.w	r2, r3, #4
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f7ff fa31 	bl	80022e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e86:	bf00      	nop
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <LL_ADC_IsEnabled>:
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <LL_ADC_IsEnabled+0x18>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <LL_ADC_IsEnabled+0x1a>
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <LL_ADC_StartCalibration>:
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002ec6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	609a      	str	r2, [r3, #8]
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <LL_ADC_IsCalibrationOnGoing>:
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002efa:	d101      	bne.n	8002f00 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002efc:	2301      	movs	r3, #1
 8002efe:	e000      	b.n	8002f02 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <LL_ADC_REG_IsConversionOngoing>:
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d101      	bne.n	8002f26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_ADCEx_Calibration_Start+0x1c>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e04d      	b.n	8002fec <HAL_ADCEx_Calibration_Start+0xb8>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7ff fea5 	bl	8002ca8 <ADC_Disable>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d136      	bne.n	8002fd6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f6c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f70:	f023 0302 	bic.w	r3, r3, #2
 8002f74:	f043 0202 	orr.w	r2, r3, #2
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6839      	ldr	r1, [r7, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff ff96 	bl	8002eb4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002f88:	e014      	b.n	8002fb4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	4a18      	ldr	r2, [pc, #96]	@ (8002ff4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d90d      	bls.n	8002fb4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f9c:	f023 0312 	bic.w	r3, r3, #18
 8002fa0:	f043 0210 	orr.w	r2, r3, #16
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e01b      	b.n	8002fec <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff ff94 	bl	8002ee6 <LL_ADC_IsCalibrationOnGoing>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1e2      	bne.n	8002f8a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc8:	f023 0303 	bic.w	r3, r3, #3
 8002fcc:	f043 0201 	orr.w	r2, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002fd4:	e005      	b.n	8002fe2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fda:	f043 0210 	orr.w	r2, r3, #16
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	0004de01 	.word	0x0004de01

08002ff8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002ff8:	b590      	push	{r4, r7, lr}
 8002ffa:	b0a1      	sub	sp, #132	@ 0x84
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003012:	2302      	movs	r3, #2
 8003014:	e0e7      	b.n	80031e6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800301e:	2300      	movs	r3, #0
 8003020:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003022:	2300      	movs	r3, #0
 8003024:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800302e:	d102      	bne.n	8003036 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003030:	4b6f      	ldr	r3, [pc, #444]	@ (80031f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003032:	60bb      	str	r3, [r7, #8]
 8003034:	e009      	b.n	800304a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a6e      	ldr	r2, [pc, #440]	@ (80031f4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d102      	bne.n	8003046 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003040:	4b6d      	ldr	r3, [pc, #436]	@ (80031f8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003042:	60bb      	str	r3, [r7, #8]
 8003044:	e001      	b.n	800304a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003046:	2300      	movs	r3, #0
 8003048:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10b      	bne.n	8003068 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003054:	f043 0220 	orr.w	r2, r3, #32
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0be      	b.n	80031e6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff ff4f 	bl	8002f0e <LL_ADC_REG_IsConversionOngoing>
 8003070:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff ff49 	bl	8002f0e <LL_ADC_REG_IsConversionOngoing>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	f040 80a0 	bne.w	80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003084:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003086:	2b00      	cmp	r3, #0
 8003088:	f040 809c 	bne.w	80031c4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003094:	d004      	beq.n	80030a0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a55      	ldr	r2, [pc, #340]	@ (80031f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d101      	bne.n	80030a4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80030a0:	4b56      	ldr	r3, [pc, #344]	@ (80031fc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80030a2:	e000      	b.n	80030a6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80030a4:	4b56      	ldr	r3, [pc, #344]	@ (8003200 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80030a6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d04b      	beq.n	8003148 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80030b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	6859      	ldr	r1, [r3, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80030c2:	035b      	lsls	r3, r3, #13
 80030c4:	430b      	orrs	r3, r1
 80030c6:	431a      	orrs	r2, r3
 80030c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030ca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030d4:	d004      	beq.n	80030e0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a45      	ldr	r2, [pc, #276]	@ (80031f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d10f      	bne.n	8003100 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80030e0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80030e4:	f7ff fed3 	bl	8002e8e <LL_ADC_IsEnabled>
 80030e8:	4604      	mov	r4, r0
 80030ea:	4841      	ldr	r0, [pc, #260]	@ (80031f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80030ec:	f7ff fecf 	bl	8002e8e <LL_ADC_IsEnabled>
 80030f0:	4603      	mov	r3, r0
 80030f2:	4323      	orrs	r3, r4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e012      	b.n	8003126 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003100:	483c      	ldr	r0, [pc, #240]	@ (80031f4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003102:	f7ff fec4 	bl	8002e8e <LL_ADC_IsEnabled>
 8003106:	4604      	mov	r4, r0
 8003108:	483b      	ldr	r0, [pc, #236]	@ (80031f8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800310a:	f7ff fec0 	bl	8002e8e <LL_ADC_IsEnabled>
 800310e:	4603      	mov	r3, r0
 8003110:	431c      	orrs	r4, r3
 8003112:	483c      	ldr	r0, [pc, #240]	@ (8003204 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003114:	f7ff febb 	bl	8002e8e <LL_ADC_IsEnabled>
 8003118:	4603      	mov	r3, r0
 800311a:	4323      	orrs	r3, r4
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d056      	beq.n	80031d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800312a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003132:	f023 030f 	bic.w	r3, r3, #15
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	6811      	ldr	r1, [r2, #0]
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	6892      	ldr	r2, [r2, #8]
 800313e:	430a      	orrs	r2, r1
 8003140:	431a      	orrs	r2, r3
 8003142:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003144:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003146:	e047      	b.n	80031d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003148:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003150:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003152:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800315c:	d004      	beq.n	8003168 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a23      	ldr	r2, [pc, #140]	@ (80031f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d10f      	bne.n	8003188 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003168:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800316c:	f7ff fe8f 	bl	8002e8e <LL_ADC_IsEnabled>
 8003170:	4604      	mov	r4, r0
 8003172:	481f      	ldr	r0, [pc, #124]	@ (80031f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003174:	f7ff fe8b 	bl	8002e8e <LL_ADC_IsEnabled>
 8003178:	4603      	mov	r3, r0
 800317a:	4323      	orrs	r3, r4
 800317c:	2b00      	cmp	r3, #0
 800317e:	bf0c      	ite	eq
 8003180:	2301      	moveq	r3, #1
 8003182:	2300      	movne	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	e012      	b.n	80031ae <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003188:	481a      	ldr	r0, [pc, #104]	@ (80031f4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800318a:	f7ff fe80 	bl	8002e8e <LL_ADC_IsEnabled>
 800318e:	4604      	mov	r4, r0
 8003190:	4819      	ldr	r0, [pc, #100]	@ (80031f8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003192:	f7ff fe7c 	bl	8002e8e <LL_ADC_IsEnabled>
 8003196:	4603      	mov	r3, r0
 8003198:	431c      	orrs	r4, r3
 800319a:	481a      	ldr	r0, [pc, #104]	@ (8003204 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800319c:	f7ff fe77 	bl	8002e8e <LL_ADC_IsEnabled>
 80031a0:	4603      	mov	r3, r0
 80031a2:	4323      	orrs	r3, r4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	bf0c      	ite	eq
 80031a8:	2301      	moveq	r3, #1
 80031aa:	2300      	movne	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d012      	beq.n	80031d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80031b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80031ba:	f023 030f 	bic.w	r3, r3, #15
 80031be:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80031c0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031c2:	e009      	b.n	80031d8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c8:	f043 0220 	orr.w	r2, r3, #32
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80031d6:	e000      	b.n	80031da <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031d8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80031e2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3784      	adds	r7, #132	@ 0x84
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd90      	pop	{r4, r7, pc}
 80031ee:	bf00      	nop
 80031f0:	50000100 	.word	0x50000100
 80031f4:	50000400 	.word	0x50000400
 80031f8:	50000500 	.word	0x50000500
 80031fc:	50000300 	.word	0x50000300
 8003200:	50000700 	.word	0x50000700
 8003204:	50000600 	.word	0x50000600

08003208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003218:	4b0c      	ldr	r3, [pc, #48]	@ (800324c <__NVIC_SetPriorityGrouping+0x44>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003224:	4013      	ands	r3, r2
 8003226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003230:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003234:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800323a:	4a04      	ldr	r2, [pc, #16]	@ (800324c <__NVIC_SetPriorityGrouping+0x44>)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	60d3      	str	r3, [r2, #12]
}
 8003240:	bf00      	nop
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	e000ed00 	.word	0xe000ed00

08003250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003254:	4b04      	ldr	r3, [pc, #16]	@ (8003268 <__NVIC_GetPriorityGrouping+0x18>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	0a1b      	lsrs	r3, r3, #8
 800325a:	f003 0307 	and.w	r3, r3, #7
}
 800325e:	4618      	mov	r0, r3
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	e000ed00 	.word	0xe000ed00

0800326c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327a:	2b00      	cmp	r3, #0
 800327c:	db0b      	blt.n	8003296 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800327e:	79fb      	ldrb	r3, [r7, #7]
 8003280:	f003 021f 	and.w	r2, r3, #31
 8003284:	4907      	ldr	r1, [pc, #28]	@ (80032a4 <__NVIC_EnableIRQ+0x38>)
 8003286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	2001      	movs	r0, #1
 800328e:	fa00 f202 	lsl.w	r2, r0, r2
 8003292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	e000e100 	.word	0xe000e100

080032a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	6039      	str	r1, [r7, #0]
 80032b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	db0a      	blt.n	80032d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	490c      	ldr	r1, [pc, #48]	@ (80032f4 <__NVIC_SetPriority+0x4c>)
 80032c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c6:	0112      	lsls	r2, r2, #4
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	440b      	add	r3, r1
 80032cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032d0:	e00a      	b.n	80032e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	4908      	ldr	r1, [pc, #32]	@ (80032f8 <__NVIC_SetPriority+0x50>)
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	3b04      	subs	r3, #4
 80032e0:	0112      	lsls	r2, r2, #4
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	440b      	add	r3, r1
 80032e6:	761a      	strb	r2, [r3, #24]
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	e000e100 	.word	0xe000e100
 80032f8:	e000ed00 	.word	0xe000ed00

080032fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b089      	sub	sp, #36	@ 0x24
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f1c3 0307 	rsb	r3, r3, #7
 8003316:	2b04      	cmp	r3, #4
 8003318:	bf28      	it	cs
 800331a:	2304      	movcs	r3, #4
 800331c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	3304      	adds	r3, #4
 8003322:	2b06      	cmp	r3, #6
 8003324:	d902      	bls.n	800332c <NVIC_EncodePriority+0x30>
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	3b03      	subs	r3, #3
 800332a:	e000      	b.n	800332e <NVIC_EncodePriority+0x32>
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003330:	f04f 32ff 	mov.w	r2, #4294967295
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	43da      	mvns	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	401a      	ands	r2, r3
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003344:	f04f 31ff 	mov.w	r1, #4294967295
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	fa01 f303 	lsl.w	r3, r1, r3
 800334e:	43d9      	mvns	r1, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003354:	4313      	orrs	r3, r2
         );
}
 8003356:	4618      	mov	r0, r3
 8003358:	3724      	adds	r7, #36	@ 0x24
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
	...

08003364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3b01      	subs	r3, #1
 8003370:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003374:	d301      	bcc.n	800337a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003376:	2301      	movs	r3, #1
 8003378:	e00f      	b.n	800339a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800337a:	4a0a      	ldr	r2, [pc, #40]	@ (80033a4 <SysTick_Config+0x40>)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3b01      	subs	r3, #1
 8003380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003382:	210f      	movs	r1, #15
 8003384:	f04f 30ff 	mov.w	r0, #4294967295
 8003388:	f7ff ff8e 	bl	80032a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800338c:	4b05      	ldr	r3, [pc, #20]	@ (80033a4 <SysTick_Config+0x40>)
 800338e:	2200      	movs	r2, #0
 8003390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003392:	4b04      	ldr	r3, [pc, #16]	@ (80033a4 <SysTick_Config+0x40>)
 8003394:	2207      	movs	r2, #7
 8003396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	e000e010 	.word	0xe000e010

080033a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff ff29 	bl	8003208 <__NVIC_SetPriorityGrouping>
}
 80033b6:	bf00      	nop
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b086      	sub	sp, #24
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	4603      	mov	r3, r0
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	607a      	str	r2, [r7, #4]
 80033ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033cc:	f7ff ff40 	bl	8003250 <__NVIC_GetPriorityGrouping>
 80033d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	68b9      	ldr	r1, [r7, #8]
 80033d6:	6978      	ldr	r0, [r7, #20]
 80033d8:	f7ff ff90 	bl	80032fc <NVIC_EncodePriority>
 80033dc:	4602      	mov	r2, r0
 80033de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033e2:	4611      	mov	r1, r2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff ff5f 	bl	80032a8 <__NVIC_SetPriority>
}
 80033ea:	bf00      	nop
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	4603      	mov	r3, r0
 80033fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff ff33 	bl	800326c <__NVIC_EnableIRQ>
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff ffa4 	bl	8003364 <SysTick_Config>
 800341c:	4603      	mov	r3, r0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e08d      	b.n	8003556 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	4b47      	ldr	r3, [pc, #284]	@ (8003560 <HAL_DMA_Init+0x138>)
 8003442:	429a      	cmp	r2, r3
 8003444:	d80f      	bhi.n	8003466 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	4b45      	ldr	r3, [pc, #276]	@ (8003564 <HAL_DMA_Init+0x13c>)
 800344e:	4413      	add	r3, r2
 8003450:	4a45      	ldr	r2, [pc, #276]	@ (8003568 <HAL_DMA_Init+0x140>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	091b      	lsrs	r3, r3, #4
 8003458:	009a      	lsls	r2, r3, #2
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a42      	ldr	r2, [pc, #264]	@ (800356c <HAL_DMA_Init+0x144>)
 8003462:	641a      	str	r2, [r3, #64]	@ 0x40
 8003464:	e00e      	b.n	8003484 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	4b40      	ldr	r3, [pc, #256]	@ (8003570 <HAL_DMA_Init+0x148>)
 800346e:	4413      	add	r3, r2
 8003470:	4a3d      	ldr	r2, [pc, #244]	@ (8003568 <HAL_DMA_Init+0x140>)
 8003472:	fba2 2303 	umull	r2, r3, r2, r3
 8003476:	091b      	lsrs	r3, r3, #4
 8003478:	009a      	lsls	r2, r3, #2
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a3c      	ldr	r2, [pc, #240]	@ (8003574 <HAL_DMA_Init+0x14c>)
 8003482:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800349a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800349e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80034a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f9b6 	bl	8003848 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034e4:	d102      	bne.n	80034ec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003500:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d010      	beq.n	800352c <HAL_DMA_Init+0x104>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b04      	cmp	r3, #4
 8003510:	d80c      	bhi.n	800352c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f9d6 	bl	80038c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003528:	605a      	str	r2, [r3, #4]
 800352a:	e008      	b.n	800353e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40020407 	.word	0x40020407
 8003564:	bffdfff8 	.word	0xbffdfff8
 8003568:	cccccccd 	.word	0xcccccccd
 800356c:	40020000 	.word	0x40020000
 8003570:	bffdfbf8 	.word	0xbffdfbf8
 8003574:	40020400 	.word	0x40020400

08003578 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003586:	2300      	movs	r3, #0
 8003588:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <HAL_DMA_Start_IT+0x20>
 8003594:	2302      	movs	r3, #2
 8003596:	e066      	b.n	8003666 <HAL_DMA_Start_IT+0xee>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d155      	bne.n	8003658 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0201 	bic.w	r2, r2, #1
 80035c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	68b9      	ldr	r1, [r7, #8]
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 f8fb 	bl	80037cc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d008      	beq.n	80035f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f042 020e 	orr.w	r2, r2, #14
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	e00f      	b.n	8003610 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 0204 	bic.w	r2, r2, #4
 80035fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 020a 	orr.w	r2, r2, #10
 800360e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d007      	beq.n	800362e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003628:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800362c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003632:	2b00      	cmp	r3, #0
 8003634:	d007      	beq.n	8003646 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003640:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003644:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0201 	orr.w	r2, r2, #1
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	e005      	b.n	8003664 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003660:	2302      	movs	r3, #2
 8003662:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003664:	7dfb      	ldrb	r3, [r7, #23]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b084      	sub	sp, #16
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368a:	f003 031f 	and.w	r3, r3, #31
 800368e:	2204      	movs	r2, #4
 8003690:	409a      	lsls	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4013      	ands	r3, r2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d026      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x7a>
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d021      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0320 	and.w	r3, r3, #32
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d107      	bne.n	80036c2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0204 	bic.w	r2, r2, #4
 80036c0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c6:	f003 021f 	and.w	r2, r3, #31
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ce:	2104      	movs	r1, #4
 80036d0:	fa01 f202 	lsl.w	r2, r1, r2
 80036d4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d071      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80036e6:	e06c      	b.n	80037c2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ec:	f003 031f 	and.w	r3, r3, #31
 80036f0:	2202      	movs	r2, #2
 80036f2:	409a      	lsls	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4013      	ands	r3, r2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d02e      	beq.n	800375a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d029      	beq.n	800375a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0320 	and.w	r3, r3, #32
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10b      	bne.n	800372c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 020a 	bic.w	r2, r2, #10
 8003722:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003730:	f003 021f 	and.w	r2, r3, #31
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003738:	2102      	movs	r1, #2
 800373a:	fa01 f202 	lsl.w	r2, r1, r2
 800373e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800374c:	2b00      	cmp	r3, #0
 800374e:	d038      	beq.n	80037c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003758:	e033      	b.n	80037c2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800375e:	f003 031f 	and.w	r3, r3, #31
 8003762:	2208      	movs	r2, #8
 8003764:	409a      	lsls	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	4013      	ands	r3, r2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d02a      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	f003 0308 	and.w	r3, r3, #8
 8003774:	2b00      	cmp	r3, #0
 8003776:	d025      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f022 020e 	bic.w	r2, r2, #14
 8003786:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378c:	f003 021f 	and.w	r2, r3, #31
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003794:	2101      	movs	r1, #1
 8003796:	fa01 f202 	lsl.w	r2, r1, r2
 800379a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d004      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80037c2:	bf00      	nop
 80037c4:	bf00      	nop
}
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80037e2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d004      	beq.n	80037f6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80037f4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fa:	f003 021f 	and.w	r2, r3, #31
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003802:	2101      	movs	r1, #1
 8003804:	fa01 f202 	lsl.w	r2, r1, r2
 8003808:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	2b10      	cmp	r3, #16
 8003818:	d108      	bne.n	800382c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800382a:	e007      	b.n	800383c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	60da      	str	r2, [r3, #12]
}
 800383c:	bf00      	nop
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003848:	b480      	push	{r7}
 800384a:	b087      	sub	sp, #28
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	461a      	mov	r2, r3
 8003856:	4b16      	ldr	r3, [pc, #88]	@ (80038b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003858:	429a      	cmp	r2, r3
 800385a:	d802      	bhi.n	8003862 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800385c:	4b15      	ldr	r3, [pc, #84]	@ (80038b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	e001      	b.n	8003866 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003862:	4b15      	ldr	r3, [pc, #84]	@ (80038b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003864:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	b2db      	uxtb	r3, r3
 8003870:	3b08      	subs	r3, #8
 8003872:	4a12      	ldr	r2, [pc, #72]	@ (80038bc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003874:	fba2 2303 	umull	r2, r3, r2, r3
 8003878:	091b      	lsrs	r3, r3, #4
 800387a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003880:	089b      	lsrs	r3, r3, #2
 8003882:	009a      	lsls	r2, r3, #2
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	4413      	add	r3, r2
 8003888:	461a      	mov	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a0b      	ldr	r2, [pc, #44]	@ (80038c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003892:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f003 031f 	and.w	r3, r3, #31
 800389a:	2201      	movs	r2, #1
 800389c:	409a      	lsls	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80038a2:	bf00      	nop
 80038a4:	371c      	adds	r7, #28
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	40020407 	.word	0x40020407
 80038b4:	40020800 	.word	0x40020800
 80038b8:	40020820 	.word	0x40020820
 80038bc:	cccccccd 	.word	0xcccccccd
 80038c0:	40020880 	.word	0x40020880

080038c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	461a      	mov	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a08      	ldr	r2, [pc, #32]	@ (8003908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80038e6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	3b01      	subs	r3, #1
 80038ec:	f003 031f 	and.w	r3, r3, #31
 80038f0:	2201      	movs	r2, #1
 80038f2:	409a      	lsls	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80038f8:	bf00      	nop
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	1000823f 	.word	0x1000823f
 8003908:	40020940 	.word	0x40020940

0800390c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003916:	2300      	movs	r3, #0
 8003918:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800391a:	e15a      	b.n	8003bd2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	2101      	movs	r1, #1
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	fa01 f303 	lsl.w	r3, r1, r3
 8003928:	4013      	ands	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 814c 	beq.w	8003bcc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f003 0303 	and.w	r3, r3, #3
 800393c:	2b01      	cmp	r3, #1
 800393e:	d005      	beq.n	800394c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003948:	2b02      	cmp	r3, #2
 800394a:	d130      	bne.n	80039ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	2203      	movs	r2, #3
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	43db      	mvns	r3, r3
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	4013      	ands	r3, r2
 8003962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	68da      	ldr	r2, [r3, #12]
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	4313      	orrs	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003982:	2201      	movs	r2, #1
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	43db      	mvns	r3, r3
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	4013      	ands	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	091b      	lsrs	r3, r3, #4
 8003998:	f003 0201 	and.w	r2, r3, #1
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	2b03      	cmp	r3, #3
 80039b8:	d017      	beq.n	80039ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	2203      	movs	r2, #3
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43db      	mvns	r3, r3
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4013      	ands	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d123      	bne.n	8003a3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	08da      	lsrs	r2, r3, #3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	3208      	adds	r2, #8
 80039fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	220f      	movs	r2, #15
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	43db      	mvns	r3, r3
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4013      	ands	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	691a      	ldr	r2, [r3, #16]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	08da      	lsrs	r2, r3, #3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3208      	adds	r2, #8
 8003a38:	6939      	ldr	r1, [r7, #16]
 8003a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	2203      	movs	r2, #3
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	4013      	ands	r3, r2
 8003a54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f003 0203 	and.w	r2, r3, #3
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 80a6 	beq.w	8003bcc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a80:	4b5b      	ldr	r3, [pc, #364]	@ (8003bf0 <HAL_GPIO_Init+0x2e4>)
 8003a82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a84:	4a5a      	ldr	r2, [pc, #360]	@ (8003bf0 <HAL_GPIO_Init+0x2e4>)
 8003a86:	f043 0301 	orr.w	r3, r3, #1
 8003a8a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a8c:	4b58      	ldr	r3, [pc, #352]	@ (8003bf0 <HAL_GPIO_Init+0x2e4>)
 8003a8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	60bb      	str	r3, [r7, #8]
 8003a96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a98:	4a56      	ldr	r2, [pc, #344]	@ (8003bf4 <HAL_GPIO_Init+0x2e8>)
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	089b      	lsrs	r3, r3, #2
 8003a9e:	3302      	adds	r3, #2
 8003aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f003 0303 	and.w	r3, r3, #3
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	220f      	movs	r2, #15
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003ac2:	d01f      	beq.n	8003b04 <HAL_GPIO_Init+0x1f8>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a4c      	ldr	r2, [pc, #304]	@ (8003bf8 <HAL_GPIO_Init+0x2ec>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d019      	beq.n	8003b00 <HAL_GPIO_Init+0x1f4>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a4b      	ldr	r2, [pc, #300]	@ (8003bfc <HAL_GPIO_Init+0x2f0>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d013      	beq.n	8003afc <HAL_GPIO_Init+0x1f0>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a4a      	ldr	r2, [pc, #296]	@ (8003c00 <HAL_GPIO_Init+0x2f4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d00d      	beq.n	8003af8 <HAL_GPIO_Init+0x1ec>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a49      	ldr	r2, [pc, #292]	@ (8003c04 <HAL_GPIO_Init+0x2f8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d007      	beq.n	8003af4 <HAL_GPIO_Init+0x1e8>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a48      	ldr	r2, [pc, #288]	@ (8003c08 <HAL_GPIO_Init+0x2fc>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d101      	bne.n	8003af0 <HAL_GPIO_Init+0x1e4>
 8003aec:	2305      	movs	r3, #5
 8003aee:	e00a      	b.n	8003b06 <HAL_GPIO_Init+0x1fa>
 8003af0:	2306      	movs	r3, #6
 8003af2:	e008      	b.n	8003b06 <HAL_GPIO_Init+0x1fa>
 8003af4:	2304      	movs	r3, #4
 8003af6:	e006      	b.n	8003b06 <HAL_GPIO_Init+0x1fa>
 8003af8:	2303      	movs	r3, #3
 8003afa:	e004      	b.n	8003b06 <HAL_GPIO_Init+0x1fa>
 8003afc:	2302      	movs	r3, #2
 8003afe:	e002      	b.n	8003b06 <HAL_GPIO_Init+0x1fa>
 8003b00:	2301      	movs	r3, #1
 8003b02:	e000      	b.n	8003b06 <HAL_GPIO_Init+0x1fa>
 8003b04:	2300      	movs	r3, #0
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	f002 0203 	and.w	r2, r2, #3
 8003b0c:	0092      	lsls	r2, r2, #2
 8003b0e:	4093      	lsls	r3, r2
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b16:	4937      	ldr	r1, [pc, #220]	@ (8003bf4 <HAL_GPIO_Init+0x2e8>)
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	089b      	lsrs	r3, r3, #2
 8003b1c:	3302      	adds	r3, #2
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b24:	4b39      	ldr	r3, [pc, #228]	@ (8003c0c <HAL_GPIO_Init+0x300>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4013      	ands	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b48:	4a30      	ldr	r2, [pc, #192]	@ (8003c0c <HAL_GPIO_Init+0x300>)
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8003c0c <HAL_GPIO_Init+0x300>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	43db      	mvns	r3, r3
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b72:	4a26      	ldr	r2, [pc, #152]	@ (8003c0c <HAL_GPIO_Init+0x300>)
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003b78:	4b24      	ldr	r3, [pc, #144]	@ (8003c0c <HAL_GPIO_Init+0x300>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	43db      	mvns	r3, r3
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	4013      	ands	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8003c0c <HAL_GPIO_Init+0x300>)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8003c0c <HAL_GPIO_Init+0x300>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	43db      	mvns	r3, r3
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bc6:	4a11      	ldr	r2, [pc, #68]	@ (8003c0c <HAL_GPIO_Init+0x300>)
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f47f ae9d 	bne.w	800391c <HAL_GPIO_Init+0x10>
  }
}
 8003be2:	bf00      	nop
 8003be4:	bf00      	nop
 8003be6:	371c      	adds	r7, #28
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	40010000 	.word	0x40010000
 8003bf8:	48000400 	.word	0x48000400
 8003bfc:	48000800 	.word	0x48000800
 8003c00:	48000c00 	.word	0x48000c00
 8003c04:	48001000 	.word	0x48001000
 8003c08:	48001400 	.word	0x48001400
 8003c0c:	40010400 	.word	0x40010400

08003c10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	807b      	strh	r3, [r7, #2]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c20:	787b      	ldrb	r3, [r7, #1]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c26:	887a      	ldrh	r2, [r7, #2]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c2c:	e002      	b.n	8003c34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c2e:	887a      	ldrh	r2, [r7, #2]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c52:	887a      	ldrh	r2, [r7, #2]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4013      	ands	r3, r2
 8003c58:	041a      	lsls	r2, r3, #16
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	43d9      	mvns	r1, r3
 8003c5e:	887b      	ldrh	r3, [r7, #2]
 8003c60:	400b      	ands	r3, r1
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	619a      	str	r2, [r3, #24]
}
 8003c68:	bf00      	nop
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c7e:	4b08      	ldr	r3, [pc, #32]	@ (8003ca0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c80:	695a      	ldr	r2, [r3, #20]
 8003c82:	88fb      	ldrh	r3, [r7, #6]
 8003c84:	4013      	ands	r3, r2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d006      	beq.n	8003c98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c8a:	4a05      	ldr	r2, [pc, #20]	@ (8003ca0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c8c:	88fb      	ldrh	r3, [r7, #6]
 8003c8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c90:	88fb      	ldrh	r3, [r7, #6]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fd fb6a 	bl	800136c <HAL_GPIO_EXTI_Callback>
  }
}
 8003c98:	bf00      	nop
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40010400 	.word	0x40010400

08003ca4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d141      	bne.n	8003d36 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cb2:	4b4b      	ldr	r3, [pc, #300]	@ (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003cba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cbe:	d131      	bne.n	8003d24 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cc0:	4b47      	ldr	r3, [pc, #284]	@ (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cc6:	4a46      	ldr	r2, [pc, #280]	@ (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ccc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cd0:	4b43      	ldr	r3, [pc, #268]	@ (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003cd8:	4a41      	ldr	r2, [pc, #260]	@ (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003cde:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ce0:	4b40      	ldr	r3, [pc, #256]	@ (8003de4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2232      	movs	r2, #50	@ 0x32
 8003ce6:	fb02 f303 	mul.w	r3, r2, r3
 8003cea:	4a3f      	ldr	r2, [pc, #252]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003cec:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf0:	0c9b      	lsrs	r3, r3, #18
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cf6:	e002      	b.n	8003cfe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cfe:	4b38      	ldr	r3, [pc, #224]	@ (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d0a:	d102      	bne.n	8003d12 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1f2      	bne.n	8003cf8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d12:	4b33      	ldr	r3, [pc, #204]	@ (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d1e:	d158      	bne.n	8003dd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e057      	b.n	8003dd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d24:	4b2e      	ldr	r3, [pc, #184]	@ (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d2a:	4a2d      	ldr	r2, [pc, #180]	@ (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003d34:	e04d      	b.n	8003dd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d3c:	d141      	bne.n	8003dc2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d3e:	4b28      	ldr	r3, [pc, #160]	@ (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d4a:	d131      	bne.n	8003db0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d4c:	4b24      	ldr	r3, [pc, #144]	@ (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d52:	4a23      	ldr	r2, [pc, #140]	@ (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d5c:	4b20      	ldr	r3, [pc, #128]	@ (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d64:	4a1e      	ldr	r2, [pc, #120]	@ (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8003de4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2232      	movs	r2, #50	@ 0x32
 8003d72:	fb02 f303 	mul.w	r3, r2, r3
 8003d76:	4a1c      	ldr	r2, [pc, #112]	@ (8003de8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d78:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7c:	0c9b      	lsrs	r3, r3, #18
 8003d7e:	3301      	adds	r3, #1
 8003d80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d82:	e002      	b.n	8003d8a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d8a:	4b15      	ldr	r3, [pc, #84]	@ (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d96:	d102      	bne.n	8003d9e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f2      	bne.n	8003d84 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d9e:	4b10      	ldr	r3, [pc, #64]	@ (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003da6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003daa:	d112      	bne.n	8003dd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e011      	b.n	8003dd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003db0:	4b0b      	ldr	r3, [pc, #44]	@ (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003db6:	4a0a      	ldr	r2, [pc, #40]	@ (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003dc0:	e007      	b.n	8003dd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003dc2:	4b07      	ldr	r3, [pc, #28]	@ (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003dca:	4a05      	ldr	r2, [pc, #20]	@ (8003de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dcc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003dd0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	40007000 	.word	0x40007000
 8003de4:	20000000 	.word	0x20000000
 8003de8:	431bde83 	.word	0x431bde83

08003dec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003df0:	4b05      	ldr	r3, [pc, #20]	@ (8003e08 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	4a04      	ldr	r2, [pc, #16]	@ (8003e08 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003df6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dfa:	6093      	str	r3, [r2, #8]
}
 8003dfc:	bf00      	nop
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40007000 	.word	0x40007000

08003e0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e2fe      	b.n	800441c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d075      	beq.n	8003f16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e2a:	4b97      	ldr	r3, [pc, #604]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
 8003e32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e34:	4b94      	ldr	r3, [pc, #592]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f003 0303 	and.w	r3, r3, #3
 8003e3c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2b0c      	cmp	r3, #12
 8003e42:	d102      	bne.n	8003e4a <HAL_RCC_OscConfig+0x3e>
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	2b03      	cmp	r3, #3
 8003e48:	d002      	beq.n	8003e50 <HAL_RCC_OscConfig+0x44>
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d10b      	bne.n	8003e68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e50:	4b8d      	ldr	r3, [pc, #564]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d05b      	beq.n	8003f14 <HAL_RCC_OscConfig+0x108>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d157      	bne.n	8003f14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e2d9      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e70:	d106      	bne.n	8003e80 <HAL_RCC_OscConfig+0x74>
 8003e72:	4b85      	ldr	r3, [pc, #532]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a84      	ldr	r2, [pc, #528]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	e01d      	b.n	8003ebc <HAL_RCC_OscConfig+0xb0>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e88:	d10c      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x98>
 8003e8a:	4b7f      	ldr	r3, [pc, #508]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a7e      	ldr	r2, [pc, #504]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003e90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	4b7c      	ldr	r3, [pc, #496]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a7b      	ldr	r2, [pc, #492]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	e00b      	b.n	8003ebc <HAL_RCC_OscConfig+0xb0>
 8003ea4:	4b78      	ldr	r3, [pc, #480]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a77      	ldr	r2, [pc, #476]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003eaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	4b75      	ldr	r3, [pc, #468]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a74      	ldr	r2, [pc, #464]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003eb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d013      	beq.n	8003eec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec4:	f7fd fd1c 	bl	8001900 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ecc:	f7fd fd18 	bl	8001900 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b64      	cmp	r3, #100	@ 0x64
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e29e      	b.n	800441c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ede:	4b6a      	ldr	r3, [pc, #424]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0f0      	beq.n	8003ecc <HAL_RCC_OscConfig+0xc0>
 8003eea:	e014      	b.n	8003f16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eec:	f7fd fd08 	bl	8001900 <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ef4:	f7fd fd04 	bl	8001900 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b64      	cmp	r3, #100	@ 0x64
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e28a      	b.n	800441c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f06:	4b60      	ldr	r3, [pc, #384]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1f0      	bne.n	8003ef4 <HAL_RCC_OscConfig+0xe8>
 8003f12:	e000      	b.n	8003f16 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d075      	beq.n	800400e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f22:	4b59      	ldr	r3, [pc, #356]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 030c 	and.w	r3, r3, #12
 8003f2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f2c:	4b56      	ldr	r3, [pc, #344]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f003 0303 	and.w	r3, r3, #3
 8003f34:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	2b0c      	cmp	r3, #12
 8003f3a:	d102      	bne.n	8003f42 <HAL_RCC_OscConfig+0x136>
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d002      	beq.n	8003f48 <HAL_RCC_OscConfig+0x13c>
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	d11f      	bne.n	8003f88 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f48:	4b4f      	ldr	r3, [pc, #316]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <HAL_RCC_OscConfig+0x154>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e25d      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f60:	4b49      	ldr	r3, [pc, #292]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	061b      	lsls	r3, r3, #24
 8003f6e:	4946      	ldr	r1, [pc, #280]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003f74:	4b45      	ldr	r3, [pc, #276]	@ (800408c <HAL_RCC_OscConfig+0x280>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fd fc75 	bl	8001868 <HAL_InitTick>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d043      	beq.n	800400c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e249      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d023      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f90:	4b3d      	ldr	r3, [pc, #244]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a3c      	ldr	r2, [pc, #240]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003f96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9c:	f7fd fcb0 	bl	8001900 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fa4:	f7fd fcac 	bl	8001900 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e232      	b.n	800441c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fb6:	4b34      	ldr	r3, [pc, #208]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f0      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc2:	4b31      	ldr	r3, [pc, #196]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	061b      	lsls	r3, r3, #24
 8003fd0:	492d      	ldr	r1, [pc, #180]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	604b      	str	r3, [r1, #4]
 8003fd6:	e01a      	b.n	800400e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fd8:	4b2b      	ldr	r3, [pc, #172]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a2a      	ldr	r2, [pc, #168]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8003fde:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe4:	f7fd fc8c 	bl	8001900 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fec:	f7fd fc88 	bl	8001900 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e20e      	b.n	800441c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ffe:	4b22      	ldr	r3, [pc, #136]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f0      	bne.n	8003fec <HAL_RCC_OscConfig+0x1e0>
 800400a:	e000      	b.n	800400e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800400c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d041      	beq.n	800409e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d01c      	beq.n	800405c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004022:	4b19      	ldr	r3, [pc, #100]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8004024:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004028:	4a17      	ldr	r2, [pc, #92]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 800402a:	f043 0301 	orr.w	r3, r3, #1
 800402e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004032:	f7fd fc65 	bl	8001900 <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004038:	e008      	b.n	800404c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800403a:	f7fd fc61 	bl	8001900 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e1e7      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800404c:	4b0e      	ldr	r3, [pc, #56]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 800404e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d0ef      	beq.n	800403a <HAL_RCC_OscConfig+0x22e>
 800405a:	e020      	b.n	800409e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800405c:	4b0a      	ldr	r3, [pc, #40]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 800405e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004062:	4a09      	ldr	r2, [pc, #36]	@ (8004088 <HAL_RCC_OscConfig+0x27c>)
 8004064:	f023 0301 	bic.w	r3, r3, #1
 8004068:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406c:	f7fd fc48 	bl	8001900 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004072:	e00d      	b.n	8004090 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004074:	f7fd fc44 	bl	8001900 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d906      	bls.n	8004090 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e1ca      	b.n	800441c <HAL_RCC_OscConfig+0x610>
 8004086:	bf00      	nop
 8004088:	40021000 	.word	0x40021000
 800408c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004090:	4b8c      	ldr	r3, [pc, #560]	@ (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 8004092:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1ea      	bne.n	8004074 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0304 	and.w	r3, r3, #4
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 80a6 	beq.w	80041f8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ac:	2300      	movs	r3, #0
 80040ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040b0:	4b84      	ldr	r3, [pc, #528]	@ (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 80040b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_RCC_OscConfig+0x2b4>
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <HAL_RCC_OscConfig+0x2b6>
 80040c0:	2300      	movs	r3, #0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00d      	beq.n	80040e2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040c6:	4b7f      	ldr	r3, [pc, #508]	@ (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 80040c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ca:	4a7e      	ldr	r2, [pc, #504]	@ (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 80040cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80040d2:	4b7c      	ldr	r3, [pc, #496]	@ (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 80040d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80040de:	2301      	movs	r3, #1
 80040e0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040e2:	4b79      	ldr	r3, [pc, #484]	@ (80042c8 <HAL_RCC_OscConfig+0x4bc>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d118      	bne.n	8004120 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040ee:	4b76      	ldr	r3, [pc, #472]	@ (80042c8 <HAL_RCC_OscConfig+0x4bc>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a75      	ldr	r2, [pc, #468]	@ (80042c8 <HAL_RCC_OscConfig+0x4bc>)
 80040f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040fa:	f7fd fc01 	bl	8001900 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004102:	f7fd fbfd 	bl	8001900 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e183      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004114:	4b6c      	ldr	r3, [pc, #432]	@ (80042c8 <HAL_RCC_OscConfig+0x4bc>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0f0      	beq.n	8004102 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d108      	bne.n	800413a <HAL_RCC_OscConfig+0x32e>
 8004128:	4b66      	ldr	r3, [pc, #408]	@ (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 800412a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800412e:	4a65      	ldr	r2, [pc, #404]	@ (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 8004130:	f043 0301 	orr.w	r3, r3, #1
 8004134:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004138:	e024      	b.n	8004184 <HAL_RCC_OscConfig+0x378>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	2b05      	cmp	r3, #5
 8004140:	d110      	bne.n	8004164 <HAL_RCC_OscConfig+0x358>
 8004142:	4b60      	ldr	r3, [pc, #384]	@ (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 8004144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004148:	4a5e      	ldr	r2, [pc, #376]	@ (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 800414a:	f043 0304 	orr.w	r3, r3, #4
 800414e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004152:	4b5c      	ldr	r3, [pc, #368]	@ (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 8004154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004158:	4a5a      	ldr	r2, [pc, #360]	@ (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 800415a:	f043 0301 	orr.w	r3, r3, #1
 800415e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004162:	e00f      	b.n	8004184 <HAL_RCC_OscConfig+0x378>
 8004164:	4b57      	ldr	r3, [pc, #348]	@ (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800416a:	4a56      	ldr	r2, [pc, #344]	@ (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 800416c:	f023 0301 	bic.w	r3, r3, #1
 8004170:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004174:	4b53      	ldr	r3, [pc, #332]	@ (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 8004176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800417a:	4a52      	ldr	r2, [pc, #328]	@ (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 800417c:	f023 0304 	bic.w	r3, r3, #4
 8004180:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d016      	beq.n	80041ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800418c:	f7fd fbb8 	bl	8001900 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004192:	e00a      	b.n	80041aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004194:	f7fd fbb4 	bl	8001900 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e138      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041aa:	4b46      	ldr	r3, [pc, #280]	@ (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 80041ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0ed      	beq.n	8004194 <HAL_RCC_OscConfig+0x388>
 80041b8:	e015      	b.n	80041e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ba:	f7fd fba1 	bl	8001900 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041c0:	e00a      	b.n	80041d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c2:	f7fd fb9d 	bl	8001900 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e121      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041d8:	4b3a      	ldr	r3, [pc, #232]	@ (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1ed      	bne.n	80041c2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041e6:	7ffb      	ldrb	r3, [r7, #31]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d105      	bne.n	80041f8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041ec:	4b35      	ldr	r3, [pc, #212]	@ (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 80041ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f0:	4a34      	ldr	r2, [pc, #208]	@ (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 80041f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041f6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0320 	and.w	r3, r3, #32
 8004200:	2b00      	cmp	r3, #0
 8004202:	d03c      	beq.n	800427e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d01c      	beq.n	8004246 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800420c:	4b2d      	ldr	r3, [pc, #180]	@ (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 800420e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004212:	4a2c      	ldr	r2, [pc, #176]	@ (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 8004214:	f043 0301 	orr.w	r3, r3, #1
 8004218:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421c:	f7fd fb70 	bl	8001900 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004224:	f7fd fb6c 	bl	8001900 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e0f2      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004236:	4b23      	ldr	r3, [pc, #140]	@ (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 8004238:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0ef      	beq.n	8004224 <HAL_RCC_OscConfig+0x418>
 8004244:	e01b      	b.n	800427e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004246:	4b1f      	ldr	r3, [pc, #124]	@ (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 8004248:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800424c:	4a1d      	ldr	r2, [pc, #116]	@ (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 800424e:	f023 0301 	bic.w	r3, r3, #1
 8004252:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004256:	f7fd fb53 	bl	8001900 <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800425c:	e008      	b.n	8004270 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800425e:	f7fd fb4f 	bl	8001900 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e0d5      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004270:	4b14      	ldr	r3, [pc, #80]	@ (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 8004272:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1ef      	bne.n	800425e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 80c9 	beq.w	800441a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004288:	4b0e      	ldr	r3, [pc, #56]	@ (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 030c 	and.w	r3, r3, #12
 8004290:	2b0c      	cmp	r3, #12
 8004292:	f000 8083 	beq.w	800439c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	2b02      	cmp	r3, #2
 800429c:	d15e      	bne.n	800435c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800429e:	4b09      	ldr	r3, [pc, #36]	@ (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a08      	ldr	r2, [pc, #32]	@ (80042c4 <HAL_RCC_OscConfig+0x4b8>)
 80042a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042aa:	f7fd fb29 	bl	8001900 <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042b0:	e00c      	b.n	80042cc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b2:	f7fd fb25 	bl	8001900 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d905      	bls.n	80042cc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e0ab      	b.n	800441c <HAL_RCC_OscConfig+0x610>
 80042c4:	40021000 	.word	0x40021000
 80042c8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042cc:	4b55      	ldr	r3, [pc, #340]	@ (8004424 <HAL_RCC_OscConfig+0x618>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1ec      	bne.n	80042b2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042d8:	4b52      	ldr	r3, [pc, #328]	@ (8004424 <HAL_RCC_OscConfig+0x618>)
 80042da:	68da      	ldr	r2, [r3, #12]
 80042dc:	4b52      	ldr	r3, [pc, #328]	@ (8004428 <HAL_RCC_OscConfig+0x61c>)
 80042de:	4013      	ands	r3, r2
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6a11      	ldr	r1, [r2, #32]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042e8:	3a01      	subs	r2, #1
 80042ea:	0112      	lsls	r2, r2, #4
 80042ec:	4311      	orrs	r1, r2
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80042f2:	0212      	lsls	r2, r2, #8
 80042f4:	4311      	orrs	r1, r2
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80042fa:	0852      	lsrs	r2, r2, #1
 80042fc:	3a01      	subs	r2, #1
 80042fe:	0552      	lsls	r2, r2, #21
 8004300:	4311      	orrs	r1, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004306:	0852      	lsrs	r2, r2, #1
 8004308:	3a01      	subs	r2, #1
 800430a:	0652      	lsls	r2, r2, #25
 800430c:	4311      	orrs	r1, r2
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004312:	06d2      	lsls	r2, r2, #27
 8004314:	430a      	orrs	r2, r1
 8004316:	4943      	ldr	r1, [pc, #268]	@ (8004424 <HAL_RCC_OscConfig+0x618>)
 8004318:	4313      	orrs	r3, r2
 800431a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800431c:	4b41      	ldr	r3, [pc, #260]	@ (8004424 <HAL_RCC_OscConfig+0x618>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a40      	ldr	r2, [pc, #256]	@ (8004424 <HAL_RCC_OscConfig+0x618>)
 8004322:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004326:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004328:	4b3e      	ldr	r3, [pc, #248]	@ (8004424 <HAL_RCC_OscConfig+0x618>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	4a3d      	ldr	r2, [pc, #244]	@ (8004424 <HAL_RCC_OscConfig+0x618>)
 800432e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004332:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004334:	f7fd fae4 	bl	8001900 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800433c:	f7fd fae0 	bl	8001900 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e066      	b.n	800441c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800434e:	4b35      	ldr	r3, [pc, #212]	@ (8004424 <HAL_RCC_OscConfig+0x618>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0f0      	beq.n	800433c <HAL_RCC_OscConfig+0x530>
 800435a:	e05e      	b.n	800441a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435c:	4b31      	ldr	r3, [pc, #196]	@ (8004424 <HAL_RCC_OscConfig+0x618>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a30      	ldr	r2, [pc, #192]	@ (8004424 <HAL_RCC_OscConfig+0x618>)
 8004362:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004368:	f7fd faca 	bl	8001900 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004370:	f7fd fac6 	bl	8001900 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e04c      	b.n	800441c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004382:	4b28      	ldr	r3, [pc, #160]	@ (8004424 <HAL_RCC_OscConfig+0x618>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800438e:	4b25      	ldr	r3, [pc, #148]	@ (8004424 <HAL_RCC_OscConfig+0x618>)
 8004390:	68da      	ldr	r2, [r3, #12]
 8004392:	4924      	ldr	r1, [pc, #144]	@ (8004424 <HAL_RCC_OscConfig+0x618>)
 8004394:	4b25      	ldr	r3, [pc, #148]	@ (800442c <HAL_RCC_OscConfig+0x620>)
 8004396:	4013      	ands	r3, r2
 8004398:	60cb      	str	r3, [r1, #12]
 800439a:	e03e      	b.n	800441a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e039      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80043a8:	4b1e      	ldr	r3, [pc, #120]	@ (8004424 <HAL_RCC_OscConfig+0x618>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f003 0203 	and.w	r2, r3, #3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d12c      	bne.n	8004416 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c6:	3b01      	subs	r3, #1
 80043c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d123      	bne.n	8004416 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043da:	429a      	cmp	r2, r3
 80043dc:	d11b      	bne.n	8004416 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d113      	bne.n	8004416 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f8:	085b      	lsrs	r3, r3, #1
 80043fa:	3b01      	subs	r3, #1
 80043fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043fe:	429a      	cmp	r2, r3
 8004400:	d109      	bne.n	8004416 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800440c:	085b      	lsrs	r3, r3, #1
 800440e:	3b01      	subs	r3, #1
 8004410:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004412:	429a      	cmp	r2, r3
 8004414:	d001      	beq.n	800441a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3720      	adds	r7, #32
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40021000 	.word	0x40021000
 8004428:	019f800c 	.word	0x019f800c
 800442c:	feeefffc 	.word	0xfeeefffc

08004430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800443a:	2300      	movs	r3, #0
 800443c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e11e      	b.n	8004686 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004448:	4b91      	ldr	r3, [pc, #580]	@ (8004690 <HAL_RCC_ClockConfig+0x260>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d910      	bls.n	8004478 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004456:	4b8e      	ldr	r3, [pc, #568]	@ (8004690 <HAL_RCC_ClockConfig+0x260>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f023 020f 	bic.w	r2, r3, #15
 800445e:	498c      	ldr	r1, [pc, #560]	@ (8004690 <HAL_RCC_ClockConfig+0x260>)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	4313      	orrs	r3, r2
 8004464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004466:	4b8a      	ldr	r3, [pc, #552]	@ (8004690 <HAL_RCC_ClockConfig+0x260>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d001      	beq.n	8004478 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e106      	b.n	8004686 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	d073      	beq.n	800456c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	2b03      	cmp	r3, #3
 800448a:	d129      	bne.n	80044e0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800448c:	4b81      	ldr	r3, [pc, #516]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e0f4      	b.n	8004686 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800449c:	f000 f99e 	bl	80047dc <RCC_GetSysClockFreqFromPLLSource>
 80044a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	4a7c      	ldr	r2, [pc, #496]	@ (8004698 <HAL_RCC_ClockConfig+0x268>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d93f      	bls.n	800452a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044aa:	4b7a      	ldr	r3, [pc, #488]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d009      	beq.n	80044ca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d033      	beq.n	800452a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d12f      	bne.n	800452a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80044ca:	4b72      	ldr	r3, [pc, #456]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044d2:	4a70      	ldr	r2, [pc, #448]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 80044d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80044da:	2380      	movs	r3, #128	@ 0x80
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	e024      	b.n	800452a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d107      	bne.n	80044f8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044e8:	4b6a      	ldr	r3, [pc, #424]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d109      	bne.n	8004508 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e0c6      	b.n	8004686 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044f8:	4b66      	ldr	r3, [pc, #408]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e0be      	b.n	8004686 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004508:	f000 f8ce 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 800450c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	4a61      	ldr	r2, [pc, #388]	@ (8004698 <HAL_RCC_ClockConfig+0x268>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d909      	bls.n	800452a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004516:	4b5f      	ldr	r3, [pc, #380]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800451e:	4a5d      	ldr	r2, [pc, #372]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004520:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004524:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004526:	2380      	movs	r3, #128	@ 0x80
 8004528:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800452a:	4b5a      	ldr	r3, [pc, #360]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f023 0203 	bic.w	r2, r3, #3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	4957      	ldr	r1, [pc, #348]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004538:	4313      	orrs	r3, r2
 800453a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800453c:	f7fd f9e0 	bl	8001900 <HAL_GetTick>
 8004540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004542:	e00a      	b.n	800455a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004544:	f7fd f9dc 	bl	8001900 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004552:	4293      	cmp	r3, r2
 8004554:	d901      	bls.n	800455a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e095      	b.n	8004686 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800455a:	4b4e      	ldr	r3, [pc, #312]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 020c 	and.w	r2, r3, #12
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	429a      	cmp	r2, r3
 800456a:	d1eb      	bne.n	8004544 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d023      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d005      	beq.n	8004590 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004584:	4b43      	ldr	r3, [pc, #268]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	4a42      	ldr	r2, [pc, #264]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 800458a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800458e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b00      	cmp	r3, #0
 800459a:	d007      	beq.n	80045ac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800459c:	4b3d      	ldr	r3, [pc, #244]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80045a4:	4a3b      	ldr	r2, [pc, #236]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 80045a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80045aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045ac:	4b39      	ldr	r3, [pc, #228]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	4936      	ldr	r1, [pc, #216]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	608b      	str	r3, [r1, #8]
 80045be:	e008      	b.n	80045d2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2b80      	cmp	r3, #128	@ 0x80
 80045c4:	d105      	bne.n	80045d2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80045c6:	4b33      	ldr	r3, [pc, #204]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	4a32      	ldr	r2, [pc, #200]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 80045cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045d0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045d2:	4b2f      	ldr	r3, [pc, #188]	@ (8004690 <HAL_RCC_ClockConfig+0x260>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d21d      	bcs.n	800461c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004690 <HAL_RCC_ClockConfig+0x260>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f023 020f 	bic.w	r2, r3, #15
 80045e8:	4929      	ldr	r1, [pc, #164]	@ (8004690 <HAL_RCC_ClockConfig+0x260>)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80045f0:	f7fd f986 	bl	8001900 <HAL_GetTick>
 80045f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f6:	e00a      	b.n	800460e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045f8:	f7fd f982 	bl	8001900 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004606:	4293      	cmp	r3, r2
 8004608:	d901      	bls.n	800460e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e03b      	b.n	8004686 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800460e:	4b20      	ldr	r3, [pc, #128]	@ (8004690 <HAL_RCC_ClockConfig+0x260>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	429a      	cmp	r2, r3
 800461a:	d1ed      	bne.n	80045f8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b00      	cmp	r3, #0
 8004626:	d008      	beq.n	800463a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004628:	4b1a      	ldr	r3, [pc, #104]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	4917      	ldr	r1, [pc, #92]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004636:	4313      	orrs	r3, r2
 8004638:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b00      	cmp	r3, #0
 8004644:	d009      	beq.n	800465a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004646:	4b13      	ldr	r3, [pc, #76]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	490f      	ldr	r1, [pc, #60]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004656:	4313      	orrs	r3, r2
 8004658:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800465a:	f000 f825 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 800465e:	4602      	mov	r2, r0
 8004660:	4b0c      	ldr	r3, [pc, #48]	@ (8004694 <HAL_RCC_ClockConfig+0x264>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	091b      	lsrs	r3, r3, #4
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	490c      	ldr	r1, [pc, #48]	@ (800469c <HAL_RCC_ClockConfig+0x26c>)
 800466c:	5ccb      	ldrb	r3, [r1, r3]
 800466e:	f003 031f 	and.w	r3, r3, #31
 8004672:	fa22 f303 	lsr.w	r3, r2, r3
 8004676:	4a0a      	ldr	r2, [pc, #40]	@ (80046a0 <HAL_RCC_ClockConfig+0x270>)
 8004678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800467a:	4b0a      	ldr	r3, [pc, #40]	@ (80046a4 <HAL_RCC_ClockConfig+0x274>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f7fd f8f2 	bl	8001868 <HAL_InitTick>
 8004684:	4603      	mov	r3, r0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	40022000 	.word	0x40022000
 8004694:	40021000 	.word	0x40021000
 8004698:	04c4b400 	.word	0x04c4b400
 800469c:	0800763c 	.word	0x0800763c
 80046a0:	20000000 	.word	0x20000000
 80046a4:	20000004 	.word	0x20000004

080046a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b087      	sub	sp, #28
 80046ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80046ae:	4b2c      	ldr	r3, [pc, #176]	@ (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 030c 	and.w	r3, r3, #12
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d102      	bne.n	80046c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004764 <HAL_RCC_GetSysClockFreq+0xbc>)
 80046bc:	613b      	str	r3, [r7, #16]
 80046be:	e047      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80046c0:	4b27      	ldr	r3, [pc, #156]	@ (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 030c 	and.w	r3, r3, #12
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d102      	bne.n	80046d2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046cc:	4b26      	ldr	r3, [pc, #152]	@ (8004768 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046ce:	613b      	str	r3, [r7, #16]
 80046d0:	e03e      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80046d2:	4b23      	ldr	r3, [pc, #140]	@ (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 030c 	and.w	r3, r3, #12
 80046da:	2b0c      	cmp	r3, #12
 80046dc:	d136      	bne.n	800474c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046de:	4b20      	ldr	r3, [pc, #128]	@ (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80046e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	091b      	lsrs	r3, r3, #4
 80046ee:	f003 030f 	and.w	r3, r3, #15
 80046f2:	3301      	adds	r3, #1
 80046f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2b03      	cmp	r3, #3
 80046fa:	d10c      	bne.n	8004716 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046fc:	4a1a      	ldr	r2, [pc, #104]	@ (8004768 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	fbb2 f3f3 	udiv	r3, r2, r3
 8004704:	4a16      	ldr	r2, [pc, #88]	@ (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004706:	68d2      	ldr	r2, [r2, #12]
 8004708:	0a12      	lsrs	r2, r2, #8
 800470a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800470e:	fb02 f303 	mul.w	r3, r2, r3
 8004712:	617b      	str	r3, [r7, #20]
      break;
 8004714:	e00c      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004716:	4a13      	ldr	r2, [pc, #76]	@ (8004764 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	fbb2 f3f3 	udiv	r3, r2, r3
 800471e:	4a10      	ldr	r2, [pc, #64]	@ (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004720:	68d2      	ldr	r2, [r2, #12]
 8004722:	0a12      	lsrs	r2, r2, #8
 8004724:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004728:	fb02 f303 	mul.w	r3, r2, r3
 800472c:	617b      	str	r3, [r7, #20]
      break;
 800472e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004730:	4b0b      	ldr	r3, [pc, #44]	@ (8004760 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	0e5b      	lsrs	r3, r3, #25
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	3301      	adds	r3, #1
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	fbb2 f3f3 	udiv	r3, r2, r3
 8004748:	613b      	str	r3, [r7, #16]
 800474a:	e001      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004750:	693b      	ldr	r3, [r7, #16]
}
 8004752:	4618      	mov	r0, r3
 8004754:	371c      	adds	r7, #28
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	40021000 	.word	0x40021000
 8004764:	00f42400 	.word	0x00f42400
 8004768:	016e3600 	.word	0x016e3600

0800476c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004770:	4b03      	ldr	r3, [pc, #12]	@ (8004780 <HAL_RCC_GetHCLKFreq+0x14>)
 8004772:	681b      	ldr	r3, [r3, #0]
}
 8004774:	4618      	mov	r0, r3
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	20000000 	.word	0x20000000

08004784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004788:	f7ff fff0 	bl	800476c <HAL_RCC_GetHCLKFreq>
 800478c:	4602      	mov	r2, r0
 800478e:	4b06      	ldr	r3, [pc, #24]	@ (80047a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	0a1b      	lsrs	r3, r3, #8
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	4904      	ldr	r1, [pc, #16]	@ (80047ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800479a:	5ccb      	ldrb	r3, [r1, r3]
 800479c:	f003 031f 	and.w	r3, r3, #31
 80047a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40021000 	.word	0x40021000
 80047ac:	0800764c 	.word	0x0800764c

080047b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047b4:	f7ff ffda 	bl	800476c <HAL_RCC_GetHCLKFreq>
 80047b8:	4602      	mov	r2, r0
 80047ba:	4b06      	ldr	r3, [pc, #24]	@ (80047d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	0adb      	lsrs	r3, r3, #11
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	4904      	ldr	r1, [pc, #16]	@ (80047d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047c6:	5ccb      	ldrb	r3, [r1, r3]
 80047c8:	f003 031f 	and.w	r3, r3, #31
 80047cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40021000 	.word	0x40021000
 80047d8:	0800764c 	.word	0x0800764c

080047dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047e2:	4b1e      	ldr	r3, [pc, #120]	@ (800485c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047ec:	4b1b      	ldr	r3, [pc, #108]	@ (800485c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	091b      	lsrs	r3, r3, #4
 80047f2:	f003 030f 	and.w	r3, r3, #15
 80047f6:	3301      	adds	r3, #1
 80047f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2b03      	cmp	r3, #3
 80047fe:	d10c      	bne.n	800481a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004800:	4a17      	ldr	r2, [pc, #92]	@ (8004860 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	fbb2 f3f3 	udiv	r3, r2, r3
 8004808:	4a14      	ldr	r2, [pc, #80]	@ (800485c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800480a:	68d2      	ldr	r2, [r2, #12]
 800480c:	0a12      	lsrs	r2, r2, #8
 800480e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004812:	fb02 f303 	mul.w	r3, r2, r3
 8004816:	617b      	str	r3, [r7, #20]
    break;
 8004818:	e00c      	b.n	8004834 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800481a:	4a12      	ldr	r2, [pc, #72]	@ (8004864 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004822:	4a0e      	ldr	r2, [pc, #56]	@ (800485c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004824:	68d2      	ldr	r2, [r2, #12]
 8004826:	0a12      	lsrs	r2, r2, #8
 8004828:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800482c:	fb02 f303 	mul.w	r3, r2, r3
 8004830:	617b      	str	r3, [r7, #20]
    break;
 8004832:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004834:	4b09      	ldr	r3, [pc, #36]	@ (800485c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	0e5b      	lsrs	r3, r3, #25
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	3301      	adds	r3, #1
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	fbb2 f3f3 	udiv	r3, r2, r3
 800484c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800484e:	687b      	ldr	r3, [r7, #4]
}
 8004850:	4618      	mov	r0, r3
 8004852:	371c      	adds	r7, #28
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	40021000 	.word	0x40021000
 8004860:	016e3600 	.word	0x016e3600
 8004864:	00f42400 	.word	0x00f42400

08004868 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004870:	2300      	movs	r3, #0
 8004872:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004874:	2300      	movs	r3, #0
 8004876:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 8098 	beq.w	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004886:	2300      	movs	r3, #0
 8004888:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800488a:	4b43      	ldr	r3, [pc, #268]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800488c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800488e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10d      	bne.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004896:	4b40      	ldr	r3, [pc, #256]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800489a:	4a3f      	ldr	r2, [pc, #252]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800489c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80048a2:	4b3d      	ldr	r3, [pc, #244]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048aa:	60bb      	str	r3, [r7, #8]
 80048ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ae:	2301      	movs	r3, #1
 80048b0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048b2:	4b3a      	ldr	r3, [pc, #232]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a39      	ldr	r2, [pc, #228]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048be:	f7fd f81f 	bl	8001900 <HAL_GetTick>
 80048c2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048c4:	e009      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048c6:	f7fd f81b 	bl	8001900 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d902      	bls.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	74fb      	strb	r3, [r7, #19]
        break;
 80048d8:	e005      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048da:	4b30      	ldr	r3, [pc, #192]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0ef      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80048e6:	7cfb      	ldrb	r3, [r7, #19]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d159      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048ec:	4b2a      	ldr	r3, [pc, #168]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048f6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d01e      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	429a      	cmp	r2, r3
 8004906:	d019      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004908:	4b23      	ldr	r3, [pc, #140]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800490a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800490e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004912:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004914:	4b20      	ldr	r3, [pc, #128]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800491a:	4a1f      	ldr	r2, [pc, #124]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800491c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004920:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004924:	4b1c      	ldr	r3, [pc, #112]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800492a:	4a1b      	ldr	r2, [pc, #108]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800492c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004930:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004934:	4a18      	ldr	r2, [pc, #96]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d016      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004946:	f7fc ffdb 	bl	8001900 <HAL_GetTick>
 800494a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800494c:	e00b      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800494e:	f7fc ffd7 	bl	8001900 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	f241 3288 	movw	r2, #5000	@ 0x1388
 800495c:	4293      	cmp	r3, r2
 800495e:	d902      	bls.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	74fb      	strb	r3, [r7, #19]
            break;
 8004964:	e006      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004966:	4b0c      	ldr	r3, [pc, #48]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0ec      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004974:	7cfb      	ldrb	r3, [r7, #19]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10b      	bne.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800497a:	4b07      	ldr	r3, [pc, #28]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800497c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004980:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004988:	4903      	ldr	r1, [pc, #12]	@ (8004998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800498a:	4313      	orrs	r3, r2
 800498c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004990:	e008      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004992:	7cfb      	ldrb	r3, [r7, #19]
 8004994:	74bb      	strb	r3, [r7, #18]
 8004996:	e005      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004998:	40021000 	.word	0x40021000
 800499c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a0:	7cfb      	ldrb	r3, [r7, #19]
 80049a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049a4:	7c7b      	ldrb	r3, [r7, #17]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d105      	bne.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049aa:	4ba7      	ldr	r3, [pc, #668]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ae:	4aa6      	ldr	r2, [pc, #664]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049b4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049c2:	4ba1      	ldr	r3, [pc, #644]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c8:	f023 0203 	bic.w	r2, r3, #3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	499d      	ldr	r1, [pc, #628]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00a      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049e4:	4b98      	ldr	r3, [pc, #608]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ea:	f023 020c 	bic.w	r2, r3, #12
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	4995      	ldr	r1, [pc, #596]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0304 	and.w	r3, r3, #4
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a06:	4b90      	ldr	r3, [pc, #576]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a0c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	498c      	ldr	r1, [pc, #560]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0308 	and.w	r3, r3, #8
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a28:	4b87      	ldr	r3, [pc, #540]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a2e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	4984      	ldr	r1, [pc, #528]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0310 	and.w	r3, r3, #16
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a4a:	4b7f      	ldr	r3, [pc, #508]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	497b      	ldr	r1, [pc, #492]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0320 	and.w	r3, r3, #32
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00a      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a6c:	4b76      	ldr	r3, [pc, #472]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a72:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	4973      	ldr	r1, [pc, #460]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a8e:	4b6e      	ldr	r3, [pc, #440]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a94:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	496a      	ldr	r1, [pc, #424]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00a      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ab0:	4b65      	ldr	r3, [pc, #404]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	4962      	ldr	r1, [pc, #392]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ad2:	4b5d      	ldr	r3, [pc, #372]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae0:	4959      	ldr	r1, [pc, #356]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00a      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004af4:	4b54      	ldr	r3, [pc, #336]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004afa:	f023 0203 	bic.w	r2, r3, #3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b02:	4951      	ldr	r1, [pc, #324]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b16:	4b4c      	ldr	r3, [pc, #304]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b1c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b24:	4948      	ldr	r1, [pc, #288]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d015      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b38:	4b43      	ldr	r3, [pc, #268]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b46:	4940      	ldr	r1, [pc, #256]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b56:	d105      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b58:	4b3b      	ldr	r3, [pc, #236]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	4a3a      	ldr	r2, [pc, #232]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b62:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d015      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b70:	4b35      	ldr	r3, [pc, #212]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b76:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b7e:	4932      	ldr	r1, [pc, #200]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b8e:	d105      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b90:	4b2d      	ldr	r3, [pc, #180]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	4a2c      	ldr	r2, [pc, #176]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b9a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d015      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ba8:	4b27      	ldr	r3, [pc, #156]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb6:	4924      	ldr	r1, [pc, #144]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bc6:	d105      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	4a1e      	ldr	r2, [pc, #120]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bd2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d015      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004be0:	4b19      	ldr	r3, [pc, #100]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bee:	4916      	ldr	r1, [pc, #88]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bfe:	d105      	bne.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c00:	4b11      	ldr	r3, [pc, #68]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	4a10      	ldr	r2, [pc, #64]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c0a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d019      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c18:	4b0b      	ldr	r3, [pc, #44]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c1e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c26:	4908      	ldr	r1, [pc, #32]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c36:	d109      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c38:	4b03      	ldr	r3, [pc, #12]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	4a02      	ldr	r2, [pc, #8]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c42:	60d3      	str	r3, [r2, #12]
 8004c44:	e002      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004c46:	bf00      	nop
 8004c48:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d015      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c58:	4b29      	ldr	r3, [pc, #164]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c5e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c66:	4926      	ldr	r1, [pc, #152]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c76:	d105      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c78:	4b21      	ldr	r3, [pc, #132]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	4a20      	ldr	r2, [pc, #128]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c82:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d015      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004c90:	4b1b      	ldr	r3, [pc, #108]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c96:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c9e:	4918      	ldr	r1, [pc, #96]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cae:	d105      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004cb0:	4b13      	ldr	r3, [pc, #76]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	4a12      	ldr	r2, [pc, #72]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cba:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d015      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cd6:	490a      	ldr	r1, [pc, #40]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ce2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ce6:	d105      	bne.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ce8:	4b05      	ldr	r3, [pc, #20]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	4a04      	ldr	r2, [pc, #16]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cf2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004cf4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	40021000 	.word	0x40021000

08004d04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e049      	b.n	8004daa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d106      	bne.n	8004d30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7fc fc9a 	bl	8001664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2202      	movs	r2, #2
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	3304      	adds	r3, #4
 8004d40:	4619      	mov	r1, r3
 8004d42:	4610      	mov	r0, r2
 8004d44:	f000 fc44 	bl	80055d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
	...

08004db4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d001      	beq.n	8004dcc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e04c      	b.n	8004e66 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a26      	ldr	r2, [pc, #152]	@ (8004e74 <HAL_TIM_Base_Start+0xc0>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d022      	beq.n	8004e24 <HAL_TIM_Base_Start+0x70>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004de6:	d01d      	beq.n	8004e24 <HAL_TIM_Base_Start+0x70>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a22      	ldr	r2, [pc, #136]	@ (8004e78 <HAL_TIM_Base_Start+0xc4>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d018      	beq.n	8004e24 <HAL_TIM_Base_Start+0x70>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a21      	ldr	r2, [pc, #132]	@ (8004e7c <HAL_TIM_Base_Start+0xc8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d013      	beq.n	8004e24 <HAL_TIM_Base_Start+0x70>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a1f      	ldr	r2, [pc, #124]	@ (8004e80 <HAL_TIM_Base_Start+0xcc>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00e      	beq.n	8004e24 <HAL_TIM_Base_Start+0x70>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a1e      	ldr	r2, [pc, #120]	@ (8004e84 <HAL_TIM_Base_Start+0xd0>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d009      	beq.n	8004e24 <HAL_TIM_Base_Start+0x70>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a1c      	ldr	r2, [pc, #112]	@ (8004e88 <HAL_TIM_Base_Start+0xd4>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d004      	beq.n	8004e24 <HAL_TIM_Base_Start+0x70>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a1b      	ldr	r2, [pc, #108]	@ (8004e8c <HAL_TIM_Base_Start+0xd8>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d115      	bne.n	8004e50 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689a      	ldr	r2, [r3, #8]
 8004e2a:	4b19      	ldr	r3, [pc, #100]	@ (8004e90 <HAL_TIM_Base_Start+0xdc>)
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b06      	cmp	r3, #6
 8004e34:	d015      	beq.n	8004e62 <HAL_TIM_Base_Start+0xae>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e3c:	d011      	beq.n	8004e62 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f042 0201 	orr.w	r2, r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e4e:	e008      	b.n	8004e62 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0201 	orr.w	r2, r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	e000      	b.n	8004e64 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	40012c00 	.word	0x40012c00
 8004e78:	40000400 	.word	0x40000400
 8004e7c:	40000800 	.word	0x40000800
 8004e80:	40000c00 	.word	0x40000c00
 8004e84:	40013400 	.word	0x40013400
 8004e88:	40014000 	.word	0x40014000
 8004e8c:	40015000 	.word	0x40015000
 8004e90:	00010007 	.word	0x00010007

08004e94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e049      	b.n	8004f3a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f841 	bl	8004f42 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3304      	adds	r3, #4
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	f000 fb7c 	bl	80055d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b083      	sub	sp, #12
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f4a:	bf00      	nop
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
	...

08004f58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d109      	bne.n	8004f7c <HAL_TIM_PWM_Start+0x24>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	bf14      	ite	ne
 8004f74:	2301      	movne	r3, #1
 8004f76:	2300      	moveq	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	e03c      	b.n	8004ff6 <HAL_TIM_PWM_Start+0x9e>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d109      	bne.n	8004f96 <HAL_TIM_PWM_Start+0x3e>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	bf14      	ite	ne
 8004f8e:	2301      	movne	r3, #1
 8004f90:	2300      	moveq	r3, #0
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	e02f      	b.n	8004ff6 <HAL_TIM_PWM_Start+0x9e>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d109      	bne.n	8004fb0 <HAL_TIM_PWM_Start+0x58>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	bf14      	ite	ne
 8004fa8:	2301      	movne	r3, #1
 8004faa:	2300      	moveq	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	e022      	b.n	8004ff6 <HAL_TIM_PWM_Start+0x9e>
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	2b0c      	cmp	r3, #12
 8004fb4:	d109      	bne.n	8004fca <HAL_TIM_PWM_Start+0x72>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	bf14      	ite	ne
 8004fc2:	2301      	movne	r3, #1
 8004fc4:	2300      	moveq	r3, #0
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	e015      	b.n	8004ff6 <HAL_TIM_PWM_Start+0x9e>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b10      	cmp	r3, #16
 8004fce:	d109      	bne.n	8004fe4 <HAL_TIM_PWM_Start+0x8c>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	bf14      	ite	ne
 8004fdc:	2301      	movne	r3, #1
 8004fde:	2300      	moveq	r3, #0
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	e008      	b.n	8004ff6 <HAL_TIM_PWM_Start+0x9e>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	bf14      	ite	ne
 8004ff0:	2301      	movne	r3, #1
 8004ff2:	2300      	moveq	r3, #0
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e0a6      	b.n	800514c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d104      	bne.n	800500e <HAL_TIM_PWM_Start+0xb6>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2202      	movs	r2, #2
 8005008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800500c:	e023      	b.n	8005056 <HAL_TIM_PWM_Start+0xfe>
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2b04      	cmp	r3, #4
 8005012:	d104      	bne.n	800501e <HAL_TIM_PWM_Start+0xc6>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800501c:	e01b      	b.n	8005056 <HAL_TIM_PWM_Start+0xfe>
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2b08      	cmp	r3, #8
 8005022:	d104      	bne.n	800502e <HAL_TIM_PWM_Start+0xd6>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800502c:	e013      	b.n	8005056 <HAL_TIM_PWM_Start+0xfe>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b0c      	cmp	r3, #12
 8005032:	d104      	bne.n	800503e <HAL_TIM_PWM_Start+0xe6>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800503c:	e00b      	b.n	8005056 <HAL_TIM_PWM_Start+0xfe>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b10      	cmp	r3, #16
 8005042:	d104      	bne.n	800504e <HAL_TIM_PWM_Start+0xf6>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800504c:	e003      	b.n	8005056 <HAL_TIM_PWM_Start+0xfe>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2202      	movs	r2, #2
 8005052:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2201      	movs	r2, #1
 800505c:	6839      	ldr	r1, [r7, #0]
 800505e:	4618      	mov	r0, r3
 8005060:	f000 ff30 	bl	8005ec4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a3a      	ldr	r2, [pc, #232]	@ (8005154 <HAL_TIM_PWM_Start+0x1fc>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d018      	beq.n	80050a0 <HAL_TIM_PWM_Start+0x148>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a39      	ldr	r2, [pc, #228]	@ (8005158 <HAL_TIM_PWM_Start+0x200>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d013      	beq.n	80050a0 <HAL_TIM_PWM_Start+0x148>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a37      	ldr	r2, [pc, #220]	@ (800515c <HAL_TIM_PWM_Start+0x204>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d00e      	beq.n	80050a0 <HAL_TIM_PWM_Start+0x148>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a36      	ldr	r2, [pc, #216]	@ (8005160 <HAL_TIM_PWM_Start+0x208>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d009      	beq.n	80050a0 <HAL_TIM_PWM_Start+0x148>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a34      	ldr	r2, [pc, #208]	@ (8005164 <HAL_TIM_PWM_Start+0x20c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d004      	beq.n	80050a0 <HAL_TIM_PWM_Start+0x148>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a33      	ldr	r2, [pc, #204]	@ (8005168 <HAL_TIM_PWM_Start+0x210>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d101      	bne.n	80050a4 <HAL_TIM_PWM_Start+0x14c>
 80050a0:	2301      	movs	r3, #1
 80050a2:	e000      	b.n	80050a6 <HAL_TIM_PWM_Start+0x14e>
 80050a4:	2300      	movs	r3, #0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d007      	beq.n	80050ba <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a25      	ldr	r2, [pc, #148]	@ (8005154 <HAL_TIM_PWM_Start+0x1fc>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d022      	beq.n	800510a <HAL_TIM_PWM_Start+0x1b2>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050cc:	d01d      	beq.n	800510a <HAL_TIM_PWM_Start+0x1b2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a26      	ldr	r2, [pc, #152]	@ (800516c <HAL_TIM_PWM_Start+0x214>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d018      	beq.n	800510a <HAL_TIM_PWM_Start+0x1b2>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a24      	ldr	r2, [pc, #144]	@ (8005170 <HAL_TIM_PWM_Start+0x218>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d013      	beq.n	800510a <HAL_TIM_PWM_Start+0x1b2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a23      	ldr	r2, [pc, #140]	@ (8005174 <HAL_TIM_PWM_Start+0x21c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d00e      	beq.n	800510a <HAL_TIM_PWM_Start+0x1b2>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a19      	ldr	r2, [pc, #100]	@ (8005158 <HAL_TIM_PWM_Start+0x200>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d009      	beq.n	800510a <HAL_TIM_PWM_Start+0x1b2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a18      	ldr	r2, [pc, #96]	@ (800515c <HAL_TIM_PWM_Start+0x204>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d004      	beq.n	800510a <HAL_TIM_PWM_Start+0x1b2>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a18      	ldr	r2, [pc, #96]	@ (8005168 <HAL_TIM_PWM_Start+0x210>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d115      	bne.n	8005136 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	4b19      	ldr	r3, [pc, #100]	@ (8005178 <HAL_TIM_PWM_Start+0x220>)
 8005112:	4013      	ands	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2b06      	cmp	r3, #6
 800511a:	d015      	beq.n	8005148 <HAL_TIM_PWM_Start+0x1f0>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005122:	d011      	beq.n	8005148 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f042 0201 	orr.w	r2, r2, #1
 8005132:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005134:	e008      	b.n	8005148 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f042 0201 	orr.w	r2, r2, #1
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	e000      	b.n	800514a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005148:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	40012c00 	.word	0x40012c00
 8005158:	40013400 	.word	0x40013400
 800515c:	40014000 	.word	0x40014000
 8005160:	40014400 	.word	0x40014400
 8005164:	40014800 	.word	0x40014800
 8005168:	40015000 	.word	0x40015000
 800516c:	40000400 	.word	0x40000400
 8005170:	40000800 	.word	0x40000800
 8005174:	40000c00 	.word	0x40000c00
 8005178:	00010007 	.word	0x00010007

0800517c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005188:	2300      	movs	r3, #0
 800518a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005192:	2b01      	cmp	r3, #1
 8005194:	d101      	bne.n	800519a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005196:	2302      	movs	r3, #2
 8005198:	e0ff      	b.n	800539a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b14      	cmp	r3, #20
 80051a6:	f200 80f0 	bhi.w	800538a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80051aa:	a201      	add	r2, pc, #4	@ (adr r2, 80051b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80051ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b0:	08005205 	.word	0x08005205
 80051b4:	0800538b 	.word	0x0800538b
 80051b8:	0800538b 	.word	0x0800538b
 80051bc:	0800538b 	.word	0x0800538b
 80051c0:	08005245 	.word	0x08005245
 80051c4:	0800538b 	.word	0x0800538b
 80051c8:	0800538b 	.word	0x0800538b
 80051cc:	0800538b 	.word	0x0800538b
 80051d0:	08005287 	.word	0x08005287
 80051d4:	0800538b 	.word	0x0800538b
 80051d8:	0800538b 	.word	0x0800538b
 80051dc:	0800538b 	.word	0x0800538b
 80051e0:	080052c7 	.word	0x080052c7
 80051e4:	0800538b 	.word	0x0800538b
 80051e8:	0800538b 	.word	0x0800538b
 80051ec:	0800538b 	.word	0x0800538b
 80051f0:	08005309 	.word	0x08005309
 80051f4:	0800538b 	.word	0x0800538b
 80051f8:	0800538b 	.word	0x0800538b
 80051fc:	0800538b 	.word	0x0800538b
 8005200:	08005349 	.word	0x08005349
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68b9      	ldr	r1, [r7, #8]
 800520a:	4618      	mov	r0, r3
 800520c:	f000 fa94 	bl	8005738 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699a      	ldr	r2, [r3, #24]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0208 	orr.w	r2, r2, #8
 800521e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699a      	ldr	r2, [r3, #24]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f022 0204 	bic.w	r2, r2, #4
 800522e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6999      	ldr	r1, [r3, #24]
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	691a      	ldr	r2, [r3, #16]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	430a      	orrs	r2, r1
 8005240:	619a      	str	r2, [r3, #24]
      break;
 8005242:	e0a5      	b.n	8005390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68b9      	ldr	r1, [r7, #8]
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fb0e 	bl	800586c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	699a      	ldr	r2, [r3, #24]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800525e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699a      	ldr	r2, [r3, #24]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800526e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	6999      	ldr	r1, [r3, #24]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	021a      	lsls	r2, r3, #8
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	619a      	str	r2, [r3, #24]
      break;
 8005284:	e084      	b.n	8005390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68b9      	ldr	r1, [r7, #8]
 800528c:	4618      	mov	r0, r3
 800528e:	f000 fb81 	bl	8005994 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	69da      	ldr	r2, [r3, #28]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f042 0208 	orr.w	r2, r2, #8
 80052a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	69da      	ldr	r2, [r3, #28]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 0204 	bic.w	r2, r2, #4
 80052b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	69d9      	ldr	r1, [r3, #28]
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	691a      	ldr	r2, [r3, #16]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	61da      	str	r2, [r3, #28]
      break;
 80052c4:	e064      	b.n	8005390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68b9      	ldr	r1, [r7, #8]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 fbf3 	bl	8005ab8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69da      	ldr	r2, [r3, #28]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69da      	ldr	r2, [r3, #28]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	69d9      	ldr	r1, [r3, #28]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	021a      	lsls	r2, r3, #8
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	61da      	str	r2, [r3, #28]
      break;
 8005306:	e043      	b.n	8005390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68b9      	ldr	r1, [r7, #8]
 800530e:	4618      	mov	r0, r3
 8005310:	f000 fc66 	bl	8005be0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f042 0208 	orr.w	r2, r2, #8
 8005322:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0204 	bic.w	r2, r2, #4
 8005332:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	691a      	ldr	r2, [r3, #16]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005346:	e023      	b.n	8005390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68b9      	ldr	r1, [r7, #8]
 800534e:	4618      	mov	r0, r3
 8005350:	f000 fcb0 	bl	8005cb4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005362:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005372:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	021a      	lsls	r2, r3, #8
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005388:	e002      	b.n	8005390 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	75fb      	strb	r3, [r7, #23]
      break;
 800538e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005398:	7dfb      	ldrb	r3, [r7, #23]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3718      	adds	r7, #24
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop

080053a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053ae:	2300      	movs	r3, #0
 80053b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d101      	bne.n	80053c0 <HAL_TIM_ConfigClockSource+0x1c>
 80053bc:	2302      	movs	r3, #2
 80053be:	e0f6      	b.n	80055ae <HAL_TIM_ConfigClockSource+0x20a>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80053de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80053e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a6f      	ldr	r2, [pc, #444]	@ (80055b8 <HAL_TIM_ConfigClockSource+0x214>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	f000 80c1 	beq.w	8005582 <HAL_TIM_ConfigClockSource+0x1de>
 8005400:	4a6d      	ldr	r2, [pc, #436]	@ (80055b8 <HAL_TIM_ConfigClockSource+0x214>)
 8005402:	4293      	cmp	r3, r2
 8005404:	f200 80c6 	bhi.w	8005594 <HAL_TIM_ConfigClockSource+0x1f0>
 8005408:	4a6c      	ldr	r2, [pc, #432]	@ (80055bc <HAL_TIM_ConfigClockSource+0x218>)
 800540a:	4293      	cmp	r3, r2
 800540c:	f000 80b9 	beq.w	8005582 <HAL_TIM_ConfigClockSource+0x1de>
 8005410:	4a6a      	ldr	r2, [pc, #424]	@ (80055bc <HAL_TIM_ConfigClockSource+0x218>)
 8005412:	4293      	cmp	r3, r2
 8005414:	f200 80be 	bhi.w	8005594 <HAL_TIM_ConfigClockSource+0x1f0>
 8005418:	4a69      	ldr	r2, [pc, #420]	@ (80055c0 <HAL_TIM_ConfigClockSource+0x21c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	f000 80b1 	beq.w	8005582 <HAL_TIM_ConfigClockSource+0x1de>
 8005420:	4a67      	ldr	r2, [pc, #412]	@ (80055c0 <HAL_TIM_ConfigClockSource+0x21c>)
 8005422:	4293      	cmp	r3, r2
 8005424:	f200 80b6 	bhi.w	8005594 <HAL_TIM_ConfigClockSource+0x1f0>
 8005428:	4a66      	ldr	r2, [pc, #408]	@ (80055c4 <HAL_TIM_ConfigClockSource+0x220>)
 800542a:	4293      	cmp	r3, r2
 800542c:	f000 80a9 	beq.w	8005582 <HAL_TIM_ConfigClockSource+0x1de>
 8005430:	4a64      	ldr	r2, [pc, #400]	@ (80055c4 <HAL_TIM_ConfigClockSource+0x220>)
 8005432:	4293      	cmp	r3, r2
 8005434:	f200 80ae 	bhi.w	8005594 <HAL_TIM_ConfigClockSource+0x1f0>
 8005438:	4a63      	ldr	r2, [pc, #396]	@ (80055c8 <HAL_TIM_ConfigClockSource+0x224>)
 800543a:	4293      	cmp	r3, r2
 800543c:	f000 80a1 	beq.w	8005582 <HAL_TIM_ConfigClockSource+0x1de>
 8005440:	4a61      	ldr	r2, [pc, #388]	@ (80055c8 <HAL_TIM_ConfigClockSource+0x224>)
 8005442:	4293      	cmp	r3, r2
 8005444:	f200 80a6 	bhi.w	8005594 <HAL_TIM_ConfigClockSource+0x1f0>
 8005448:	4a60      	ldr	r2, [pc, #384]	@ (80055cc <HAL_TIM_ConfigClockSource+0x228>)
 800544a:	4293      	cmp	r3, r2
 800544c:	f000 8099 	beq.w	8005582 <HAL_TIM_ConfigClockSource+0x1de>
 8005450:	4a5e      	ldr	r2, [pc, #376]	@ (80055cc <HAL_TIM_ConfigClockSource+0x228>)
 8005452:	4293      	cmp	r3, r2
 8005454:	f200 809e 	bhi.w	8005594 <HAL_TIM_ConfigClockSource+0x1f0>
 8005458:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800545c:	f000 8091 	beq.w	8005582 <HAL_TIM_ConfigClockSource+0x1de>
 8005460:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005464:	f200 8096 	bhi.w	8005594 <HAL_TIM_ConfigClockSource+0x1f0>
 8005468:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800546c:	f000 8089 	beq.w	8005582 <HAL_TIM_ConfigClockSource+0x1de>
 8005470:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005474:	f200 808e 	bhi.w	8005594 <HAL_TIM_ConfigClockSource+0x1f0>
 8005478:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800547c:	d03e      	beq.n	80054fc <HAL_TIM_ConfigClockSource+0x158>
 800547e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005482:	f200 8087 	bhi.w	8005594 <HAL_TIM_ConfigClockSource+0x1f0>
 8005486:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800548a:	f000 8086 	beq.w	800559a <HAL_TIM_ConfigClockSource+0x1f6>
 800548e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005492:	d87f      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x1f0>
 8005494:	2b70      	cmp	r3, #112	@ 0x70
 8005496:	d01a      	beq.n	80054ce <HAL_TIM_ConfigClockSource+0x12a>
 8005498:	2b70      	cmp	r3, #112	@ 0x70
 800549a:	d87b      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x1f0>
 800549c:	2b60      	cmp	r3, #96	@ 0x60
 800549e:	d050      	beq.n	8005542 <HAL_TIM_ConfigClockSource+0x19e>
 80054a0:	2b60      	cmp	r3, #96	@ 0x60
 80054a2:	d877      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x1f0>
 80054a4:	2b50      	cmp	r3, #80	@ 0x50
 80054a6:	d03c      	beq.n	8005522 <HAL_TIM_ConfigClockSource+0x17e>
 80054a8:	2b50      	cmp	r3, #80	@ 0x50
 80054aa:	d873      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x1f0>
 80054ac:	2b40      	cmp	r3, #64	@ 0x40
 80054ae:	d058      	beq.n	8005562 <HAL_TIM_ConfigClockSource+0x1be>
 80054b0:	2b40      	cmp	r3, #64	@ 0x40
 80054b2:	d86f      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x1f0>
 80054b4:	2b30      	cmp	r3, #48	@ 0x30
 80054b6:	d064      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x1de>
 80054b8:	2b30      	cmp	r3, #48	@ 0x30
 80054ba:	d86b      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x1f0>
 80054bc:	2b20      	cmp	r3, #32
 80054be:	d060      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x1de>
 80054c0:	2b20      	cmp	r3, #32
 80054c2:	d867      	bhi.n	8005594 <HAL_TIM_ConfigClockSource+0x1f0>
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d05c      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x1de>
 80054c8:	2b10      	cmp	r3, #16
 80054ca:	d05a      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x1de>
 80054cc:	e062      	b.n	8005594 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054de:	f000 fcd1 	bl	8005e84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80054f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	609a      	str	r2, [r3, #8]
      break;
 80054fa:	e04f      	b.n	800559c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800550c:	f000 fcba 	bl	8005e84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689a      	ldr	r2, [r3, #8]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800551e:	609a      	str	r2, [r3, #8]
      break;
 8005520:	e03c      	b.n	800559c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800552e:	461a      	mov	r2, r3
 8005530:	f000 fc2c 	bl	8005d8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2150      	movs	r1, #80	@ 0x50
 800553a:	4618      	mov	r0, r3
 800553c:	f000 fc85 	bl	8005e4a <TIM_ITRx_SetConfig>
      break;
 8005540:	e02c      	b.n	800559c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800554e:	461a      	mov	r2, r3
 8005550:	f000 fc4b 	bl	8005dea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2160      	movs	r1, #96	@ 0x60
 800555a:	4618      	mov	r0, r3
 800555c:	f000 fc75 	bl	8005e4a <TIM_ITRx_SetConfig>
      break;
 8005560:	e01c      	b.n	800559c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800556e:	461a      	mov	r2, r3
 8005570:	f000 fc0c 	bl	8005d8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2140      	movs	r1, #64	@ 0x40
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fc65 	bl	8005e4a <TIM_ITRx_SetConfig>
      break;
 8005580:	e00c      	b.n	800559c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4619      	mov	r1, r3
 800558c:	4610      	mov	r0, r2
 800558e:	f000 fc5c 	bl	8005e4a <TIM_ITRx_SetConfig>
      break;
 8005592:	e003      	b.n	800559c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	73fb      	strb	r3, [r7, #15]
      break;
 8005598:	e000      	b.n	800559c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800559a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	00100070 	.word	0x00100070
 80055bc:	00100060 	.word	0x00100060
 80055c0:	00100050 	.word	0x00100050
 80055c4:	00100040 	.word	0x00100040
 80055c8:	00100030 	.word	0x00100030
 80055cc:	00100020 	.word	0x00100020

080055d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a4c      	ldr	r2, [pc, #304]	@ (8005714 <TIM_Base_SetConfig+0x144>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d017      	beq.n	8005618 <TIM_Base_SetConfig+0x48>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055ee:	d013      	beq.n	8005618 <TIM_Base_SetConfig+0x48>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a49      	ldr	r2, [pc, #292]	@ (8005718 <TIM_Base_SetConfig+0x148>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d00f      	beq.n	8005618 <TIM_Base_SetConfig+0x48>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a48      	ldr	r2, [pc, #288]	@ (800571c <TIM_Base_SetConfig+0x14c>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d00b      	beq.n	8005618 <TIM_Base_SetConfig+0x48>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a47      	ldr	r2, [pc, #284]	@ (8005720 <TIM_Base_SetConfig+0x150>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d007      	beq.n	8005618 <TIM_Base_SetConfig+0x48>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a46      	ldr	r2, [pc, #280]	@ (8005724 <TIM_Base_SetConfig+0x154>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d003      	beq.n	8005618 <TIM_Base_SetConfig+0x48>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a45      	ldr	r2, [pc, #276]	@ (8005728 <TIM_Base_SetConfig+0x158>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d108      	bne.n	800562a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800561e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	4313      	orrs	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a39      	ldr	r2, [pc, #228]	@ (8005714 <TIM_Base_SetConfig+0x144>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d023      	beq.n	800567a <TIM_Base_SetConfig+0xaa>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005638:	d01f      	beq.n	800567a <TIM_Base_SetConfig+0xaa>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a36      	ldr	r2, [pc, #216]	@ (8005718 <TIM_Base_SetConfig+0x148>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d01b      	beq.n	800567a <TIM_Base_SetConfig+0xaa>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a35      	ldr	r2, [pc, #212]	@ (800571c <TIM_Base_SetConfig+0x14c>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d017      	beq.n	800567a <TIM_Base_SetConfig+0xaa>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a34      	ldr	r2, [pc, #208]	@ (8005720 <TIM_Base_SetConfig+0x150>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d013      	beq.n	800567a <TIM_Base_SetConfig+0xaa>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a33      	ldr	r2, [pc, #204]	@ (8005724 <TIM_Base_SetConfig+0x154>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d00f      	beq.n	800567a <TIM_Base_SetConfig+0xaa>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a33      	ldr	r2, [pc, #204]	@ (800572c <TIM_Base_SetConfig+0x15c>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d00b      	beq.n	800567a <TIM_Base_SetConfig+0xaa>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a32      	ldr	r2, [pc, #200]	@ (8005730 <TIM_Base_SetConfig+0x160>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d007      	beq.n	800567a <TIM_Base_SetConfig+0xaa>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a31      	ldr	r2, [pc, #196]	@ (8005734 <TIM_Base_SetConfig+0x164>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d003      	beq.n	800567a <TIM_Base_SetConfig+0xaa>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a2c      	ldr	r2, [pc, #176]	@ (8005728 <TIM_Base_SetConfig+0x158>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d108      	bne.n	800568c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	4313      	orrs	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	4313      	orrs	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	689a      	ldr	r2, [r3, #8]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a18      	ldr	r2, [pc, #96]	@ (8005714 <TIM_Base_SetConfig+0x144>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d013      	beq.n	80056e0 <TIM_Base_SetConfig+0x110>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a1a      	ldr	r2, [pc, #104]	@ (8005724 <TIM_Base_SetConfig+0x154>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d00f      	beq.n	80056e0 <TIM_Base_SetConfig+0x110>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a1a      	ldr	r2, [pc, #104]	@ (800572c <TIM_Base_SetConfig+0x15c>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d00b      	beq.n	80056e0 <TIM_Base_SetConfig+0x110>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a19      	ldr	r2, [pc, #100]	@ (8005730 <TIM_Base_SetConfig+0x160>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d007      	beq.n	80056e0 <TIM_Base_SetConfig+0x110>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a18      	ldr	r2, [pc, #96]	@ (8005734 <TIM_Base_SetConfig+0x164>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d003      	beq.n	80056e0 <TIM_Base_SetConfig+0x110>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a13      	ldr	r2, [pc, #76]	@ (8005728 <TIM_Base_SetConfig+0x158>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d103      	bne.n	80056e8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	691a      	ldr	r2, [r3, #16]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d105      	bne.n	8005706 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f023 0201 	bic.w	r2, r3, #1
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	611a      	str	r2, [r3, #16]
  }
}
 8005706:	bf00      	nop
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	40012c00 	.word	0x40012c00
 8005718:	40000400 	.word	0x40000400
 800571c:	40000800 	.word	0x40000800
 8005720:	40000c00 	.word	0x40000c00
 8005724:	40013400 	.word	0x40013400
 8005728:	40015000 	.word	0x40015000
 800572c:	40014000 	.word	0x40014000
 8005730:	40014400 	.word	0x40014400
 8005734:	40014800 	.word	0x40014800

08005738 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a1b      	ldr	r3, [r3, #32]
 800574c:	f023 0201 	bic.w	r2, r3, #1
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800576a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f023 0303 	bic.w	r3, r3, #3
 8005772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	4313      	orrs	r3, r2
 800577c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f023 0302 	bic.w	r3, r3, #2
 8005784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	4313      	orrs	r3, r2
 800578e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a30      	ldr	r2, [pc, #192]	@ (8005854 <TIM_OC1_SetConfig+0x11c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d013      	beq.n	80057c0 <TIM_OC1_SetConfig+0x88>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a2f      	ldr	r2, [pc, #188]	@ (8005858 <TIM_OC1_SetConfig+0x120>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d00f      	beq.n	80057c0 <TIM_OC1_SetConfig+0x88>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a2e      	ldr	r2, [pc, #184]	@ (800585c <TIM_OC1_SetConfig+0x124>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d00b      	beq.n	80057c0 <TIM_OC1_SetConfig+0x88>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a2d      	ldr	r2, [pc, #180]	@ (8005860 <TIM_OC1_SetConfig+0x128>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d007      	beq.n	80057c0 <TIM_OC1_SetConfig+0x88>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a2c      	ldr	r2, [pc, #176]	@ (8005864 <TIM_OC1_SetConfig+0x12c>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d003      	beq.n	80057c0 <TIM_OC1_SetConfig+0x88>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a2b      	ldr	r2, [pc, #172]	@ (8005868 <TIM_OC1_SetConfig+0x130>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d10c      	bne.n	80057da <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f023 0308 	bic.w	r3, r3, #8
 80057c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f023 0304 	bic.w	r3, r3, #4
 80057d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005854 <TIM_OC1_SetConfig+0x11c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d013      	beq.n	800580a <TIM_OC1_SetConfig+0xd2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a1c      	ldr	r2, [pc, #112]	@ (8005858 <TIM_OC1_SetConfig+0x120>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d00f      	beq.n	800580a <TIM_OC1_SetConfig+0xd2>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a1b      	ldr	r2, [pc, #108]	@ (800585c <TIM_OC1_SetConfig+0x124>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00b      	beq.n	800580a <TIM_OC1_SetConfig+0xd2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a1a      	ldr	r2, [pc, #104]	@ (8005860 <TIM_OC1_SetConfig+0x128>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d007      	beq.n	800580a <TIM_OC1_SetConfig+0xd2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a19      	ldr	r2, [pc, #100]	@ (8005864 <TIM_OC1_SetConfig+0x12c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d003      	beq.n	800580a <TIM_OC1_SetConfig+0xd2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a18      	ldr	r2, [pc, #96]	@ (8005868 <TIM_OC1_SetConfig+0x130>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d111      	bne.n	800582e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	4313      	orrs	r3, r2
 8005822:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	4313      	orrs	r3, r2
 800582c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	621a      	str	r2, [r3, #32]
}
 8005848:	bf00      	nop
 800584a:	371c      	adds	r7, #28
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	40012c00 	.word	0x40012c00
 8005858:	40013400 	.word	0x40013400
 800585c:	40014000 	.word	0x40014000
 8005860:	40014400 	.word	0x40014400
 8005864:	40014800 	.word	0x40014800
 8005868:	40015000 	.word	0x40015000

0800586c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	f023 0210 	bic.w	r2, r3, #16
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800589a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800589e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	021b      	lsls	r3, r3, #8
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f023 0320 	bic.w	r3, r3, #32
 80058ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	011b      	lsls	r3, r3, #4
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a2c      	ldr	r2, [pc, #176]	@ (800597c <TIM_OC2_SetConfig+0x110>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d007      	beq.n	80058e0 <TIM_OC2_SetConfig+0x74>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a2b      	ldr	r2, [pc, #172]	@ (8005980 <TIM_OC2_SetConfig+0x114>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d003      	beq.n	80058e0 <TIM_OC2_SetConfig+0x74>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a2a      	ldr	r2, [pc, #168]	@ (8005984 <TIM_OC2_SetConfig+0x118>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d10d      	bne.n	80058fc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	011b      	lsls	r3, r3, #4
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a1f      	ldr	r2, [pc, #124]	@ (800597c <TIM_OC2_SetConfig+0x110>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d013      	beq.n	800592c <TIM_OC2_SetConfig+0xc0>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a1e      	ldr	r2, [pc, #120]	@ (8005980 <TIM_OC2_SetConfig+0x114>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d00f      	beq.n	800592c <TIM_OC2_SetConfig+0xc0>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a1e      	ldr	r2, [pc, #120]	@ (8005988 <TIM_OC2_SetConfig+0x11c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d00b      	beq.n	800592c <TIM_OC2_SetConfig+0xc0>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a1d      	ldr	r2, [pc, #116]	@ (800598c <TIM_OC2_SetConfig+0x120>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d007      	beq.n	800592c <TIM_OC2_SetConfig+0xc0>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a1c      	ldr	r2, [pc, #112]	@ (8005990 <TIM_OC2_SetConfig+0x124>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d003      	beq.n	800592c <TIM_OC2_SetConfig+0xc0>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a17      	ldr	r2, [pc, #92]	@ (8005984 <TIM_OC2_SetConfig+0x118>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d113      	bne.n	8005954 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005932:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800593a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	4313      	orrs	r3, r2
 8005946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	621a      	str	r2, [r3, #32]
}
 800596e:	bf00      	nop
 8005970:	371c      	adds	r7, #28
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	40012c00 	.word	0x40012c00
 8005980:	40013400 	.word	0x40013400
 8005984:	40015000 	.word	0x40015000
 8005988:	40014000 	.word	0x40014000
 800598c:	40014400 	.word	0x40014400
 8005990:	40014800 	.word	0x40014800

08005994 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f023 0303 	bic.w	r3, r3, #3
 80059ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	021b      	lsls	r3, r3, #8
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a2b      	ldr	r2, [pc, #172]	@ (8005aa0 <TIM_OC3_SetConfig+0x10c>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d007      	beq.n	8005a06 <TIM_OC3_SetConfig+0x72>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a2a      	ldr	r2, [pc, #168]	@ (8005aa4 <TIM_OC3_SetConfig+0x110>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d003      	beq.n	8005a06 <TIM_OC3_SetConfig+0x72>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a29      	ldr	r2, [pc, #164]	@ (8005aa8 <TIM_OC3_SetConfig+0x114>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d10d      	bne.n	8005a22 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	021b      	lsls	r3, r3, #8
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a1e      	ldr	r2, [pc, #120]	@ (8005aa0 <TIM_OC3_SetConfig+0x10c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d013      	beq.n	8005a52 <TIM_OC3_SetConfig+0xbe>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8005aa4 <TIM_OC3_SetConfig+0x110>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d00f      	beq.n	8005a52 <TIM_OC3_SetConfig+0xbe>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a1d      	ldr	r2, [pc, #116]	@ (8005aac <TIM_OC3_SetConfig+0x118>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d00b      	beq.n	8005a52 <TIM_OC3_SetConfig+0xbe>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ab0 <TIM_OC3_SetConfig+0x11c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d007      	beq.n	8005a52 <TIM_OC3_SetConfig+0xbe>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a1b      	ldr	r2, [pc, #108]	@ (8005ab4 <TIM_OC3_SetConfig+0x120>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d003      	beq.n	8005a52 <TIM_OC3_SetConfig+0xbe>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a16      	ldr	r2, [pc, #88]	@ (8005aa8 <TIM_OC3_SetConfig+0x114>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d113      	bne.n	8005a7a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	011b      	lsls	r3, r3, #4
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	011b      	lsls	r3, r3, #4
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	697a      	ldr	r2, [r7, #20]
 8005a92:	621a      	str	r2, [r3, #32]
}
 8005a94:	bf00      	nop
 8005a96:	371c      	adds	r7, #28
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	40012c00 	.word	0x40012c00
 8005aa4:	40013400 	.word	0x40013400
 8005aa8:	40015000 	.word	0x40015000
 8005aac:	40014000 	.word	0x40014000
 8005ab0:	40014400 	.word	0x40014400
 8005ab4:	40014800 	.word	0x40014800

08005ab8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ae6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	021b      	lsls	r3, r3, #8
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	031b      	lsls	r3, r3, #12
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a2c      	ldr	r2, [pc, #176]	@ (8005bc8 <TIM_OC4_SetConfig+0x110>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d007      	beq.n	8005b2c <TIM_OC4_SetConfig+0x74>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a2b      	ldr	r2, [pc, #172]	@ (8005bcc <TIM_OC4_SetConfig+0x114>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d003      	beq.n	8005b2c <TIM_OC4_SetConfig+0x74>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a2a      	ldr	r2, [pc, #168]	@ (8005bd0 <TIM_OC4_SetConfig+0x118>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d10d      	bne.n	8005b48 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005b32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	031b      	lsls	r3, r3, #12
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a1f      	ldr	r2, [pc, #124]	@ (8005bc8 <TIM_OC4_SetConfig+0x110>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d013      	beq.n	8005b78 <TIM_OC4_SetConfig+0xc0>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a1e      	ldr	r2, [pc, #120]	@ (8005bcc <TIM_OC4_SetConfig+0x114>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d00f      	beq.n	8005b78 <TIM_OC4_SetConfig+0xc0>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a1e      	ldr	r2, [pc, #120]	@ (8005bd4 <TIM_OC4_SetConfig+0x11c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00b      	beq.n	8005b78 <TIM_OC4_SetConfig+0xc0>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a1d      	ldr	r2, [pc, #116]	@ (8005bd8 <TIM_OC4_SetConfig+0x120>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d007      	beq.n	8005b78 <TIM_OC4_SetConfig+0xc0>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a1c      	ldr	r2, [pc, #112]	@ (8005bdc <TIM_OC4_SetConfig+0x124>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d003      	beq.n	8005b78 <TIM_OC4_SetConfig+0xc0>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a17      	ldr	r2, [pc, #92]	@ (8005bd0 <TIM_OC4_SetConfig+0x118>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d113      	bne.n	8005ba0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b7e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005b86:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	019b      	lsls	r3, r3, #6
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	019b      	lsls	r3, r3, #6
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	621a      	str	r2, [r3, #32]
}
 8005bba:	bf00      	nop
 8005bbc:	371c      	adds	r7, #28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	40012c00 	.word	0x40012c00
 8005bcc:	40013400 	.word	0x40013400
 8005bd0:	40015000 	.word	0x40015000
 8005bd4:	40014000 	.word	0x40014000
 8005bd8:	40014400 	.word	0x40014400
 8005bdc:	40014800 	.word	0x40014800

08005be0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005c24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	041b      	lsls	r3, r3, #16
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a19      	ldr	r2, [pc, #100]	@ (8005c9c <TIM_OC5_SetConfig+0xbc>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d013      	beq.n	8005c62 <TIM_OC5_SetConfig+0x82>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a18      	ldr	r2, [pc, #96]	@ (8005ca0 <TIM_OC5_SetConfig+0xc0>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d00f      	beq.n	8005c62 <TIM_OC5_SetConfig+0x82>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a17      	ldr	r2, [pc, #92]	@ (8005ca4 <TIM_OC5_SetConfig+0xc4>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d00b      	beq.n	8005c62 <TIM_OC5_SetConfig+0x82>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a16      	ldr	r2, [pc, #88]	@ (8005ca8 <TIM_OC5_SetConfig+0xc8>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d007      	beq.n	8005c62 <TIM_OC5_SetConfig+0x82>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a15      	ldr	r2, [pc, #84]	@ (8005cac <TIM_OC5_SetConfig+0xcc>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d003      	beq.n	8005c62 <TIM_OC5_SetConfig+0x82>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a14      	ldr	r2, [pc, #80]	@ (8005cb0 <TIM_OC5_SetConfig+0xd0>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d109      	bne.n	8005c76 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	021b      	lsls	r3, r3, #8
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	621a      	str	r2, [r3, #32]
}
 8005c90:	bf00      	nop
 8005c92:	371c      	adds	r7, #28
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	40012c00 	.word	0x40012c00
 8005ca0:	40013400 	.word	0x40013400
 8005ca4:	40014000 	.word	0x40014000
 8005ca8:	40014400 	.word	0x40014400
 8005cac:	40014800 	.word	0x40014800
 8005cb0:	40015000 	.word	0x40015000

08005cb4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ce2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	021b      	lsls	r3, r3, #8
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005cfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	051b      	lsls	r3, r3, #20
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a1a      	ldr	r2, [pc, #104]	@ (8005d74 <TIM_OC6_SetConfig+0xc0>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d013      	beq.n	8005d38 <TIM_OC6_SetConfig+0x84>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a19      	ldr	r2, [pc, #100]	@ (8005d78 <TIM_OC6_SetConfig+0xc4>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d00f      	beq.n	8005d38 <TIM_OC6_SetConfig+0x84>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a18      	ldr	r2, [pc, #96]	@ (8005d7c <TIM_OC6_SetConfig+0xc8>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d00b      	beq.n	8005d38 <TIM_OC6_SetConfig+0x84>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a17      	ldr	r2, [pc, #92]	@ (8005d80 <TIM_OC6_SetConfig+0xcc>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d007      	beq.n	8005d38 <TIM_OC6_SetConfig+0x84>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a16      	ldr	r2, [pc, #88]	@ (8005d84 <TIM_OC6_SetConfig+0xd0>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d003      	beq.n	8005d38 <TIM_OC6_SetConfig+0x84>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a15      	ldr	r2, [pc, #84]	@ (8005d88 <TIM_OC6_SetConfig+0xd4>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d109      	bne.n	8005d4c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	029b      	lsls	r3, r3, #10
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	621a      	str	r2, [r3, #32]
}
 8005d66:	bf00      	nop
 8005d68:	371c      	adds	r7, #28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	40012c00 	.word	0x40012c00
 8005d78:	40013400 	.word	0x40013400
 8005d7c:	40014000 	.word	0x40014000
 8005d80:	40014400 	.word	0x40014400
 8005d84:	40014800 	.word	0x40014800
 8005d88:	40015000 	.word	0x40015000

08005d8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
 8005d9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	f023 0201 	bic.w	r2, r3, #1
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005db6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	011b      	lsls	r3, r3, #4
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f023 030a 	bic.w	r3, r3, #10
 8005dc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	621a      	str	r2, [r3, #32]
}
 8005dde:	bf00      	nop
 8005de0:	371c      	adds	r7, #28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dea:	b480      	push	{r7}
 8005dec:	b087      	sub	sp, #28
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	60f8      	str	r0, [r7, #12]
 8005df2:	60b9      	str	r1, [r7, #8]
 8005df4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	f023 0210 	bic.w	r2, r3, #16
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	031b      	lsls	r3, r3, #12
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	011b      	lsls	r3, r3, #4
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	621a      	str	r2, [r3, #32]
}
 8005e3e:	bf00      	nop
 8005e40:	371c      	adds	r7, #28
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b085      	sub	sp, #20
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
 8005e52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005e60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	f043 0307 	orr.w	r3, r3, #7
 8005e70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	609a      	str	r2, [r3, #8]
}
 8005e78:	bf00      	nop
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
 8005e90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	021a      	lsls	r2, r3, #8
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	609a      	str	r2, [r3, #8]
}
 8005eb8:	bf00      	nop
 8005eba:	371c      	adds	r7, #28
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f003 031f 	and.w	r3, r3, #31
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8005edc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a1a      	ldr	r2, [r3, #32]
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	43db      	mvns	r3, r3
 8005ee6:	401a      	ands	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6a1a      	ldr	r2, [r3, #32]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	f003 031f 	and.w	r3, r3, #31
 8005ef6:	6879      	ldr	r1, [r7, #4]
 8005ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8005efc:	431a      	orrs	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	621a      	str	r2, [r3, #32]
}
 8005f02:	bf00      	nop
 8005f04:	371c      	adds	r7, #28
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
	...

08005f10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d101      	bne.n	8005f28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f24:	2302      	movs	r3, #2
 8005f26:	e074      	b.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2202      	movs	r2, #2
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a34      	ldr	r2, [pc, #208]	@ (8006020 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d009      	beq.n	8005f66 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a33      	ldr	r2, [pc, #204]	@ (8006024 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d004      	beq.n	8005f66 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a31      	ldr	r2, [pc, #196]	@ (8006028 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d108      	bne.n	8005f78 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005f6c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a21      	ldr	r2, [pc, #132]	@ (8006020 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d022      	beq.n	8005fe6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fa8:	d01d      	beq.n	8005fe6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a1f      	ldr	r2, [pc, #124]	@ (800602c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d018      	beq.n	8005fe6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8006030 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d013      	beq.n	8005fe6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a1c      	ldr	r2, [pc, #112]	@ (8006034 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d00e      	beq.n	8005fe6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a15      	ldr	r2, [pc, #84]	@ (8006024 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d009      	beq.n	8005fe6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a18      	ldr	r2, [pc, #96]	@ (8006038 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d004      	beq.n	8005fe6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a11      	ldr	r2, [pc, #68]	@ (8006028 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d10c      	bne.n	8006000 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	68ba      	ldr	r2, [r7, #8]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	40012c00 	.word	0x40012c00
 8006024:	40013400 	.word	0x40013400
 8006028:	40015000 	.word	0x40015000
 800602c:	40000400 	.word	0x40000400
 8006030:	40000800 	.word	0x40000800
 8006034:	40000c00 	.word	0x40000c00
 8006038:	40014000 	.word	0x40014000

0800603c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006046:	2300      	movs	r3, #0
 8006048:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006050:	2b01      	cmp	r3, #1
 8006052:	d101      	bne.n	8006058 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006054:	2302      	movs	r3, #2
 8006056:	e078      	b.n	800614a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	4313      	orrs	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	4313      	orrs	r3, r2
 800607a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	4313      	orrs	r3, r2
 8006088:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4313      	orrs	r3, r2
 8006096:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	695b      	ldr	r3, [r3, #20]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	041b      	lsls	r3, r3, #16
 80060ce:	4313      	orrs	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	69db      	ldr	r3, [r3, #28]
 80060dc:	4313      	orrs	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a1c      	ldr	r2, [pc, #112]	@ (8006158 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d009      	beq.n	80060fe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a1b      	ldr	r2, [pc, #108]	@ (800615c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d004      	beq.n	80060fe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a19      	ldr	r2, [pc, #100]	@ (8006160 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d11c      	bne.n	8006138 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006108:	051b      	lsls	r3, r3, #20
 800610a:	4313      	orrs	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	4313      	orrs	r3, r2
 800611a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006126:	4313      	orrs	r3, r2
 8006128:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006134:	4313      	orrs	r3, r2
 8006136:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	40012c00 	.word	0x40012c00
 800615c:	40013400 	.word	0x40013400
 8006160:	40015000 	.word	0x40015000

08006164 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e042      	b.n	80061fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800617c:	2b00      	cmp	r3, #0
 800617e:	d106      	bne.n	800618e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7fb f9b7 	bl	80014fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2224      	movs	r2, #36	@ 0x24
 8006192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 0201 	bic.w	r2, r2, #1
 80061a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d002      	beq.n	80061b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fcb2 	bl	8006b18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f9b3 	bl	8006520 <UART_SetConfig>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d101      	bne.n	80061c4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e01b      	b.n	80061fc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	685a      	ldr	r2, [r3, #4]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80061d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689a      	ldr	r2, [r3, #8]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80061e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f042 0201 	orr.w	r2, r2, #1
 80061f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fd31 	bl	8006c5c <UART_CheckIdleState>
 80061fa:	4603      	mov	r3, r0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b08a      	sub	sp, #40	@ 0x28
 8006208:	af02      	add	r7, sp, #8
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	603b      	str	r3, [r7, #0]
 8006210:	4613      	mov	r3, r2
 8006212:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800621a:	2b20      	cmp	r3, #32
 800621c:	d17b      	bne.n	8006316 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d002      	beq.n	800622a <HAL_UART_Transmit+0x26>
 8006224:	88fb      	ldrh	r3, [r7, #6]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e074      	b.n	8006318 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2200      	movs	r2, #0
 8006232:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2221      	movs	r2, #33	@ 0x21
 800623a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800623e:	f7fb fb5f 	bl	8001900 <HAL_GetTick>
 8006242:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	88fa      	ldrh	r2, [r7, #6]
 8006248:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	88fa      	ldrh	r2, [r7, #6]
 8006250:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800625c:	d108      	bne.n	8006270 <HAL_UART_Transmit+0x6c>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d104      	bne.n	8006270 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006266:	2300      	movs	r3, #0
 8006268:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	61bb      	str	r3, [r7, #24]
 800626e:	e003      	b.n	8006278 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006274:	2300      	movs	r3, #0
 8006276:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006278:	e030      	b.n	80062dc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	2200      	movs	r2, #0
 8006282:	2180      	movs	r1, #128	@ 0x80
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f000 fd93 	bl	8006db0 <UART_WaitOnFlagUntilTimeout>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d005      	beq.n	800629c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2220      	movs	r2, #32
 8006294:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e03d      	b.n	8006318 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10b      	bne.n	80062ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	461a      	mov	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062b0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	3302      	adds	r3, #2
 80062b6:	61bb      	str	r3, [r7, #24]
 80062b8:	e007      	b.n	80062ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	781a      	ldrb	r2, [r3, #0]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	3301      	adds	r3, #1
 80062c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	3b01      	subs	r3, #1
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1c8      	bne.n	800627a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	2200      	movs	r2, #0
 80062f0:	2140      	movs	r1, #64	@ 0x40
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f000 fd5c 	bl	8006db0 <UART_WaitOnFlagUntilTimeout>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d005      	beq.n	800630a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2220      	movs	r2, #32
 8006302:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e006      	b.n	8006318 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2220      	movs	r2, #32
 800630e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006312:	2300      	movs	r3, #0
 8006314:	e000      	b.n	8006318 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006316:	2302      	movs	r3, #2
  }
}
 8006318:	4618      	mov	r0, r3
 800631a:	3720      	adds	r7, #32
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b08a      	sub	sp, #40	@ 0x28
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	4613      	mov	r3, r2
 800632c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006334:	2b20      	cmp	r3, #32
 8006336:	d167      	bne.n	8006408 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d002      	beq.n	8006344 <HAL_UART_Transmit_DMA+0x24>
 800633e:	88fb      	ldrh	r3, [r7, #6]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e060      	b.n	800640a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	88fa      	ldrh	r2, [r7, #6]
 8006352:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	88fa      	ldrh	r2, [r7, #6]
 800635a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2221      	movs	r2, #33	@ 0x21
 800636a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006372:	2b00      	cmp	r3, #0
 8006374:	d028      	beq.n	80063c8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800637a:	4a26      	ldr	r2, [pc, #152]	@ (8006414 <HAL_UART_Transmit_DMA+0xf4>)
 800637c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006382:	4a25      	ldr	r2, [pc, #148]	@ (8006418 <HAL_UART_Transmit_DMA+0xf8>)
 8006384:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800638a:	4a24      	ldr	r2, [pc, #144]	@ (800641c <HAL_UART_Transmit_DMA+0xfc>)
 800638c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006392:	2200      	movs	r2, #0
 8006394:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800639e:	4619      	mov	r1, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3328      	adds	r3, #40	@ 0x28
 80063a6:	461a      	mov	r2, r3
 80063a8:	88fb      	ldrh	r3, [r7, #6]
 80063aa:	f7fd f8e5 	bl	8003578 <HAL_DMA_Start_IT>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d009      	beq.n	80063c8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2210      	movs	r2, #16
 80063b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2220      	movs	r2, #32
 80063c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e020      	b.n	800640a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2240      	movs	r2, #64	@ 0x40
 80063ce:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	3308      	adds	r3, #8
 80063d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	e853 3f00 	ldrex	r3, [r3]
 80063de:	613b      	str	r3, [r7, #16]
   return(result);
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	3308      	adds	r3, #8
 80063ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063f0:	623a      	str	r2, [r7, #32]
 80063f2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f4:	69f9      	ldr	r1, [r7, #28]
 80063f6:	6a3a      	ldr	r2, [r7, #32]
 80063f8:	e841 2300 	strex	r3, r2, [r1]
 80063fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1e5      	bne.n	80063d0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006404:	2300      	movs	r3, #0
 8006406:	e000      	b.n	800640a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006408:	2302      	movs	r3, #2
  }
}
 800640a:	4618      	mov	r0, r3
 800640c:	3728      	adds	r7, #40	@ 0x28
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	08007127 	.word	0x08007127
 8006418:	080071c1 	.word	0x080071c1
 800641c:	08007347 	.word	0x08007347

08006420 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b08a      	sub	sp, #40	@ 0x28
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	4613      	mov	r3, r2
 800642c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006434:	2b20      	cmp	r3, #32
 8006436:	d137      	bne.n	80064a8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d002      	beq.n	8006444 <HAL_UART_Receive_DMA+0x24>
 800643e:	88fb      	ldrh	r3, [r7, #6]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d101      	bne.n	8006448 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e030      	b.n	80064aa <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a18      	ldr	r2, [pc, #96]	@ (80064b4 <HAL_UART_Receive_DMA+0x94>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d01f      	beq.n	8006498 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d018      	beq.n	8006498 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	e853 3f00 	ldrex	r3, [r3]
 8006472:	613b      	str	r3, [r7, #16]
   return(result);
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800647a:	627b      	str	r3, [r7, #36]	@ 0x24
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	461a      	mov	r2, r3
 8006482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006484:	623b      	str	r3, [r7, #32]
 8006486:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006488:	69f9      	ldr	r1, [r7, #28]
 800648a:	6a3a      	ldr	r2, [r7, #32]
 800648c:	e841 2300 	strex	r3, r2, [r1]
 8006490:	61bb      	str	r3, [r7, #24]
   return(result);
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1e6      	bne.n	8006466 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006498:	88fb      	ldrh	r3, [r7, #6]
 800649a:	461a      	mov	r2, r3
 800649c:	68b9      	ldr	r1, [r7, #8]
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f000 fcf4 	bl	8006e8c <UART_Start_Receive_DMA>
 80064a4:	4603      	mov	r3, r0
 80064a6:	e000      	b.n	80064aa <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80064a8:	2302      	movs	r3, #2
  }
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3728      	adds	r7, #40	@ 0x28
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	40008000 	.word	0x40008000

080064b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	460b      	mov	r3, r1
 8006512:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006524:	b08c      	sub	sp, #48	@ 0x30
 8006526:	af00      	add	r7, sp, #0
 8006528:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800652a:	2300      	movs	r3, #0
 800652c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	431a      	orrs	r2, r3
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	431a      	orrs	r2, r3
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	69db      	ldr	r3, [r3, #28]
 8006544:	4313      	orrs	r3, r2
 8006546:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	4baa      	ldr	r3, [pc, #680]	@ (80067f8 <UART_SetConfig+0x2d8>)
 8006550:	4013      	ands	r3, r2
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	6812      	ldr	r2, [r2, #0]
 8006556:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006558:	430b      	orrs	r3, r1
 800655a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	68da      	ldr	r2, [r3, #12]
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	430a      	orrs	r2, r1
 8006570:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a9f      	ldr	r2, [pc, #636]	@ (80067fc <UART_SetConfig+0x2dc>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d004      	beq.n	800658c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006588:	4313      	orrs	r3, r2
 800658a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006596:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800659a:	697a      	ldr	r2, [r7, #20]
 800659c:	6812      	ldr	r2, [r2, #0]
 800659e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065a0:	430b      	orrs	r3, r1
 80065a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065aa:	f023 010f 	bic.w	r1, r3, #15
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a90      	ldr	r2, [pc, #576]	@ (8006800 <UART_SetConfig+0x2e0>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d125      	bne.n	8006610 <UART_SetConfig+0xf0>
 80065c4:	4b8f      	ldr	r3, [pc, #572]	@ (8006804 <UART_SetConfig+0x2e4>)
 80065c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ca:	f003 0303 	and.w	r3, r3, #3
 80065ce:	2b03      	cmp	r3, #3
 80065d0:	d81a      	bhi.n	8006608 <UART_SetConfig+0xe8>
 80065d2:	a201      	add	r2, pc, #4	@ (adr r2, 80065d8 <UART_SetConfig+0xb8>)
 80065d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d8:	080065e9 	.word	0x080065e9
 80065dc:	080065f9 	.word	0x080065f9
 80065e0:	080065f1 	.word	0x080065f1
 80065e4:	08006601 	.word	0x08006601
 80065e8:	2301      	movs	r3, #1
 80065ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065ee:	e116      	b.n	800681e <UART_SetConfig+0x2fe>
 80065f0:	2302      	movs	r3, #2
 80065f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065f6:	e112      	b.n	800681e <UART_SetConfig+0x2fe>
 80065f8:	2304      	movs	r3, #4
 80065fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065fe:	e10e      	b.n	800681e <UART_SetConfig+0x2fe>
 8006600:	2308      	movs	r3, #8
 8006602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006606:	e10a      	b.n	800681e <UART_SetConfig+0x2fe>
 8006608:	2310      	movs	r3, #16
 800660a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800660e:	e106      	b.n	800681e <UART_SetConfig+0x2fe>
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a7c      	ldr	r2, [pc, #496]	@ (8006808 <UART_SetConfig+0x2e8>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d138      	bne.n	800668c <UART_SetConfig+0x16c>
 800661a:	4b7a      	ldr	r3, [pc, #488]	@ (8006804 <UART_SetConfig+0x2e4>)
 800661c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006620:	f003 030c 	and.w	r3, r3, #12
 8006624:	2b0c      	cmp	r3, #12
 8006626:	d82d      	bhi.n	8006684 <UART_SetConfig+0x164>
 8006628:	a201      	add	r2, pc, #4	@ (adr r2, 8006630 <UART_SetConfig+0x110>)
 800662a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662e:	bf00      	nop
 8006630:	08006665 	.word	0x08006665
 8006634:	08006685 	.word	0x08006685
 8006638:	08006685 	.word	0x08006685
 800663c:	08006685 	.word	0x08006685
 8006640:	08006675 	.word	0x08006675
 8006644:	08006685 	.word	0x08006685
 8006648:	08006685 	.word	0x08006685
 800664c:	08006685 	.word	0x08006685
 8006650:	0800666d 	.word	0x0800666d
 8006654:	08006685 	.word	0x08006685
 8006658:	08006685 	.word	0x08006685
 800665c:	08006685 	.word	0x08006685
 8006660:	0800667d 	.word	0x0800667d
 8006664:	2300      	movs	r3, #0
 8006666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800666a:	e0d8      	b.n	800681e <UART_SetConfig+0x2fe>
 800666c:	2302      	movs	r3, #2
 800666e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006672:	e0d4      	b.n	800681e <UART_SetConfig+0x2fe>
 8006674:	2304      	movs	r3, #4
 8006676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800667a:	e0d0      	b.n	800681e <UART_SetConfig+0x2fe>
 800667c:	2308      	movs	r3, #8
 800667e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006682:	e0cc      	b.n	800681e <UART_SetConfig+0x2fe>
 8006684:	2310      	movs	r3, #16
 8006686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800668a:	e0c8      	b.n	800681e <UART_SetConfig+0x2fe>
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a5e      	ldr	r2, [pc, #376]	@ (800680c <UART_SetConfig+0x2ec>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d125      	bne.n	80066e2 <UART_SetConfig+0x1c2>
 8006696:	4b5b      	ldr	r3, [pc, #364]	@ (8006804 <UART_SetConfig+0x2e4>)
 8006698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800669c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80066a0:	2b30      	cmp	r3, #48	@ 0x30
 80066a2:	d016      	beq.n	80066d2 <UART_SetConfig+0x1b2>
 80066a4:	2b30      	cmp	r3, #48	@ 0x30
 80066a6:	d818      	bhi.n	80066da <UART_SetConfig+0x1ba>
 80066a8:	2b20      	cmp	r3, #32
 80066aa:	d00a      	beq.n	80066c2 <UART_SetConfig+0x1a2>
 80066ac:	2b20      	cmp	r3, #32
 80066ae:	d814      	bhi.n	80066da <UART_SetConfig+0x1ba>
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d002      	beq.n	80066ba <UART_SetConfig+0x19a>
 80066b4:	2b10      	cmp	r3, #16
 80066b6:	d008      	beq.n	80066ca <UART_SetConfig+0x1aa>
 80066b8:	e00f      	b.n	80066da <UART_SetConfig+0x1ba>
 80066ba:	2300      	movs	r3, #0
 80066bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066c0:	e0ad      	b.n	800681e <UART_SetConfig+0x2fe>
 80066c2:	2302      	movs	r3, #2
 80066c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066c8:	e0a9      	b.n	800681e <UART_SetConfig+0x2fe>
 80066ca:	2304      	movs	r3, #4
 80066cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066d0:	e0a5      	b.n	800681e <UART_SetConfig+0x2fe>
 80066d2:	2308      	movs	r3, #8
 80066d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066d8:	e0a1      	b.n	800681e <UART_SetConfig+0x2fe>
 80066da:	2310      	movs	r3, #16
 80066dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066e0:	e09d      	b.n	800681e <UART_SetConfig+0x2fe>
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a4a      	ldr	r2, [pc, #296]	@ (8006810 <UART_SetConfig+0x2f0>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d125      	bne.n	8006738 <UART_SetConfig+0x218>
 80066ec:	4b45      	ldr	r3, [pc, #276]	@ (8006804 <UART_SetConfig+0x2e4>)
 80066ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80066f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80066f8:	d016      	beq.n	8006728 <UART_SetConfig+0x208>
 80066fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80066fc:	d818      	bhi.n	8006730 <UART_SetConfig+0x210>
 80066fe:	2b80      	cmp	r3, #128	@ 0x80
 8006700:	d00a      	beq.n	8006718 <UART_SetConfig+0x1f8>
 8006702:	2b80      	cmp	r3, #128	@ 0x80
 8006704:	d814      	bhi.n	8006730 <UART_SetConfig+0x210>
 8006706:	2b00      	cmp	r3, #0
 8006708:	d002      	beq.n	8006710 <UART_SetConfig+0x1f0>
 800670a:	2b40      	cmp	r3, #64	@ 0x40
 800670c:	d008      	beq.n	8006720 <UART_SetConfig+0x200>
 800670e:	e00f      	b.n	8006730 <UART_SetConfig+0x210>
 8006710:	2300      	movs	r3, #0
 8006712:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006716:	e082      	b.n	800681e <UART_SetConfig+0x2fe>
 8006718:	2302      	movs	r3, #2
 800671a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800671e:	e07e      	b.n	800681e <UART_SetConfig+0x2fe>
 8006720:	2304      	movs	r3, #4
 8006722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006726:	e07a      	b.n	800681e <UART_SetConfig+0x2fe>
 8006728:	2308      	movs	r3, #8
 800672a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800672e:	e076      	b.n	800681e <UART_SetConfig+0x2fe>
 8006730:	2310      	movs	r3, #16
 8006732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006736:	e072      	b.n	800681e <UART_SetConfig+0x2fe>
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a35      	ldr	r2, [pc, #212]	@ (8006814 <UART_SetConfig+0x2f4>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d12a      	bne.n	8006798 <UART_SetConfig+0x278>
 8006742:	4b30      	ldr	r3, [pc, #192]	@ (8006804 <UART_SetConfig+0x2e4>)
 8006744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006748:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800674c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006750:	d01a      	beq.n	8006788 <UART_SetConfig+0x268>
 8006752:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006756:	d81b      	bhi.n	8006790 <UART_SetConfig+0x270>
 8006758:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800675c:	d00c      	beq.n	8006778 <UART_SetConfig+0x258>
 800675e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006762:	d815      	bhi.n	8006790 <UART_SetConfig+0x270>
 8006764:	2b00      	cmp	r3, #0
 8006766:	d003      	beq.n	8006770 <UART_SetConfig+0x250>
 8006768:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800676c:	d008      	beq.n	8006780 <UART_SetConfig+0x260>
 800676e:	e00f      	b.n	8006790 <UART_SetConfig+0x270>
 8006770:	2300      	movs	r3, #0
 8006772:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006776:	e052      	b.n	800681e <UART_SetConfig+0x2fe>
 8006778:	2302      	movs	r3, #2
 800677a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800677e:	e04e      	b.n	800681e <UART_SetConfig+0x2fe>
 8006780:	2304      	movs	r3, #4
 8006782:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006786:	e04a      	b.n	800681e <UART_SetConfig+0x2fe>
 8006788:	2308      	movs	r3, #8
 800678a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800678e:	e046      	b.n	800681e <UART_SetConfig+0x2fe>
 8006790:	2310      	movs	r3, #16
 8006792:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006796:	e042      	b.n	800681e <UART_SetConfig+0x2fe>
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a17      	ldr	r2, [pc, #92]	@ (80067fc <UART_SetConfig+0x2dc>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d13a      	bne.n	8006818 <UART_SetConfig+0x2f8>
 80067a2:	4b18      	ldr	r3, [pc, #96]	@ (8006804 <UART_SetConfig+0x2e4>)
 80067a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80067ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067b0:	d01a      	beq.n	80067e8 <UART_SetConfig+0x2c8>
 80067b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067b6:	d81b      	bhi.n	80067f0 <UART_SetConfig+0x2d0>
 80067b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067bc:	d00c      	beq.n	80067d8 <UART_SetConfig+0x2b8>
 80067be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067c2:	d815      	bhi.n	80067f0 <UART_SetConfig+0x2d0>
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d003      	beq.n	80067d0 <UART_SetConfig+0x2b0>
 80067c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067cc:	d008      	beq.n	80067e0 <UART_SetConfig+0x2c0>
 80067ce:	e00f      	b.n	80067f0 <UART_SetConfig+0x2d0>
 80067d0:	2300      	movs	r3, #0
 80067d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067d6:	e022      	b.n	800681e <UART_SetConfig+0x2fe>
 80067d8:	2302      	movs	r3, #2
 80067da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067de:	e01e      	b.n	800681e <UART_SetConfig+0x2fe>
 80067e0:	2304      	movs	r3, #4
 80067e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067e6:	e01a      	b.n	800681e <UART_SetConfig+0x2fe>
 80067e8:	2308      	movs	r3, #8
 80067ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ee:	e016      	b.n	800681e <UART_SetConfig+0x2fe>
 80067f0:	2310      	movs	r3, #16
 80067f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067f6:	e012      	b.n	800681e <UART_SetConfig+0x2fe>
 80067f8:	cfff69f3 	.word	0xcfff69f3
 80067fc:	40008000 	.word	0x40008000
 8006800:	40013800 	.word	0x40013800
 8006804:	40021000 	.word	0x40021000
 8006808:	40004400 	.word	0x40004400
 800680c:	40004800 	.word	0x40004800
 8006810:	40004c00 	.word	0x40004c00
 8006814:	40005000 	.word	0x40005000
 8006818:	2310      	movs	r3, #16
 800681a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4aae      	ldr	r2, [pc, #696]	@ (8006adc <UART_SetConfig+0x5bc>)
 8006824:	4293      	cmp	r3, r2
 8006826:	f040 8097 	bne.w	8006958 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800682a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800682e:	2b08      	cmp	r3, #8
 8006830:	d823      	bhi.n	800687a <UART_SetConfig+0x35a>
 8006832:	a201      	add	r2, pc, #4	@ (adr r2, 8006838 <UART_SetConfig+0x318>)
 8006834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006838:	0800685d 	.word	0x0800685d
 800683c:	0800687b 	.word	0x0800687b
 8006840:	08006865 	.word	0x08006865
 8006844:	0800687b 	.word	0x0800687b
 8006848:	0800686b 	.word	0x0800686b
 800684c:	0800687b 	.word	0x0800687b
 8006850:	0800687b 	.word	0x0800687b
 8006854:	0800687b 	.word	0x0800687b
 8006858:	08006873 	.word	0x08006873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800685c:	f7fd ff92 	bl	8004784 <HAL_RCC_GetPCLK1Freq>
 8006860:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006862:	e010      	b.n	8006886 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006864:	4b9e      	ldr	r3, [pc, #632]	@ (8006ae0 <UART_SetConfig+0x5c0>)
 8006866:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006868:	e00d      	b.n	8006886 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800686a:	f7fd ff1d 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 800686e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006870:	e009      	b.n	8006886 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006872:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006876:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006878:	e005      	b.n	8006886 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800687a:	2300      	movs	r3, #0
 800687c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006884:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 8130 	beq.w	8006aee <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006892:	4a94      	ldr	r2, [pc, #592]	@ (8006ae4 <UART_SetConfig+0x5c4>)
 8006894:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006898:	461a      	mov	r2, r3
 800689a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689c:	fbb3 f3f2 	udiv	r3, r3, r2
 80068a0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	4613      	mov	r3, r2
 80068a8:	005b      	lsls	r3, r3, #1
 80068aa:	4413      	add	r3, r2
 80068ac:	69ba      	ldr	r2, [r7, #24]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d305      	bcc.n	80068be <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d903      	bls.n	80068c6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80068c4:	e113      	b.n	8006aee <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c8:	2200      	movs	r2, #0
 80068ca:	60bb      	str	r3, [r7, #8]
 80068cc:	60fa      	str	r2, [r7, #12]
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d2:	4a84      	ldr	r2, [pc, #528]	@ (8006ae4 <UART_SetConfig+0x5c4>)
 80068d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068d8:	b29b      	uxth	r3, r3
 80068da:	2200      	movs	r2, #0
 80068dc:	603b      	str	r3, [r7, #0]
 80068de:	607a      	str	r2, [r7, #4]
 80068e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80068e8:	f7fa f894 	bl	8000a14 <__aeabi_uldivmod>
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	4610      	mov	r0, r2
 80068f2:	4619      	mov	r1, r3
 80068f4:	f04f 0200 	mov.w	r2, #0
 80068f8:	f04f 0300 	mov.w	r3, #0
 80068fc:	020b      	lsls	r3, r1, #8
 80068fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006902:	0202      	lsls	r2, r0, #8
 8006904:	6979      	ldr	r1, [r7, #20]
 8006906:	6849      	ldr	r1, [r1, #4]
 8006908:	0849      	lsrs	r1, r1, #1
 800690a:	2000      	movs	r0, #0
 800690c:	460c      	mov	r4, r1
 800690e:	4605      	mov	r5, r0
 8006910:	eb12 0804 	adds.w	r8, r2, r4
 8006914:	eb43 0905 	adc.w	r9, r3, r5
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	469a      	mov	sl, r3
 8006920:	4693      	mov	fp, r2
 8006922:	4652      	mov	r2, sl
 8006924:	465b      	mov	r3, fp
 8006926:	4640      	mov	r0, r8
 8006928:	4649      	mov	r1, r9
 800692a:	f7fa f873 	bl	8000a14 <__aeabi_uldivmod>
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	4613      	mov	r3, r2
 8006934:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006936:	6a3b      	ldr	r3, [r7, #32]
 8006938:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800693c:	d308      	bcc.n	8006950 <UART_SetConfig+0x430>
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006944:	d204      	bcs.n	8006950 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	6a3a      	ldr	r2, [r7, #32]
 800694c:	60da      	str	r2, [r3, #12]
 800694e:	e0ce      	b.n	8006aee <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006956:	e0ca      	b.n	8006aee <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	69db      	ldr	r3, [r3, #28]
 800695c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006960:	d166      	bne.n	8006a30 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006962:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006966:	2b08      	cmp	r3, #8
 8006968:	d827      	bhi.n	80069ba <UART_SetConfig+0x49a>
 800696a:	a201      	add	r2, pc, #4	@ (adr r2, 8006970 <UART_SetConfig+0x450>)
 800696c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006970:	08006995 	.word	0x08006995
 8006974:	0800699d 	.word	0x0800699d
 8006978:	080069a5 	.word	0x080069a5
 800697c:	080069bb 	.word	0x080069bb
 8006980:	080069ab 	.word	0x080069ab
 8006984:	080069bb 	.word	0x080069bb
 8006988:	080069bb 	.word	0x080069bb
 800698c:	080069bb 	.word	0x080069bb
 8006990:	080069b3 	.word	0x080069b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006994:	f7fd fef6 	bl	8004784 <HAL_RCC_GetPCLK1Freq>
 8006998:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800699a:	e014      	b.n	80069c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800699c:	f7fd ff08 	bl	80047b0 <HAL_RCC_GetPCLK2Freq>
 80069a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80069a2:	e010      	b.n	80069c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069a4:	4b4e      	ldr	r3, [pc, #312]	@ (8006ae0 <UART_SetConfig+0x5c0>)
 80069a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80069a8:	e00d      	b.n	80069c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069aa:	f7fd fe7d 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 80069ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80069b0:	e009      	b.n	80069c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80069b8:	e005      	b.n	80069c6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80069c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 8090 	beq.w	8006aee <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d2:	4a44      	ldr	r2, [pc, #272]	@ (8006ae4 <UART_SetConfig+0x5c4>)
 80069d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069d8:	461a      	mov	r2, r3
 80069da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80069e0:	005a      	lsls	r2, r3, #1
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	085b      	lsrs	r3, r3, #1
 80069e8:	441a      	add	r2, r3
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069f4:	6a3b      	ldr	r3, [r7, #32]
 80069f6:	2b0f      	cmp	r3, #15
 80069f8:	d916      	bls.n	8006a28 <UART_SetConfig+0x508>
 80069fa:	6a3b      	ldr	r3, [r7, #32]
 80069fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a00:	d212      	bcs.n	8006a28 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a02:	6a3b      	ldr	r3, [r7, #32]
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	f023 030f 	bic.w	r3, r3, #15
 8006a0a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	085b      	lsrs	r3, r3, #1
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	f003 0307 	and.w	r3, r3, #7
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	8bfb      	ldrh	r3, [r7, #30]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	8bfa      	ldrh	r2, [r7, #30]
 8006a24:	60da      	str	r2, [r3, #12]
 8006a26:	e062      	b.n	8006aee <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006a2e:	e05e      	b.n	8006aee <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a30:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a34:	2b08      	cmp	r3, #8
 8006a36:	d828      	bhi.n	8006a8a <UART_SetConfig+0x56a>
 8006a38:	a201      	add	r2, pc, #4	@ (adr r2, 8006a40 <UART_SetConfig+0x520>)
 8006a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3e:	bf00      	nop
 8006a40:	08006a65 	.word	0x08006a65
 8006a44:	08006a6d 	.word	0x08006a6d
 8006a48:	08006a75 	.word	0x08006a75
 8006a4c:	08006a8b 	.word	0x08006a8b
 8006a50:	08006a7b 	.word	0x08006a7b
 8006a54:	08006a8b 	.word	0x08006a8b
 8006a58:	08006a8b 	.word	0x08006a8b
 8006a5c:	08006a8b 	.word	0x08006a8b
 8006a60:	08006a83 	.word	0x08006a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a64:	f7fd fe8e 	bl	8004784 <HAL_RCC_GetPCLK1Freq>
 8006a68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a6a:	e014      	b.n	8006a96 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a6c:	f7fd fea0 	bl	80047b0 <HAL_RCC_GetPCLK2Freq>
 8006a70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a72:	e010      	b.n	8006a96 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a74:	4b1a      	ldr	r3, [pc, #104]	@ (8006ae0 <UART_SetConfig+0x5c0>)
 8006a76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a78:	e00d      	b.n	8006a96 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a7a:	f7fd fe15 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 8006a7e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a80:	e009      	b.n	8006a96 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a88:	e005      	b.n	8006a96 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006a94:	bf00      	nop
    }

    if (pclk != 0U)
 8006a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d028      	beq.n	8006aee <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa0:	4a10      	ldr	r2, [pc, #64]	@ (8006ae4 <UART_SetConfig+0x5c4>)
 8006aa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aaa:	fbb3 f2f2 	udiv	r2, r3, r2
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	085b      	lsrs	r3, r3, #1
 8006ab4:	441a      	add	r2, r3
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006abe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ac0:	6a3b      	ldr	r3, [r7, #32]
 8006ac2:	2b0f      	cmp	r3, #15
 8006ac4:	d910      	bls.n	8006ae8 <UART_SetConfig+0x5c8>
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006acc:	d20c      	bcs.n	8006ae8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	60da      	str	r2, [r3, #12]
 8006ad8:	e009      	b.n	8006aee <UART_SetConfig+0x5ce>
 8006ada:	bf00      	nop
 8006adc:	40008000 	.word	0x40008000
 8006ae0:	00f42400 	.word	0x00f42400
 8006ae4:	08007654 	.word	0x08007654
      }
      else
      {
        ret = HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	2200      	movs	r2, #0
 8006b02:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	2200      	movs	r2, #0
 8006b08:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006b0a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3730      	adds	r7, #48	@ 0x30
 8006b12:	46bd      	mov	sp, r7
 8006b14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006b18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b24:	f003 0308 	and.w	r3, r3, #8
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00a      	beq.n	8006b42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00a      	beq.n	8006b64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	430a      	orrs	r2, r1
 8006b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00a      	beq.n	8006b86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	430a      	orrs	r2, r1
 8006b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b8a:	f003 0304 	and.w	r3, r3, #4
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00a      	beq.n	8006ba8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	430a      	orrs	r2, r1
 8006ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bac:	f003 0310 	and.w	r3, r3, #16
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00a      	beq.n	8006bca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bce:	f003 0320 	and.w	r3, r3, #32
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00a      	beq.n	8006bec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	430a      	orrs	r2, r1
 8006bea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d01a      	beq.n	8006c2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c16:	d10a      	bne.n	8006c2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00a      	beq.n	8006c50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	605a      	str	r2, [r3, #4]
  }
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b098      	sub	sp, #96	@ 0x60
 8006c60:	af02      	add	r7, sp, #8
 8006c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c6c:	f7fa fe48 	bl	8001900 <HAL_GetTick>
 8006c70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0308 	and.w	r3, r3, #8
 8006c7c:	2b08      	cmp	r3, #8
 8006c7e:	d12f      	bne.n	8006ce0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f88e 	bl	8006db0 <UART_WaitOnFlagUntilTimeout>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d022      	beq.n	8006ce0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca2:	e853 3f00 	ldrex	r3, [r3]
 8006ca6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006caa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cae:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cc0:	e841 2300 	strex	r3, r2, [r1]
 8006cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1e6      	bne.n	8006c9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e063      	b.n	8006da8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0304 	and.w	r3, r3, #4
 8006cea:	2b04      	cmp	r3, #4
 8006cec:	d149      	bne.n	8006d82 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 f857 	bl	8006db0 <UART_WaitOnFlagUntilTimeout>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d03c      	beq.n	8006d82 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d10:	e853 3f00 	ldrex	r3, [r3]
 8006d14:	623b      	str	r3, [r7, #32]
   return(result);
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	461a      	mov	r2, r3
 8006d24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d26:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d28:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d2e:	e841 2300 	strex	r3, r2, [r1]
 8006d32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1e6      	bne.n	8006d08 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	3308      	adds	r3, #8
 8006d40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	e853 3f00 	ldrex	r3, [r3]
 8006d48:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f023 0301 	bic.w	r3, r3, #1
 8006d50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3308      	adds	r3, #8
 8006d58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d5a:	61fa      	str	r2, [r7, #28]
 8006d5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5e:	69b9      	ldr	r1, [r7, #24]
 8006d60:	69fa      	ldr	r2, [r7, #28]
 8006d62:	e841 2300 	strex	r3, r2, [r1]
 8006d66:	617b      	str	r3, [r7, #20]
   return(result);
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1e5      	bne.n	8006d3a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2220      	movs	r2, #32
 8006d72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e012      	b.n	8006da8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2220      	movs	r2, #32
 8006d86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2220      	movs	r2, #32
 8006d8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3758      	adds	r7, #88	@ 0x58
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	603b      	str	r3, [r7, #0]
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dc0:	e04f      	b.n	8006e62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc8:	d04b      	beq.n	8006e62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dca:	f7fa fd99 	bl	8001900 <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	69ba      	ldr	r2, [r7, #24]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d302      	bcc.n	8006de0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e04e      	b.n	8006e82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0304 	and.w	r3, r3, #4
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d037      	beq.n	8006e62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2b80      	cmp	r3, #128	@ 0x80
 8006df6:	d034      	beq.n	8006e62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2b40      	cmp	r3, #64	@ 0x40
 8006dfc:	d031      	beq.n	8006e62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	69db      	ldr	r3, [r3, #28]
 8006e04:	f003 0308 	and.w	r3, r3, #8
 8006e08:	2b08      	cmp	r3, #8
 8006e0a:	d110      	bne.n	8006e2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2208      	movs	r2, #8
 8006e12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f000 f920 	bl	800705a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2208      	movs	r2, #8
 8006e1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e029      	b.n	8006e82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	69db      	ldr	r3, [r3, #28]
 8006e34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e3c:	d111      	bne.n	8006e62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f000 f906 	bl	800705a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2220      	movs	r2, #32
 8006e52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e00f      	b.n	8006e82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	69da      	ldr	r2, [r3, #28]
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	bf0c      	ite	eq
 8006e72:	2301      	moveq	r3, #1
 8006e74:	2300      	movne	r3, #0
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	461a      	mov	r2, r3
 8006e7a:	79fb      	ldrb	r3, [r7, #7]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d0a0      	beq.n	8006dc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
	...

08006e8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b096      	sub	sp, #88	@ 0x58
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	4613      	mov	r3, r2
 8006e98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	68ba      	ldr	r2, [r7, #8]
 8006e9e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	88fa      	ldrh	r2, [r7, #6]
 8006ea4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2222      	movs	r2, #34	@ 0x22
 8006eb4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d02d      	beq.n	8006f1e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ec8:	4a40      	ldr	r2, [pc, #256]	@ (8006fcc <UART_Start_Receive_DMA+0x140>)
 8006eca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ed2:	4a3f      	ldr	r2, [pc, #252]	@ (8006fd0 <UART_Start_Receive_DMA+0x144>)
 8006ed4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006edc:	4a3d      	ldr	r2, [pc, #244]	@ (8006fd4 <UART_Start_Receive_DMA+0x148>)
 8006ede:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	3324      	adds	r3, #36	@ 0x24
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006efc:	461a      	mov	r2, r3
 8006efe:	88fb      	ldrh	r3, [r7, #6]
 8006f00:	f7fc fb3a 	bl	8003578 <HAL_DMA_Start_IT>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d009      	beq.n	8006f1e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2210      	movs	r2, #16
 8006f0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2220      	movs	r2, #32
 8006f16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e051      	b.n	8006fc2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d018      	beq.n	8006f58 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f2e:	e853 3f00 	ldrex	r3, [r3]
 8006f32:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	461a      	mov	r2, r3
 8006f42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f46:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f48:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006f4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f4c:	e841 2300 	strex	r3, r2, [r1]
 8006f50:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006f52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1e6      	bne.n	8006f26 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	3308      	adds	r3, #8
 8006f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f62:	e853 3f00 	ldrex	r3, [r3]
 8006f66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6a:	f043 0301 	orr.w	r3, r3, #1
 8006f6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	3308      	adds	r3, #8
 8006f76:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006f78:	637a      	str	r2, [r7, #52]	@ 0x34
 8006f7a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006f7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f80:	e841 2300 	strex	r3, r2, [r1]
 8006f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1e5      	bne.n	8006f58 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	3308      	adds	r3, #8
 8006f92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	e853 3f00 	ldrex	r3, [r3]
 8006f9a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	3308      	adds	r3, #8
 8006faa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006fac:	623a      	str	r2, [r7, #32]
 8006fae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb0:	69f9      	ldr	r1, [r7, #28]
 8006fb2:	6a3a      	ldr	r2, [r7, #32]
 8006fb4:	e841 2300 	strex	r3, r2, [r1]
 8006fb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1e5      	bne.n	8006f8c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3758      	adds	r7, #88	@ 0x58
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	080071dd 	.word	0x080071dd
 8006fd0:	08007309 	.word	0x08007309
 8006fd4:	08007347 	.word	0x08007347

08006fd8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b08f      	sub	sp, #60	@ 0x3c
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	e853 3f00 	ldrex	r3, [r3]
 8006fec:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007000:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007002:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007004:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007006:	e841 2300 	strex	r3, r2, [r1]
 800700a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800700c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1e6      	bne.n	8006fe0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	3308      	adds	r3, #8
 8007018:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	e853 3f00 	ldrex	r3, [r3]
 8007020:	60bb      	str	r3, [r7, #8]
   return(result);
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007028:	633b      	str	r3, [r7, #48]	@ 0x30
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	3308      	adds	r3, #8
 8007030:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007032:	61ba      	str	r2, [r7, #24]
 8007034:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007036:	6979      	ldr	r1, [r7, #20]
 8007038:	69ba      	ldr	r2, [r7, #24]
 800703a:	e841 2300 	strex	r3, r2, [r1]
 800703e:	613b      	str	r3, [r7, #16]
   return(result);
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1e5      	bne.n	8007012 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2220      	movs	r2, #32
 800704a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800704e:	bf00      	nop
 8007050:	373c      	adds	r7, #60	@ 0x3c
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr

0800705a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800705a:	b480      	push	{r7}
 800705c:	b095      	sub	sp, #84	@ 0x54
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800706a:	e853 3f00 	ldrex	r3, [r3]
 800706e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007072:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007076:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	461a      	mov	r2, r3
 800707e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007080:	643b      	str	r3, [r7, #64]	@ 0x40
 8007082:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007084:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007086:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007088:	e841 2300 	strex	r3, r2, [r1]
 800708c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800708e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1e6      	bne.n	8007062 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	3308      	adds	r3, #8
 800709a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709c:	6a3b      	ldr	r3, [r7, #32]
 800709e:	e853 3f00 	ldrex	r3, [r3]
 80070a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070aa:	f023 0301 	bic.w	r3, r3, #1
 80070ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	3308      	adds	r3, #8
 80070b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070c0:	e841 2300 	strex	r3, r2, [r1]
 80070c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1e3      	bne.n	8007094 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d118      	bne.n	8007106 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	e853 3f00 	ldrex	r3, [r3]
 80070e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	f023 0310 	bic.w	r3, r3, #16
 80070e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	461a      	mov	r2, r3
 80070f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070f2:	61bb      	str	r3, [r7, #24]
 80070f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f6:	6979      	ldr	r1, [r7, #20]
 80070f8:	69ba      	ldr	r2, [r7, #24]
 80070fa:	e841 2300 	strex	r3, r2, [r1]
 80070fe:	613b      	str	r3, [r7, #16]
   return(result);
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1e6      	bne.n	80070d4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2220      	movs	r2, #32
 800710a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800711a:	bf00      	nop
 800711c:	3754      	adds	r7, #84	@ 0x54
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b090      	sub	sp, #64	@ 0x40
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007132:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 0320 	and.w	r3, r3, #32
 800713e:	2b00      	cmp	r3, #0
 8007140:	d137      	bne.n	80071b2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007144:	2200      	movs	r2, #0
 8007146:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800714a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	3308      	adds	r3, #8
 8007150:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007154:	e853 3f00 	ldrex	r3, [r3]
 8007158:	623b      	str	r3, [r7, #32]
   return(result);
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007160:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	3308      	adds	r3, #8
 8007168:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800716a:	633a      	str	r2, [r7, #48]	@ 0x30
 800716c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007170:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007172:	e841 2300 	strex	r3, r2, [r1]
 8007176:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1e5      	bne.n	800714a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800717e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	e853 3f00 	ldrex	r3, [r3]
 800718a:	60fb      	str	r3, [r7, #12]
   return(result);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007192:	637b      	str	r3, [r7, #52]	@ 0x34
 8007194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	461a      	mov	r2, r3
 800719a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800719c:	61fb      	str	r3, [r7, #28]
 800719e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a0:	69b9      	ldr	r1, [r7, #24]
 80071a2:	69fa      	ldr	r2, [r7, #28]
 80071a4:	e841 2300 	strex	r3, r2, [r1]
 80071a8:	617b      	str	r3, [r7, #20]
   return(result);
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1e6      	bne.n	800717e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80071b0:	e002      	b.n	80071b8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80071b2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80071b4:	f7ff f980 	bl	80064b8 <HAL_UART_TxCpltCallback>
}
 80071b8:	bf00      	nop
 80071ba:	3740      	adds	r7, #64	@ 0x40
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071cc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f7ff f97c 	bl	80064cc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071d4:	bf00      	nop
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b09c      	sub	sp, #112	@ 0x70
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0320 	and.w	r3, r3, #32
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d171      	bne.n	80072dc <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80071f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071fa:	2200      	movs	r2, #0
 80071fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007200:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007206:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007208:	e853 3f00 	ldrex	r3, [r3]
 800720c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800720e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007210:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007214:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007216:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	461a      	mov	r2, r3
 800721c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800721e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007220:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007222:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007224:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007226:	e841 2300 	strex	r3, r2, [r1]
 800722a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800722c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1e6      	bne.n	8007200 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007232:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	3308      	adds	r3, #8
 8007238:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800723c:	e853 3f00 	ldrex	r3, [r3]
 8007240:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007244:	f023 0301 	bic.w	r3, r3, #1
 8007248:	667b      	str	r3, [r7, #100]	@ 0x64
 800724a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	3308      	adds	r3, #8
 8007250:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007252:	647a      	str	r2, [r7, #68]	@ 0x44
 8007254:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007256:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007258:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800725a:	e841 2300 	strex	r3, r2, [r1]
 800725e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1e5      	bne.n	8007232 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007266:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	3308      	adds	r3, #8
 800726c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007270:	e853 3f00 	ldrex	r3, [r3]
 8007274:	623b      	str	r3, [r7, #32]
   return(result);
 8007276:	6a3b      	ldr	r3, [r7, #32]
 8007278:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800727c:	663b      	str	r3, [r7, #96]	@ 0x60
 800727e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	3308      	adds	r3, #8
 8007284:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007286:	633a      	str	r2, [r7, #48]	@ 0x30
 8007288:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800728c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800728e:	e841 2300 	strex	r3, r2, [r1]
 8007292:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1e5      	bne.n	8007266 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800729a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800729c:	2220      	movs	r2, #32
 800729e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d118      	bne.n	80072dc <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	e853 3f00 	ldrex	r3, [r3]
 80072b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f023 0310 	bic.w	r3, r3, #16
 80072be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	461a      	mov	r2, r3
 80072c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072c8:	61fb      	str	r3, [r7, #28]
 80072ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072cc:	69b9      	ldr	r1, [r7, #24]
 80072ce:	69fa      	ldr	r2, [r7, #28]
 80072d0:	e841 2300 	strex	r3, r2, [r1]
 80072d4:	617b      	str	r3, [r7, #20]
   return(result);
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1e6      	bne.n	80072aa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072de:	2200      	movs	r2, #0
 80072e0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d107      	bne.n	80072fa <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80072f0:	4619      	mov	r1, r3
 80072f2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80072f4:	f7ff f908 	bl	8006508 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80072f8:	e002      	b.n	8007300 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80072fa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80072fc:	f7fa f81c 	bl	8001338 <HAL_UART_RxCpltCallback>
}
 8007300:	bf00      	nop
 8007302:	3770      	adds	r7, #112	@ 0x70
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007314:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2201      	movs	r2, #1
 800731a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007320:	2b01      	cmp	r3, #1
 8007322:	d109      	bne.n	8007338 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800732a:	085b      	lsrs	r3, r3, #1
 800732c:	b29b      	uxth	r3, r3
 800732e:	4619      	mov	r1, r3
 8007330:	68f8      	ldr	r0, [r7, #12]
 8007332:	f7ff f8e9 	bl	8006508 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007336:	e002      	b.n	800733e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f7ff f8d1 	bl	80064e0 <HAL_UART_RxHalfCpltCallback>
}
 800733e:	bf00      	nop
 8007340:	3710      	adds	r7, #16
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b086      	sub	sp, #24
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007352:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800735a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007362:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800736e:	2b80      	cmp	r3, #128	@ 0x80
 8007370:	d109      	bne.n	8007386 <UART_DMAError+0x40>
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	2b21      	cmp	r3, #33	@ 0x21
 8007376:	d106      	bne.n	8007386 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	2200      	movs	r2, #0
 800737c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007380:	6978      	ldr	r0, [r7, #20]
 8007382:	f7ff fe29 	bl	8006fd8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007390:	2b40      	cmp	r3, #64	@ 0x40
 8007392:	d109      	bne.n	80073a8 <UART_DMAError+0x62>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2b22      	cmp	r3, #34	@ 0x22
 8007398:	d106      	bne.n	80073a8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	2200      	movs	r2, #0
 800739e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80073a2:	6978      	ldr	r0, [r7, #20]
 80073a4:	f7ff fe59 	bl	800705a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ae:	f043 0210 	orr.w	r2, r3, #16
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073b8:	6978      	ldr	r0, [r7, #20]
 80073ba:	f7ff f89b 	bl	80064f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073be:	bf00      	nop
 80073c0:	3718      	adds	r7, #24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b085      	sub	sp, #20
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d101      	bne.n	80073dc <HAL_UARTEx_DisableFifoMode+0x16>
 80073d8:	2302      	movs	r3, #2
 80073da:	e027      	b.n	800742c <HAL_UARTEx_DisableFifoMode+0x66>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2224      	movs	r2, #36	@ 0x24
 80073e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 0201 	bic.w	r2, r2, #1
 8007402:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800740a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2220      	movs	r2, #32
 800741e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3714      	adds	r7, #20
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007448:	2b01      	cmp	r3, #1
 800744a:	d101      	bne.n	8007450 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800744c:	2302      	movs	r3, #2
 800744e:	e02d      	b.n	80074ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2224      	movs	r2, #36	@ 0x24
 800745c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f022 0201 	bic.w	r2, r2, #1
 8007476:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	683a      	ldr	r2, [r7, #0]
 8007488:	430a      	orrs	r2, r1
 800748a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f84f 	bl	8007530 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2220      	movs	r2, #32
 800749e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d101      	bne.n	80074cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80074c8:	2302      	movs	r3, #2
 80074ca:	e02d      	b.n	8007528 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2224      	movs	r2, #36	@ 0x24
 80074d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f022 0201 	bic.w	r2, r2, #1
 80074f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	683a      	ldr	r2, [r7, #0]
 8007504:	430a      	orrs	r2, r1
 8007506:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 f811 	bl	8007530 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2220      	movs	r2, #32
 800751a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800753c:	2b00      	cmp	r3, #0
 800753e:	d108      	bne.n	8007552 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007550:	e031      	b.n	80075b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007552:	2308      	movs	r3, #8
 8007554:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007556:	2308      	movs	r3, #8
 8007558:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	0e5b      	lsrs	r3, r3, #25
 8007562:	b2db      	uxtb	r3, r3
 8007564:	f003 0307 	and.w	r3, r3, #7
 8007568:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	0f5b      	lsrs	r3, r3, #29
 8007572:	b2db      	uxtb	r3, r3
 8007574:	f003 0307 	and.w	r3, r3, #7
 8007578:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800757a:	7bbb      	ldrb	r3, [r7, #14]
 800757c:	7b3a      	ldrb	r2, [r7, #12]
 800757e:	4911      	ldr	r1, [pc, #68]	@ (80075c4 <UARTEx_SetNbDataToProcess+0x94>)
 8007580:	5c8a      	ldrb	r2, [r1, r2]
 8007582:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007586:	7b3a      	ldrb	r2, [r7, #12]
 8007588:	490f      	ldr	r1, [pc, #60]	@ (80075c8 <UARTEx_SetNbDataToProcess+0x98>)
 800758a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800758c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007590:	b29a      	uxth	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007598:	7bfb      	ldrb	r3, [r7, #15]
 800759a:	7b7a      	ldrb	r2, [r7, #13]
 800759c:	4909      	ldr	r1, [pc, #36]	@ (80075c4 <UARTEx_SetNbDataToProcess+0x94>)
 800759e:	5c8a      	ldrb	r2, [r1, r2]
 80075a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80075a4:	7b7a      	ldrb	r2, [r7, #13]
 80075a6:	4908      	ldr	r1, [pc, #32]	@ (80075c8 <UARTEx_SetNbDataToProcess+0x98>)
 80075a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80075b6:	bf00      	nop
 80075b8:	3714      	adds	r7, #20
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	0800766c 	.word	0x0800766c
 80075c8:	08007674 	.word	0x08007674

080075cc <memset>:
 80075cc:	4402      	add	r2, r0
 80075ce:	4603      	mov	r3, r0
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d100      	bne.n	80075d6 <memset+0xa>
 80075d4:	4770      	bx	lr
 80075d6:	f803 1b01 	strb.w	r1, [r3], #1
 80075da:	e7f9      	b.n	80075d0 <memset+0x4>

080075dc <__libc_init_array>:
 80075dc:	b570      	push	{r4, r5, r6, lr}
 80075de:	4d0d      	ldr	r5, [pc, #52]	@ (8007614 <__libc_init_array+0x38>)
 80075e0:	4c0d      	ldr	r4, [pc, #52]	@ (8007618 <__libc_init_array+0x3c>)
 80075e2:	1b64      	subs	r4, r4, r5
 80075e4:	10a4      	asrs	r4, r4, #2
 80075e6:	2600      	movs	r6, #0
 80075e8:	42a6      	cmp	r6, r4
 80075ea:	d109      	bne.n	8007600 <__libc_init_array+0x24>
 80075ec:	4d0b      	ldr	r5, [pc, #44]	@ (800761c <__libc_init_array+0x40>)
 80075ee:	4c0c      	ldr	r4, [pc, #48]	@ (8007620 <__libc_init_array+0x44>)
 80075f0:	f000 f818 	bl	8007624 <_init>
 80075f4:	1b64      	subs	r4, r4, r5
 80075f6:	10a4      	asrs	r4, r4, #2
 80075f8:	2600      	movs	r6, #0
 80075fa:	42a6      	cmp	r6, r4
 80075fc:	d105      	bne.n	800760a <__libc_init_array+0x2e>
 80075fe:	bd70      	pop	{r4, r5, r6, pc}
 8007600:	f855 3b04 	ldr.w	r3, [r5], #4
 8007604:	4798      	blx	r3
 8007606:	3601      	adds	r6, #1
 8007608:	e7ee      	b.n	80075e8 <__libc_init_array+0xc>
 800760a:	f855 3b04 	ldr.w	r3, [r5], #4
 800760e:	4798      	blx	r3
 8007610:	3601      	adds	r6, #1
 8007612:	e7f2      	b.n	80075fa <__libc_init_array+0x1e>
 8007614:	08007684 	.word	0x08007684
 8007618:	08007684 	.word	0x08007684
 800761c:	08007684 	.word	0x08007684
 8007620:	08007688 	.word	0x08007688

08007624 <_init>:
 8007624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007626:	bf00      	nop
 8007628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800762a:	bc08      	pop	{r3}
 800762c:	469e      	mov	lr, r3
 800762e:	4770      	bx	lr

08007630 <_fini>:
 8007630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007632:	bf00      	nop
 8007634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007636:	bc08      	pop	{r3}
 8007638:	469e      	mov	lr, r3
 800763a:	4770      	bx	lr
