
LAB2_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053ec  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080055c4  080055c4  000065c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005604  08005604  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005604  08005604  00006604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800560c  0800560c  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800560c  0800560c  0000660c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005610  08005610  00006610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005614  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  2000000c  08005620  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08005620  00007194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001155c  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000234a  00000000  00000000  00018598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  0001a8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ad9  00000000  00000000  0001b700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026216  00000000  00000000  0001c1d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d2f  00000000  00000000  000423ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc6b9  00000000  00000000  0005311e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014f7d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c6c  00000000  00000000  0014f81c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  00153488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080055ac 	.word	0x080055ac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080055ac 	.word	0x080055ac

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b96a 	b.w	8000cf0 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	460c      	mov	r4, r1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d14e      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a40:	4694      	mov	ip, r2
 8000a42:	458c      	cmp	ip, r1
 8000a44:	4686      	mov	lr, r0
 8000a46:	fab2 f282 	clz	r2, r2
 8000a4a:	d962      	bls.n	8000b12 <__udivmoddi4+0xde>
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0320 	rsb	r3, r2, #32
 8000a52:	4091      	lsls	r1, r2
 8000a54:	fa20 f303 	lsr.w	r3, r0, r3
 8000a58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5c:	4319      	orrs	r1, r3
 8000a5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a66:	fa1f f68c 	uxth.w	r6, ip
 8000a6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a72:	fb07 1114 	mls	r1, r7, r4, r1
 8000a76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a7a:	fb04 f106 	mul.w	r1, r4, r6
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a8a:	f080 8112 	bcs.w	8000cb2 <__udivmoddi4+0x27e>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 810f 	bls.w	8000cb2 <__udivmoddi4+0x27e>
 8000a94:	3c02      	subs	r4, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a59      	subs	r1, r3, r1
 8000a9a:	fa1f f38e 	uxth.w	r3, lr
 8000a9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aa2:	fb07 1110 	mls	r1, r7, r0, r1
 8000aa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aaa:	fb00 f606 	mul.w	r6, r0, r6
 8000aae:	429e      	cmp	r6, r3
 8000ab0:	d90a      	bls.n	8000ac8 <__udivmoddi4+0x94>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aba:	f080 80fc 	bcs.w	8000cb6 <__udivmoddi4+0x282>
 8000abe:	429e      	cmp	r6, r3
 8000ac0:	f240 80f9 	bls.w	8000cb6 <__udivmoddi4+0x282>
 8000ac4:	4463      	add	r3, ip
 8000ac6:	3802      	subs	r0, #2
 8000ac8:	1b9b      	subs	r3, r3, r6
 8000aca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ace:	2100      	movs	r1, #0
 8000ad0:	b11d      	cbz	r5, 8000ada <__udivmoddi4+0xa6>
 8000ad2:	40d3      	lsrs	r3, r2
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e9c5 3200 	strd	r3, r2, [r5]
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d905      	bls.n	8000aee <__udivmoddi4+0xba>
 8000ae2:	b10d      	cbz	r5, 8000ae8 <__udivmoddi4+0xb4>
 8000ae4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4608      	mov	r0, r1
 8000aec:	e7f5      	b.n	8000ada <__udivmoddi4+0xa6>
 8000aee:	fab3 f183 	clz	r1, r3
 8000af2:	2900      	cmp	r1, #0
 8000af4:	d146      	bne.n	8000b84 <__udivmoddi4+0x150>
 8000af6:	42a3      	cmp	r3, r4
 8000af8:	d302      	bcc.n	8000b00 <__udivmoddi4+0xcc>
 8000afa:	4290      	cmp	r0, r2
 8000afc:	f0c0 80f0 	bcc.w	8000ce0 <__udivmoddi4+0x2ac>
 8000b00:	1a86      	subs	r6, r0, r2
 8000b02:	eb64 0303 	sbc.w	r3, r4, r3
 8000b06:	2001      	movs	r0, #1
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d0e6      	beq.n	8000ada <__udivmoddi4+0xa6>
 8000b0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b10:	e7e3      	b.n	8000ada <__udivmoddi4+0xa6>
 8000b12:	2a00      	cmp	r2, #0
 8000b14:	f040 8090 	bne.w	8000c38 <__udivmoddi4+0x204>
 8000b18:	eba1 040c 	sub.w	r4, r1, ip
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	fa1f f78c 	uxth.w	r7, ip
 8000b24:	2101      	movs	r1, #1
 8000b26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b36:	fb07 f006 	mul.w	r0, r7, r6
 8000b3a:	4298      	cmp	r0, r3
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x11c>
 8000b3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x11a>
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	f200 80cd 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b4e:	4626      	mov	r6, r4
 8000b50:	1a1c      	subs	r4, r3, r0
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b62:	fb00 f707 	mul.w	r7, r0, r7
 8000b66:	429f      	cmp	r7, r3
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x148>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b72:	d202      	bcs.n	8000b7a <__udivmoddi4+0x146>
 8000b74:	429f      	cmp	r7, r3
 8000b76:	f200 80b0 	bhi.w	8000cda <__udivmoddi4+0x2a6>
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	1bdb      	subs	r3, r3, r7
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	e7a5      	b.n	8000ad0 <__udivmoddi4+0x9c>
 8000b84:	f1c1 0620 	rsb	r6, r1, #32
 8000b88:	408b      	lsls	r3, r1
 8000b8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b8e:	431f      	orrs	r7, r3
 8000b90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b94:	fa04 f301 	lsl.w	r3, r4, r1
 8000b98:	ea43 030c 	orr.w	r3, r3, ip
 8000b9c:	40f4      	lsrs	r4, r6
 8000b9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ba2:	0c38      	lsrs	r0, r7, #16
 8000ba4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ba8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bac:	fa1f fc87 	uxth.w	ip, r7
 8000bb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bbc:	45a1      	cmp	r9, r4
 8000bbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc2:	d90a      	bls.n	8000bda <__udivmoddi4+0x1a6>
 8000bc4:	193c      	adds	r4, r7, r4
 8000bc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bca:	f080 8084 	bcs.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bce:	45a1      	cmp	r9, r4
 8000bd0:	f240 8081 	bls.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bd8:	443c      	add	r4, r7
 8000bda:	eba4 0409 	sub.w	r4, r4, r9
 8000bde:	fa1f f983 	uxth.w	r9, r3
 8000be2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000be6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	d907      	bls.n	8000c06 <__udivmoddi4+0x1d2>
 8000bf6:	193c      	adds	r4, r7, r4
 8000bf8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bfc:	d267      	bcs.n	8000cce <__udivmoddi4+0x29a>
 8000bfe:	45a4      	cmp	ip, r4
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0x29a>
 8000c02:	3b02      	subs	r3, #2
 8000c04:	443c      	add	r4, r7
 8000c06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c0e:	eba4 040c 	sub.w	r4, r4, ip
 8000c12:	429c      	cmp	r4, r3
 8000c14:	46ce      	mov	lr, r9
 8000c16:	469c      	mov	ip, r3
 8000c18:	d351      	bcc.n	8000cbe <__udivmoddi4+0x28a>
 8000c1a:	d04e      	beq.n	8000cba <__udivmoddi4+0x286>
 8000c1c:	b155      	cbz	r5, 8000c34 <__udivmoddi4+0x200>
 8000c1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c22:	eb64 040c 	sbc.w	r4, r4, ip
 8000c26:	fa04 f606 	lsl.w	r6, r4, r6
 8000c2a:	40cb      	lsrs	r3, r1
 8000c2c:	431e      	orrs	r6, r3
 8000c2e:	40cc      	lsrs	r4, r1
 8000c30:	e9c5 6400 	strd	r6, r4, [r5]
 8000c34:	2100      	movs	r1, #0
 8000c36:	e750      	b.n	8000ada <__udivmoddi4+0xa6>
 8000c38:	f1c2 0320 	rsb	r3, r2, #32
 8000c3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c44:	fa24 f303 	lsr.w	r3, r4, r3
 8000c48:	4094      	lsls	r4, r2
 8000c4a:	430c      	orrs	r4, r1
 8000c4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c54:	fa1f f78c 	uxth.w	r7, ip
 8000c58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c66:	fb00 f107 	mul.w	r1, r0, r7
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x24c>
 8000c6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c76:	d22c      	bcs.n	8000cd2 <__udivmoddi4+0x29e>
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	d92a      	bls.n	8000cd2 <__udivmoddi4+0x29e>
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a5b      	subs	r3, r3, r1
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c88:	fb08 3311 	mls	r3, r8, r1, r3
 8000c8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c90:	fb01 f307 	mul.w	r3, r1, r7
 8000c94:	42a3      	cmp	r3, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x276>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ca0:	d213      	bcs.n	8000cca <__udivmoddi4+0x296>
 8000ca2:	42a3      	cmp	r3, r4
 8000ca4:	d911      	bls.n	8000cca <__udivmoddi4+0x296>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	4464      	add	r4, ip
 8000caa:	1ae4      	subs	r4, r4, r3
 8000cac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cb0:	e739      	b.n	8000b26 <__udivmoddi4+0xf2>
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	e6f0      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e706      	b.n	8000ac8 <__udivmoddi4+0x94>
 8000cba:	45c8      	cmp	r8, r9
 8000cbc:	d2ae      	bcs.n	8000c1c <__udivmoddi4+0x1e8>
 8000cbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cc6:	3801      	subs	r0, #1
 8000cc8:	e7a8      	b.n	8000c1c <__udivmoddi4+0x1e8>
 8000cca:	4631      	mov	r1, r6
 8000ccc:	e7ed      	b.n	8000caa <__udivmoddi4+0x276>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	e799      	b.n	8000c06 <__udivmoddi4+0x1d2>
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	e7d4      	b.n	8000c80 <__udivmoddi4+0x24c>
 8000cd6:	46d6      	mov	lr, sl
 8000cd8:	e77f      	b.n	8000bda <__udivmoddi4+0x1a6>
 8000cda:	4463      	add	r3, ip
 8000cdc:	3802      	subs	r0, #2
 8000cde:	e74d      	b.n	8000b7c <__udivmoddi4+0x148>
 8000ce0:	4606      	mov	r6, r0
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	e70f      	b.n	8000b08 <__udivmoddi4+0xd4>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	e730      	b.n	8000b50 <__udivmoddi4+0x11c>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_idiv0>:
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	0000      	movs	r0, r0
	...

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfc:	f000 fb63 	bl	80013c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d00:	f000 f83a 	bl	8000d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d04:	f000 f970 	bl	8000fe8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d08:	f000 f944 	bl	8000f94 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000d0c:	f000 f8f8 	bl	8000f00 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000d10:	f000 f87e 	bl	8000e10 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000d14:	217f      	movs	r1, #127	@ 0x7f
 8000d16:	4814      	ldr	r0, [pc, #80]	@ (8000d68 <main+0x70>)
 8000d18:	f001 fed4 	bl	8002ac4 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 40);
 8000d1c:	2228      	movs	r2, #40	@ 0x28
 8000d1e:	4913      	ldr	r1, [pc, #76]	@ (8000d6c <main+0x74>)
 8000d20:	4811      	ldr	r0, [pc, #68]	@ (8000d68 <main+0x70>)
 8000d22:	f000 ffc1 	bl	8001ca8 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Angular_position = (ADC_RawRead[0]*360.0)/4095.0;
 8000d26:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <main+0x74>)
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fbc6 	bl	80004bc <__aeabi_i2d>
 8000d30:	f04f 0200 	mov.w	r2, #0
 8000d34:	4b0e      	ldr	r3, [pc, #56]	@ (8000d70 <main+0x78>)
 8000d36:	f7ff fc2b 	bl	8000590 <__aeabi_dmul>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	4610      	mov	r0, r2
 8000d40:	4619      	mov	r1, r3
 8000d42:	a307      	add	r3, pc, #28	@ (adr r3, 8000d60 <main+0x68>)
 8000d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d48:	f7ff fd4c 	bl	80007e4 <__aeabi_ddiv>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	460b      	mov	r3, r1
 8000d50:	4610      	mov	r0, r2
 8000d52:	4619      	mov	r1, r3
 8000d54:	f7ff fe2e 	bl	80009b4 <__aeabi_d2iz>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	4a06      	ldr	r2, [pc, #24]	@ (8000d74 <main+0x7c>)
 8000d5c:	6013      	str	r3, [r2, #0]
 8000d5e:	e7e2      	b.n	8000d26 <main+0x2e>
 8000d60:	00000000 	.word	0x00000000
 8000d64:	40affe00 	.word	0x40affe00
 8000d68:	20000028 	.word	0x20000028
 8000d6c:	20000188 	.word	0x20000188
 8000d70:	40768000 	.word	0x40768000
 8000d74:	2000018c 	.word	0x2000018c

08000d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b094      	sub	sp, #80	@ 0x50
 8000d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7e:	f107 0318 	add.w	r3, r7, #24
 8000d82:	2238      	movs	r2, #56	@ 0x38
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f004 fbe4 	bl	8005554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f002 fd3c 	bl	8003818 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000da0:	2302      	movs	r3, #2
 8000da2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000da8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000daa:	2340      	movs	r3, #64	@ 0x40
 8000dac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dae:	2302      	movs	r3, #2
 8000db0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000db2:	2302      	movs	r3, #2
 8000db4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000db6:	2304      	movs	r3, #4
 8000db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000dba:	2355      	movs	r3, #85	@ 0x55
 8000dbc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dca:	f107 0318 	add.w	r3, r7, #24
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f002 fdd6 	bl	8003980 <HAL_RCC_OscConfig>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000dda:	f000 f973 	bl	80010c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dde:	230f      	movs	r3, #15
 8000de0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de2:	2303      	movs	r3, #3
 8000de4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2104      	movs	r1, #4
 8000df6:	4618      	mov	r0, r3
 8000df8:	f003 f8d4 	bl	8003fa4 <HAL_RCC_ClockConfig>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000e02:	f000 f95f 	bl	80010c4 <Error_Handler>
  }
}
 8000e06:	bf00      	nop
 8000e08:	3750      	adds	r7, #80	@ 0x50
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08c      	sub	sp, #48	@ 0x30
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	2220      	movs	r2, #32
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f004 fb93 	bl	8005554 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e2e:	4b32      	ldr	r3, [pc, #200]	@ (8000ef8 <MX_ADC1_Init+0xe8>)
 8000e30:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000e34:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e36:	4b30      	ldr	r3, [pc, #192]	@ (8000ef8 <MX_ADC1_Init+0xe8>)
 8000e38:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e3c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e3e:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef8 <MX_ADC1_Init+0xe8>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e44:	4b2c      	ldr	r3, [pc, #176]	@ (8000ef8 <MX_ADC1_Init+0xe8>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e4a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef8 <MX_ADC1_Init+0xe8>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e50:	4b29      	ldr	r3, [pc, #164]	@ (8000ef8 <MX_ADC1_Init+0xe8>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e56:	4b28      	ldr	r3, [pc, #160]	@ (8000ef8 <MX_ADC1_Init+0xe8>)
 8000e58:	2204      	movs	r2, #4
 8000e5a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e5c:	4b26      	ldr	r3, [pc, #152]	@ (8000ef8 <MX_ADC1_Init+0xe8>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e62:	4b25      	ldr	r3, [pc, #148]	@ (8000ef8 <MX_ADC1_Init+0xe8>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000e68:	4b23      	ldr	r3, [pc, #140]	@ (8000ef8 <MX_ADC1_Init+0xe8>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e6e:	4b22      	ldr	r3, [pc, #136]	@ (8000ef8 <MX_ADC1_Init+0xe8>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e76:	4b20      	ldr	r3, [pc, #128]	@ (8000ef8 <MX_ADC1_Init+0xe8>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef8 <MX_ADC1_Init+0xe8>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e82:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef8 <MX_ADC1_Init+0xe8>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef8 <MX_ADC1_Init+0xe8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000e90:	4b19      	ldr	r3, [pc, #100]	@ (8000ef8 <MX_ADC1_Init+0xe8>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e98:	4817      	ldr	r0, [pc, #92]	@ (8000ef8 <MX_ADC1_Init+0xe8>)
 8000e9a:	f000 fd49 	bl	8001930 <HAL_ADC_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000ea4:	f000 f90e 	bl	80010c4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000eac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4811      	ldr	r0, [pc, #68]	@ (8000ef8 <MX_ADC1_Init+0xe8>)
 8000eb4:	f001 fe68 	bl	8002b88 <HAL_ADCEx_MultiModeConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000ebe:	f000 f901 	bl	80010c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8000efc <MX_ADC1_Init+0xec>)
 8000ec4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ec6:	2306      	movs	r3, #6
 8000ec8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000eca:	2307      	movs	r3, #7
 8000ecc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ece:	237f      	movs	r3, #127	@ 0x7f
 8000ed0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	4619      	mov	r1, r3
 8000ede:	4806      	ldr	r0, [pc, #24]	@ (8000ef8 <MX_ADC1_Init+0xe8>)
 8000ee0:	f000 ffd4 	bl	8001e8c <HAL_ADC_ConfigChannel>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000eea:	f000 f8eb 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	3730      	adds	r7, #48	@ 0x30
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000028 	.word	0x20000028
 8000efc:	04300002 	.word	0x04300002

08000f00 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000f04:	4b21      	ldr	r3, [pc, #132]	@ (8000f8c <MX_LPUART1_UART_Init+0x8c>)
 8000f06:	4a22      	ldr	r2, [pc, #136]	@ (8000f90 <MX_LPUART1_UART_Init+0x90>)
 8000f08:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000f0a:	4b20      	ldr	r3, [pc, #128]	@ (8000f8c <MX_LPUART1_UART_Init+0x8c>)
 8000f0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f10:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f12:	4b1e      	ldr	r3, [pc, #120]	@ (8000f8c <MX_LPUART1_UART_Init+0x8c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000f18:	4b1c      	ldr	r3, [pc, #112]	@ (8000f8c <MX_LPUART1_UART_Init+0x8c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f8c <MX_LPUART1_UART_Init+0x8c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000f24:	4b19      	ldr	r3, [pc, #100]	@ (8000f8c <MX_LPUART1_UART_Init+0x8c>)
 8000f26:	220c      	movs	r2, #12
 8000f28:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f2a:	4b18      	ldr	r3, [pc, #96]	@ (8000f8c <MX_LPUART1_UART_Init+0x8c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f30:	4b16      	ldr	r3, [pc, #88]	@ (8000f8c <MX_LPUART1_UART_Init+0x8c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f36:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <MX_LPUART1_UART_Init+0x8c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f3c:	4b13      	ldr	r3, [pc, #76]	@ (8000f8c <MX_LPUART1_UART_Init+0x8c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000f42:	4812      	ldr	r0, [pc, #72]	@ (8000f8c <MX_LPUART1_UART_Init+0x8c>)
 8000f44:	f003 fc98 	bl	8004878 <HAL_UART_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f4e:	f000 f8b9 	bl	80010c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f52:	2100      	movs	r1, #0
 8000f54:	480d      	ldr	r0, [pc, #52]	@ (8000f8c <MX_LPUART1_UART_Init+0x8c>)
 8000f56:	f004 fa33 	bl	80053c0 <HAL_UARTEx_SetTxFifoThreshold>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000f60:	f000 f8b0 	bl	80010c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f64:	2100      	movs	r1, #0
 8000f66:	4809      	ldr	r0, [pc, #36]	@ (8000f8c <MX_LPUART1_UART_Init+0x8c>)
 8000f68:	f004 fa68 	bl	800543c <HAL_UARTEx_SetRxFifoThreshold>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000f72:	f000 f8a7 	bl	80010c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <MX_LPUART1_UART_Init+0x8c>)
 8000f78:	f004 f9e9 	bl	800534e <HAL_UARTEx_DisableFifoMode>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000f82:	f000 f89f 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200000f4 	.word	0x200000f4
 8000f90:	40008000 	.word	0x40008000

08000f94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f9a:	4b12      	ldr	r3, [pc, #72]	@ (8000fe4 <MX_DMA_Init+0x50>)
 8000f9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f9e:	4a11      	ldr	r2, [pc, #68]	@ (8000fe4 <MX_DMA_Init+0x50>)
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <MX_DMA_Init+0x50>)
 8000fa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <MX_DMA_Init+0x50>)
 8000fb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fb6:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe4 <MX_DMA_Init+0x50>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000fbe:	4b09      	ldr	r3, [pc, #36]	@ (8000fe4 <MX_DMA_Init+0x50>)
 8000fc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2100      	movs	r1, #0
 8000fce:	200b      	movs	r0, #11
 8000fd0:	f001 ffbd 	bl	8002f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fd4:	200b      	movs	r0, #11
 8000fd6:	f001 ffd4 	bl	8002f82 <HAL_NVIC_EnableIRQ>

}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	@ 0x28
 8000fec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffe:	4b2f      	ldr	r3, [pc, #188]	@ (80010bc <MX_GPIO_Init+0xd4>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001002:	4a2e      	ldr	r2, [pc, #184]	@ (80010bc <MX_GPIO_Init+0xd4>)
 8001004:	f043 0304 	orr.w	r3, r3, #4
 8001008:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800100a:	4b2c      	ldr	r3, [pc, #176]	@ (80010bc <MX_GPIO_Init+0xd4>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100e:	f003 0304 	and.w	r3, r3, #4
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001016:	4b29      	ldr	r3, [pc, #164]	@ (80010bc <MX_GPIO_Init+0xd4>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101a:	4a28      	ldr	r2, [pc, #160]	@ (80010bc <MX_GPIO_Init+0xd4>)
 800101c:	f043 0320 	orr.w	r3, r3, #32
 8001020:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001022:	4b26      	ldr	r3, [pc, #152]	@ (80010bc <MX_GPIO_Init+0xd4>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001026:	f003 0320 	and.w	r3, r3, #32
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	4b23      	ldr	r3, [pc, #140]	@ (80010bc <MX_GPIO_Init+0xd4>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001032:	4a22      	ldr	r2, [pc, #136]	@ (80010bc <MX_GPIO_Init+0xd4>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800103a:	4b20      	ldr	r3, [pc, #128]	@ (80010bc <MX_GPIO_Init+0xd4>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	4b1d      	ldr	r3, [pc, #116]	@ (80010bc <MX_GPIO_Init+0xd4>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800104a:	4a1c      	ldr	r2, [pc, #112]	@ (80010bc <MX_GPIO_Init+0xd4>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001052:	4b1a      	ldr	r3, [pc, #104]	@ (80010bc <MX_GPIO_Init+0xd4>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	2120      	movs	r1, #32
 8001062:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001066:	f002 fb9b 	bl	80037a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800106a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800106e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001070:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4619      	mov	r1, r3
 8001080:	480f      	ldr	r0, [pc, #60]	@ (80010c0 <MX_GPIO_Init+0xd8>)
 8001082:	f002 fa0b 	bl	800349c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001086:	2320      	movs	r3, #32
 8001088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	2301      	movs	r3, #1
 800108c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	4619      	mov	r1, r3
 800109c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a0:	f002 f9fc 	bl	800349c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2100      	movs	r1, #0
 80010a8:	2028      	movs	r0, #40	@ 0x28
 80010aa:	f001 ff50 	bl	8002f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010ae:	2028      	movs	r0, #40	@ 0x28
 80010b0:	f001 ff67 	bl	8002f82 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010b4:	bf00      	nop
 80010b6:	3728      	adds	r7, #40	@ 0x28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40021000 	.word	0x40021000
 80010c0:	48000800 	.word	0x48000800

080010c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c8:	b672      	cpsid	i
}
 80010ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <Error_Handler+0x8>

080010d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001114 <HAL_MspInit+0x44>)
 80010d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010da:	4a0e      	ldr	r2, [pc, #56]	@ (8001114 <HAL_MspInit+0x44>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80010e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001114 <HAL_MspInit+0x44>)
 80010e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ee:	4b09      	ldr	r3, [pc, #36]	@ (8001114 <HAL_MspInit+0x44>)
 80010f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f2:	4a08      	ldr	r2, [pc, #32]	@ (8001114 <HAL_MspInit+0x44>)
 80010f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80010fa:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <HAL_MspInit+0x44>)
 80010fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001106:	f002 fc2b 	bl	8003960 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000

08001118 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b09e      	sub	sp, #120	@ 0x78
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	2254      	movs	r2, #84	@ 0x54
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f004 fa0b 	bl	8005554 <memset>
  if(hadc->Instance==ADC1)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001146:	d15f      	bne.n	8001208 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001148:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800114c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800114e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001152:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	4618      	mov	r0, r3
 800115a:	f003 f93f 	bl	80043dc <HAL_RCCEx_PeriphCLKConfig>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001164:	f7ff ffae 	bl	80010c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001168:	4b29      	ldr	r3, [pc, #164]	@ (8001210 <HAL_ADC_MspInit+0xf8>)
 800116a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116c:	4a28      	ldr	r2, [pc, #160]	@ (8001210 <HAL_ADC_MspInit+0xf8>)
 800116e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001172:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001174:	4b26      	ldr	r3, [pc, #152]	@ (8001210 <HAL_ADC_MspInit+0xf8>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001178:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001180:	4b23      	ldr	r3, [pc, #140]	@ (8001210 <HAL_ADC_MspInit+0xf8>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001184:	4a22      	ldr	r2, [pc, #136]	@ (8001210 <HAL_ADC_MspInit+0xf8>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800118c:	4b20      	ldr	r3, [pc, #128]	@ (8001210 <HAL_ADC_MspInit+0xf8>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001198:	2301      	movs	r3, #1
 800119a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119c:	2303      	movs	r3, #3
 800119e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80011a8:	4619      	mov	r1, r3
 80011aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ae:	f002 f975 	bl	800349c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011b2:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <HAL_ADC_MspInit+0xfc>)
 80011b4:	4a18      	ldr	r2, [pc, #96]	@ (8001218 <HAL_ADC_MspInit+0x100>)
 80011b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80011b8:	4b16      	ldr	r3, [pc, #88]	@ (8001214 <HAL_ADC_MspInit+0xfc>)
 80011ba:	2205      	movs	r2, #5
 80011bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011be:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <HAL_ADC_MspInit+0xfc>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c4:	4b13      	ldr	r3, [pc, #76]	@ (8001214 <HAL_ADC_MspInit+0xfc>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011ca:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <HAL_ADC_MspInit+0xfc>)
 80011cc:	2280      	movs	r2, #128	@ 0x80
 80011ce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011d0:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <HAL_ADC_MspInit+0xfc>)
 80011d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011d6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <HAL_ADC_MspInit+0xfc>)
 80011da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011de:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <HAL_ADC_MspInit+0xfc>)
 80011e2:	2220      	movs	r2, #32
 80011e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <HAL_ADC_MspInit+0xfc>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011ec:	4809      	ldr	r0, [pc, #36]	@ (8001214 <HAL_ADC_MspInit+0xfc>)
 80011ee:	f001 fee3 	bl	8002fb8 <HAL_DMA_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80011f8:	f7ff ff64 	bl	80010c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a05      	ldr	r2, [pc, #20]	@ (8001214 <HAL_ADC_MspInit+0xfc>)
 8001200:	655a      	str	r2, [r3, #84]	@ 0x54
 8001202:	4a04      	ldr	r2, [pc, #16]	@ (8001214 <HAL_ADC_MspInit+0xfc>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001208:	bf00      	nop
 800120a:	3778      	adds	r7, #120	@ 0x78
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40021000 	.word	0x40021000
 8001214:	20000094 	.word	0x20000094
 8001218:	40020008 	.word	0x40020008

0800121c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b09e      	sub	sp, #120	@ 0x78
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	2254      	movs	r2, #84	@ 0x54
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f004 f989 	bl	8005554 <memset>
  if(huart->Instance==LPUART1)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a1f      	ldr	r2, [pc, #124]	@ (80012c4 <HAL_UART_MspInit+0xa8>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d136      	bne.n	80012ba <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800124c:	2320      	movs	r3, #32
 800124e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001250:	2300      	movs	r3, #0
 8001252:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	4618      	mov	r0, r3
 800125a:	f003 f8bf 	bl	80043dc <HAL_RCCEx_PeriphCLKConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001264:	f7ff ff2e 	bl	80010c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001268:	4b17      	ldr	r3, [pc, #92]	@ (80012c8 <HAL_UART_MspInit+0xac>)
 800126a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800126c:	4a16      	ldr	r2, [pc, #88]	@ (80012c8 <HAL_UART_MspInit+0xac>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001274:	4b14      	ldr	r3, [pc, #80]	@ (80012c8 <HAL_UART_MspInit+0xac>)
 8001276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001280:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <HAL_UART_MspInit+0xac>)
 8001282:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001284:	4a10      	ldr	r2, [pc, #64]	@ (80012c8 <HAL_UART_MspInit+0xac>)
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128c:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <HAL_UART_MspInit+0xac>)
 800128e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001298:	230c      	movs	r3, #12
 800129a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80012a8:	230c      	movs	r3, #12
 80012aa:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012b0:	4619      	mov	r1, r3
 80012b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012b6:	f002 f8f1 	bl	800349c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80012ba:	bf00      	nop
 80012bc:	3778      	adds	r7, #120	@ 0x78
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40008000 	.word	0x40008000
 80012c8:	40021000 	.word	0x40021000

080012cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <NMI_Handler+0x4>

080012d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <HardFault_Handler+0x4>

080012dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <MemManage_Handler+0x4>

080012e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <BusFault_Handler+0x4>

080012ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <UsageFault_Handler+0x4>

080012f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001322:	f000 f8a3 	bl	800146c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
	...

0800132c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001330:	4802      	ldr	r0, [pc, #8]	@ (800133c <DMA1_Channel1_IRQHandler+0x10>)
 8001332:	f001 ff64 	bl	80031fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000094 	.word	0x20000094

08001340 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001344:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001348:	f002 fa42 	bl	80037d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}

08001350 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001354:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <SystemInit+0x20>)
 8001356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800135a:	4a05      	ldr	r2, [pc, #20]	@ (8001370 <SystemInit+0x20>)
 800135c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001360:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001374:	480d      	ldr	r0, [pc, #52]	@ (80013ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001376:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001378:	f7ff ffea 	bl	8001350 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800137c:	480c      	ldr	r0, [pc, #48]	@ (80013b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800137e:	490d      	ldr	r1, [pc, #52]	@ (80013b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001380:	4a0d      	ldr	r2, [pc, #52]	@ (80013b8 <LoopForever+0xe>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001384:	e002      	b.n	800138c <LoopCopyDataInit>

08001386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138a:	3304      	adds	r3, #4

0800138c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800138c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001390:	d3f9      	bcc.n	8001386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001392:	4a0a      	ldr	r2, [pc, #40]	@ (80013bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001394:	4c0a      	ldr	r4, [pc, #40]	@ (80013c0 <LoopForever+0x16>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001398:	e001      	b.n	800139e <LoopFillZerobss>

0800139a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800139c:	3204      	adds	r2, #4

0800139e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a0:	d3fb      	bcc.n	800139a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013a2:	f004 f8df 	bl	8005564 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013a6:	f7ff fca7 	bl	8000cf8 <main>

080013aa <LoopForever>:

LoopForever:
    b LoopForever
 80013aa:	e7fe      	b.n	80013aa <LoopForever>
  ldr   r0, =_estack
 80013ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013b8:	08005614 	.word	0x08005614
  ldr r2, =_sbss
 80013bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013c0:	20000194 	.word	0x20000194

080013c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013c4:	e7fe      	b.n	80013c4 <ADC1_2_IRQHandler>

080013c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013cc:	2300      	movs	r3, #0
 80013ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d0:	2003      	movs	r0, #3
 80013d2:	f001 fdb1 	bl	8002f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013d6:	2000      	movs	r0, #0
 80013d8:	f000 f80e 	bl	80013f8 <HAL_InitTick>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d002      	beq.n	80013e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	71fb      	strb	r3, [r7, #7]
 80013e6:	e001      	b.n	80013ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013e8:	f7ff fe72 	bl	80010d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013ec:	79fb      	ldrb	r3, [r7, #7]

}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001400:	2300      	movs	r3, #0
 8001402:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001404:	4b16      	ldr	r3, [pc, #88]	@ (8001460 <HAL_InitTick+0x68>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d022      	beq.n	8001452 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800140c:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <HAL_InitTick+0x6c>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	4b13      	ldr	r3, [pc, #76]	@ (8001460 <HAL_InitTick+0x68>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001418:	fbb1 f3f3 	udiv	r3, r1, r3
 800141c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001420:	4618      	mov	r0, r3
 8001422:	f001 fdbc 	bl	8002f9e <HAL_SYSTICK_Config>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d10f      	bne.n	800144c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b0f      	cmp	r3, #15
 8001430:	d809      	bhi.n	8001446 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001432:	2200      	movs	r2, #0
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	f04f 30ff 	mov.w	r0, #4294967295
 800143a:	f001 fd88 	bl	8002f4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800143e:	4a0a      	ldr	r2, [pc, #40]	@ (8001468 <HAL_InitTick+0x70>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	e007      	b.n	8001456 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	73fb      	strb	r3, [r7, #15]
 800144a:	e004      	b.n	8001456 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e001      	b.n	8001456 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001456:	7bfb      	ldrb	r3, [r7, #15]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000008 	.word	0x20000008
 8001464:	20000000 	.word	0x20000000
 8001468:	20000004 	.word	0x20000004

0800146c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001470:	4b05      	ldr	r3, [pc, #20]	@ (8001488 <HAL_IncTick+0x1c>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b05      	ldr	r3, [pc, #20]	@ (800148c <HAL_IncTick+0x20>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4413      	add	r3, r2
 800147a:	4a03      	ldr	r2, [pc, #12]	@ (8001488 <HAL_IncTick+0x1c>)
 800147c:	6013      	str	r3, [r2, #0]
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	20000190 	.word	0x20000190
 800148c:	20000008 	.word	0x20000008

08001490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return uwTick;
 8001494:	4b03      	ldr	r3, [pc, #12]	@ (80014a4 <HAL_GetTick+0x14>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000190 	.word	0x20000190

080014a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	431a      	orrs	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	609a      	str	r2, [r3, #8]
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	609a      	str	r2, [r3, #8]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001510:	b480      	push	{r7}
 8001512:	b087      	sub	sp, #28
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	3360      	adds	r3, #96	@ 0x60
 8001522:	461a      	mov	r2, r3
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b08      	ldr	r3, [pc, #32]	@ (8001554 <LL_ADC_SetOffset+0x44>)
 8001532:	4013      	ands	r3, r2
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001548:	bf00      	nop
 800154a:	371c      	adds	r7, #28
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	03fff000 	.word	0x03fff000

08001558 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3360      	adds	r3, #96	@ 0x60
 8001566:	461a      	mov	r2, r3
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001578:	4618      	mov	r0, r3
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001584:	b480      	push	{r7}
 8001586:	b087      	sub	sp, #28
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	3360      	adds	r3, #96	@ 0x60
 8001594:	461a      	mov	r2, r3
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	431a      	orrs	r2, r3
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80015ae:	bf00      	nop
 80015b0:	371c      	adds	r7, #28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b087      	sub	sp, #28
 80015be:	af00      	add	r7, sp, #0
 80015c0:	60f8      	str	r0, [r7, #12]
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	3360      	adds	r3, #96	@ 0x60
 80015ca:	461a      	mov	r2, r3
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	431a      	orrs	r2, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80015e4:	bf00      	nop
 80015e6:	371c      	adds	r7, #28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b087      	sub	sp, #28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	3360      	adds	r3, #96	@ 0x60
 8001600:	461a      	mov	r2, r3
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	431a      	orrs	r2, r3
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800161a:	bf00      	nop
 800161c:	371c      	adds	r7, #28
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	695b      	ldr	r3, [r3, #20]
 8001634:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	615a      	str	r2, [r3, #20]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001672:	b480      	push	{r7}
 8001674:	b087      	sub	sp, #28
 8001676:	af00      	add	r7, sp, #0
 8001678:	60f8      	str	r0, [r7, #12]
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	3330      	adds	r3, #48	@ 0x30
 8001682:	461a      	mov	r2, r3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	0a1b      	lsrs	r3, r3, #8
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	4413      	add	r3, r2
 8001690:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	f003 031f 	and.w	r3, r3, #31
 800169c:	211f      	movs	r1, #31
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	43db      	mvns	r3, r3
 80016a4:	401a      	ands	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	0e9b      	lsrs	r3, r3, #26
 80016aa:	f003 011f 	and.w	r1, r3, #31
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	f003 031f 	and.w	r3, r3, #31
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	431a      	orrs	r2, r3
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016be:	bf00      	nop
 80016c0:	371c      	adds	r7, #28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b087      	sub	sp, #28
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	60f8      	str	r0, [r7, #12]
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	3314      	adds	r3, #20
 80016da:	461a      	mov	r2, r3
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	0e5b      	lsrs	r3, r3, #25
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	4413      	add	r3, r2
 80016e8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	0d1b      	lsrs	r3, r3, #20
 80016f2:	f003 031f 	and.w	r3, r3, #31
 80016f6:	2107      	movs	r1, #7
 80016f8:	fa01 f303 	lsl.w	r3, r1, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	401a      	ands	r2, r3
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	0d1b      	lsrs	r3, r3, #20
 8001704:	f003 031f 	and.w	r3, r3, #31
 8001708:	6879      	ldr	r1, [r7, #4]
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	431a      	orrs	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001714:	bf00      	nop
 8001716:	371c      	adds	r7, #28
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001738:	43db      	mvns	r3, r3
 800173a:	401a      	ands	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f003 0318 	and.w	r3, r3, #24
 8001742:	4908      	ldr	r1, [pc, #32]	@ (8001764 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001744:	40d9      	lsrs	r1, r3
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	400b      	ands	r3, r1
 800174a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800174e:	431a      	orrs	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001756:	bf00      	nop
 8001758:	3714      	adds	r7, #20
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	0007ffff 	.word	0x0007ffff

08001768 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 031f 	and.w	r3, r3, #31
}
 8001778:	4618      	mov	r0, r3
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001794:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6093      	str	r3, [r2, #8]
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80017b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80017bc:	d101      	bne.n	80017c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80017e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017e4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001808:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800180c:	d101      	bne.n	8001812 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001830:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001834:	f043 0201 	orr.w	r2, r3, #1
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001858:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800185c:	f043 0202 	orr.w	r2, r3, #2
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b01      	cmp	r3, #1
 8001882:	d101      	bne.n	8001888 <LL_ADC_IsEnabled+0x18>
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <LL_ADC_IsEnabled+0x1a>
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d101      	bne.n	80018ae <LL_ADC_IsDisableOngoing+0x18>
 80018aa:	2301      	movs	r3, #1
 80018ac:	e000      	b.n	80018b0 <LL_ADC_IsDisableOngoing+0x1a>
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80018cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018d0:	f043 0204 	orr.w	r2, r3, #4
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b04      	cmp	r3, #4
 80018f6:	d101      	bne.n	80018fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b08      	cmp	r3, #8
 800191c:	d101      	bne.n	8001922 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001930:	b590      	push	{r4, r7, lr}
 8001932:	b089      	sub	sp, #36	@ 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001938:	2300      	movs	r3, #0
 800193a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e1a9      	b.n	8001c9e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001954:	2b00      	cmp	r3, #0
 8001956:	d109      	bne.n	800196c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff fbdd 	bl	8001118 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff19 	bl	80017a8 <LL_ADC_IsDeepPowerDownEnabled>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d004      	beq.n	8001986 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff feff 	bl	8001784 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ff34 	bl	80017f8 <LL_ADC_IsInternalRegulatorEnabled>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d115      	bne.n	80019c2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff ff18 	bl	80017d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019a0:	4b9c      	ldr	r3, [pc, #624]	@ (8001c14 <HAL_ADC_Init+0x2e4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	099b      	lsrs	r3, r3, #6
 80019a6:	4a9c      	ldr	r2, [pc, #624]	@ (8001c18 <HAL_ADC_Init+0x2e8>)
 80019a8:	fba2 2303 	umull	r2, r3, r2, r3
 80019ac:	099b      	lsrs	r3, r3, #6
 80019ae:	3301      	adds	r3, #1
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80019b4:	e002      	b.n	80019bc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f9      	bne.n	80019b6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff ff16 	bl	80017f8 <LL_ADC_IsInternalRegulatorEnabled>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10d      	bne.n	80019ee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d6:	f043 0210 	orr.w	r2, r3, #16
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019e2:	f043 0201 	orr.w	r2, r3, #1
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff ff76 	bl	80018e4 <LL_ADC_REG_IsConversionOngoing>
 80019f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019fe:	f003 0310 	and.w	r3, r3, #16
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f040 8142 	bne.w	8001c8c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f040 813e 	bne.w	8001c8c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a14:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001a18:	f043 0202 	orr.w	r2, r3, #2
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff23 	bl	8001870 <LL_ADC_IsEnabled>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d141      	bne.n	8001ab4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a38:	d004      	beq.n	8001a44 <HAL_ADC_Init+0x114>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a77      	ldr	r2, [pc, #476]	@ (8001c1c <HAL_ADC_Init+0x2ec>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d10f      	bne.n	8001a64 <HAL_ADC_Init+0x134>
 8001a44:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001a48:	f7ff ff12 	bl	8001870 <LL_ADC_IsEnabled>
 8001a4c:	4604      	mov	r4, r0
 8001a4e:	4873      	ldr	r0, [pc, #460]	@ (8001c1c <HAL_ADC_Init+0x2ec>)
 8001a50:	f7ff ff0e 	bl	8001870 <LL_ADC_IsEnabled>
 8001a54:	4603      	mov	r3, r0
 8001a56:	4323      	orrs	r3, r4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	bf0c      	ite	eq
 8001a5c:	2301      	moveq	r3, #1
 8001a5e:	2300      	movne	r3, #0
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	e012      	b.n	8001a8a <HAL_ADC_Init+0x15a>
 8001a64:	486e      	ldr	r0, [pc, #440]	@ (8001c20 <HAL_ADC_Init+0x2f0>)
 8001a66:	f7ff ff03 	bl	8001870 <LL_ADC_IsEnabled>
 8001a6a:	4604      	mov	r4, r0
 8001a6c:	486d      	ldr	r0, [pc, #436]	@ (8001c24 <HAL_ADC_Init+0x2f4>)
 8001a6e:	f7ff feff 	bl	8001870 <LL_ADC_IsEnabled>
 8001a72:	4603      	mov	r3, r0
 8001a74:	431c      	orrs	r4, r3
 8001a76:	486c      	ldr	r0, [pc, #432]	@ (8001c28 <HAL_ADC_Init+0x2f8>)
 8001a78:	f7ff fefa 	bl	8001870 <LL_ADC_IsEnabled>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4323      	orrs	r3, r4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	bf0c      	ite	eq
 8001a84:	2301      	moveq	r3, #1
 8001a86:	2300      	movne	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d012      	beq.n	8001ab4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a96:	d004      	beq.n	8001aa2 <HAL_ADC_Init+0x172>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a5f      	ldr	r2, [pc, #380]	@ (8001c1c <HAL_ADC_Init+0x2ec>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d101      	bne.n	8001aa6 <HAL_ADC_Init+0x176>
 8001aa2:	4a62      	ldr	r2, [pc, #392]	@ (8001c2c <HAL_ADC_Init+0x2fc>)
 8001aa4:	e000      	b.n	8001aa8 <HAL_ADC_Init+0x178>
 8001aa6:	4a62      	ldr	r2, [pc, #392]	@ (8001c30 <HAL_ADC_Init+0x300>)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	4619      	mov	r1, r3
 8001aae:	4610      	mov	r0, r2
 8001ab0:	f7ff fcfa 	bl	80014a8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	7f5b      	ldrb	r3, [r3, #29]
 8001ab8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001abe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001ac4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001aca:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ad2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d106      	bne.n	8001af0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	045b      	lsls	r3, r3, #17
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d009      	beq.n	8001b0c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001afc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b04:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	4b48      	ldr	r3, [pc, #288]	@ (8001c34 <HAL_ADC_Init+0x304>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6812      	ldr	r2, [r2, #0]
 8001b1a:	69b9      	ldr	r1, [r7, #24]
 8001b1c:	430b      	orrs	r3, r1
 8001b1e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fee5 	bl	800190a <LL_ADC_INJ_IsConversionOngoing>
 8001b40:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d17f      	bne.n	8001c48 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d17c      	bne.n	8001c48 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b52:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b5a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001b6a:	f023 0302 	bic.w	r3, r3, #2
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6812      	ldr	r2, [r2, #0]
 8001b72:	69b9      	ldr	r1, [r7, #24]
 8001b74:	430b      	orrs	r3, r1
 8001b76:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d017      	beq.n	8001bb0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691a      	ldr	r2, [r3, #16]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001b8e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001b98:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001b9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6911      	ldr	r1, [r2, #16]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	430b      	orrs	r3, r1
 8001baa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001bae:	e013      	b.n	8001bd8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691a      	ldr	r2, [r3, #16]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001bbe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001bd0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bd4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d12a      	bne.n	8001c38 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001bec:	f023 0304 	bic.w	r3, r3, #4
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001bf8:	4311      	orrs	r1, r2
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001bfe:	4311      	orrs	r1, r2
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c04:	430a      	orrs	r2, r1
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f042 0201 	orr.w	r2, r2, #1
 8001c10:	611a      	str	r2, [r3, #16]
 8001c12:	e019      	b.n	8001c48 <HAL_ADC_Init+0x318>
 8001c14:	20000000 	.word	0x20000000
 8001c18:	053e2d63 	.word	0x053e2d63
 8001c1c:	50000100 	.word	0x50000100
 8001c20:	50000400 	.word	0x50000400
 8001c24:	50000500 	.word	0x50000500
 8001c28:	50000600 	.word	0x50000600
 8001c2c:	50000300 	.word	0x50000300
 8001c30:	50000700 	.word	0x50000700
 8001c34:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691a      	ldr	r2, [r3, #16]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0201 	bic.w	r2, r2, #1
 8001c46:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d10c      	bne.n	8001c6a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	f023 010f 	bic.w	r1, r3, #15
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	1e5a      	subs	r2, r3, #1
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c68:	e007      	b.n	8001c7a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 020f 	bic.w	r2, r2, #15
 8001c78:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c7e:	f023 0303 	bic.w	r3, r3, #3
 8001c82:	f043 0201 	orr.w	r2, r3, #1
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c8a:	e007      	b.n	8001c9c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c90:	f043 0210 	orr.w	r2, r3, #16
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3724      	adds	r7, #36	@ 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd90      	pop	{r4, r7, pc}
 8001ca6:	bf00      	nop

08001ca8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cbc:	d004      	beq.n	8001cc8 <HAL_ADC_Start_DMA+0x20>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a5a      	ldr	r2, [pc, #360]	@ (8001e2c <HAL_ADC_Start_DMA+0x184>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d101      	bne.n	8001ccc <HAL_ADC_Start_DMA+0x24>
 8001cc8:	4b59      	ldr	r3, [pc, #356]	@ (8001e30 <HAL_ADC_Start_DMA+0x188>)
 8001cca:	e000      	b.n	8001cce <HAL_ADC_Start_DMA+0x26>
 8001ccc:	4b59      	ldr	r3, [pc, #356]	@ (8001e34 <HAL_ADC_Start_DMA+0x18c>)
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff fd4a 	bl	8001768 <LL_ADC_GetMultimode>
 8001cd4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fe02 	bl	80018e4 <LL_ADC_REG_IsConversionOngoing>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f040 809b 	bne.w	8001e1e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d101      	bne.n	8001cf6 <HAL_ADC_Start_DMA+0x4e>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e096      	b.n	8001e24 <HAL_ADC_Start_DMA+0x17c>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a4d      	ldr	r2, [pc, #308]	@ (8001e38 <HAL_ADC_Start_DMA+0x190>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d008      	beq.n	8001d1a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d005      	beq.n	8001d1a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	2b05      	cmp	r3, #5
 8001d12:	d002      	beq.n	8001d1a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	2b09      	cmp	r3, #9
 8001d18:	d17a      	bne.n	8001e10 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f000 fcf6 	bl	800270c <ADC_Enable>
 8001d20:	4603      	mov	r3, r0
 8001d22:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001d24:	7dfb      	ldrb	r3, [r7, #23]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d16d      	bne.n	8001e06 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d2e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d32:	f023 0301 	bic.w	r3, r3, #1
 8001d36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a3a      	ldr	r2, [pc, #232]	@ (8001e2c <HAL_ADC_Start_DMA+0x184>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d009      	beq.n	8001d5c <HAL_ADC_Start_DMA+0xb4>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a3b      	ldr	r2, [pc, #236]	@ (8001e3c <HAL_ADC_Start_DMA+0x194>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d002      	beq.n	8001d58 <HAL_ADC_Start_DMA+0xb0>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	e003      	b.n	8001d60 <HAL_ADC_Start_DMA+0xb8>
 8001d58:	4b39      	ldr	r3, [pc, #228]	@ (8001e40 <HAL_ADC_Start_DMA+0x198>)
 8001d5a:	e001      	b.n	8001d60 <HAL_ADC_Start_DMA+0xb8>
 8001d5c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	6812      	ldr	r2, [r2, #0]
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d002      	beq.n	8001d6e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d105      	bne.n	8001d7a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d72:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d006      	beq.n	8001d94 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d8a:	f023 0206 	bic.w	r2, r3, #6
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	661a      	str	r2, [r3, #96]	@ 0x60
 8001d92:	e002      	b.n	8001d9a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d9e:	4a29      	ldr	r2, [pc, #164]	@ (8001e44 <HAL_ADC_Start_DMA+0x19c>)
 8001da0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001da6:	4a28      	ldr	r2, [pc, #160]	@ (8001e48 <HAL_ADC_Start_DMA+0x1a0>)
 8001da8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dae:	4a27      	ldr	r2, [pc, #156]	@ (8001e4c <HAL_ADC_Start_DMA+0x1a4>)
 8001db0:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	221c      	movs	r2, #28
 8001db8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f042 0210 	orr.w	r2, r2, #16
 8001dd0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f042 0201 	orr.w	r2, r2, #1
 8001de0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	3340      	adds	r3, #64	@ 0x40
 8001dec:	4619      	mov	r1, r3
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f001 f989 	bl	8003108 <HAL_DMA_Start_IT>
 8001df6:	4603      	mov	r3, r0
 8001df8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff fd5c 	bl	80018bc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001e04:	e00d      	b.n	8001e22 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8001e0e:	e008      	b.n	8001e22 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001e1c:	e001      	b.n	8001e22 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	50000100 	.word	0x50000100
 8001e30:	50000300 	.word	0x50000300
 8001e34:	50000700 	.word	0x50000700
 8001e38:	50000600 	.word	0x50000600
 8001e3c:	50000500 	.word	0x50000500
 8001e40:	50000400 	.word	0x50000400
 8001e44:	080028f7 	.word	0x080028f7
 8001e48:	080029cf 	.word	0x080029cf
 8001e4c:	080029eb 	.word	0x080029eb

08001e50 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b0b6      	sub	sp, #216	@ 0xd8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d102      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x24>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	f000 bc13 	b.w	80026d6 <HAL_ADC_ConfigChannel+0x84a>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fd11 	bl	80018e4 <LL_ADC_REG_IsConversionOngoing>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f040 83f3 	bne.w	80026b0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	6859      	ldr	r1, [r3, #4]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	f7ff fbcb 	bl	8001672 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fcff 	bl	80018e4 <LL_ADC_REG_IsConversionOngoing>
 8001ee6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fd0b 	bl	800190a <LL_ADC_INJ_IsConversionOngoing>
 8001ef4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ef8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f040 81d9 	bne.w	80022b4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f040 81d4 	bne.w	80022b4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001f14:	d10f      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6818      	ldr	r0, [r3, #0]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	4619      	mov	r1, r3
 8001f22:	f7ff fbd2 	bl	80016ca <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fb79 	bl	8001626 <LL_ADC_SetSamplingTimeCommonConfig>
 8001f34:	e00e      	b.n	8001f54 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	6819      	ldr	r1, [r3, #0]
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	461a      	mov	r2, r3
 8001f44:	f7ff fbc1 	bl	80016ca <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fb69 	bl	8001626 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	695a      	ldr	r2, [r3, #20]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	08db      	lsrs	r3, r3, #3
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d022      	beq.n	8001fbc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6818      	ldr	r0, [r3, #0]
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	6919      	ldr	r1, [r3, #16]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001f86:	f7ff fac3 	bl	8001510 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	6919      	ldr	r1, [r3, #16]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	461a      	mov	r2, r3
 8001f98:	f7ff fb0f 	bl	80015ba <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6818      	ldr	r0, [r3, #0]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d102      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x126>
 8001fac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fb0:	e000      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x128>
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	f7ff fb1b 	bl	80015f0 <LL_ADC_SetOffsetSaturation>
 8001fba:	e17b      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff fac8 	bl	8001558 <LL_ADC_GetOffsetChannel>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10a      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x15c>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fabd 	bl	8001558 <LL_ADC_GetOffsetChannel>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	0e9b      	lsrs	r3, r3, #26
 8001fe2:	f003 021f 	and.w	r2, r3, #31
 8001fe6:	e01e      	b.n	8002026 <HAL_ADC_ConfigChannel+0x19a>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2100      	movs	r1, #0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fab2 	bl	8001558 <LL_ADC_GetOffsetChannel>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001ffe:	fa93 f3a3 	rbit	r3, r3
 8002002:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002006:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800200a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800200e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002016:	2320      	movs	r3, #32
 8002018:	e004      	b.n	8002024 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800201a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800201e:	fab3 f383 	clz	r3, r3
 8002022:	b2db      	uxtb	r3, r3
 8002024:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800202e:	2b00      	cmp	r3, #0
 8002030:	d105      	bne.n	800203e <HAL_ADC_ConfigChannel+0x1b2>
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	0e9b      	lsrs	r3, r3, #26
 8002038:	f003 031f 	and.w	r3, r3, #31
 800203c:	e018      	b.n	8002070 <HAL_ADC_ConfigChannel+0x1e4>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800204a:	fa93 f3a3 	rbit	r3, r3
 800204e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002052:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002056:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800205a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002062:	2320      	movs	r3, #32
 8002064:	e004      	b.n	8002070 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002066:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002070:	429a      	cmp	r2, r3
 8002072:	d106      	bne.n	8002082 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2200      	movs	r2, #0
 800207a:	2100      	movs	r1, #0
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fa81 	bl	8001584 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2101      	movs	r1, #1
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff fa65 	bl	8001558 <LL_ADC_GetOffsetChannel>
 800208e:	4603      	mov	r3, r0
 8002090:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10a      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x222>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2101      	movs	r1, #1
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fa5a 	bl	8001558 <LL_ADC_GetOffsetChannel>
 80020a4:	4603      	mov	r3, r0
 80020a6:	0e9b      	lsrs	r3, r3, #26
 80020a8:	f003 021f 	and.w	r2, r3, #31
 80020ac:	e01e      	b.n	80020ec <HAL_ADC_ConfigChannel+0x260>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2101      	movs	r1, #1
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff fa4f 	bl	8001558 <LL_ADC_GetOffsetChannel>
 80020ba:	4603      	mov	r3, r0
 80020bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80020c4:	fa93 f3a3 	rbit	r3, r3
 80020c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80020cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80020d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80020d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80020dc:	2320      	movs	r3, #32
 80020de:	e004      	b.n	80020ea <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80020e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80020e4:	fab3 f383 	clz	r3, r3
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d105      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x278>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	0e9b      	lsrs	r3, r3, #26
 80020fe:	f003 031f 	and.w	r3, r3, #31
 8002102:	e018      	b.n	8002136 <HAL_ADC_ConfigChannel+0x2aa>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002110:	fa93 f3a3 	rbit	r3, r3
 8002114:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002118:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800211c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002120:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002128:	2320      	movs	r3, #32
 800212a:	e004      	b.n	8002136 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800212c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002130:	fab3 f383 	clz	r3, r3
 8002134:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002136:	429a      	cmp	r2, r3
 8002138:	d106      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2200      	movs	r2, #0
 8002140:	2101      	movs	r1, #1
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff fa1e 	bl	8001584 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2102      	movs	r1, #2
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff fa02 	bl	8001558 <LL_ADC_GetOffsetChannel>
 8002154:	4603      	mov	r3, r0
 8002156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10a      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x2e8>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2102      	movs	r1, #2
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff f9f7 	bl	8001558 <LL_ADC_GetOffsetChannel>
 800216a:	4603      	mov	r3, r0
 800216c:	0e9b      	lsrs	r3, r3, #26
 800216e:	f003 021f 	and.w	r2, r3, #31
 8002172:	e01e      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x326>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2102      	movs	r1, #2
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff f9ec 	bl	8001558 <LL_ADC_GetOffsetChannel>
 8002180:	4603      	mov	r3, r0
 8002182:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002186:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800218a:	fa93 f3a3 	rbit	r3, r3
 800218e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002192:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002196:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800219a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80021a2:	2320      	movs	r3, #32
 80021a4:	e004      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80021a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80021aa:	fab3 f383 	clz	r3, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d105      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x33e>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	0e9b      	lsrs	r3, r3, #26
 80021c4:	f003 031f 	and.w	r3, r3, #31
 80021c8:	e016      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x36c>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80021d6:	fa93 f3a3 	rbit	r3, r3
 80021da:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80021dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80021e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80021ea:	2320      	movs	r3, #32
 80021ec:	e004      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80021ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021f2:	fab3 f383 	clz	r3, r3
 80021f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d106      	bne.n	800220a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2200      	movs	r2, #0
 8002202:	2102      	movs	r1, #2
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff f9bd 	bl	8001584 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2103      	movs	r1, #3
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff f9a1 	bl	8001558 <LL_ADC_GetOffsetChannel>
 8002216:	4603      	mov	r3, r0
 8002218:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10a      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x3aa>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2103      	movs	r1, #3
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff f996 	bl	8001558 <LL_ADC_GetOffsetChannel>
 800222c:	4603      	mov	r3, r0
 800222e:	0e9b      	lsrs	r3, r3, #26
 8002230:	f003 021f 	and.w	r2, r3, #31
 8002234:	e017      	b.n	8002266 <HAL_ADC_ConfigChannel+0x3da>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2103      	movs	r1, #3
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff f98b 	bl	8001558 <LL_ADC_GetOffsetChannel>
 8002242:	4603      	mov	r3, r0
 8002244:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002248:	fa93 f3a3 	rbit	r3, r3
 800224c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800224e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002250:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002252:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002258:	2320      	movs	r3, #32
 800225a:	e003      	b.n	8002264 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800225c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226e:	2b00      	cmp	r3, #0
 8002270:	d105      	bne.n	800227e <HAL_ADC_ConfigChannel+0x3f2>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	0e9b      	lsrs	r3, r3, #26
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	e011      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x416>
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002284:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002286:	fa93 f3a3 	rbit	r3, r3
 800228a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800228c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800228e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002290:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002296:	2320      	movs	r3, #32
 8002298:	e003      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800229a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800229c:	fab3 f383 	clz	r3, r3
 80022a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d106      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2200      	movs	r2, #0
 80022ac:	2103      	movs	r1, #3
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff f968 	bl	8001584 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fad9 	bl	8001870 <LL_ADC_IsEnabled>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f040 813d 	bne.w	8002540 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6818      	ldr	r0, [r3, #0]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	6819      	ldr	r1, [r3, #0]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	461a      	mov	r2, r3
 80022d4:	f7ff fa24 	bl	8001720 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4aa2      	ldr	r2, [pc, #648]	@ (8002568 <HAL_ADC_ConfigChannel+0x6dc>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	f040 812e 	bne.w	8002540 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10b      	bne.n	800230c <HAL_ADC_ConfigChannel+0x480>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	0e9b      	lsrs	r3, r3, #26
 80022fa:	3301      	adds	r3, #1
 80022fc:	f003 031f 	and.w	r3, r3, #31
 8002300:	2b09      	cmp	r3, #9
 8002302:	bf94      	ite	ls
 8002304:	2301      	movls	r3, #1
 8002306:	2300      	movhi	r3, #0
 8002308:	b2db      	uxtb	r3, r3
 800230a:	e019      	b.n	8002340 <HAL_ADC_ConfigChannel+0x4b4>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002314:	fa93 f3a3 	rbit	r3, r3
 8002318:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800231a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800231c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800231e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002324:	2320      	movs	r3, #32
 8002326:	e003      	b.n	8002330 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002328:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800232a:	fab3 f383 	clz	r3, r3
 800232e:	b2db      	uxtb	r3, r3
 8002330:	3301      	adds	r3, #1
 8002332:	f003 031f 	and.w	r3, r3, #31
 8002336:	2b09      	cmp	r3, #9
 8002338:	bf94      	ite	ls
 800233a:	2301      	movls	r3, #1
 800233c:	2300      	movhi	r3, #0
 800233e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002340:	2b00      	cmp	r3, #0
 8002342:	d079      	beq.n	8002438 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234c:	2b00      	cmp	r3, #0
 800234e:	d107      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x4d4>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	0e9b      	lsrs	r3, r3, #26
 8002356:	3301      	adds	r3, #1
 8002358:	069b      	lsls	r3, r3, #26
 800235a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800235e:	e015      	b.n	800238c <HAL_ADC_ConfigChannel+0x500>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002366:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002368:	fa93 f3a3 	rbit	r3, r3
 800236c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800236e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002370:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002378:	2320      	movs	r3, #32
 800237a:	e003      	b.n	8002384 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800237c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	3301      	adds	r3, #1
 8002386:	069b      	lsls	r3, r3, #26
 8002388:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002394:	2b00      	cmp	r3, #0
 8002396:	d109      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x520>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	0e9b      	lsrs	r3, r3, #26
 800239e:	3301      	adds	r3, #1
 80023a0:	f003 031f 	and.w	r3, r3, #31
 80023a4:	2101      	movs	r1, #1
 80023a6:	fa01 f303 	lsl.w	r3, r1, r3
 80023aa:	e017      	b.n	80023dc <HAL_ADC_ConfigChannel+0x550>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023b4:	fa93 f3a3 	rbit	r3, r3
 80023b8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80023ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80023be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80023c4:	2320      	movs	r3, #32
 80023c6:	e003      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80023c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023ca:	fab3 f383 	clz	r3, r3
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	3301      	adds	r3, #1
 80023d2:	f003 031f 	and.w	r3, r3, #31
 80023d6:	2101      	movs	r1, #1
 80023d8:	fa01 f303 	lsl.w	r3, r1, r3
 80023dc:	ea42 0103 	orr.w	r1, r2, r3
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d10a      	bne.n	8002402 <HAL_ADC_ConfigChannel+0x576>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	0e9b      	lsrs	r3, r3, #26
 80023f2:	3301      	adds	r3, #1
 80023f4:	f003 021f 	and.w	r2, r3, #31
 80023f8:	4613      	mov	r3, r2
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4413      	add	r3, r2
 80023fe:	051b      	lsls	r3, r3, #20
 8002400:	e018      	b.n	8002434 <HAL_ADC_ConfigChannel+0x5a8>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002412:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800241a:	2320      	movs	r3, #32
 800241c:	e003      	b.n	8002426 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800241e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002420:	fab3 f383 	clz	r3, r3
 8002424:	b2db      	uxtb	r3, r3
 8002426:	3301      	adds	r3, #1
 8002428:	f003 021f 	and.w	r2, r3, #31
 800242c:	4613      	mov	r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4413      	add	r3, r2
 8002432:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002434:	430b      	orrs	r3, r1
 8002436:	e07e      	b.n	8002536 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002440:	2b00      	cmp	r3, #0
 8002442:	d107      	bne.n	8002454 <HAL_ADC_ConfigChannel+0x5c8>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	0e9b      	lsrs	r3, r3, #26
 800244a:	3301      	adds	r3, #1
 800244c:	069b      	lsls	r3, r3, #26
 800244e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002452:	e015      	b.n	8002480 <HAL_ADC_ConfigChannel+0x5f4>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800245c:	fa93 f3a3 	rbit	r3, r3
 8002460:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002464:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800246c:	2320      	movs	r3, #32
 800246e:	e003      	b.n	8002478 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	3301      	adds	r3, #1
 800247a:	069b      	lsls	r3, r3, #26
 800247c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002488:	2b00      	cmp	r3, #0
 800248a:	d109      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x614>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	0e9b      	lsrs	r3, r3, #26
 8002492:	3301      	adds	r3, #1
 8002494:	f003 031f 	and.w	r3, r3, #31
 8002498:	2101      	movs	r1, #1
 800249a:	fa01 f303 	lsl.w	r3, r1, r3
 800249e:	e017      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x644>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	fa93 f3a3 	rbit	r3, r3
 80024ac:	61fb      	str	r3, [r7, #28]
  return result;
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80024b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80024b8:	2320      	movs	r3, #32
 80024ba:	e003      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80024bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	3301      	adds	r3, #1
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	2101      	movs	r1, #1
 80024cc:	fa01 f303 	lsl.w	r3, r1, r3
 80024d0:	ea42 0103 	orr.w	r1, r2, r3
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10d      	bne.n	80024fc <HAL_ADC_ConfigChannel+0x670>
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	0e9b      	lsrs	r3, r3, #26
 80024e6:	3301      	adds	r3, #1
 80024e8:	f003 021f 	and.w	r2, r3, #31
 80024ec:	4613      	mov	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	4413      	add	r3, r2
 80024f2:	3b1e      	subs	r3, #30
 80024f4:	051b      	lsls	r3, r3, #20
 80024f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024fa:	e01b      	b.n	8002534 <HAL_ADC_ConfigChannel+0x6a8>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	fa93 f3a3 	rbit	r3, r3
 8002508:	613b      	str	r3, [r7, #16]
  return result;
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002514:	2320      	movs	r3, #32
 8002516:	e003      	b.n	8002520 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	fab3 f383 	clz	r3, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	3301      	adds	r3, #1
 8002522:	f003 021f 	and.w	r2, r3, #31
 8002526:	4613      	mov	r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	4413      	add	r3, r2
 800252c:	3b1e      	subs	r3, #30
 800252e:	051b      	lsls	r3, r3, #20
 8002530:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002534:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800253a:	4619      	mov	r1, r3
 800253c:	f7ff f8c5 	bl	80016ca <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b09      	ldr	r3, [pc, #36]	@ (800256c <HAL_ADC_ConfigChannel+0x6e0>)
 8002546:	4013      	ands	r3, r2
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 80be 	beq.w	80026ca <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002556:	d004      	beq.n	8002562 <HAL_ADC_ConfigChannel+0x6d6>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a04      	ldr	r2, [pc, #16]	@ (8002570 <HAL_ADC_ConfigChannel+0x6e4>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d10a      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x6ec>
 8002562:	4b04      	ldr	r3, [pc, #16]	@ (8002574 <HAL_ADC_ConfigChannel+0x6e8>)
 8002564:	e009      	b.n	800257a <HAL_ADC_ConfigChannel+0x6ee>
 8002566:	bf00      	nop
 8002568:	407f0000 	.word	0x407f0000
 800256c:	80080000 	.word	0x80080000
 8002570:	50000100 	.word	0x50000100
 8002574:	50000300 	.word	0x50000300
 8002578:	4b59      	ldr	r3, [pc, #356]	@ (80026e0 <HAL_ADC_ConfigChannel+0x854>)
 800257a:	4618      	mov	r0, r3
 800257c:	f7fe ffba 	bl	80014f4 <LL_ADC_GetCommonPathInternalCh>
 8002580:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a56      	ldr	r2, [pc, #344]	@ (80026e4 <HAL_ADC_ConfigChannel+0x858>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d004      	beq.n	8002598 <HAL_ADC_ConfigChannel+0x70c>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a55      	ldr	r2, [pc, #340]	@ (80026e8 <HAL_ADC_ConfigChannel+0x85c>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d13a      	bne.n	800260e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002598:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800259c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d134      	bne.n	800260e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025ac:	d005      	beq.n	80025ba <HAL_ADC_ConfigChannel+0x72e>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a4e      	ldr	r2, [pc, #312]	@ (80026ec <HAL_ADC_ConfigChannel+0x860>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	f040 8085 	bne.w	80026c4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025c2:	d004      	beq.n	80025ce <HAL_ADC_ConfigChannel+0x742>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a49      	ldr	r2, [pc, #292]	@ (80026f0 <HAL_ADC_ConfigChannel+0x864>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d101      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x746>
 80025ce:	4a49      	ldr	r2, [pc, #292]	@ (80026f4 <HAL_ADC_ConfigChannel+0x868>)
 80025d0:	e000      	b.n	80025d4 <HAL_ADC_ConfigChannel+0x748>
 80025d2:	4a43      	ldr	r2, [pc, #268]	@ (80026e0 <HAL_ADC_ConfigChannel+0x854>)
 80025d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80025d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025dc:	4619      	mov	r1, r3
 80025de:	4610      	mov	r0, r2
 80025e0:	f7fe ff75 	bl	80014ce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025e4:	4b44      	ldr	r3, [pc, #272]	@ (80026f8 <HAL_ADC_ConfigChannel+0x86c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	099b      	lsrs	r3, r3, #6
 80025ea:	4a44      	ldr	r2, [pc, #272]	@ (80026fc <HAL_ADC_ConfigChannel+0x870>)
 80025ec:	fba2 2303 	umull	r2, r3, r2, r3
 80025f0:	099b      	lsrs	r3, r3, #6
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	4613      	mov	r3, r2
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	4413      	add	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025fe:	e002      	b.n	8002606 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	3b01      	subs	r3, #1
 8002604:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1f9      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800260c:	e05a      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a3b      	ldr	r2, [pc, #236]	@ (8002700 <HAL_ADC_ConfigChannel+0x874>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d125      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002618:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800261c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d11f      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a31      	ldr	r2, [pc, #196]	@ (80026f0 <HAL_ADC_ConfigChannel+0x864>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d104      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x7ac>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a34      	ldr	r2, [pc, #208]	@ (8002704 <HAL_ADC_ConfigChannel+0x878>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d047      	beq.n	80026c8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002640:	d004      	beq.n	800264c <HAL_ADC_ConfigChannel+0x7c0>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a2a      	ldr	r2, [pc, #168]	@ (80026f0 <HAL_ADC_ConfigChannel+0x864>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d101      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x7c4>
 800264c:	4a29      	ldr	r2, [pc, #164]	@ (80026f4 <HAL_ADC_ConfigChannel+0x868>)
 800264e:	e000      	b.n	8002652 <HAL_ADC_ConfigChannel+0x7c6>
 8002650:	4a23      	ldr	r2, [pc, #140]	@ (80026e0 <HAL_ADC_ConfigChannel+0x854>)
 8002652:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002656:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800265a:	4619      	mov	r1, r3
 800265c:	4610      	mov	r0, r2
 800265e:	f7fe ff36 	bl	80014ce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002662:	e031      	b.n	80026c8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a27      	ldr	r2, [pc, #156]	@ (8002708 <HAL_ADC_ConfigChannel+0x87c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d12d      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800266e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002672:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d127      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a1c      	ldr	r2, [pc, #112]	@ (80026f0 <HAL_ADC_ConfigChannel+0x864>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d022      	beq.n	80026ca <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800268c:	d004      	beq.n	8002698 <HAL_ADC_ConfigChannel+0x80c>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a17      	ldr	r2, [pc, #92]	@ (80026f0 <HAL_ADC_ConfigChannel+0x864>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d101      	bne.n	800269c <HAL_ADC_ConfigChannel+0x810>
 8002698:	4a16      	ldr	r2, [pc, #88]	@ (80026f4 <HAL_ADC_ConfigChannel+0x868>)
 800269a:	e000      	b.n	800269e <HAL_ADC_ConfigChannel+0x812>
 800269c:	4a10      	ldr	r2, [pc, #64]	@ (80026e0 <HAL_ADC_ConfigChannel+0x854>)
 800269e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80026a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026a6:	4619      	mov	r1, r3
 80026a8:	4610      	mov	r0, r2
 80026aa:	f7fe ff10 	bl	80014ce <LL_ADC_SetCommonPathInternalCh>
 80026ae:	e00c      	b.n	80026ca <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b4:	f043 0220 	orr.w	r2, r3, #32
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80026c2:	e002      	b.n	80026ca <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026c4:	bf00      	nop
 80026c6:	e000      	b.n	80026ca <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80026d2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	37d8      	adds	r7, #216	@ 0xd8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	50000700 	.word	0x50000700
 80026e4:	c3210000 	.word	0xc3210000
 80026e8:	90c00010 	.word	0x90c00010
 80026ec:	50000600 	.word	0x50000600
 80026f0:	50000100 	.word	0x50000100
 80026f4:	50000300 	.word	0x50000300
 80026f8:	20000000 	.word	0x20000000
 80026fc:	053e2d63 	.word	0x053e2d63
 8002700:	c7520000 	.word	0xc7520000
 8002704:	50000500 	.word	0x50000500
 8002708:	cb840000 	.word	0xcb840000

0800270c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002714:	2300      	movs	r3, #0
 8002716:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff f8a7 	bl	8001870 <LL_ADC_IsEnabled>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d176      	bne.n	8002816 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	4b3c      	ldr	r3, [pc, #240]	@ (8002820 <ADC_Enable+0x114>)
 8002730:	4013      	ands	r3, r2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00d      	beq.n	8002752 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273a:	f043 0210 	orr.w	r2, r3, #16
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002746:	f043 0201 	orr.w	r2, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e062      	b.n	8002818 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff f862 	bl	8001820 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002764:	d004      	beq.n	8002770 <ADC_Enable+0x64>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a2e      	ldr	r2, [pc, #184]	@ (8002824 <ADC_Enable+0x118>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d101      	bne.n	8002774 <ADC_Enable+0x68>
 8002770:	4b2d      	ldr	r3, [pc, #180]	@ (8002828 <ADC_Enable+0x11c>)
 8002772:	e000      	b.n	8002776 <ADC_Enable+0x6a>
 8002774:	4b2d      	ldr	r3, [pc, #180]	@ (800282c <ADC_Enable+0x120>)
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe febc 	bl	80014f4 <LL_ADC_GetCommonPathInternalCh>
 800277c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800277e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002782:	2b00      	cmp	r3, #0
 8002784:	d013      	beq.n	80027ae <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002786:	4b2a      	ldr	r3, [pc, #168]	@ (8002830 <ADC_Enable+0x124>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	099b      	lsrs	r3, r3, #6
 800278c:	4a29      	ldr	r2, [pc, #164]	@ (8002834 <ADC_Enable+0x128>)
 800278e:	fba2 2303 	umull	r2, r3, r2, r3
 8002792:	099b      	lsrs	r3, r3, #6
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	4613      	mov	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80027a0:	e002      	b.n	80027a8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f9      	bne.n	80027a2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80027ae:	f7fe fe6f 	bl	8001490 <HAL_GetTick>
 80027b2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027b4:	e028      	b.n	8002808 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff f858 	bl	8001870 <LL_ADC_IsEnabled>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d104      	bne.n	80027d0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff f828 	bl	8001820 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027d0:	f7fe fe5e 	bl	8001490 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d914      	bls.n	8002808 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d00d      	beq.n	8002808 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f0:	f043 0210 	orr.w	r2, r3, #16
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027fc:	f043 0201 	orr.w	r2, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e007      	b.n	8002818 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b01      	cmp	r3, #1
 8002814:	d1cf      	bne.n	80027b6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	8000003f 	.word	0x8000003f
 8002824:	50000100 	.word	0x50000100
 8002828:	50000300 	.word	0x50000300
 800282c:	50000700 	.word	0x50000700
 8002830:	20000000 	.word	0x20000000
 8002834:	053e2d63 	.word	0x053e2d63

08002838 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff f826 	bl	8001896 <LL_ADC_IsDisableOngoing>
 800284a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff f80d 	bl	8001870 <LL_ADC_IsEnabled>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d047      	beq.n	80028ec <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d144      	bne.n	80028ec <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 030d 	and.w	r3, r3, #13
 800286c:	2b01      	cmp	r3, #1
 800286e:	d10c      	bne.n	800288a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f7fe ffe7 	bl	8001848 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2203      	movs	r2, #3
 8002880:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002882:	f7fe fe05 	bl	8001490 <HAL_GetTick>
 8002886:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002888:	e029      	b.n	80028de <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288e:	f043 0210 	orr.w	r2, r3, #16
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800289a:	f043 0201 	orr.w	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e023      	b.n	80028ee <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028a6:	f7fe fdf3 	bl	8001490 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d914      	bls.n	80028de <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00d      	beq.n	80028de <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c6:	f043 0210 	orr.w	r2, r3, #16
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028d2:	f043 0201 	orr.w	r2, r3, #1
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e007      	b.n	80028ee <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1dc      	bne.n	80028a6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b084      	sub	sp, #16
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002902:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002908:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800290c:	2b00      	cmp	r3, #0
 800290e:	d14b      	bne.n	80029a8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002914:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d021      	beq.n	800296e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe fe8c 	bl	800164c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d032      	beq.n	80029a0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d12b      	bne.n	80029a0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800294c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002958:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d11f      	bne.n	80029a0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002964:	f043 0201 	orr.w	r2, r3, #1
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800296c:	e018      	b.n	80029a0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d111      	bne.n	80029a0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002980:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d105      	bne.n	80029a0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002998:	f043 0201 	orr.w	r2, r3, #1
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f7ff fa55 	bl	8001e50 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80029a6:	e00e      	b.n	80029c6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ac:	f003 0310 	and.w	r3, r3, #16
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f7ff fa5f 	bl	8001e78 <HAL_ADC_ErrorCallback>
}
 80029ba:	e004      	b.n	80029c6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	4798      	blx	r3
}
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b084      	sub	sp, #16
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029da:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f7ff fa41 	bl	8001e64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a08:	f043 0204 	orr.w	r2, r3, #4
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f7ff fa31 	bl	8001e78 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a16:	bf00      	nop
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <LL_ADC_IsEnabled>:
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <LL_ADC_IsEnabled+0x18>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <LL_ADC_IsEnabled+0x1a>
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <LL_ADC_StartCalibration>:
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002a56:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	609a      	str	r2, [r3, #8]
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <LL_ADC_IsCalibrationOnGoing>:
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002a86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a8a:	d101      	bne.n	8002a90 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e000      	b.n	8002a92 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <LL_ADC_REG_IsConversionOngoing>:
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d101      	bne.n	8002ab6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_ADCEx_Calibration_Start+0x1c>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e04d      	b.n	8002b7c <HAL_ADCEx_Calibration_Start+0xb8>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7ff fea5 	bl	8002838 <ADC_Disable>
 8002aee:	4603      	mov	r3, r0
 8002af0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d136      	bne.n	8002b66 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b00:	f023 0302 	bic.w	r3, r3, #2
 8002b04:	f043 0202 	orr.w	r2, r3, #2
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6839      	ldr	r1, [r7, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff ff96 	bl	8002a44 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b18:	e014      	b.n	8002b44 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	4a18      	ldr	r2, [pc, #96]	@ (8002b84 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d90d      	bls.n	8002b44 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b2c:	f023 0312 	bic.w	r3, r3, #18
 8002b30:	f043 0210 	orr.w	r2, r3, #16
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e01b      	b.n	8002b7c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ff94 	bl	8002a76 <LL_ADC_IsCalibrationOnGoing>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1e2      	bne.n	8002b1a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b58:	f023 0303 	bic.w	r3, r3, #3
 8002b5c:	f043 0201 	orr.w	r2, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b64:	e005      	b.n	8002b72 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b6a:	f043 0210 	orr.w	r2, r3, #16
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	0004de01 	.word	0x0004de01

08002b88 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002b88:	b590      	push	{r4, r7, lr}
 8002b8a:	b0a1      	sub	sp, #132	@ 0x84
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d101      	bne.n	8002ba6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e0e7      	b.n	8002d76 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002bae:	2300      	movs	r3, #0
 8002bb0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bbe:	d102      	bne.n	8002bc6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002bc0:	4b6f      	ldr	r3, [pc, #444]	@ (8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	e009      	b.n	8002bda <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a6e      	ldr	r2, [pc, #440]	@ (8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d102      	bne.n	8002bd6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002bd0:	4b6d      	ldr	r3, [pc, #436]	@ (8002d88 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	e001      	b.n	8002bda <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10b      	bne.n	8002bf8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be4:	f043 0220 	orr.w	r2, r3, #32
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0be      	b.n	8002d76 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff ff4f 	bl	8002a9e <LL_ADC_REG_IsConversionOngoing>
 8002c00:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff ff49 	bl	8002a9e <LL_ADC_REG_IsConversionOngoing>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f040 80a0 	bne.w	8002d54 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002c14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f040 809c 	bne.w	8002d54 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c24:	d004      	beq.n	8002c30 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a55      	ldr	r2, [pc, #340]	@ (8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d101      	bne.n	8002c34 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002c30:	4b56      	ldr	r3, [pc, #344]	@ (8002d8c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002c32:	e000      	b.n	8002c36 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002c34:	4b56      	ldr	r3, [pc, #344]	@ (8002d90 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002c36:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d04b      	beq.n	8002cd8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002c40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	6859      	ldr	r1, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c52:	035b      	lsls	r3, r3, #13
 8002c54:	430b      	orrs	r3, r1
 8002c56:	431a      	orrs	r2, r3
 8002c58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c5a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c64:	d004      	beq.n	8002c70 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a45      	ldr	r2, [pc, #276]	@ (8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d10f      	bne.n	8002c90 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002c70:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002c74:	f7ff fed3 	bl	8002a1e <LL_ADC_IsEnabled>
 8002c78:	4604      	mov	r4, r0
 8002c7a:	4841      	ldr	r0, [pc, #260]	@ (8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c7c:	f7ff fecf 	bl	8002a1e <LL_ADC_IsEnabled>
 8002c80:	4603      	mov	r3, r0
 8002c82:	4323      	orrs	r3, r4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	bf0c      	ite	eq
 8002c88:	2301      	moveq	r3, #1
 8002c8a:	2300      	movne	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	e012      	b.n	8002cb6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002c90:	483c      	ldr	r0, [pc, #240]	@ (8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002c92:	f7ff fec4 	bl	8002a1e <LL_ADC_IsEnabled>
 8002c96:	4604      	mov	r4, r0
 8002c98:	483b      	ldr	r0, [pc, #236]	@ (8002d88 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002c9a:	f7ff fec0 	bl	8002a1e <LL_ADC_IsEnabled>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	431c      	orrs	r4, r3
 8002ca2:	483c      	ldr	r0, [pc, #240]	@ (8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002ca4:	f7ff febb 	bl	8002a1e <LL_ADC_IsEnabled>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	4323      	orrs	r3, r4
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	bf0c      	ite	eq
 8002cb0:	2301      	moveq	r3, #1
 8002cb2:	2300      	movne	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d056      	beq.n	8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002cba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002cc2:	f023 030f 	bic.w	r3, r3, #15
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	6811      	ldr	r1, [r2, #0]
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	6892      	ldr	r2, [r2, #8]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cd4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cd6:	e047      	b.n	8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002cd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ce0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ce2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cec:	d004      	beq.n	8002cf8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a23      	ldr	r2, [pc, #140]	@ (8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d10f      	bne.n	8002d18 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002cf8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002cfc:	f7ff fe8f 	bl	8002a1e <LL_ADC_IsEnabled>
 8002d00:	4604      	mov	r4, r0
 8002d02:	481f      	ldr	r0, [pc, #124]	@ (8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d04:	f7ff fe8b 	bl	8002a1e <LL_ADC_IsEnabled>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	4323      	orrs	r3, r4
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	bf0c      	ite	eq
 8002d10:	2301      	moveq	r3, #1
 8002d12:	2300      	movne	r3, #0
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	e012      	b.n	8002d3e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002d18:	481a      	ldr	r0, [pc, #104]	@ (8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002d1a:	f7ff fe80 	bl	8002a1e <LL_ADC_IsEnabled>
 8002d1e:	4604      	mov	r4, r0
 8002d20:	4819      	ldr	r0, [pc, #100]	@ (8002d88 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002d22:	f7ff fe7c 	bl	8002a1e <LL_ADC_IsEnabled>
 8002d26:	4603      	mov	r3, r0
 8002d28:	431c      	orrs	r4, r3
 8002d2a:	481a      	ldr	r0, [pc, #104]	@ (8002d94 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002d2c:	f7ff fe77 	bl	8002a1e <LL_ADC_IsEnabled>
 8002d30:	4603      	mov	r3, r0
 8002d32:	4323      	orrs	r3, r4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	bf0c      	ite	eq
 8002d38:	2301      	moveq	r3, #1
 8002d3a:	2300      	movne	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d012      	beq.n	8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002d4a:	f023 030f 	bic.w	r3, r3, #15
 8002d4e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002d50:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d52:	e009      	b.n	8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d58:	f043 0220 	orr.w	r2, r3, #32
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002d66:	e000      	b.n	8002d6a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d68:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d72:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3784      	adds	r7, #132	@ 0x84
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd90      	pop	{r4, r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	50000100 	.word	0x50000100
 8002d84:	50000400 	.word	0x50000400
 8002d88:	50000500 	.word	0x50000500
 8002d8c:	50000300 	.word	0x50000300
 8002d90:	50000700 	.word	0x50000700
 8002d94:	50000600 	.word	0x50000600

08002d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002da8:	4b0c      	ldr	r3, [pc, #48]	@ (8002ddc <__NVIC_SetPriorityGrouping+0x44>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002db4:	4013      	ands	r3, r2
 8002db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dca:	4a04      	ldr	r2, [pc, #16]	@ (8002ddc <__NVIC_SetPriorityGrouping+0x44>)
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	60d3      	str	r3, [r2, #12]
}
 8002dd0:	bf00      	nop
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	e000ed00 	.word	0xe000ed00

08002de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002de4:	4b04      	ldr	r3, [pc, #16]	@ (8002df8 <__NVIC_GetPriorityGrouping+0x18>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	0a1b      	lsrs	r3, r3, #8
 8002dea:	f003 0307 	and.w	r3, r3, #7
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	e000ed00 	.word	0xe000ed00

08002dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	db0b      	blt.n	8002e26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
 8002e10:	f003 021f 	and.w	r2, r3, #31
 8002e14:	4907      	ldr	r1, [pc, #28]	@ (8002e34 <__NVIC_EnableIRQ+0x38>)
 8002e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	2001      	movs	r0, #1
 8002e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	e000e100 	.word	0xe000e100

08002e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	6039      	str	r1, [r7, #0]
 8002e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	db0a      	blt.n	8002e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	490c      	ldr	r1, [pc, #48]	@ (8002e84 <__NVIC_SetPriority+0x4c>)
 8002e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e56:	0112      	lsls	r2, r2, #4
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e60:	e00a      	b.n	8002e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	4908      	ldr	r1, [pc, #32]	@ (8002e88 <__NVIC_SetPriority+0x50>)
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	3b04      	subs	r3, #4
 8002e70:	0112      	lsls	r2, r2, #4
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	440b      	add	r3, r1
 8002e76:	761a      	strb	r2, [r3, #24]
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	e000e100 	.word	0xe000e100
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b089      	sub	sp, #36	@ 0x24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	f1c3 0307 	rsb	r3, r3, #7
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	bf28      	it	cs
 8002eaa:	2304      	movcs	r3, #4
 8002eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	2b06      	cmp	r3, #6
 8002eb4:	d902      	bls.n	8002ebc <NVIC_EncodePriority+0x30>
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	3b03      	subs	r3, #3
 8002eba:	e000      	b.n	8002ebe <NVIC_EncodePriority+0x32>
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	43da      	mvns	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	401a      	ands	r2, r3
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	fa01 f303 	lsl.w	r3, r1, r3
 8002ede:	43d9      	mvns	r1, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee4:	4313      	orrs	r3, r2
         );
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3724      	adds	r7, #36	@ 0x24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
	...

08002ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f04:	d301      	bcc.n	8002f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f06:	2301      	movs	r3, #1
 8002f08:	e00f      	b.n	8002f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f34 <SysTick_Config+0x40>)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f12:	210f      	movs	r1, #15
 8002f14:	f04f 30ff 	mov.w	r0, #4294967295
 8002f18:	f7ff ff8e 	bl	8002e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f1c:	4b05      	ldr	r3, [pc, #20]	@ (8002f34 <SysTick_Config+0x40>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f22:	4b04      	ldr	r3, [pc, #16]	@ (8002f34 <SysTick_Config+0x40>)
 8002f24:	2207      	movs	r2, #7
 8002f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	e000e010 	.word	0xe000e010

08002f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7ff ff29 	bl	8002d98 <__NVIC_SetPriorityGrouping>
}
 8002f46:	bf00      	nop
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b086      	sub	sp, #24
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	4603      	mov	r3, r0
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	607a      	str	r2, [r7, #4]
 8002f5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f5c:	f7ff ff40 	bl	8002de0 <__NVIC_GetPriorityGrouping>
 8002f60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	6978      	ldr	r0, [r7, #20]
 8002f68:	f7ff ff90 	bl	8002e8c <NVIC_EncodePriority>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f72:	4611      	mov	r1, r2
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff ff5f 	bl	8002e38 <__NVIC_SetPriority>
}
 8002f7a:	bf00      	nop
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b082      	sub	sp, #8
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	4603      	mov	r3, r0
 8002f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff ff33 	bl	8002dfc <__NVIC_EnableIRQ>
}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff ffa4 	bl	8002ef4 <SysTick_Config>
 8002fac:	4603      	mov	r3, r0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e08d      	b.n	80030e6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	4b47      	ldr	r3, [pc, #284]	@ (80030f0 <HAL_DMA_Init+0x138>)
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d80f      	bhi.n	8002ff6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	4b45      	ldr	r3, [pc, #276]	@ (80030f4 <HAL_DMA_Init+0x13c>)
 8002fde:	4413      	add	r3, r2
 8002fe0:	4a45      	ldr	r2, [pc, #276]	@ (80030f8 <HAL_DMA_Init+0x140>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	091b      	lsrs	r3, r3, #4
 8002fe8:	009a      	lsls	r2, r3, #2
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a42      	ldr	r2, [pc, #264]	@ (80030fc <HAL_DMA_Init+0x144>)
 8002ff2:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ff4:	e00e      	b.n	8003014 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4b40      	ldr	r3, [pc, #256]	@ (8003100 <HAL_DMA_Init+0x148>)
 8002ffe:	4413      	add	r3, r2
 8003000:	4a3d      	ldr	r2, [pc, #244]	@ (80030f8 <HAL_DMA_Init+0x140>)
 8003002:	fba2 2303 	umull	r2, r3, r2, r3
 8003006:	091b      	lsrs	r3, r3, #4
 8003008:	009a      	lsls	r2, r3, #2
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a3c      	ldr	r2, [pc, #240]	@ (8003104 <HAL_DMA_Init+0x14c>)
 8003012:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800302a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800302e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003038:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003044:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003050:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f9b6 	bl	80033d8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003074:	d102      	bne.n	800307c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003090:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d010      	beq.n	80030bc <HAL_DMA_Init+0x104>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d80c      	bhi.n	80030bc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f9d6 	bl	8003454 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80030b8:	605a      	str	r2, [r3, #4]
 80030ba:	e008      	b.n	80030ce <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40020407 	.word	0x40020407
 80030f4:	bffdfff8 	.word	0xbffdfff8
 80030f8:	cccccccd 	.word	0xcccccccd
 80030fc:	40020000 	.word	0x40020000
 8003100:	bffdfbf8 	.word	0xbffdfbf8
 8003104:	40020400 	.word	0x40020400

08003108 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
 8003114:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <HAL_DMA_Start_IT+0x20>
 8003124:	2302      	movs	r3, #2
 8003126:	e066      	b.n	80031f6 <HAL_DMA_Start_IT+0xee>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b01      	cmp	r3, #1
 800313a:	d155      	bne.n	80031e8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0201 	bic.w	r2, r2, #1
 8003158:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	68b9      	ldr	r1, [r7, #8]
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f8fb 	bl	800335c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316a:	2b00      	cmp	r3, #0
 800316c:	d008      	beq.n	8003180 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f042 020e 	orr.w	r2, r2, #14
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	e00f      	b.n	80031a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0204 	bic.w	r2, r2, #4
 800318e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 020a 	orr.w	r2, r2, #10
 800319e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d007      	beq.n	80031be <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031bc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d007      	beq.n	80031d6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031d4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f042 0201 	orr.w	r2, r2, #1
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	e005      	b.n	80031f4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80031f0:	2302      	movs	r3, #2
 80031f2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80031f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321a:	f003 031f 	and.w	r3, r3, #31
 800321e:	2204      	movs	r2, #4
 8003220:	409a      	lsls	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4013      	ands	r3, r2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d026      	beq.n	8003278 <HAL_DMA_IRQHandler+0x7a>
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d021      	beq.n	8003278 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	2b00      	cmp	r3, #0
 8003240:	d107      	bne.n	8003252 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0204 	bic.w	r2, r2, #4
 8003250:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003256:	f003 021f 	and.w	r2, r3, #31
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	2104      	movs	r1, #4
 8003260:	fa01 f202 	lsl.w	r2, r1, r2
 8003264:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326a:	2b00      	cmp	r3, #0
 800326c:	d071      	beq.n	8003352 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003276:	e06c      	b.n	8003352 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800327c:	f003 031f 	and.w	r3, r3, #31
 8003280:	2202      	movs	r2, #2
 8003282:	409a      	lsls	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4013      	ands	r3, r2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d02e      	beq.n	80032ea <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d029      	beq.n	80032ea <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0320 	and.w	r3, r3, #32
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10b      	bne.n	80032bc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 020a 	bic.w	r2, r2, #10
 80032b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c0:	f003 021f 	and.w	r2, r3, #31
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	2102      	movs	r1, #2
 80032ca:	fa01 f202 	lsl.w	r2, r1, r2
 80032ce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d038      	beq.n	8003352 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80032e8:	e033      	b.n	8003352 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ee:	f003 031f 	and.w	r3, r3, #31
 80032f2:	2208      	movs	r2, #8
 80032f4:	409a      	lsls	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d02a      	beq.n	8003354 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b00      	cmp	r3, #0
 8003306:	d025      	beq.n	8003354 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 020e 	bic.w	r2, r2, #14
 8003316:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331c:	f003 021f 	and.w	r2, r3, #31
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003324:	2101      	movs	r1, #1
 8003326:	fa01 f202 	lsl.w	r2, r1, r2
 800332a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003346:	2b00      	cmp	r3, #0
 8003348:	d004      	beq.n	8003354 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003352:	bf00      	nop
 8003354:	bf00      	nop
}
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
 8003368:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003372:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003378:	2b00      	cmp	r3, #0
 800337a:	d004      	beq.n	8003386 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003384:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338a:	f003 021f 	and.w	r2, r3, #31
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003392:	2101      	movs	r1, #1
 8003394:	fa01 f202 	lsl.w	r2, r1, r2
 8003398:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2b10      	cmp	r3, #16
 80033a8:	d108      	bne.n	80033bc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80033ba:	e007      	b.n	80033cc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	60da      	str	r2, [r3, #12]
}
 80033cc:	bf00      	nop
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80033d8:	b480      	push	{r7}
 80033da:	b087      	sub	sp, #28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	461a      	mov	r2, r3
 80033e6:	4b16      	ldr	r3, [pc, #88]	@ (8003440 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d802      	bhi.n	80033f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80033ec:	4b15      	ldr	r3, [pc, #84]	@ (8003444 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	e001      	b.n	80033f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80033f2:	4b15      	ldr	r3, [pc, #84]	@ (8003448 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80033f4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	3b08      	subs	r3, #8
 8003402:	4a12      	ldr	r2, [pc, #72]	@ (800344c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003404:	fba2 2303 	umull	r2, r3, r2, r3
 8003408:	091b      	lsrs	r3, r3, #4
 800340a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003410:	089b      	lsrs	r3, r3, #2
 8003412:	009a      	lsls	r2, r3, #2
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	4413      	add	r3, r2
 8003418:	461a      	mov	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a0b      	ldr	r2, [pc, #44]	@ (8003450 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003422:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f003 031f 	and.w	r3, r3, #31
 800342a:	2201      	movs	r2, #1
 800342c:	409a      	lsls	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003432:	bf00      	nop
 8003434:	371c      	adds	r7, #28
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40020407 	.word	0x40020407
 8003444:	40020800 	.word	0x40020800
 8003448:	40020820 	.word	0x40020820
 800344c:	cccccccd 	.word	0xcccccccd
 8003450:	40020880 	.word	0x40020880

08003454 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	b2db      	uxtb	r3, r3
 8003462:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	4b0b      	ldr	r3, [pc, #44]	@ (8003494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003468:	4413      	add	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	461a      	mov	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a08      	ldr	r2, [pc, #32]	@ (8003498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003476:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	3b01      	subs	r3, #1
 800347c:	f003 031f 	and.w	r3, r3, #31
 8003480:	2201      	movs	r2, #1
 8003482:	409a      	lsls	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003488:	bf00      	nop
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	1000823f 	.word	0x1000823f
 8003498:	40020940 	.word	0x40020940

0800349c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80034aa:	e15a      	b.n	8003762 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	2101      	movs	r1, #1
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	fa01 f303 	lsl.w	r3, r1, r3
 80034b8:	4013      	ands	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 814c 	beq.w	800375c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 0303 	and.w	r3, r3, #3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d005      	beq.n	80034dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d130      	bne.n	800353e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	2203      	movs	r2, #3
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4013      	ands	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003512:	2201      	movs	r2, #1
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43db      	mvns	r3, r3
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4013      	ands	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	091b      	lsrs	r3, r3, #4
 8003528:	f003 0201 	and.w	r2, r3, #1
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	2b03      	cmp	r3, #3
 8003548:	d017      	beq.n	800357a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	2203      	movs	r2, #3
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43db      	mvns	r3, r3
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4013      	ands	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	689a      	ldr	r2, [r3, #8]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f003 0303 	and.w	r3, r3, #3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d123      	bne.n	80035ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	08da      	lsrs	r2, r3, #3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3208      	adds	r2, #8
 800358e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003592:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	220f      	movs	r2, #15
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	43db      	mvns	r3, r3
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4013      	ands	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	691a      	ldr	r2, [r3, #16]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	08da      	lsrs	r2, r3, #3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3208      	adds	r2, #8
 80035c8:	6939      	ldr	r1, [r7, #16]
 80035ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	2203      	movs	r2, #3
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	43db      	mvns	r3, r3
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	4013      	ands	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f003 0203 	and.w	r2, r3, #3
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 80a6 	beq.w	800375c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003610:	4b5b      	ldr	r3, [pc, #364]	@ (8003780 <HAL_GPIO_Init+0x2e4>)
 8003612:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003614:	4a5a      	ldr	r2, [pc, #360]	@ (8003780 <HAL_GPIO_Init+0x2e4>)
 8003616:	f043 0301 	orr.w	r3, r3, #1
 800361a:	6613      	str	r3, [r2, #96]	@ 0x60
 800361c:	4b58      	ldr	r3, [pc, #352]	@ (8003780 <HAL_GPIO_Init+0x2e4>)
 800361e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	60bb      	str	r3, [r7, #8]
 8003626:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003628:	4a56      	ldr	r2, [pc, #344]	@ (8003784 <HAL_GPIO_Init+0x2e8>)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	089b      	lsrs	r3, r3, #2
 800362e:	3302      	adds	r3, #2
 8003630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003634:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	220f      	movs	r2, #15
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	43db      	mvns	r3, r3
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4013      	ands	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003652:	d01f      	beq.n	8003694 <HAL_GPIO_Init+0x1f8>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a4c      	ldr	r2, [pc, #304]	@ (8003788 <HAL_GPIO_Init+0x2ec>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d019      	beq.n	8003690 <HAL_GPIO_Init+0x1f4>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a4b      	ldr	r2, [pc, #300]	@ (800378c <HAL_GPIO_Init+0x2f0>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d013      	beq.n	800368c <HAL_GPIO_Init+0x1f0>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a4a      	ldr	r2, [pc, #296]	@ (8003790 <HAL_GPIO_Init+0x2f4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d00d      	beq.n	8003688 <HAL_GPIO_Init+0x1ec>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a49      	ldr	r2, [pc, #292]	@ (8003794 <HAL_GPIO_Init+0x2f8>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d007      	beq.n	8003684 <HAL_GPIO_Init+0x1e8>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a48      	ldr	r2, [pc, #288]	@ (8003798 <HAL_GPIO_Init+0x2fc>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d101      	bne.n	8003680 <HAL_GPIO_Init+0x1e4>
 800367c:	2305      	movs	r3, #5
 800367e:	e00a      	b.n	8003696 <HAL_GPIO_Init+0x1fa>
 8003680:	2306      	movs	r3, #6
 8003682:	e008      	b.n	8003696 <HAL_GPIO_Init+0x1fa>
 8003684:	2304      	movs	r3, #4
 8003686:	e006      	b.n	8003696 <HAL_GPIO_Init+0x1fa>
 8003688:	2303      	movs	r3, #3
 800368a:	e004      	b.n	8003696 <HAL_GPIO_Init+0x1fa>
 800368c:	2302      	movs	r3, #2
 800368e:	e002      	b.n	8003696 <HAL_GPIO_Init+0x1fa>
 8003690:	2301      	movs	r3, #1
 8003692:	e000      	b.n	8003696 <HAL_GPIO_Init+0x1fa>
 8003694:	2300      	movs	r3, #0
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	f002 0203 	and.w	r2, r2, #3
 800369c:	0092      	lsls	r2, r2, #2
 800369e:	4093      	lsls	r3, r2
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036a6:	4937      	ldr	r1, [pc, #220]	@ (8003784 <HAL_GPIO_Init+0x2e8>)
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	089b      	lsrs	r3, r3, #2
 80036ac:	3302      	adds	r3, #2
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036b4:	4b39      	ldr	r3, [pc, #228]	@ (800379c <HAL_GPIO_Init+0x300>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	43db      	mvns	r3, r3
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4013      	ands	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036d8:	4a30      	ldr	r2, [pc, #192]	@ (800379c <HAL_GPIO_Init+0x300>)
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80036de:	4b2f      	ldr	r3, [pc, #188]	@ (800379c <HAL_GPIO_Init+0x300>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	43db      	mvns	r3, r3
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4013      	ands	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4313      	orrs	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003702:	4a26      	ldr	r2, [pc, #152]	@ (800379c <HAL_GPIO_Init+0x300>)
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003708:	4b24      	ldr	r3, [pc, #144]	@ (800379c <HAL_GPIO_Init+0x300>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	43db      	mvns	r3, r3
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4013      	ands	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4313      	orrs	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800372c:	4a1b      	ldr	r2, [pc, #108]	@ (800379c <HAL_GPIO_Init+0x300>)
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003732:	4b1a      	ldr	r3, [pc, #104]	@ (800379c <HAL_GPIO_Init+0x300>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	43db      	mvns	r3, r3
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	4013      	ands	r3, r2
 8003740:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4313      	orrs	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003756:	4a11      	ldr	r2, [pc, #68]	@ (800379c <HAL_GPIO_Init+0x300>)
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	3301      	adds	r3, #1
 8003760:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	fa22 f303 	lsr.w	r3, r2, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	f47f ae9d 	bne.w	80034ac <HAL_GPIO_Init+0x10>
  }
}
 8003772:	bf00      	nop
 8003774:	bf00      	nop
 8003776:	371c      	adds	r7, #28
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	40021000 	.word	0x40021000
 8003784:	40010000 	.word	0x40010000
 8003788:	48000400 	.word	0x48000400
 800378c:	48000800 	.word	0x48000800
 8003790:	48000c00 	.word	0x48000c00
 8003794:	48001000 	.word	0x48001000
 8003798:	48001400 	.word	0x48001400
 800379c:	40010400 	.word	0x40010400

080037a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	807b      	strh	r3, [r7, #2]
 80037ac:	4613      	mov	r3, r2
 80037ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037b0:	787b      	ldrb	r3, [r7, #1]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037b6:	887a      	ldrh	r2, [r7, #2]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037bc:	e002      	b.n	80037c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037be:	887a      	ldrh	r2, [r7, #2]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80037da:	4b08      	ldr	r3, [pc, #32]	@ (80037fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037dc:	695a      	ldr	r2, [r3, #20]
 80037de:	88fb      	ldrh	r3, [r7, #6]
 80037e0:	4013      	ands	r3, r2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d006      	beq.n	80037f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037e6:	4a05      	ldr	r2, [pc, #20]	@ (80037fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037e8:	88fb      	ldrh	r3, [r7, #6]
 80037ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037ec:	88fb      	ldrh	r3, [r7, #6]
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 f806 	bl	8003800 <HAL_GPIO_EXTI_Callback>
  }
}
 80037f4:	bf00      	nop
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40010400 	.word	0x40010400

08003800 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
	...

08003818 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d141      	bne.n	80038aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003826:	4b4b      	ldr	r3, [pc, #300]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800382e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003832:	d131      	bne.n	8003898 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003834:	4b47      	ldr	r3, [pc, #284]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003836:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800383a:	4a46      	ldr	r2, [pc, #280]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800383c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003840:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003844:	4b43      	ldr	r3, [pc, #268]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800384c:	4a41      	ldr	r2, [pc, #260]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800384e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003852:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003854:	4b40      	ldr	r3, [pc, #256]	@ (8003958 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2232      	movs	r2, #50	@ 0x32
 800385a:	fb02 f303 	mul.w	r3, r2, r3
 800385e:	4a3f      	ldr	r2, [pc, #252]	@ (800395c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003860:	fba2 2303 	umull	r2, r3, r2, r3
 8003864:	0c9b      	lsrs	r3, r3, #18
 8003866:	3301      	adds	r3, #1
 8003868:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800386a:	e002      	b.n	8003872 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	3b01      	subs	r3, #1
 8003870:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003872:	4b38      	ldr	r3, [pc, #224]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800387a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800387e:	d102      	bne.n	8003886 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f2      	bne.n	800386c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003886:	4b33      	ldr	r3, [pc, #204]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800388e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003892:	d158      	bne.n	8003946 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e057      	b.n	8003948 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003898:	4b2e      	ldr	r3, [pc, #184]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800389a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800389e:	4a2d      	ldr	r2, [pc, #180]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80038a8:	e04d      	b.n	8003946 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038b0:	d141      	bne.n	8003936 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038b2:	4b28      	ldr	r3, [pc, #160]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80038ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038be:	d131      	bne.n	8003924 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038c0:	4b24      	ldr	r3, [pc, #144]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038c6:	4a23      	ldr	r2, [pc, #140]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038d0:	4b20      	ldr	r3, [pc, #128]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038d8:	4a1e      	ldr	r2, [pc, #120]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003958 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2232      	movs	r2, #50	@ 0x32
 80038e6:	fb02 f303 	mul.w	r3, r2, r3
 80038ea:	4a1c      	ldr	r2, [pc, #112]	@ (800395c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80038ec:	fba2 2303 	umull	r2, r3, r2, r3
 80038f0:	0c9b      	lsrs	r3, r3, #18
 80038f2:	3301      	adds	r3, #1
 80038f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038f6:	e002      	b.n	80038fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038fe:	4b15      	ldr	r3, [pc, #84]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003906:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800390a:	d102      	bne.n	8003912 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f2      	bne.n	80038f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003912:	4b10      	ldr	r3, [pc, #64]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800391a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800391e:	d112      	bne.n	8003946 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e011      	b.n	8003948 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003924:	4b0b      	ldr	r3, [pc, #44]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800392a:	4a0a      	ldr	r2, [pc, #40]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800392c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003930:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003934:	e007      	b.n	8003946 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003936:	4b07      	ldr	r3, [pc, #28]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800393e:	4a05      	ldr	r2, [pc, #20]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003940:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003944:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	40007000 	.word	0x40007000
 8003958:	20000000 	.word	0x20000000
 800395c:	431bde83 	.word	0x431bde83

08003960 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003964:	4b05      	ldr	r3, [pc, #20]	@ (800397c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	4a04      	ldr	r2, [pc, #16]	@ (800397c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800396a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800396e:	6093      	str	r3, [r2, #8]
}
 8003970:	bf00      	nop
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40007000 	.word	0x40007000

08003980 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e2fe      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d075      	beq.n	8003a8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800399e:	4b97      	ldr	r3, [pc, #604]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 030c 	and.w	r3, r3, #12
 80039a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039a8:	4b94      	ldr	r3, [pc, #592]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f003 0303 	and.w	r3, r3, #3
 80039b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	2b0c      	cmp	r3, #12
 80039b6:	d102      	bne.n	80039be <HAL_RCC_OscConfig+0x3e>
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	2b03      	cmp	r3, #3
 80039bc:	d002      	beq.n	80039c4 <HAL_RCC_OscConfig+0x44>
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d10b      	bne.n	80039dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039c4:	4b8d      	ldr	r3, [pc, #564]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d05b      	beq.n	8003a88 <HAL_RCC_OscConfig+0x108>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d157      	bne.n	8003a88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e2d9      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039e4:	d106      	bne.n	80039f4 <HAL_RCC_OscConfig+0x74>
 80039e6:	4b85      	ldr	r3, [pc, #532]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a84      	ldr	r2, [pc, #528]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 80039ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	e01d      	b.n	8003a30 <HAL_RCC_OscConfig+0xb0>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039fc:	d10c      	bne.n	8003a18 <HAL_RCC_OscConfig+0x98>
 80039fe:	4b7f      	ldr	r3, [pc, #508]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a7e      	ldr	r2, [pc, #504]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	4b7c      	ldr	r3, [pc, #496]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a7b      	ldr	r2, [pc, #492]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	e00b      	b.n	8003a30 <HAL_RCC_OscConfig+0xb0>
 8003a18:	4b78      	ldr	r3, [pc, #480]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a77      	ldr	r2, [pc, #476]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	4b75      	ldr	r3, [pc, #468]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a74      	ldr	r2, [pc, #464]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d013      	beq.n	8003a60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a38:	f7fd fd2a 	bl	8001490 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a40:	f7fd fd26 	bl	8001490 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b64      	cmp	r3, #100	@ 0x64
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e29e      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a52:	4b6a      	ldr	r3, [pc, #424]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0xc0>
 8003a5e:	e014      	b.n	8003a8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a60:	f7fd fd16 	bl	8001490 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a68:	f7fd fd12 	bl	8001490 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b64      	cmp	r3, #100	@ 0x64
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e28a      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a7a:	4b60      	ldr	r3, [pc, #384]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0xe8>
 8003a86:	e000      	b.n	8003a8a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d075      	beq.n	8003b82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a96:	4b59      	ldr	r3, [pc, #356]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
 8003a9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003aa0:	4b56      	ldr	r3, [pc, #344]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f003 0303 	and.w	r3, r3, #3
 8003aa8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	2b0c      	cmp	r3, #12
 8003aae:	d102      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x136>
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d002      	beq.n	8003abc <HAL_RCC_OscConfig+0x13c>
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d11f      	bne.n	8003afc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003abc:	4b4f      	ldr	r3, [pc, #316]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d005      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x154>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e25d      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad4:	4b49      	ldr	r3, [pc, #292]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	061b      	lsls	r3, r3, #24
 8003ae2:	4946      	ldr	r1, [pc, #280]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ae8:	4b45      	ldr	r3, [pc, #276]	@ (8003c00 <HAL_RCC_OscConfig+0x280>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fd fc83 	bl	80013f8 <HAL_InitTick>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d043      	beq.n	8003b80 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e249      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d023      	beq.n	8003b4c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b04:	4b3d      	ldr	r3, [pc, #244]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a3c      	ldr	r2, [pc, #240]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003b0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b10:	f7fd fcbe 	bl	8001490 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b18:	f7fd fcba 	bl	8001490 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e232      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b2a:	4b34      	ldr	r3, [pc, #208]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b36:	4b31      	ldr	r3, [pc, #196]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	061b      	lsls	r3, r3, #24
 8003b44:	492d      	ldr	r1, [pc, #180]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	604b      	str	r3, [r1, #4]
 8003b4a:	e01a      	b.n	8003b82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b4c:	4b2b      	ldr	r3, [pc, #172]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a2a      	ldr	r2, [pc, #168]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003b52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fd fc9a 	bl	8001490 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b60:	f7fd fc96 	bl	8001490 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e20e      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b72:	4b22      	ldr	r3, [pc, #136]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0x1e0>
 8003b7e:	e000      	b.n	8003b82 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d041      	beq.n	8003c12 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d01c      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b96:	4b19      	ldr	r3, [pc, #100]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b9c:	4a17      	ldr	r2, [pc, #92]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003b9e:	f043 0301 	orr.w	r3, r3, #1
 8003ba2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba6:	f7fd fc73 	bl	8001490 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bae:	f7fd fc6f 	bl	8001490 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e1e7      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003bc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0ef      	beq.n	8003bae <HAL_RCC_OscConfig+0x22e>
 8003bce:	e020      	b.n	8003c12 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bd6:	4a09      	ldr	r2, [pc, #36]	@ (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003bd8:	f023 0301 	bic.w	r3, r3, #1
 8003bdc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be0:	f7fd fc56 	bl	8001490 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003be6:	e00d      	b.n	8003c04 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003be8:	f7fd fc52 	bl	8001490 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d906      	bls.n	8003c04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e1ca      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
 8003bfa:	bf00      	nop
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c04:	4b8c      	ldr	r3, [pc, #560]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1ea      	bne.n	8003be8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 80a6 	beq.w	8003d6c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c20:	2300      	movs	r3, #0
 8003c22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c24:	4b84      	ldr	r3, [pc, #528]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_RCC_OscConfig+0x2b4>
 8003c30:	2301      	movs	r3, #1
 8003c32:	e000      	b.n	8003c36 <HAL_RCC_OscConfig+0x2b6>
 8003c34:	2300      	movs	r3, #0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00d      	beq.n	8003c56 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c3a:	4b7f      	ldr	r3, [pc, #508]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c3e:	4a7e      	ldr	r2, [pc, #504]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003c40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c44:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c46:	4b7c      	ldr	r3, [pc, #496]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c52:	2301      	movs	r3, #1
 8003c54:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c56:	4b79      	ldr	r3, [pc, #484]	@ (8003e3c <HAL_RCC_OscConfig+0x4bc>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d118      	bne.n	8003c94 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c62:	4b76      	ldr	r3, [pc, #472]	@ (8003e3c <HAL_RCC_OscConfig+0x4bc>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a75      	ldr	r2, [pc, #468]	@ (8003e3c <HAL_RCC_OscConfig+0x4bc>)
 8003c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c6e:	f7fd fc0f 	bl	8001490 <HAL_GetTick>
 8003c72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c76:	f7fd fc0b 	bl	8001490 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e183      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c88:	4b6c      	ldr	r3, [pc, #432]	@ (8003e3c <HAL_RCC_OscConfig+0x4bc>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0f0      	beq.n	8003c76 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d108      	bne.n	8003cae <HAL_RCC_OscConfig+0x32e>
 8003c9c:	4b66      	ldr	r3, [pc, #408]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ca2:	4a65      	ldr	r2, [pc, #404]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003cac:	e024      	b.n	8003cf8 <HAL_RCC_OscConfig+0x378>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	2b05      	cmp	r3, #5
 8003cb4:	d110      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x358>
 8003cb6:	4b60      	ldr	r3, [pc, #384]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cbc:	4a5e      	ldr	r2, [pc, #376]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003cbe:	f043 0304 	orr.w	r3, r3, #4
 8003cc2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003cc6:	4b5c      	ldr	r3, [pc, #368]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ccc:	4a5a      	ldr	r2, [pc, #360]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003cce:	f043 0301 	orr.w	r3, r3, #1
 8003cd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003cd6:	e00f      	b.n	8003cf8 <HAL_RCC_OscConfig+0x378>
 8003cd8:	4b57      	ldr	r3, [pc, #348]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cde:	4a56      	ldr	r2, [pc, #344]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003ce0:	f023 0301 	bic.w	r3, r3, #1
 8003ce4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ce8:	4b53      	ldr	r3, [pc, #332]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cee:	4a52      	ldr	r2, [pc, #328]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003cf0:	f023 0304 	bic.w	r3, r3, #4
 8003cf4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d016      	beq.n	8003d2e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d00:	f7fd fbc6 	bl	8001490 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d06:	e00a      	b.n	8003d1e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d08:	f7fd fbc2 	bl	8001490 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e138      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d1e:	4b46      	ldr	r3, [pc, #280]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0ed      	beq.n	8003d08 <HAL_RCC_OscConfig+0x388>
 8003d2c:	e015      	b.n	8003d5a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2e:	f7fd fbaf 	bl	8001490 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d34:	e00a      	b.n	8003d4c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d36:	f7fd fbab 	bl	8001490 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e121      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d4c:	4b3a      	ldr	r3, [pc, #232]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1ed      	bne.n	8003d36 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d5a:	7ffb      	ldrb	r3, [r7, #31]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d105      	bne.n	8003d6c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d60:	4b35      	ldr	r3, [pc, #212]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d64:	4a34      	ldr	r2, [pc, #208]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003d66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d6a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0320 	and.w	r3, r3, #32
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d03c      	beq.n	8003df2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d01c      	beq.n	8003dba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d80:	4b2d      	ldr	r3, [pc, #180]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003d82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d86:	4a2c      	ldr	r2, [pc, #176]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003d88:	f043 0301 	orr.w	r3, r3, #1
 8003d8c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d90:	f7fd fb7e 	bl	8001490 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d98:	f7fd fb7a 	bl	8001490 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e0f2      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003daa:	4b23      	ldr	r3, [pc, #140]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003dac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0ef      	beq.n	8003d98 <HAL_RCC_OscConfig+0x418>
 8003db8:	e01b      	b.n	8003df2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003dba:	4b1f      	ldr	r3, [pc, #124]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003dbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003dc2:	f023 0301 	bic.w	r3, r3, #1
 8003dc6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dca:	f7fd fb61 	bl	8001490 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dd2:	f7fd fb5d 	bl	8001490 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e0d5      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003de4:	4b14      	ldr	r3, [pc, #80]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003de6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1ef      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 80c9 	beq.w	8003f8e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 030c 	and.w	r3, r3, #12
 8003e04:	2b0c      	cmp	r3, #12
 8003e06:	f000 8083 	beq.w	8003f10 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d15e      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e12:	4b09      	ldr	r3, [pc, #36]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a08      	ldr	r2, [pc, #32]	@ (8003e38 <HAL_RCC_OscConfig+0x4b8>)
 8003e18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1e:	f7fd fb37 	bl	8001490 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e24:	e00c      	b.n	8003e40 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e26:	f7fd fb33 	bl	8001490 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d905      	bls.n	8003e40 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e0ab      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e40:	4b55      	ldr	r3, [pc, #340]	@ (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1ec      	bne.n	8003e26 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e4c:	4b52      	ldr	r3, [pc, #328]	@ (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003e4e:	68da      	ldr	r2, [r3, #12]
 8003e50:	4b52      	ldr	r3, [pc, #328]	@ (8003f9c <HAL_RCC_OscConfig+0x61c>)
 8003e52:	4013      	ands	r3, r2
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6a11      	ldr	r1, [r2, #32]
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e5c:	3a01      	subs	r2, #1
 8003e5e:	0112      	lsls	r2, r2, #4
 8003e60:	4311      	orrs	r1, r2
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003e66:	0212      	lsls	r2, r2, #8
 8003e68:	4311      	orrs	r1, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003e6e:	0852      	lsrs	r2, r2, #1
 8003e70:	3a01      	subs	r2, #1
 8003e72:	0552      	lsls	r2, r2, #21
 8003e74:	4311      	orrs	r1, r2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003e7a:	0852      	lsrs	r2, r2, #1
 8003e7c:	3a01      	subs	r2, #1
 8003e7e:	0652      	lsls	r2, r2, #25
 8003e80:	4311      	orrs	r1, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003e86:	06d2      	lsls	r2, r2, #27
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	4943      	ldr	r1, [pc, #268]	@ (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e90:	4b41      	ldr	r3, [pc, #260]	@ (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a40      	ldr	r2, [pc, #256]	@ (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003e96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e9a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e9c:	4b3e      	ldr	r3, [pc, #248]	@ (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	4a3d      	ldr	r2, [pc, #244]	@ (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003ea2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ea6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea8:	f7fd faf2 	bl	8001490 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb0:	f7fd faee 	bl	8001490 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e066      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ec2:	4b35      	ldr	r3, [pc, #212]	@ (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0f0      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x530>
 8003ece:	e05e      	b.n	8003f8e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed0:	4b31      	ldr	r3, [pc, #196]	@ (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a30      	ldr	r2, [pc, #192]	@ (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003ed6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003eda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003edc:	f7fd fad8 	bl	8001490 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee4:	f7fd fad4 	bl	8001490 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e04c      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ef6:	4b28      	ldr	r3, [pc, #160]	@ (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f0      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003f02:	4b25      	ldr	r3, [pc, #148]	@ (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	4924      	ldr	r1, [pc, #144]	@ (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003f08:	4b25      	ldr	r3, [pc, #148]	@ (8003fa0 <HAL_RCC_OscConfig+0x620>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	60cb      	str	r3, [r1, #12]
 8003f0e:	e03e      	b.n	8003f8e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d101      	bne.n	8003f1c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e039      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8003f98 <HAL_RCC_OscConfig+0x618>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f003 0203 	and.w	r2, r3, #3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d12c      	bne.n	8003f8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d123      	bne.n	8003f8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d11b      	bne.n	8003f8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d113      	bne.n	8003f8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6c:	085b      	lsrs	r3, r3, #1
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d109      	bne.n	8003f8a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f80:	085b      	lsrs	r3, r3, #1
 8003f82:	3b01      	subs	r3, #1
 8003f84:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d001      	beq.n	8003f8e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e000      	b.n	8003f90 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3720      	adds	r7, #32
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40021000 	.word	0x40021000
 8003f9c:	019f800c 	.word	0x019f800c
 8003fa0:	feeefffc 	.word	0xfeeefffc

08003fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e11e      	b.n	80041fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fbc:	4b91      	ldr	r3, [pc, #580]	@ (8004204 <HAL_RCC_ClockConfig+0x260>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 030f 	and.w	r3, r3, #15
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d910      	bls.n	8003fec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fca:	4b8e      	ldr	r3, [pc, #568]	@ (8004204 <HAL_RCC_ClockConfig+0x260>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f023 020f 	bic.w	r2, r3, #15
 8003fd2:	498c      	ldr	r1, [pc, #560]	@ (8004204 <HAL_RCC_ClockConfig+0x260>)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fda:	4b8a      	ldr	r3, [pc, #552]	@ (8004204 <HAL_RCC_ClockConfig+0x260>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d001      	beq.n	8003fec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e106      	b.n	80041fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d073      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	2b03      	cmp	r3, #3
 8003ffe:	d129      	bne.n	8004054 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004000:	4b81      	ldr	r3, [pc, #516]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e0f4      	b.n	80041fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004010:	f000 f99e 	bl	8004350 <RCC_GetSysClockFreqFromPLLSource>
 8004014:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4a7c      	ldr	r2, [pc, #496]	@ (800420c <HAL_RCC_ClockConfig+0x268>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d93f      	bls.n	800409e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800401e:	4b7a      	ldr	r3, [pc, #488]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d009      	beq.n	800403e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004032:	2b00      	cmp	r3, #0
 8004034:	d033      	beq.n	800409e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800403a:	2b00      	cmp	r3, #0
 800403c:	d12f      	bne.n	800409e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800403e:	4b72      	ldr	r3, [pc, #456]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004046:	4a70      	ldr	r2, [pc, #448]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 8004048:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800404c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800404e:	2380      	movs	r3, #128	@ 0x80
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	e024      	b.n	800409e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b02      	cmp	r3, #2
 800405a:	d107      	bne.n	800406c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800405c:	4b6a      	ldr	r3, [pc, #424]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d109      	bne.n	800407c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e0c6      	b.n	80041fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800406c:	4b66      	ldr	r3, [pc, #408]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0be      	b.n	80041fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800407c:	f000 f8ce 	bl	800421c <HAL_RCC_GetSysClockFreq>
 8004080:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4a61      	ldr	r2, [pc, #388]	@ (800420c <HAL_RCC_ClockConfig+0x268>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d909      	bls.n	800409e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800408a:	4b5f      	ldr	r3, [pc, #380]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004092:	4a5d      	ldr	r2, [pc, #372]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 8004094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004098:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800409a:	2380      	movs	r3, #128	@ 0x80
 800409c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800409e:	4b5a      	ldr	r3, [pc, #360]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f023 0203 	bic.w	r2, r3, #3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	4957      	ldr	r1, [pc, #348]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b0:	f7fd f9ee 	bl	8001490 <HAL_GetTick>
 80040b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b6:	e00a      	b.n	80040ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b8:	f7fd f9ea 	bl	8001490 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e095      	b.n	80041fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ce:	4b4e      	ldr	r3, [pc, #312]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 020c 	and.w	r2, r3, #12
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	429a      	cmp	r2, r3
 80040de:	d1eb      	bne.n	80040b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d023      	beq.n	8004134 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040f8:	4b43      	ldr	r3, [pc, #268]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	4a42      	ldr	r2, [pc, #264]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 80040fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004102:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0308 	and.w	r3, r3, #8
 800410c:	2b00      	cmp	r3, #0
 800410e:	d007      	beq.n	8004120 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004110:	4b3d      	ldr	r3, [pc, #244]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004118:	4a3b      	ldr	r2, [pc, #236]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 800411a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800411e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004120:	4b39      	ldr	r3, [pc, #228]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	4936      	ldr	r1, [pc, #216]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 800412e:	4313      	orrs	r3, r2
 8004130:	608b      	str	r3, [r1, #8]
 8004132:	e008      	b.n	8004146 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	2b80      	cmp	r3, #128	@ 0x80
 8004138:	d105      	bne.n	8004146 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800413a:	4b33      	ldr	r3, [pc, #204]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	4a32      	ldr	r2, [pc, #200]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 8004140:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004144:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004146:	4b2f      	ldr	r3, [pc, #188]	@ (8004204 <HAL_RCC_ClockConfig+0x260>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	d21d      	bcs.n	8004190 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004154:	4b2b      	ldr	r3, [pc, #172]	@ (8004204 <HAL_RCC_ClockConfig+0x260>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f023 020f 	bic.w	r2, r3, #15
 800415c:	4929      	ldr	r1, [pc, #164]	@ (8004204 <HAL_RCC_ClockConfig+0x260>)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	4313      	orrs	r3, r2
 8004162:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004164:	f7fd f994 	bl	8001490 <HAL_GetTick>
 8004168:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800416a:	e00a      	b.n	8004182 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800416c:	f7fd f990 	bl	8001490 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800417a:	4293      	cmp	r3, r2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e03b      	b.n	80041fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004182:	4b20      	ldr	r3, [pc, #128]	@ (8004204 <HAL_RCC_ClockConfig+0x260>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d1ed      	bne.n	800416c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	d008      	beq.n	80041ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800419c:	4b1a      	ldr	r3, [pc, #104]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	4917      	ldr	r1, [pc, #92]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0308 	and.w	r3, r3, #8
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d009      	beq.n	80041ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041ba:	4b13      	ldr	r3, [pc, #76]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	490f      	ldr	r1, [pc, #60]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041ce:	f000 f825 	bl	800421c <HAL_RCC_GetSysClockFreq>
 80041d2:	4602      	mov	r2, r0
 80041d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004208 <HAL_RCC_ClockConfig+0x264>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	091b      	lsrs	r3, r3, #4
 80041da:	f003 030f 	and.w	r3, r3, #15
 80041de:	490c      	ldr	r1, [pc, #48]	@ (8004210 <HAL_RCC_ClockConfig+0x26c>)
 80041e0:	5ccb      	ldrb	r3, [r1, r3]
 80041e2:	f003 031f 	and.w	r3, r3, #31
 80041e6:	fa22 f303 	lsr.w	r3, r2, r3
 80041ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004214 <HAL_RCC_ClockConfig+0x270>)
 80041ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80041ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004218 <HAL_RCC_ClockConfig+0x274>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fd f900 	bl	80013f8 <HAL_InitTick>
 80041f8:	4603      	mov	r3, r0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40022000 	.word	0x40022000
 8004208:	40021000 	.word	0x40021000
 800420c:	04c4b400 	.word	0x04c4b400
 8004210:	080055c4 	.word	0x080055c4
 8004214:	20000000 	.word	0x20000000
 8004218:	20000004 	.word	0x20000004

0800421c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004222:	4b2c      	ldr	r3, [pc, #176]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 030c 	and.w	r3, r3, #12
 800422a:	2b04      	cmp	r3, #4
 800422c:	d102      	bne.n	8004234 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800422e:	4b2a      	ldr	r3, [pc, #168]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004230:	613b      	str	r3, [r7, #16]
 8004232:	e047      	b.n	80042c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004234:	4b27      	ldr	r3, [pc, #156]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 030c 	and.w	r3, r3, #12
 800423c:	2b08      	cmp	r3, #8
 800423e:	d102      	bne.n	8004246 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004240:	4b26      	ldr	r3, [pc, #152]	@ (80042dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	e03e      	b.n	80042c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004246:	4b23      	ldr	r3, [pc, #140]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 030c 	and.w	r3, r3, #12
 800424e:	2b0c      	cmp	r3, #12
 8004250:	d136      	bne.n	80042c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004252:	4b20      	ldr	r3, [pc, #128]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800425c:	4b1d      	ldr	r3, [pc, #116]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	091b      	lsrs	r3, r3, #4
 8004262:	f003 030f 	and.w	r3, r3, #15
 8004266:	3301      	adds	r3, #1
 8004268:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b03      	cmp	r3, #3
 800426e:	d10c      	bne.n	800428a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004270:	4a1a      	ldr	r2, [pc, #104]	@ (80042dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	fbb2 f3f3 	udiv	r3, r2, r3
 8004278:	4a16      	ldr	r2, [pc, #88]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800427a:	68d2      	ldr	r2, [r2, #12]
 800427c:	0a12      	lsrs	r2, r2, #8
 800427e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004282:	fb02 f303 	mul.w	r3, r2, r3
 8004286:	617b      	str	r3, [r7, #20]
      break;
 8004288:	e00c      	b.n	80042a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800428a:	4a13      	ldr	r2, [pc, #76]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004292:	4a10      	ldr	r2, [pc, #64]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004294:	68d2      	ldr	r2, [r2, #12]
 8004296:	0a12      	lsrs	r2, r2, #8
 8004298:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800429c:	fb02 f303 	mul.w	r3, r2, r3
 80042a0:	617b      	str	r3, [r7, #20]
      break;
 80042a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042a4:	4b0b      	ldr	r3, [pc, #44]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	0e5b      	lsrs	r3, r3, #25
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	3301      	adds	r3, #1
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042bc:	613b      	str	r3, [r7, #16]
 80042be:	e001      	b.n	80042c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80042c4:	693b      	ldr	r3, [r7, #16]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40021000 	.word	0x40021000
 80042d8:	00f42400 	.word	0x00f42400
 80042dc:	016e3600 	.word	0x016e3600

080042e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042e4:	4b03      	ldr	r3, [pc, #12]	@ (80042f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80042e6:	681b      	ldr	r3, [r3, #0]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	20000000 	.word	0x20000000

080042f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042fc:	f7ff fff0 	bl	80042e0 <HAL_RCC_GetHCLKFreq>
 8004300:	4602      	mov	r2, r0
 8004302:	4b06      	ldr	r3, [pc, #24]	@ (800431c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	0a1b      	lsrs	r3, r3, #8
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	4904      	ldr	r1, [pc, #16]	@ (8004320 <HAL_RCC_GetPCLK1Freq+0x28>)
 800430e:	5ccb      	ldrb	r3, [r1, r3]
 8004310:	f003 031f 	and.w	r3, r3, #31
 8004314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004318:	4618      	mov	r0, r3
 800431a:	bd80      	pop	{r7, pc}
 800431c:	40021000 	.word	0x40021000
 8004320:	080055d4 	.word	0x080055d4

08004324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004328:	f7ff ffda 	bl	80042e0 <HAL_RCC_GetHCLKFreq>
 800432c:	4602      	mov	r2, r0
 800432e:	4b06      	ldr	r3, [pc, #24]	@ (8004348 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	0adb      	lsrs	r3, r3, #11
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	4904      	ldr	r1, [pc, #16]	@ (800434c <HAL_RCC_GetPCLK2Freq+0x28>)
 800433a:	5ccb      	ldrb	r3, [r1, r3]
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004344:	4618      	mov	r0, r3
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40021000 	.word	0x40021000
 800434c:	080055d4 	.word	0x080055d4

08004350 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004356:	4b1e      	ldr	r3, [pc, #120]	@ (80043d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004360:	4b1b      	ldr	r3, [pc, #108]	@ (80043d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	091b      	lsrs	r3, r3, #4
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	3301      	adds	r3, #1
 800436c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	2b03      	cmp	r3, #3
 8004372:	d10c      	bne.n	800438e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004374:	4a17      	ldr	r2, [pc, #92]	@ (80043d4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	fbb2 f3f3 	udiv	r3, r2, r3
 800437c:	4a14      	ldr	r2, [pc, #80]	@ (80043d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800437e:	68d2      	ldr	r2, [r2, #12]
 8004380:	0a12      	lsrs	r2, r2, #8
 8004382:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004386:	fb02 f303 	mul.w	r3, r2, r3
 800438a:	617b      	str	r3, [r7, #20]
    break;
 800438c:	e00c      	b.n	80043a8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800438e:	4a12      	ldr	r2, [pc, #72]	@ (80043d8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	fbb2 f3f3 	udiv	r3, r2, r3
 8004396:	4a0e      	ldr	r2, [pc, #56]	@ (80043d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004398:	68d2      	ldr	r2, [r2, #12]
 800439a:	0a12      	lsrs	r2, r2, #8
 800439c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80043a0:	fb02 f303 	mul.w	r3, r2, r3
 80043a4:	617b      	str	r3, [r7, #20]
    break;
 80043a6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043a8:	4b09      	ldr	r3, [pc, #36]	@ (80043d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	0e5b      	lsrs	r3, r3, #25
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	3301      	adds	r3, #1
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80043c2:	687b      	ldr	r3, [r7, #4]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	371c      	adds	r7, #28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	40021000 	.word	0x40021000
 80043d4:	016e3600 	.word	0x016e3600
 80043d8:	00f42400 	.word	0x00f42400

080043dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043e4:	2300      	movs	r3, #0
 80043e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043e8:	2300      	movs	r3, #0
 80043ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 8098 	beq.w	800452a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043fa:	2300      	movs	r3, #0
 80043fc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043fe:	4b43      	ldr	r3, [pc, #268]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10d      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800440a:	4b40      	ldr	r3, [pc, #256]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800440c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800440e:	4a3f      	ldr	r2, [pc, #252]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004410:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004414:	6593      	str	r3, [r2, #88]	@ 0x58
 8004416:	4b3d      	ldr	r3, [pc, #244]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800441a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800441e:	60bb      	str	r3, [r7, #8]
 8004420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004422:	2301      	movs	r3, #1
 8004424:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004426:	4b3a      	ldr	r3, [pc, #232]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a39      	ldr	r2, [pc, #228]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800442c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004430:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004432:	f7fd f82d 	bl	8001490 <HAL_GetTick>
 8004436:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004438:	e009      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800443a:	f7fd f829 	bl	8001490 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d902      	bls.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	74fb      	strb	r3, [r7, #19]
        break;
 800444c:	e005      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800444e:	4b30      	ldr	r3, [pc, #192]	@ (8004510 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0ef      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800445a:	7cfb      	ldrb	r3, [r7, #19]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d159      	bne.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004460:	4b2a      	ldr	r3, [pc, #168]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004466:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800446a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d01e      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	429a      	cmp	r2, r3
 800447a:	d019      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800447c:	4b23      	ldr	r3, [pc, #140]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004482:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004486:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004488:	4b20      	ldr	r3, [pc, #128]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800448a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800448e:	4a1f      	ldr	r2, [pc, #124]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004490:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004494:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004498:	4b1c      	ldr	r3, [pc, #112]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800449a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800449e:	4a1b      	ldr	r2, [pc, #108]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044a8:	4a18      	ldr	r2, [pc, #96]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d016      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ba:	f7fc ffe9 	bl	8001490 <HAL_GetTick>
 80044be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044c0:	e00b      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044c2:	f7fc ffe5 	bl	8001490 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d902      	bls.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	74fb      	strb	r3, [r7, #19]
            break;
 80044d8:	e006      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044da:	4b0c      	ldr	r3, [pc, #48]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0ec      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80044e8:	7cfb      	ldrb	r3, [r7, #19]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10b      	bne.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044ee:	4b07      	ldr	r3, [pc, #28]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044fc:	4903      	ldr	r1, [pc, #12]	@ (800450c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004504:	e008      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004506:	7cfb      	ldrb	r3, [r7, #19]
 8004508:	74bb      	strb	r3, [r7, #18]
 800450a:	e005      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800450c:	40021000 	.word	0x40021000
 8004510:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004514:	7cfb      	ldrb	r3, [r7, #19]
 8004516:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004518:	7c7b      	ldrb	r3, [r7, #17]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d105      	bne.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800451e:	4ba7      	ldr	r3, [pc, #668]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004522:	4aa6      	ldr	r2, [pc, #664]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004524:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004528:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004536:	4ba1      	ldr	r3, [pc, #644]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800453c:	f023 0203 	bic.w	r2, r3, #3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	499d      	ldr	r1, [pc, #628]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004546:	4313      	orrs	r3, r2
 8004548:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00a      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004558:	4b98      	ldr	r3, [pc, #608]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800455a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800455e:	f023 020c 	bic.w	r2, r3, #12
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	4995      	ldr	r1, [pc, #596]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004568:	4313      	orrs	r3, r2
 800456a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800457a:	4b90      	ldr	r3, [pc, #576]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800457c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004580:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	498c      	ldr	r1, [pc, #560]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800459c:	4b87      	ldr	r3, [pc, #540]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	4984      	ldr	r1, [pc, #528]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0310 	and.w	r3, r3, #16
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045be:	4b7f      	ldr	r3, [pc, #508]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	497b      	ldr	r1, [pc, #492]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0320 	and.w	r3, r3, #32
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045e0:	4b76      	ldr	r3, [pc, #472]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	4973      	ldr	r1, [pc, #460]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004602:	4b6e      	ldr	r3, [pc, #440]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004608:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	496a      	ldr	r1, [pc, #424]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004624:	4b65      	ldr	r3, [pc, #404]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800462a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	4962      	ldr	r1, [pc, #392]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004646:	4b5d      	ldr	r3, [pc, #372]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800464c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004654:	4959      	ldr	r1, [pc, #356]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00a      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004668:	4b54      	ldr	r3, [pc, #336]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800466a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800466e:	f023 0203 	bic.w	r2, r3, #3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004676:	4951      	ldr	r1, [pc, #324]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004678:	4313      	orrs	r3, r2
 800467a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800468a:	4b4c      	ldr	r3, [pc, #304]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800468c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004690:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004698:	4948      	ldr	r1, [pc, #288]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800469a:	4313      	orrs	r3, r2
 800469c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d015      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046ac:	4b43      	ldr	r3, [pc, #268]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ba:	4940      	ldr	r1, [pc, #256]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046ca:	d105      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046cc:	4b3b      	ldr	r3, [pc, #236]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4a3a      	ldr	r2, [pc, #232]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d015      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046e4:	4b35      	ldr	r3, [pc, #212]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046f2:	4932      	ldr	r1, [pc, #200]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004702:	d105      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004704:	4b2d      	ldr	r3, [pc, #180]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	4a2c      	ldr	r2, [pc, #176]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800470a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800470e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d015      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800471c:	4b27      	ldr	r3, [pc, #156]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800471e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004722:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472a:	4924      	ldr	r1, [pc, #144]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004736:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800473a:	d105      	bne.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800473c:	4b1f      	ldr	r3, [pc, #124]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	4a1e      	ldr	r2, [pc, #120]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004742:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004746:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d015      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004754:	4b19      	ldr	r3, [pc, #100]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800475a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004762:	4916      	ldr	r1, [pc, #88]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004764:	4313      	orrs	r3, r2
 8004766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800476e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004772:	d105      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004774:	4b11      	ldr	r3, [pc, #68]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	4a10      	ldr	r2, [pc, #64]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800477a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800477e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d019      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800478c:	4b0b      	ldr	r3, [pc, #44]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800478e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004792:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479a:	4908      	ldr	r1, [pc, #32]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800479c:	4313      	orrs	r3, r2
 800479e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047aa:	d109      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047ac:	4b03      	ldr	r3, [pc, #12]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	4a02      	ldr	r2, [pc, #8]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047b6:	60d3      	str	r3, [r2, #12]
 80047b8:	e002      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80047ba:	bf00      	nop
 80047bc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d015      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80047cc:	4b29      	ldr	r3, [pc, #164]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047da:	4926      	ldr	r1, [pc, #152]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047ea:	d105      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047ec:	4b21      	ldr	r3, [pc, #132]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	4a20      	ldr	r2, [pc, #128]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047f6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d015      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004804:	4b1b      	ldr	r3, [pc, #108]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800480a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004812:	4918      	ldr	r1, [pc, #96]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004814:	4313      	orrs	r3, r2
 8004816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800481e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004822:	d105      	bne.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004824:	4b13      	ldr	r3, [pc, #76]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	4a12      	ldr	r2, [pc, #72]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800482a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800482e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d015      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800483c:	4b0d      	ldr	r3, [pc, #52]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800483e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004842:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800484a:	490a      	ldr	r1, [pc, #40]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800484c:	4313      	orrs	r3, r2
 800484e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004856:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800485a:	d105      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800485c:	4b05      	ldr	r3, [pc, #20]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	4a04      	ldr	r2, [pc, #16]	@ (8004874 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004862:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004866:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004868:	7cbb      	ldrb	r3, [r7, #18]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3718      	adds	r7, #24
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	40021000 	.word	0x40021000

08004878 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e042      	b.n	8004910 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004890:	2b00      	cmp	r3, #0
 8004892:	d106      	bne.n	80048a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7fc fcbd 	bl	800121c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2224      	movs	r2, #36	@ 0x24
 80048a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 0201 	bic.w	r2, r2, #1
 80048b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 fb24 	bl	8004f10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f825 	bl	8004918 <UART_SetConfig>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d101      	bne.n	80048d8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e01b      	b.n	8004910 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689a      	ldr	r2, [r3, #8]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0201 	orr.w	r2, r2, #1
 8004906:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 fba3 	bl	8005054 <UART_CheckIdleState>
 800490e:	4603      	mov	r3, r0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800491c:	b08c      	sub	sp, #48	@ 0x30
 800491e:	af00      	add	r7, sp, #0
 8004920:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	691b      	ldr	r3, [r3, #16]
 8004930:	431a      	orrs	r2, r3
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	431a      	orrs	r2, r3
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	4313      	orrs	r3, r2
 800493e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4baa      	ldr	r3, [pc, #680]	@ (8004bf0 <UART_SetConfig+0x2d8>)
 8004948:	4013      	ands	r3, r2
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	6812      	ldr	r2, [r2, #0]
 800494e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004950:	430b      	orrs	r3, r1
 8004952:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a9f      	ldr	r2, [pc, #636]	@ (8004bf4 <UART_SetConfig+0x2dc>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d004      	beq.n	8004984 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004980:	4313      	orrs	r3, r2
 8004982:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800498e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	6812      	ldr	r2, [r2, #0]
 8004996:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004998:	430b      	orrs	r3, r1
 800499a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a2:	f023 010f 	bic.w	r1, r3, #15
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a90      	ldr	r2, [pc, #576]	@ (8004bf8 <UART_SetConfig+0x2e0>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d125      	bne.n	8004a08 <UART_SetConfig+0xf0>
 80049bc:	4b8f      	ldr	r3, [pc, #572]	@ (8004bfc <UART_SetConfig+0x2e4>)
 80049be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	d81a      	bhi.n	8004a00 <UART_SetConfig+0xe8>
 80049ca:	a201      	add	r2, pc, #4	@ (adr r2, 80049d0 <UART_SetConfig+0xb8>)
 80049cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d0:	080049e1 	.word	0x080049e1
 80049d4:	080049f1 	.word	0x080049f1
 80049d8:	080049e9 	.word	0x080049e9
 80049dc:	080049f9 	.word	0x080049f9
 80049e0:	2301      	movs	r3, #1
 80049e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049e6:	e116      	b.n	8004c16 <UART_SetConfig+0x2fe>
 80049e8:	2302      	movs	r3, #2
 80049ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049ee:	e112      	b.n	8004c16 <UART_SetConfig+0x2fe>
 80049f0:	2304      	movs	r3, #4
 80049f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049f6:	e10e      	b.n	8004c16 <UART_SetConfig+0x2fe>
 80049f8:	2308      	movs	r3, #8
 80049fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049fe:	e10a      	b.n	8004c16 <UART_SetConfig+0x2fe>
 8004a00:	2310      	movs	r3, #16
 8004a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a06:	e106      	b.n	8004c16 <UART_SetConfig+0x2fe>
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a7c      	ldr	r2, [pc, #496]	@ (8004c00 <UART_SetConfig+0x2e8>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d138      	bne.n	8004a84 <UART_SetConfig+0x16c>
 8004a12:	4b7a      	ldr	r3, [pc, #488]	@ (8004bfc <UART_SetConfig+0x2e4>)
 8004a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a18:	f003 030c 	and.w	r3, r3, #12
 8004a1c:	2b0c      	cmp	r3, #12
 8004a1e:	d82d      	bhi.n	8004a7c <UART_SetConfig+0x164>
 8004a20:	a201      	add	r2, pc, #4	@ (adr r2, 8004a28 <UART_SetConfig+0x110>)
 8004a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a26:	bf00      	nop
 8004a28:	08004a5d 	.word	0x08004a5d
 8004a2c:	08004a7d 	.word	0x08004a7d
 8004a30:	08004a7d 	.word	0x08004a7d
 8004a34:	08004a7d 	.word	0x08004a7d
 8004a38:	08004a6d 	.word	0x08004a6d
 8004a3c:	08004a7d 	.word	0x08004a7d
 8004a40:	08004a7d 	.word	0x08004a7d
 8004a44:	08004a7d 	.word	0x08004a7d
 8004a48:	08004a65 	.word	0x08004a65
 8004a4c:	08004a7d 	.word	0x08004a7d
 8004a50:	08004a7d 	.word	0x08004a7d
 8004a54:	08004a7d 	.word	0x08004a7d
 8004a58:	08004a75 	.word	0x08004a75
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a62:	e0d8      	b.n	8004c16 <UART_SetConfig+0x2fe>
 8004a64:	2302      	movs	r3, #2
 8004a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a6a:	e0d4      	b.n	8004c16 <UART_SetConfig+0x2fe>
 8004a6c:	2304      	movs	r3, #4
 8004a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a72:	e0d0      	b.n	8004c16 <UART_SetConfig+0x2fe>
 8004a74:	2308      	movs	r3, #8
 8004a76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a7a:	e0cc      	b.n	8004c16 <UART_SetConfig+0x2fe>
 8004a7c:	2310      	movs	r3, #16
 8004a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a82:	e0c8      	b.n	8004c16 <UART_SetConfig+0x2fe>
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a5e      	ldr	r2, [pc, #376]	@ (8004c04 <UART_SetConfig+0x2ec>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d125      	bne.n	8004ada <UART_SetConfig+0x1c2>
 8004a8e:	4b5b      	ldr	r3, [pc, #364]	@ (8004bfc <UART_SetConfig+0x2e4>)
 8004a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a94:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004a98:	2b30      	cmp	r3, #48	@ 0x30
 8004a9a:	d016      	beq.n	8004aca <UART_SetConfig+0x1b2>
 8004a9c:	2b30      	cmp	r3, #48	@ 0x30
 8004a9e:	d818      	bhi.n	8004ad2 <UART_SetConfig+0x1ba>
 8004aa0:	2b20      	cmp	r3, #32
 8004aa2:	d00a      	beq.n	8004aba <UART_SetConfig+0x1a2>
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	d814      	bhi.n	8004ad2 <UART_SetConfig+0x1ba>
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d002      	beq.n	8004ab2 <UART_SetConfig+0x19a>
 8004aac:	2b10      	cmp	r3, #16
 8004aae:	d008      	beq.n	8004ac2 <UART_SetConfig+0x1aa>
 8004ab0:	e00f      	b.n	8004ad2 <UART_SetConfig+0x1ba>
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ab8:	e0ad      	b.n	8004c16 <UART_SetConfig+0x2fe>
 8004aba:	2302      	movs	r3, #2
 8004abc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ac0:	e0a9      	b.n	8004c16 <UART_SetConfig+0x2fe>
 8004ac2:	2304      	movs	r3, #4
 8004ac4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ac8:	e0a5      	b.n	8004c16 <UART_SetConfig+0x2fe>
 8004aca:	2308      	movs	r3, #8
 8004acc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ad0:	e0a1      	b.n	8004c16 <UART_SetConfig+0x2fe>
 8004ad2:	2310      	movs	r3, #16
 8004ad4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ad8:	e09d      	b.n	8004c16 <UART_SetConfig+0x2fe>
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a4a      	ldr	r2, [pc, #296]	@ (8004c08 <UART_SetConfig+0x2f0>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d125      	bne.n	8004b30 <UART_SetConfig+0x218>
 8004ae4:	4b45      	ldr	r3, [pc, #276]	@ (8004bfc <UART_SetConfig+0x2e4>)
 8004ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004aee:	2bc0      	cmp	r3, #192	@ 0xc0
 8004af0:	d016      	beq.n	8004b20 <UART_SetConfig+0x208>
 8004af2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004af4:	d818      	bhi.n	8004b28 <UART_SetConfig+0x210>
 8004af6:	2b80      	cmp	r3, #128	@ 0x80
 8004af8:	d00a      	beq.n	8004b10 <UART_SetConfig+0x1f8>
 8004afa:	2b80      	cmp	r3, #128	@ 0x80
 8004afc:	d814      	bhi.n	8004b28 <UART_SetConfig+0x210>
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <UART_SetConfig+0x1f0>
 8004b02:	2b40      	cmp	r3, #64	@ 0x40
 8004b04:	d008      	beq.n	8004b18 <UART_SetConfig+0x200>
 8004b06:	e00f      	b.n	8004b28 <UART_SetConfig+0x210>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b0e:	e082      	b.n	8004c16 <UART_SetConfig+0x2fe>
 8004b10:	2302      	movs	r3, #2
 8004b12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b16:	e07e      	b.n	8004c16 <UART_SetConfig+0x2fe>
 8004b18:	2304      	movs	r3, #4
 8004b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b1e:	e07a      	b.n	8004c16 <UART_SetConfig+0x2fe>
 8004b20:	2308      	movs	r3, #8
 8004b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b26:	e076      	b.n	8004c16 <UART_SetConfig+0x2fe>
 8004b28:	2310      	movs	r3, #16
 8004b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b2e:	e072      	b.n	8004c16 <UART_SetConfig+0x2fe>
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a35      	ldr	r2, [pc, #212]	@ (8004c0c <UART_SetConfig+0x2f4>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d12a      	bne.n	8004b90 <UART_SetConfig+0x278>
 8004b3a:	4b30      	ldr	r3, [pc, #192]	@ (8004bfc <UART_SetConfig+0x2e4>)
 8004b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b48:	d01a      	beq.n	8004b80 <UART_SetConfig+0x268>
 8004b4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b4e:	d81b      	bhi.n	8004b88 <UART_SetConfig+0x270>
 8004b50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b54:	d00c      	beq.n	8004b70 <UART_SetConfig+0x258>
 8004b56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b5a:	d815      	bhi.n	8004b88 <UART_SetConfig+0x270>
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <UART_SetConfig+0x250>
 8004b60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b64:	d008      	beq.n	8004b78 <UART_SetConfig+0x260>
 8004b66:	e00f      	b.n	8004b88 <UART_SetConfig+0x270>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b6e:	e052      	b.n	8004c16 <UART_SetConfig+0x2fe>
 8004b70:	2302      	movs	r3, #2
 8004b72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b76:	e04e      	b.n	8004c16 <UART_SetConfig+0x2fe>
 8004b78:	2304      	movs	r3, #4
 8004b7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b7e:	e04a      	b.n	8004c16 <UART_SetConfig+0x2fe>
 8004b80:	2308      	movs	r3, #8
 8004b82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b86:	e046      	b.n	8004c16 <UART_SetConfig+0x2fe>
 8004b88:	2310      	movs	r3, #16
 8004b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b8e:	e042      	b.n	8004c16 <UART_SetConfig+0x2fe>
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a17      	ldr	r2, [pc, #92]	@ (8004bf4 <UART_SetConfig+0x2dc>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d13a      	bne.n	8004c10 <UART_SetConfig+0x2f8>
 8004b9a:	4b18      	ldr	r3, [pc, #96]	@ (8004bfc <UART_SetConfig+0x2e4>)
 8004b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ba4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ba8:	d01a      	beq.n	8004be0 <UART_SetConfig+0x2c8>
 8004baa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bae:	d81b      	bhi.n	8004be8 <UART_SetConfig+0x2d0>
 8004bb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bb4:	d00c      	beq.n	8004bd0 <UART_SetConfig+0x2b8>
 8004bb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bba:	d815      	bhi.n	8004be8 <UART_SetConfig+0x2d0>
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d003      	beq.n	8004bc8 <UART_SetConfig+0x2b0>
 8004bc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bc4:	d008      	beq.n	8004bd8 <UART_SetConfig+0x2c0>
 8004bc6:	e00f      	b.n	8004be8 <UART_SetConfig+0x2d0>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bce:	e022      	b.n	8004c16 <UART_SetConfig+0x2fe>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bd6:	e01e      	b.n	8004c16 <UART_SetConfig+0x2fe>
 8004bd8:	2304      	movs	r3, #4
 8004bda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bde:	e01a      	b.n	8004c16 <UART_SetConfig+0x2fe>
 8004be0:	2308      	movs	r3, #8
 8004be2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004be6:	e016      	b.n	8004c16 <UART_SetConfig+0x2fe>
 8004be8:	2310      	movs	r3, #16
 8004bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bee:	e012      	b.n	8004c16 <UART_SetConfig+0x2fe>
 8004bf0:	cfff69f3 	.word	0xcfff69f3
 8004bf4:	40008000 	.word	0x40008000
 8004bf8:	40013800 	.word	0x40013800
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	40004400 	.word	0x40004400
 8004c04:	40004800 	.word	0x40004800
 8004c08:	40004c00 	.word	0x40004c00
 8004c0c:	40005000 	.word	0x40005000
 8004c10:	2310      	movs	r3, #16
 8004c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4aae      	ldr	r2, [pc, #696]	@ (8004ed4 <UART_SetConfig+0x5bc>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	f040 8097 	bne.w	8004d50 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c22:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004c26:	2b08      	cmp	r3, #8
 8004c28:	d823      	bhi.n	8004c72 <UART_SetConfig+0x35a>
 8004c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c30 <UART_SetConfig+0x318>)
 8004c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c30:	08004c55 	.word	0x08004c55
 8004c34:	08004c73 	.word	0x08004c73
 8004c38:	08004c5d 	.word	0x08004c5d
 8004c3c:	08004c73 	.word	0x08004c73
 8004c40:	08004c63 	.word	0x08004c63
 8004c44:	08004c73 	.word	0x08004c73
 8004c48:	08004c73 	.word	0x08004c73
 8004c4c:	08004c73 	.word	0x08004c73
 8004c50:	08004c6b 	.word	0x08004c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c54:	f7ff fb50 	bl	80042f8 <HAL_RCC_GetPCLK1Freq>
 8004c58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c5a:	e010      	b.n	8004c7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c5c:	4b9e      	ldr	r3, [pc, #632]	@ (8004ed8 <UART_SetConfig+0x5c0>)
 8004c5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c60:	e00d      	b.n	8004c7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c62:	f7ff fadb 	bl	800421c <HAL_RCC_GetSysClockFreq>
 8004c66:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c68:	e009      	b.n	8004c7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c70:	e005      	b.n	8004c7e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004c7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 8130 	beq.w	8004ee6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8a:	4a94      	ldr	r2, [pc, #592]	@ (8004edc <UART_SetConfig+0x5c4>)
 8004c8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c90:	461a      	mov	r2, r3
 8004c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c94:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c98:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	4413      	add	r3, r2
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d305      	bcc.n	8004cb6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d903      	bls.n	8004cbe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004cbc:	e113      	b.n	8004ee6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	60bb      	str	r3, [r7, #8]
 8004cc4:	60fa      	str	r2, [r7, #12]
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cca:	4a84      	ldr	r2, [pc, #528]	@ (8004edc <UART_SetConfig+0x5c4>)
 8004ccc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	603b      	str	r3, [r7, #0]
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cdc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ce0:	f7fb fe90 	bl	8000a04 <__aeabi_uldivmod>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4610      	mov	r0, r2
 8004cea:	4619      	mov	r1, r3
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	020b      	lsls	r3, r1, #8
 8004cf6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004cfa:	0202      	lsls	r2, r0, #8
 8004cfc:	6979      	ldr	r1, [r7, #20]
 8004cfe:	6849      	ldr	r1, [r1, #4]
 8004d00:	0849      	lsrs	r1, r1, #1
 8004d02:	2000      	movs	r0, #0
 8004d04:	460c      	mov	r4, r1
 8004d06:	4605      	mov	r5, r0
 8004d08:	eb12 0804 	adds.w	r8, r2, r4
 8004d0c:	eb43 0905 	adc.w	r9, r3, r5
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	469a      	mov	sl, r3
 8004d18:	4693      	mov	fp, r2
 8004d1a:	4652      	mov	r2, sl
 8004d1c:	465b      	mov	r3, fp
 8004d1e:	4640      	mov	r0, r8
 8004d20:	4649      	mov	r1, r9
 8004d22:	f7fb fe6f 	bl	8000a04 <__aeabi_uldivmod>
 8004d26:	4602      	mov	r2, r0
 8004d28:	460b      	mov	r3, r1
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d34:	d308      	bcc.n	8004d48 <UART_SetConfig+0x430>
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d3c:	d204      	bcs.n	8004d48 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6a3a      	ldr	r2, [r7, #32]
 8004d44:	60da      	str	r2, [r3, #12]
 8004d46:	e0ce      	b.n	8004ee6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004d4e:	e0ca      	b.n	8004ee6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d58:	d166      	bne.n	8004e28 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004d5a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d5e:	2b08      	cmp	r3, #8
 8004d60:	d827      	bhi.n	8004db2 <UART_SetConfig+0x49a>
 8004d62:	a201      	add	r2, pc, #4	@ (adr r2, 8004d68 <UART_SetConfig+0x450>)
 8004d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d68:	08004d8d 	.word	0x08004d8d
 8004d6c:	08004d95 	.word	0x08004d95
 8004d70:	08004d9d 	.word	0x08004d9d
 8004d74:	08004db3 	.word	0x08004db3
 8004d78:	08004da3 	.word	0x08004da3
 8004d7c:	08004db3 	.word	0x08004db3
 8004d80:	08004db3 	.word	0x08004db3
 8004d84:	08004db3 	.word	0x08004db3
 8004d88:	08004dab 	.word	0x08004dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d8c:	f7ff fab4 	bl	80042f8 <HAL_RCC_GetPCLK1Freq>
 8004d90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d92:	e014      	b.n	8004dbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d94:	f7ff fac6 	bl	8004324 <HAL_RCC_GetPCLK2Freq>
 8004d98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d9a:	e010      	b.n	8004dbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d9c:	4b4e      	ldr	r3, [pc, #312]	@ (8004ed8 <UART_SetConfig+0x5c0>)
 8004d9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004da0:	e00d      	b.n	8004dbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004da2:	f7ff fa3b 	bl	800421c <HAL_RCC_GetSysClockFreq>
 8004da6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004da8:	e009      	b.n	8004dbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004daa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004db0:	e005      	b.n	8004dbe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004db2:	2300      	movs	r3, #0
 8004db4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004dbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 8090 	beq.w	8004ee6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dca:	4a44      	ldr	r2, [pc, #272]	@ (8004edc <UART_SetConfig+0x5c4>)
 8004dcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dd8:	005a      	lsls	r2, r3, #1
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	085b      	lsrs	r3, r3, #1
 8004de0:	441a      	add	r2, r3
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	2b0f      	cmp	r3, #15
 8004df0:	d916      	bls.n	8004e20 <UART_SetConfig+0x508>
 8004df2:	6a3b      	ldr	r3, [r7, #32]
 8004df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004df8:	d212      	bcs.n	8004e20 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	f023 030f 	bic.w	r3, r3, #15
 8004e02:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	085b      	lsrs	r3, r3, #1
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	f003 0307 	and.w	r3, r3, #7
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	8bfb      	ldrh	r3, [r7, #30]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	8bfa      	ldrh	r2, [r7, #30]
 8004e1c:	60da      	str	r2, [r3, #12]
 8004e1e:	e062      	b.n	8004ee6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004e26:	e05e      	b.n	8004ee6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e28:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d828      	bhi.n	8004e82 <UART_SetConfig+0x56a>
 8004e30:	a201      	add	r2, pc, #4	@ (adr r2, 8004e38 <UART_SetConfig+0x520>)
 8004e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e36:	bf00      	nop
 8004e38:	08004e5d 	.word	0x08004e5d
 8004e3c:	08004e65 	.word	0x08004e65
 8004e40:	08004e6d 	.word	0x08004e6d
 8004e44:	08004e83 	.word	0x08004e83
 8004e48:	08004e73 	.word	0x08004e73
 8004e4c:	08004e83 	.word	0x08004e83
 8004e50:	08004e83 	.word	0x08004e83
 8004e54:	08004e83 	.word	0x08004e83
 8004e58:	08004e7b 	.word	0x08004e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e5c:	f7ff fa4c 	bl	80042f8 <HAL_RCC_GetPCLK1Freq>
 8004e60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e62:	e014      	b.n	8004e8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e64:	f7ff fa5e 	bl	8004324 <HAL_RCC_GetPCLK2Freq>
 8004e68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e6a:	e010      	b.n	8004e8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ed8 <UART_SetConfig+0x5c0>)
 8004e6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e70:	e00d      	b.n	8004e8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e72:	f7ff f9d3 	bl	800421c <HAL_RCC_GetSysClockFreq>
 8004e76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e78:	e009      	b.n	8004e8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e80:	e005      	b.n	8004e8e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004e8c:	bf00      	nop
    }

    if (pclk != 0U)
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d028      	beq.n	8004ee6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e98:	4a10      	ldr	r2, [pc, #64]	@ (8004edc <UART_SetConfig+0x5c4>)
 8004e9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea2:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	085b      	lsrs	r3, r3, #1
 8004eac:	441a      	add	r2, r3
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	2b0f      	cmp	r3, #15
 8004ebc:	d910      	bls.n	8004ee0 <UART_SetConfig+0x5c8>
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ec4:	d20c      	bcs.n	8004ee0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ec6:	6a3b      	ldr	r3, [r7, #32]
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	60da      	str	r2, [r3, #12]
 8004ed0:	e009      	b.n	8004ee6 <UART_SetConfig+0x5ce>
 8004ed2:	bf00      	nop
 8004ed4:	40008000 	.word	0x40008000
 8004ed8:	00f42400 	.word	0x00f42400
 8004edc:	080055dc 	.word	0x080055dc
      }
      else
      {
        ret = HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	2200      	movs	r2, #0
 8004f00:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004f02:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3730      	adds	r7, #48	@ 0x30
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004f10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1c:	f003 0308 	and.w	r3, r3, #8
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00a      	beq.n	8004f3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00a      	beq.n	8004f7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f82:	f003 0304 	and.w	r3, r3, #4
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa4:	f003 0310 	and.w	r3, r3, #16
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00a      	beq.n	8004fc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc6:	f003 0320 	and.w	r3, r3, #32
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d01a      	beq.n	8005026 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800500a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800500e:	d10a      	bne.n	8005026 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00a      	beq.n	8005048 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	605a      	str	r2, [r3, #4]
  }
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b098      	sub	sp, #96	@ 0x60
 8005058:	af02      	add	r7, sp, #8
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005064:	f7fc fa14 	bl	8001490 <HAL_GetTick>
 8005068:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0308 	and.w	r3, r3, #8
 8005074:	2b08      	cmp	r3, #8
 8005076:	d12f      	bne.n	80050d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005078:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005080:	2200      	movs	r2, #0
 8005082:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 f88e 	bl	80051a8 <UART_WaitOnFlagUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d022      	beq.n	80050d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800509a:	e853 3f00 	ldrex	r3, [r3]
 800509e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	461a      	mov	r2, r3
 80050ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80050b2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050b8:	e841 2300 	strex	r3, r2, [r1]
 80050bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1e6      	bne.n	8005092 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2220      	movs	r2, #32
 80050c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e063      	b.n	80051a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0304 	and.w	r3, r3, #4
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	d149      	bne.n	800517a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050ee:	2200      	movs	r2, #0
 80050f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f857 	bl	80051a8 <UART_WaitOnFlagUntilTimeout>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d03c      	beq.n	800517a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005108:	e853 3f00 	ldrex	r3, [r3]
 800510c:	623b      	str	r3, [r7, #32]
   return(result);
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005114:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	461a      	mov	r2, r3
 800511c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800511e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005120:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005122:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005124:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005126:	e841 2300 	strex	r3, r2, [r1]
 800512a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800512c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1e6      	bne.n	8005100 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	3308      	adds	r3, #8
 8005138:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	e853 3f00 	ldrex	r3, [r3]
 8005140:	60fb      	str	r3, [r7, #12]
   return(result);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f023 0301 	bic.w	r3, r3, #1
 8005148:	64bb      	str	r3, [r7, #72]	@ 0x48
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	3308      	adds	r3, #8
 8005150:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005152:	61fa      	str	r2, [r7, #28]
 8005154:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005156:	69b9      	ldr	r1, [r7, #24]
 8005158:	69fa      	ldr	r2, [r7, #28]
 800515a:	e841 2300 	strex	r3, r2, [r1]
 800515e:	617b      	str	r3, [r7, #20]
   return(result);
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1e5      	bne.n	8005132 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2220      	movs	r2, #32
 800516a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e012      	b.n	80051a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2220      	movs	r2, #32
 800517e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2220      	movs	r2, #32
 8005186:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3758      	adds	r7, #88	@ 0x58
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	603b      	str	r3, [r7, #0]
 80051b4:	4613      	mov	r3, r2
 80051b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051b8:	e04f      	b.n	800525a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c0:	d04b      	beq.n	800525a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051c2:	f7fc f965 	bl	8001490 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d302      	bcc.n	80051d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d101      	bne.n	80051dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e04e      	b.n	800527a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0304 	and.w	r3, r3, #4
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d037      	beq.n	800525a <UART_WaitOnFlagUntilTimeout+0xb2>
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	2b80      	cmp	r3, #128	@ 0x80
 80051ee:	d034      	beq.n	800525a <UART_WaitOnFlagUntilTimeout+0xb2>
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2b40      	cmp	r3, #64	@ 0x40
 80051f4:	d031      	beq.n	800525a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	69db      	ldr	r3, [r3, #28]
 80051fc:	f003 0308 	and.w	r3, r3, #8
 8005200:	2b08      	cmp	r3, #8
 8005202:	d110      	bne.n	8005226 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2208      	movs	r2, #8
 800520a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 f838 	bl	8005282 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2208      	movs	r2, #8
 8005216:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e029      	b.n	800527a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005230:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005234:	d111      	bne.n	800525a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800523e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f000 f81e 	bl	8005282 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2220      	movs	r2, #32
 800524a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e00f      	b.n	800527a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	69da      	ldr	r2, [r3, #28]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	4013      	ands	r3, r2
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	429a      	cmp	r2, r3
 8005268:	bf0c      	ite	eq
 800526a:	2301      	moveq	r3, #1
 800526c:	2300      	movne	r3, #0
 800526e:	b2db      	uxtb	r3, r3
 8005270:	461a      	mov	r2, r3
 8005272:	79fb      	ldrb	r3, [r7, #7]
 8005274:	429a      	cmp	r2, r3
 8005276:	d0a0      	beq.n	80051ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005282:	b480      	push	{r7}
 8005284:	b095      	sub	sp, #84	@ 0x54
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005292:	e853 3f00 	ldrex	r3, [r3]
 8005296:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800529e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	461a      	mov	r2, r3
 80052a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80052aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052b0:	e841 2300 	strex	r3, r2, [r1]
 80052b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1e6      	bne.n	800528a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3308      	adds	r3, #8
 80052c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	e853 3f00 	ldrex	r3, [r3]
 80052ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052d2:	f023 0301 	bic.w	r3, r3, #1
 80052d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3308      	adds	r3, #8
 80052de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052e8:	e841 2300 	strex	r3, r2, [r1]
 80052ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1e3      	bne.n	80052bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d118      	bne.n	800532e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	e853 3f00 	ldrex	r3, [r3]
 8005308:	60bb      	str	r3, [r7, #8]
   return(result);
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	f023 0310 	bic.w	r3, r3, #16
 8005310:	647b      	str	r3, [r7, #68]	@ 0x44
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	461a      	mov	r2, r3
 8005318:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800531a:	61bb      	str	r3, [r7, #24]
 800531c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531e:	6979      	ldr	r1, [r7, #20]
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	e841 2300 	strex	r3, r2, [r1]
 8005326:	613b      	str	r3, [r7, #16]
   return(result);
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1e6      	bne.n	80052fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2220      	movs	r2, #32
 8005332:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005342:	bf00      	nop
 8005344:	3754      	adds	r7, #84	@ 0x54
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800534e:	b480      	push	{r7}
 8005350:	b085      	sub	sp, #20
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800535c:	2b01      	cmp	r3, #1
 800535e:	d101      	bne.n	8005364 <HAL_UARTEx_DisableFifoMode+0x16>
 8005360:	2302      	movs	r3, #2
 8005362:	e027      	b.n	80053b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2224      	movs	r2, #36	@ 0x24
 8005370:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 0201 	bic.w	r2, r2, #1
 800538a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005392:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d101      	bne.n	80053d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80053d4:	2302      	movs	r3, #2
 80053d6:	e02d      	b.n	8005434 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2224      	movs	r2, #36	@ 0x24
 80053e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0201 	bic.w	r2, r2, #1
 80053fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f84f 	bl	80054b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2220      	movs	r2, #32
 8005426:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800544c:	2b01      	cmp	r3, #1
 800544e:	d101      	bne.n	8005454 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005450:	2302      	movs	r3, #2
 8005452:	e02d      	b.n	80054b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2224      	movs	r2, #36	@ 0x24
 8005460:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 0201 	bic.w	r2, r2, #1
 800547a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	683a      	ldr	r2, [r7, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f811 	bl	80054b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2220      	movs	r2, #32
 80054a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d108      	bne.n	80054da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80054d8:	e031      	b.n	800553e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80054da:	2308      	movs	r3, #8
 80054dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80054de:	2308      	movs	r3, #8
 80054e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	0e5b      	lsrs	r3, r3, #25
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	f003 0307 	and.w	r3, r3, #7
 80054f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	0f5b      	lsrs	r3, r3, #29
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005502:	7bbb      	ldrb	r3, [r7, #14]
 8005504:	7b3a      	ldrb	r2, [r7, #12]
 8005506:	4911      	ldr	r1, [pc, #68]	@ (800554c <UARTEx_SetNbDataToProcess+0x94>)
 8005508:	5c8a      	ldrb	r2, [r1, r2]
 800550a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800550e:	7b3a      	ldrb	r2, [r7, #12]
 8005510:	490f      	ldr	r1, [pc, #60]	@ (8005550 <UARTEx_SetNbDataToProcess+0x98>)
 8005512:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005514:	fb93 f3f2 	sdiv	r3, r3, r2
 8005518:	b29a      	uxth	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005520:	7bfb      	ldrb	r3, [r7, #15]
 8005522:	7b7a      	ldrb	r2, [r7, #13]
 8005524:	4909      	ldr	r1, [pc, #36]	@ (800554c <UARTEx_SetNbDataToProcess+0x94>)
 8005526:	5c8a      	ldrb	r2, [r1, r2]
 8005528:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800552c:	7b7a      	ldrb	r2, [r7, #13]
 800552e:	4908      	ldr	r1, [pc, #32]	@ (8005550 <UARTEx_SetNbDataToProcess+0x98>)
 8005530:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005532:	fb93 f3f2 	sdiv	r3, r3, r2
 8005536:	b29a      	uxth	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800553e:	bf00      	nop
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	080055f4 	.word	0x080055f4
 8005550:	080055fc 	.word	0x080055fc

08005554 <memset>:
 8005554:	4402      	add	r2, r0
 8005556:	4603      	mov	r3, r0
 8005558:	4293      	cmp	r3, r2
 800555a:	d100      	bne.n	800555e <memset+0xa>
 800555c:	4770      	bx	lr
 800555e:	f803 1b01 	strb.w	r1, [r3], #1
 8005562:	e7f9      	b.n	8005558 <memset+0x4>

08005564 <__libc_init_array>:
 8005564:	b570      	push	{r4, r5, r6, lr}
 8005566:	4d0d      	ldr	r5, [pc, #52]	@ (800559c <__libc_init_array+0x38>)
 8005568:	4c0d      	ldr	r4, [pc, #52]	@ (80055a0 <__libc_init_array+0x3c>)
 800556a:	1b64      	subs	r4, r4, r5
 800556c:	10a4      	asrs	r4, r4, #2
 800556e:	2600      	movs	r6, #0
 8005570:	42a6      	cmp	r6, r4
 8005572:	d109      	bne.n	8005588 <__libc_init_array+0x24>
 8005574:	4d0b      	ldr	r5, [pc, #44]	@ (80055a4 <__libc_init_array+0x40>)
 8005576:	4c0c      	ldr	r4, [pc, #48]	@ (80055a8 <__libc_init_array+0x44>)
 8005578:	f000 f818 	bl	80055ac <_init>
 800557c:	1b64      	subs	r4, r4, r5
 800557e:	10a4      	asrs	r4, r4, #2
 8005580:	2600      	movs	r6, #0
 8005582:	42a6      	cmp	r6, r4
 8005584:	d105      	bne.n	8005592 <__libc_init_array+0x2e>
 8005586:	bd70      	pop	{r4, r5, r6, pc}
 8005588:	f855 3b04 	ldr.w	r3, [r5], #4
 800558c:	4798      	blx	r3
 800558e:	3601      	adds	r6, #1
 8005590:	e7ee      	b.n	8005570 <__libc_init_array+0xc>
 8005592:	f855 3b04 	ldr.w	r3, [r5], #4
 8005596:	4798      	blx	r3
 8005598:	3601      	adds	r6, #1
 800559a:	e7f2      	b.n	8005582 <__libc_init_array+0x1e>
 800559c:	0800560c 	.word	0x0800560c
 80055a0:	0800560c 	.word	0x0800560c
 80055a4:	0800560c 	.word	0x0800560c
 80055a8:	08005610 	.word	0x08005610

080055ac <_init>:
 80055ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ae:	bf00      	nop
 80055b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055b2:	bc08      	pop	{r3}
 80055b4:	469e      	mov	lr, r3
 80055b6:	4770      	bx	lr

080055b8 <_fini>:
 80055b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ba:	bf00      	nop
 80055bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055be:	bc08      	pop	{r3}
 80055c0:	469e      	mov	lr, r3
 80055c2:	4770      	bx	lr
