
LAB2_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008928  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008b00  08008b00  00009b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b40  08008b40  0000a054  2**0
                  CONTENTS
  4 .ARM          00000008  08008b40  08008b40  00009b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b48  08008b48  0000a054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b48  08008b48  00009b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b4c  08008b4c  00009b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08008b50  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000058  08008ba4  0000a058  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08008ba4  0000a260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a054  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178d5  00000000  00000000  0000a084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a77  00000000  00000000  00021959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  000243d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001013  00000000  00000000  00025860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000284e7  00000000  00000000  00026873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000176f4  00000000  00000000  0004ed5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112229  00000000  00000000  0006644e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00178677  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005aa8  00000000  00000000  001786bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  0017e164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000058 	.word	0x20000058
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008ae8 	.word	0x08008ae8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000005c 	.word	0x2000005c
 8000214:	08008ae8 	.word	0x08008ae8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2f>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a0c:	bf24      	itt	cs
 8000a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a16:	d90d      	bls.n	8000a34 <__aeabi_d2f+0x30>
 8000a18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a2c:	bf08      	it	eq
 8000a2e:	f020 0001 	biceq.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a38:	d121      	bne.n	8000a7e <__aeabi_d2f+0x7a>
 8000a3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a3e:	bfbc      	itt	lt
 8000a40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a44:	4770      	bxlt	lr
 8000a46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4e:	f1c2 0218 	rsb	r2, r2, #24
 8000a52:	f1c2 0c20 	rsb	ip, r2, #32
 8000a56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5e:	bf18      	it	ne
 8000a60:	f040 0001 	orrne.w	r0, r0, #1
 8000a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a70:	ea40 000c 	orr.w	r0, r0, ip
 8000a74:	fa23 f302 	lsr.w	r3, r3, r2
 8000a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a7c:	e7cc      	b.n	8000a18 <__aeabi_d2f+0x14>
 8000a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a82:	d107      	bne.n	8000a94 <__aeabi_d2f+0x90>
 8000a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a88:	bf1e      	ittt	ne
 8000a8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a92:	4770      	bxne	lr
 8000a94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_uldivmod>:
 8000aa4:	b953      	cbnz	r3, 8000abc <__aeabi_uldivmod+0x18>
 8000aa6:	b94a      	cbnz	r2, 8000abc <__aeabi_uldivmod+0x18>
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	bf08      	it	eq
 8000aac:	2800      	cmpeq	r0, #0
 8000aae:	bf1c      	itt	ne
 8000ab0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ab4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab8:	f000 b96a 	b.w	8000d90 <__aeabi_idiv0>
 8000abc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac4:	f000 f806 	bl	8000ad4 <__udivmoddi4>
 8000ac8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad0:	b004      	add	sp, #16
 8000ad2:	4770      	bx	lr

08000ad4 <__udivmoddi4>:
 8000ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad8:	9d08      	ldr	r5, [sp, #32]
 8000ada:	460c      	mov	r4, r1
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d14e      	bne.n	8000b7e <__udivmoddi4+0xaa>
 8000ae0:	4694      	mov	ip, r2
 8000ae2:	458c      	cmp	ip, r1
 8000ae4:	4686      	mov	lr, r0
 8000ae6:	fab2 f282 	clz	r2, r2
 8000aea:	d962      	bls.n	8000bb2 <__udivmoddi4+0xde>
 8000aec:	b14a      	cbz	r2, 8000b02 <__udivmoddi4+0x2e>
 8000aee:	f1c2 0320 	rsb	r3, r2, #32
 8000af2:	4091      	lsls	r1, r2
 8000af4:	fa20 f303 	lsr.w	r3, r0, r3
 8000af8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000afc:	4319      	orrs	r1, r3
 8000afe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b06:	fa1f f68c 	uxth.w	r6, ip
 8000b0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b12:	fb07 1114 	mls	r1, r7, r4, r1
 8000b16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b1a:	fb04 f106 	mul.w	r1, r4, r6
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	d90a      	bls.n	8000b38 <__udivmoddi4+0x64>
 8000b22:	eb1c 0303 	adds.w	r3, ip, r3
 8000b26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b2a:	f080 8112 	bcs.w	8000d52 <__udivmoddi4+0x27e>
 8000b2e:	4299      	cmp	r1, r3
 8000b30:	f240 810f 	bls.w	8000d52 <__udivmoddi4+0x27e>
 8000b34:	3c02      	subs	r4, #2
 8000b36:	4463      	add	r3, ip
 8000b38:	1a59      	subs	r1, r3, r1
 8000b3a:	fa1f f38e 	uxth.w	r3, lr
 8000b3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b42:	fb07 1110 	mls	r1, r7, r0, r1
 8000b46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4a:	fb00 f606 	mul.w	r6, r0, r6
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	d90a      	bls.n	8000b68 <__udivmoddi4+0x94>
 8000b52:	eb1c 0303 	adds.w	r3, ip, r3
 8000b56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b5a:	f080 80fc 	bcs.w	8000d56 <__udivmoddi4+0x282>
 8000b5e:	429e      	cmp	r6, r3
 8000b60:	f240 80f9 	bls.w	8000d56 <__udivmoddi4+0x282>
 8000b64:	4463      	add	r3, ip
 8000b66:	3802      	subs	r0, #2
 8000b68:	1b9b      	subs	r3, r3, r6
 8000b6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b6e:	2100      	movs	r1, #0
 8000b70:	b11d      	cbz	r5, 8000b7a <__udivmoddi4+0xa6>
 8000b72:	40d3      	lsrs	r3, r2
 8000b74:	2200      	movs	r2, #0
 8000b76:	e9c5 3200 	strd	r3, r2, [r5]
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d905      	bls.n	8000b8e <__udivmoddi4+0xba>
 8000b82:	b10d      	cbz	r5, 8000b88 <__udivmoddi4+0xb4>
 8000b84:	e9c5 0100 	strd	r0, r1, [r5]
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	e7f5      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000b8e:	fab3 f183 	clz	r1, r3
 8000b92:	2900      	cmp	r1, #0
 8000b94:	d146      	bne.n	8000c24 <__udivmoddi4+0x150>
 8000b96:	42a3      	cmp	r3, r4
 8000b98:	d302      	bcc.n	8000ba0 <__udivmoddi4+0xcc>
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	f0c0 80f0 	bcc.w	8000d80 <__udivmoddi4+0x2ac>
 8000ba0:	1a86      	subs	r6, r0, r2
 8000ba2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	2d00      	cmp	r5, #0
 8000baa:	d0e6      	beq.n	8000b7a <__udivmoddi4+0xa6>
 8000bac:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb0:	e7e3      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000bb2:	2a00      	cmp	r2, #0
 8000bb4:	f040 8090 	bne.w	8000cd8 <__udivmoddi4+0x204>
 8000bb8:	eba1 040c 	sub.w	r4, r1, ip
 8000bbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc0:	fa1f f78c 	uxth.w	r7, ip
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bce:	fb08 4416 	mls	r4, r8, r6, r4
 8000bd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bd6:	fb07 f006 	mul.w	r0, r7, r6
 8000bda:	4298      	cmp	r0, r3
 8000bdc:	d908      	bls.n	8000bf0 <__udivmoddi4+0x11c>
 8000bde:	eb1c 0303 	adds.w	r3, ip, r3
 8000be2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x11a>
 8000be8:	4298      	cmp	r0, r3
 8000bea:	f200 80cd 	bhi.w	8000d88 <__udivmoddi4+0x2b4>
 8000bee:	4626      	mov	r6, r4
 8000bf0:	1a1c      	subs	r4, r3, r0
 8000bf2:	fa1f f38e 	uxth.w	r3, lr
 8000bf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c02:	fb00 f707 	mul.w	r7, r0, r7
 8000c06:	429f      	cmp	r7, r3
 8000c08:	d908      	bls.n	8000c1c <__udivmoddi4+0x148>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c12:	d202      	bcs.n	8000c1a <__udivmoddi4+0x146>
 8000c14:	429f      	cmp	r7, r3
 8000c16:	f200 80b0 	bhi.w	8000d7a <__udivmoddi4+0x2a6>
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	1bdb      	subs	r3, r3, r7
 8000c1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c22:	e7a5      	b.n	8000b70 <__udivmoddi4+0x9c>
 8000c24:	f1c1 0620 	rsb	r6, r1, #32
 8000c28:	408b      	lsls	r3, r1
 8000c2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c2e:	431f      	orrs	r7, r3
 8000c30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c34:	fa04 f301 	lsl.w	r3, r4, r1
 8000c38:	ea43 030c 	orr.w	r3, r3, ip
 8000c3c:	40f4      	lsrs	r4, r6
 8000c3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c42:	0c38      	lsrs	r0, r7, #16
 8000c44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c48:	fbb4 fef0 	udiv	lr, r4, r0
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fb00 441e 	mls	r4, r0, lr, r4
 8000c54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c58:	fb0e f90c 	mul.w	r9, lr, ip
 8000c5c:	45a1      	cmp	r9, r4
 8000c5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x1a6>
 8000c64:	193c      	adds	r4, r7, r4
 8000c66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c6a:	f080 8084 	bcs.w	8000d76 <__udivmoddi4+0x2a2>
 8000c6e:	45a1      	cmp	r9, r4
 8000c70:	f240 8081 	bls.w	8000d76 <__udivmoddi4+0x2a2>
 8000c74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	eba4 0409 	sub.w	r4, r4, r9
 8000c7e:	fa1f f983 	uxth.w	r9, r3
 8000c82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c86:	fb00 4413 	mls	r4, r0, r3, r4
 8000c8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	d907      	bls.n	8000ca6 <__udivmoddi4+0x1d2>
 8000c96:	193c      	adds	r4, r7, r4
 8000c98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c9c:	d267      	bcs.n	8000d6e <__udivmoddi4+0x29a>
 8000c9e:	45a4      	cmp	ip, r4
 8000ca0:	d965      	bls.n	8000d6e <__udivmoddi4+0x29a>
 8000ca2:	3b02      	subs	r3, #2
 8000ca4:	443c      	add	r4, r7
 8000ca6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000caa:	fba0 9302 	umull	r9, r3, r0, r2
 8000cae:	eba4 040c 	sub.w	r4, r4, ip
 8000cb2:	429c      	cmp	r4, r3
 8000cb4:	46ce      	mov	lr, r9
 8000cb6:	469c      	mov	ip, r3
 8000cb8:	d351      	bcc.n	8000d5e <__udivmoddi4+0x28a>
 8000cba:	d04e      	beq.n	8000d5a <__udivmoddi4+0x286>
 8000cbc:	b155      	cbz	r5, 8000cd4 <__udivmoddi4+0x200>
 8000cbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000cc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cca:	40cb      	lsrs	r3, r1
 8000ccc:	431e      	orrs	r6, r3
 8000cce:	40cc      	lsrs	r4, r1
 8000cd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	e750      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000cd8:	f1c2 0320 	rsb	r3, r2, #32
 8000cdc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ce8:	4094      	lsls	r4, r2
 8000cea:	430c      	orrs	r4, r1
 8000cec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000d00:	0c23      	lsrs	r3, r4, #16
 8000d02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d06:	fb00 f107 	mul.w	r1, r0, r7
 8000d0a:	4299      	cmp	r1, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x24c>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d16:	d22c      	bcs.n	8000d72 <__udivmoddi4+0x29e>
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	d92a      	bls.n	8000d72 <__udivmoddi4+0x29e>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	4463      	add	r3, ip
 8000d20:	1a5b      	subs	r3, r3, r1
 8000d22:	b2a4      	uxth	r4, r4
 8000d24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d28:	fb08 3311 	mls	r3, r8, r1, r3
 8000d2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d30:	fb01 f307 	mul.w	r3, r1, r7
 8000d34:	42a3      	cmp	r3, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x276>
 8000d38:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d40:	d213      	bcs.n	8000d6a <__udivmoddi4+0x296>
 8000d42:	42a3      	cmp	r3, r4
 8000d44:	d911      	bls.n	8000d6a <__udivmoddi4+0x296>
 8000d46:	3902      	subs	r1, #2
 8000d48:	4464      	add	r4, ip
 8000d4a:	1ae4      	subs	r4, r4, r3
 8000d4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d50:	e739      	b.n	8000bc6 <__udivmoddi4+0xf2>
 8000d52:	4604      	mov	r4, r0
 8000d54:	e6f0      	b.n	8000b38 <__udivmoddi4+0x64>
 8000d56:	4608      	mov	r0, r1
 8000d58:	e706      	b.n	8000b68 <__udivmoddi4+0x94>
 8000d5a:	45c8      	cmp	r8, r9
 8000d5c:	d2ae      	bcs.n	8000cbc <__udivmoddi4+0x1e8>
 8000d5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d66:	3801      	subs	r0, #1
 8000d68:	e7a8      	b.n	8000cbc <__udivmoddi4+0x1e8>
 8000d6a:	4631      	mov	r1, r6
 8000d6c:	e7ed      	b.n	8000d4a <__udivmoddi4+0x276>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	e799      	b.n	8000ca6 <__udivmoddi4+0x1d2>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e7d4      	b.n	8000d20 <__udivmoddi4+0x24c>
 8000d76:	46d6      	mov	lr, sl
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1a6>
 8000d7a:	4463      	add	r3, ip
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	e74d      	b.n	8000c1c <__udivmoddi4+0x148>
 8000d80:	4606      	mov	r6, r0
 8000d82:	4623      	mov	r3, r4
 8000d84:	4608      	mov	r0, r1
 8000d86:	e70f      	b.n	8000ba8 <__udivmoddi4+0xd4>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	e730      	b.n	8000bf0 <__udivmoddi4+0x11c>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_idiv0>:
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	0000      	movs	r0, r0
	...

08000d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d98:	b5b0      	push	{r4, r5, r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d9e:	f000 fea6 	bl	8001aee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da2:	f000 f937 	bl	8001014 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da6:	f000 fb5d 	bl	8001464 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000daa:	f000 fa07 	bl	80011bc <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000dae:	f000 f97d 	bl	80010ac <MX_ADC1_Init>
  MX_TIM1_Init();
 8000db2:	f000 fa4d 	bl	8001250 <MX_TIM1_Init>
  MX_TIM5_Init();
 8000db6:	f000 fb07 	bl	80013c8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000dba:	217f      	movs	r1, #127	@ 0x7f
 8000dbc:	4882      	ldr	r0, [pc, #520]	@ (8000fc8 <main+0x230>)
 8000dbe:	f002 fbad 	bl	800351c <HAL_ADCEx_Calibration_Start>


  HAL_TIM_Base_Start(&htim1);
 8000dc2:	4882      	ldr	r0, [pc, #520]	@ (8000fcc <main+0x234>)
 8000dc4:	f004 f92a 	bl	800501c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4880      	ldr	r0, [pc, #512]	@ (8000fcc <main+0x234>)
 8000dcc:	f004 fa70 	bl	80052b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000dd0:	2104      	movs	r1, #4
 8000dd2:	487e      	ldr	r0, [pc, #504]	@ (8000fcc <main+0x234>)
 8000dd4:	f004 fa6c 	bl	80052b0 <HAL_TIM_PWM_Start>
  UARTInterruptConfig();
 8000dd8:	f000 fc3e 	bl	8001658 <UARTInterruptConfig>
  HAL_TIM_Base_Start_IT(&htim5);
 8000ddc:	487c      	ldr	r0, [pc, #496]	@ (8000fd0 <main+0x238>)
 8000dde:	f004 f98d 	bl	80050fc <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ADC_Read_blocking();
 8000de2:	f000 fbad 	bl	8001540 <ADC_Read_blocking>
	  avg();
 8000de6:	f000 fbf3 	bl	80015d0 <avg>
	  error = 2048.0 - position;
 8000dea:	4b7a      	ldr	r3, [pc, #488]	@ (8000fd4 <main+0x23c>)
 8000dec:	edd3 7a00 	vldr	s15, [r3]
 8000df0:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8000fd8 <main+0x240>
 8000df4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000df8:	4b78      	ldr	r3, [pc, #480]	@ (8000fdc <main+0x244>)
 8000dfa:	edc3 7a00 	vstr	s15, [r3]
	  ADC_avg[0] = position;
 8000dfe:	4b75      	ldr	r3, [pc, #468]	@ (8000fd4 <main+0x23c>)
 8000e00:	edd3 7a00 	vldr	s15, [r3]
 8000e04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e08:	ee17 3a90 	vmov	r3, s15
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	4b74      	ldr	r3, [pc, #464]	@ (8000fe0 <main+0x248>)
 8000e10:	801a      	strh	r2, [r3, #0]
	  datasend=ADC_avg[0];
 8000e12:	4b73      	ldr	r3, [pc, #460]	@ (8000fe0 <main+0x248>)
 8000e14:	881a      	ldrh	r2, [r3, #0]
 8000e16:	4b73      	ldr	r3, [pc, #460]	@ (8000fe4 <main+0x24c>)
 8000e18:	801a      	strh	r2, [r3, #0]

	  static uint64_t timestamp = 0;
	  uint64_t currentTime = micros();
 8000e1a:	f000 fc5d 	bl	80016d8 <micros>
 8000e1e:	e9c7 0100 	strd	r0, r1, [r7]



	  if(currentTime > timestamp)
 8000e22:	4b71      	ldr	r3, [pc, #452]	@ (8000fe8 <main+0x250>)
 8000e24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e2c:	4290      	cmp	r0, r2
 8000e2e:	eb71 0303 	sbcs.w	r3, r1, r3
 8000e32:	d225      	bcs.n	8000e80 <main+0xe8>
	  {
		  timestamp = currentTime + 5000; //us 200 Hz
 8000e34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e38:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000e3c:	1854      	adds	r4, r2, r1
 8000e3e:	f143 0500 	adc.w	r5, r3, #0
 8000e42:	4b69      	ldr	r3, [pc, #420]	@ (8000fe8 <main+0x250>)
 8000e44:	e9c3 4500 	strd	r4, r5, [r3]
		  datasend = ADC_avg[0];
 8000e48:	4b65      	ldr	r3, [pc, #404]	@ (8000fe0 <main+0x248>)
 8000e4a:	881a      	ldrh	r2, [r3, #0]
 8000e4c:	4b65      	ldr	r3, [pc, #404]	@ (8000fe4 <main+0x24c>)
 8000e4e:	801a      	strh	r2, [r3, #0]

		  ADCBytes[0] = 0x45; //Header
 8000e50:	4b66      	ldr	r3, [pc, #408]	@ (8000fec <main+0x254>)
 8000e52:	2245      	movs	r2, #69	@ 0x45
 8000e54:	701a      	strb	r2, [r3, #0]
		  ADCBytes[1] = (uint8_t)(datasend & 0xFF); // Lower byte
 8000e56:	4b63      	ldr	r3, [pc, #396]	@ (8000fe4 <main+0x24c>)
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	4b63      	ldr	r3, [pc, #396]	@ (8000fec <main+0x254>)
 8000e5e:	705a      	strb	r2, [r3, #1]
		  ADCBytes[2] = (uint8_t)((datasend >> 8) & 0xFF); // Upper byte
 8000e60:	4b60      	ldr	r3, [pc, #384]	@ (8000fe4 <main+0x24c>)
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4b60      	ldr	r3, [pc, #384]	@ (8000fec <main+0x254>)
 8000e6c:	709a      	strb	r2, [r3, #2]
		  ADCBytes[3] = 0x0A; //Terminater
 8000e6e:	4b5f      	ldr	r3, [pc, #380]	@ (8000fec <main+0x254>)
 8000e70:	220a      	movs	r2, #10
 8000e72:	70da      	strb	r2, [r3, #3]

		  HAL_UART_Transmit(&hlpuart1, ADCBytes , sizeof(ADCBytes), 10);
 8000e74:	230a      	movs	r3, #10
 8000e76:	2204      	movs	r2, #4
 8000e78:	495c      	ldr	r1, [pc, #368]	@ (8000fec <main+0x254>)
 8000e7a:	485d      	ldr	r0, [pc, #372]	@ (8000ff0 <main+0x258>)
 8000e7c:	f005 fd2c 	bl	80068d8 <HAL_UART_Transmit>
	  }
	  UARTInterruptConfig();
 8000e80:	f000 fbea 	bl	8001658 <UARTInterruptConfig>
	  Degree_position = (datasend*360.0)/4095.0;
 8000e84:	4b57      	ldr	r3, [pc, #348]	@ (8000fe4 <main+0x24c>)
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fb17 	bl	80004bc <__aeabi_i2d>
 8000e8e:	f04f 0200 	mov.w	r2, #0
 8000e92:	4b58      	ldr	r3, [pc, #352]	@ (8000ff4 <main+0x25c>)
 8000e94:	f7ff fb7c 	bl	8000590 <__aeabi_dmul>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	a345      	add	r3, pc, #276	@ (adr r3, 8000fb8 <main+0x220>)
 8000ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea6:	f7ff fc9d 	bl	80007e4 <__aeabi_ddiv>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	4610      	mov	r0, r2
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f7ff fd7f 	bl	80009b4 <__aeabi_d2iz>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	4a4f      	ldr	r2, [pc, #316]	@ (8000ff8 <main+0x260>)
 8000eba:	6013      	str	r3, [r2, #0]
	  Rad_position = (datasend*3.14)/4095.0;
 8000ebc:	4b49      	ldr	r3, [pc, #292]	@ (8000fe4 <main+0x24c>)
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fafb 	bl	80004bc <__aeabi_i2d>
 8000ec6:	a33e      	add	r3, pc, #248	@ (adr r3, 8000fc0 <main+0x228>)
 8000ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ecc:	f7ff fb60 	bl	8000590 <__aeabi_dmul>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	a337      	add	r3, pc, #220	@ (adr r3, 8000fb8 <main+0x220>)
 8000eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ede:	f7ff fc81 	bl	80007e4 <__aeabi_ddiv>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f7ff fd63 	bl	80009b4 <__aeabi_d2iz>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	4a42      	ldr	r2, [pc, #264]	@ (8000ffc <main+0x264>)
 8000ef2:	6013      	str	r3, [r2, #0]
	  PWM1 = (int16_t)(Recieve_PWM[2]<< 8) + Recieve_PWM[1];
 8000ef4:	4b42      	ldr	r3, [pc, #264]	@ (8001000 <main+0x268>)
 8000ef6:	789b      	ldrb	r3, [r3, #2]
 8000ef8:	021b      	lsls	r3, r3, #8
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	4a40      	ldr	r2, [pc, #256]	@ (8001000 <main+0x268>)
 8000efe:	7852      	ldrb	r2, [r2, #1]
 8000f00:	4413      	add	r3, r2
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	b21a      	sxth	r2, r3
 8000f06:	4b3f      	ldr	r3, [pc, #252]	@ (8001004 <main+0x26c>)
 8000f08:	801a      	strh	r2, [r3, #0]
	  FEEDBACK =PWM1;
 8000f0a:	4b3e      	ldr	r3, [pc, #248]	@ (8001004 <main+0x26c>)
 8000f0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f10:	ee07 3a90 	vmov	s15, r3
 8000f14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f18:	4b3b      	ldr	r3, [pc, #236]	@ (8001008 <main+0x270>)
 8000f1a:	edc3 7a00 	vstr	s15, [r3]
	  PWM2 = (int16_t)((PWM1*65535)/4095);
 8000f1e:	4b39      	ldr	r3, [pc, #228]	@ (8001004 <main+0x26c>)
 8000f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4613      	mov	r3, r2
 8000f28:	041b      	lsls	r3, r3, #16
 8000f2a:	1a9b      	subs	r3, r3, r2
 8000f2c:	4a37      	ldr	r2, [pc, #220]	@ (800100c <main+0x274>)
 8000f2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f32:	441a      	add	r2, r3
 8000f34:	12d2      	asrs	r2, r2, #11
 8000f36:	17db      	asrs	r3, r3, #31
 8000f38:	1ad3      	subs	r3, r2, r3
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b34      	ldr	r3, [pc, #208]	@ (8001010 <main+0x278>)
 8000f40:	601a      	str	r2, [r3, #0]


	  if(error > 0)
 8000f42:	4b26      	ldr	r3, [pc, #152]	@ (8000fdc <main+0x244>)
 8000f44:	edd3 7a00 	vldr	s15, [r3]
 8000f48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f50:	dd0a      	ble.n	8000f68 <main+0x1d0>
	  {

		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 8000f52:	4b1e      	ldr	r3, [pc, #120]	@ (8000fcc <main+0x234>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2200      	movs	r2, #0
 8000f58:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,PWM1);
 8000f5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001004 <main+0x26c>)
 8000f5c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f60:	4b1a      	ldr	r3, [pc, #104]	@ (8000fcc <main+0x234>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f66:	e73c      	b.n	8000de2 <main+0x4a>
	  }
	  else if(error < 0)
 8000f68:	4b1c      	ldr	r3, [pc, #112]	@ (8000fdc <main+0x244>)
 8000f6a:	edd3 7a00 	vldr	s15, [r3]
 8000f6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f76:	d50a      	bpl.n	8000f8e <main+0x1f6>
	  {

		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM1);
 8000f78:	4b22      	ldr	r3, [pc, #136]	@ (8001004 <main+0x26c>)
 8000f7a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f7e:	4b13      	ldr	r3, [pc, #76]	@ (8000fcc <main+0x234>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000f84:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <main+0x234>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f8c:	e729      	b.n	8000de2 <main+0x4a>
	  }
	  else if(error==0 )
 8000f8e:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <main+0x244>)
 8000f90:	edd3 7a00 	vldr	s15, [r3]
 8000f94:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9c:	f47f af21 	bne.w	8000de2 <main+0x4a>
	  	  {
	  		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fcc <main+0x234>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	635a      	str	r2, [r3, #52]	@ 0x34
	  		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000fa8:	4b08      	ldr	r3, [pc, #32]	@ (8000fcc <main+0x234>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2200      	movs	r2, #0
 8000fae:	639a      	str	r2, [r3, #56]	@ 0x38
  {
 8000fb0:	e717      	b.n	8000de2 <main+0x4a>
 8000fb2:	bf00      	nop
 8000fb4:	f3af 8000 	nop.w
 8000fb8:	00000000 	.word	0x00000000
 8000fbc:	40affe00 	.word	0x40affe00
 8000fc0:	51eb851f 	.word	0x51eb851f
 8000fc4:	40091eb8 	.word	0x40091eb8
 8000fc8:	20000074 	.word	0x20000074
 8000fcc:	20000174 	.word	0x20000174
 8000fd0:	200001c0 	.word	0x200001c0
 8000fd4:	20000240 	.word	0x20000240
 8000fd8:	45000000 	.word	0x45000000
 8000fdc:	20000244 	.word	0x20000244
 8000fe0:	2000020c 	.word	0x2000020c
 8000fe4:	20000214 	.word	0x20000214
 8000fe8:	20000250 	.word	0x20000250
 8000fec:	20000210 	.word	0x20000210
 8000ff0:	200000e0 	.word	0x200000e0
 8000ff4:	40768000 	.word	0x40768000
 8000ff8:	20000218 	.word	0x20000218
 8000ffc:	2000021c 	.word	0x2000021c
 8001000:	20000220 	.word	0x20000220
 8001004:	20000226 	.word	0x20000226
 8001008:	20000248 	.word	0x20000248
 800100c:	80080081 	.word	0x80080081
 8001010:	20000228 	.word	0x20000228

08001014 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b094      	sub	sp, #80	@ 0x50
 8001018:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101a:	f107 0318 	add.w	r3, r7, #24
 800101e:	2238      	movs	r2, #56	@ 0x38
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f007 fd34 	bl	8008a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	60da      	str	r2, [r3, #12]
 8001034:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001036:	2000      	movs	r0, #0
 8001038:	f002 ff68 	bl	8003f0c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800103c:	2302      	movs	r3, #2
 800103e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001040:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001044:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001046:	2340      	movs	r3, #64	@ 0x40
 8001048:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104a:	2302      	movs	r3, #2
 800104c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800104e:	2302      	movs	r3, #2
 8001050:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001052:	2304      	movs	r3, #4
 8001054:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001056:	2355      	movs	r3, #85	@ 0x55
 8001058:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800105a:	2302      	movs	r3, #2
 800105c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800105e:	2302      	movs	r3, #2
 8001060:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001062:	2302      	movs	r3, #2
 8001064:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001066:	f107 0318 	add.w	r3, r7, #24
 800106a:	4618      	mov	r0, r3
 800106c:	f003 f802 	bl	8004074 <HAL_RCC_OscConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001076:	f000 fb49 	bl	800170c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107a:	230f      	movs	r3, #15
 800107c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800107e:	2303      	movs	r3, #3
 8001080:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2104      	movs	r1, #4
 8001092:	4618      	mov	r0, r3
 8001094:	f003 fb00 	bl	8004698 <HAL_RCC_ClockConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800109e:	f000 fb35 	bl	800170c <Error_Handler>
  }
}
 80010a2:	bf00      	nop
 80010a4:	3750      	adds	r7, #80	@ 0x50
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08c      	sub	sp, #48	@ 0x30
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	2220      	movs	r2, #32
 80010c2:	2100      	movs	r1, #0
 80010c4:	4618      	mov	r0, r3
 80010c6:	f007 fce3 	bl	8008a90 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010ca:	4b39      	ldr	r3, [pc, #228]	@ (80011b0 <MX_ADC1_Init+0x104>)
 80010cc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80010d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010d2:	4b37      	ldr	r3, [pc, #220]	@ (80011b0 <MX_ADC1_Init+0x104>)
 80010d4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80010d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010da:	4b35      	ldr	r3, [pc, #212]	@ (80011b0 <MX_ADC1_Init+0x104>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e0:	4b33      	ldr	r3, [pc, #204]	@ (80011b0 <MX_ADC1_Init+0x104>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80010e6:	4b32      	ldr	r3, [pc, #200]	@ (80011b0 <MX_ADC1_Init+0x104>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010ec:	4b30      	ldr	r3, [pc, #192]	@ (80011b0 <MX_ADC1_Init+0x104>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f2:	4b2f      	ldr	r3, [pc, #188]	@ (80011b0 <MX_ADC1_Init+0x104>)
 80010f4:	2204      	movs	r2, #4
 80010f6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010f8:	4b2d      	ldr	r3, [pc, #180]	@ (80011b0 <MX_ADC1_Init+0x104>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010fe:	4b2c      	ldr	r3, [pc, #176]	@ (80011b0 <MX_ADC1_Init+0x104>)
 8001100:	2200      	movs	r2, #0
 8001102:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8001104:	4b2a      	ldr	r3, [pc, #168]	@ (80011b0 <MX_ADC1_Init+0x104>)
 8001106:	2202      	movs	r2, #2
 8001108:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800110a:	4b29      	ldr	r3, [pc, #164]	@ (80011b0 <MX_ADC1_Init+0x104>)
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001112:	4b27      	ldr	r3, [pc, #156]	@ (80011b0 <MX_ADC1_Init+0x104>)
 8001114:	2200      	movs	r2, #0
 8001116:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001118:	4b25      	ldr	r3, [pc, #148]	@ (80011b0 <MX_ADC1_Init+0x104>)
 800111a:	2200      	movs	r2, #0
 800111c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800111e:	4b24      	ldr	r3, [pc, #144]	@ (80011b0 <MX_ADC1_Init+0x104>)
 8001120:	2200      	movs	r2, #0
 8001122:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001126:	4b22      	ldr	r3, [pc, #136]	@ (80011b0 <MX_ADC1_Init+0x104>)
 8001128:	2200      	movs	r2, #0
 800112a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800112c:	4b20      	ldr	r3, [pc, #128]	@ (80011b0 <MX_ADC1_Init+0x104>)
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001134:	481e      	ldr	r0, [pc, #120]	@ (80011b0 <MX_ADC1_Init+0x104>)
 8001136:	f000 ffc5 	bl	80020c4 <HAL_ADC_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001140:	f000 fae4 	bl	800170c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001148:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800114c:	4619      	mov	r1, r3
 800114e:	4818      	ldr	r0, [pc, #96]	@ (80011b0 <MX_ADC1_Init+0x104>)
 8001150:	f002 fa46 	bl	80035e0 <HAL_ADCEx_MultiModeConfigChannel>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800115a:	f000 fad7 	bl	800170c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800115e:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <MX_ADC1_Init+0x108>)
 8001160:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001162:	2306      	movs	r3, #6
 8001164:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001166:	2307      	movs	r3, #7
 8001168:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800116a:	237f      	movs	r3, #127	@ 0x7f
 800116c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800116e:	2304      	movs	r3, #4
 8001170:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	4619      	mov	r1, r3
 800117a:	480d      	ldr	r0, [pc, #52]	@ (80011b0 <MX_ADC1_Init+0x104>)
 800117c:	f001 fb8a 	bl	8002894 <HAL_ADC_ConfigChannel>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001186:	f000 fac1 	bl	800170c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800118a:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <MX_ADC1_Init+0x10c>)
 800118c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800118e:	230c      	movs	r3, #12
 8001190:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	4619      	mov	r1, r3
 8001196:	4806      	ldr	r0, [pc, #24]	@ (80011b0 <MX_ADC1_Init+0x104>)
 8001198:	f001 fb7c 	bl	8002894 <HAL_ADC_ConfigChannel>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80011a2:	f000 fab3 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	3730      	adds	r7, #48	@ 0x30
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000074 	.word	0x20000074
 80011b4:	04300002 	.word	0x04300002
 80011b8:	14f00020 	.word	0x14f00020

080011bc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80011c0:	4b21      	ldr	r3, [pc, #132]	@ (8001248 <MX_LPUART1_UART_Init+0x8c>)
 80011c2:	4a22      	ldr	r2, [pc, #136]	@ (800124c <MX_LPUART1_UART_Init+0x90>)
 80011c4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80011c6:	4b20      	ldr	r3, [pc, #128]	@ (8001248 <MX_LPUART1_UART_Init+0x8c>)
 80011c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011cc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001248 <MX_LPUART1_UART_Init+0x8c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80011d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001248 <MX_LPUART1_UART_Init+0x8c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80011da:	4b1b      	ldr	r3, [pc, #108]	@ (8001248 <MX_LPUART1_UART_Init+0x8c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80011e0:	4b19      	ldr	r3, [pc, #100]	@ (8001248 <MX_LPUART1_UART_Init+0x8c>)
 80011e2:	220c      	movs	r2, #12
 80011e4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e6:	4b18      	ldr	r3, [pc, #96]	@ (8001248 <MX_LPUART1_UART_Init+0x8c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ec:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <MX_LPUART1_UART_Init+0x8c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011f2:	4b15      	ldr	r3, [pc, #84]	@ (8001248 <MX_LPUART1_UART_Init+0x8c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011f8:	4b13      	ldr	r3, [pc, #76]	@ (8001248 <MX_LPUART1_UART_Init+0x8c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80011fe:	4812      	ldr	r0, [pc, #72]	@ (8001248 <MX_LPUART1_UART_Init+0x8c>)
 8001200:	f005 fb1a 	bl	8006838 <HAL_UART_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800120a:	f000 fa7f 	bl	800170c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800120e:	2100      	movs	r1, #0
 8001210:	480d      	ldr	r0, [pc, #52]	@ (8001248 <MX_LPUART1_UART_Init+0x8c>)
 8001212:	f007 fb72 	bl	80088fa <HAL_UARTEx_SetTxFifoThreshold>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800121c:	f000 fa76 	bl	800170c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001220:	2100      	movs	r1, #0
 8001222:	4809      	ldr	r0, [pc, #36]	@ (8001248 <MX_LPUART1_UART_Init+0x8c>)
 8001224:	f007 fba7 	bl	8008976 <HAL_UARTEx_SetRxFifoThreshold>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800122e:	f000 fa6d 	bl	800170c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001232:	4805      	ldr	r0, [pc, #20]	@ (8001248 <MX_LPUART1_UART_Init+0x8c>)
 8001234:	f007 fb28 	bl	8008888 <HAL_UARTEx_DisableFifoMode>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800123e:	f000 fa65 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200000e0 	.word	0x200000e0
 800124c:	40008000 	.word	0x40008000

08001250 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b09c      	sub	sp, #112	@ 0x70
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001256:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001264:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001270:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]
 8001280:	615a      	str	r2, [r3, #20]
 8001282:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2234      	movs	r2, #52	@ 0x34
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f007 fc00 	bl	8008a90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001290:	4b4b      	ldr	r3, [pc, #300]	@ (80013c0 <MX_TIM1_Init+0x170>)
 8001292:	4a4c      	ldr	r2, [pc, #304]	@ (80013c4 <MX_TIM1_Init+0x174>)
 8001294:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8001296:	4b4a      	ldr	r3, [pc, #296]	@ (80013c0 <MX_TIM1_Init+0x170>)
 8001298:	22a9      	movs	r2, #169	@ 0xa9
 800129a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129c:	4b48      	ldr	r3, [pc, #288]	@ (80013c0 <MX_TIM1_Init+0x170>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 32675;
 80012a2:	4b47      	ldr	r3, [pc, #284]	@ (80013c0 <MX_TIM1_Init+0x170>)
 80012a4:	f647 72a3 	movw	r2, #32675	@ 0x7fa3
 80012a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012aa:	4b45      	ldr	r3, [pc, #276]	@ (80013c0 <MX_TIM1_Init+0x170>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012b0:	4b43      	ldr	r3, [pc, #268]	@ (80013c0 <MX_TIM1_Init+0x170>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b6:	4b42      	ldr	r3, [pc, #264]	@ (80013c0 <MX_TIM1_Init+0x170>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012bc:	4840      	ldr	r0, [pc, #256]	@ (80013c0 <MX_TIM1_Init+0x170>)
 80012be:	f003 fe55 	bl	8004f6c <HAL_TIM_Base_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80012c8:	f000 fa20 	bl	800170c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012d0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012d2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80012d6:	4619      	mov	r1, r3
 80012d8:	4839      	ldr	r0, [pc, #228]	@ (80013c0 <MX_TIM1_Init+0x170>)
 80012da:	f004 fb5f 	bl	800599c <HAL_TIM_ConfigClockSource>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80012e4:	f000 fa12 	bl	800170c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012e8:	4835      	ldr	r0, [pc, #212]	@ (80013c0 <MX_TIM1_Init+0x170>)
 80012ea:	f003 ff7f 	bl	80051ec <HAL_TIM_PWM_Init>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80012f4:	f000 fa0a 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012fc:	2300      	movs	r3, #0
 80012fe:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001304:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001308:	4619      	mov	r1, r3
 800130a:	482d      	ldr	r0, [pc, #180]	@ (80013c0 <MX_TIM1_Init+0x170>)
 800130c:	f005 f924 	bl	8006558 <HAL_TIMEx_MasterConfigSynchronization>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001316:	f000 f9f9 	bl	800170c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800131a:	2360      	movs	r3, #96	@ 0x60
 800131c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001322:	2300      	movs	r3, #0
 8001324:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001326:	2300      	movs	r3, #0
 8001328:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001336:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800133a:	2200      	movs	r2, #0
 800133c:	4619      	mov	r1, r3
 800133e:	4820      	ldr	r0, [pc, #128]	@ (80013c0 <MX_TIM1_Init+0x170>)
 8001340:	f004 fa18 	bl	8005774 <HAL_TIM_PWM_ConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800134a:	f000 f9df 	bl	800170c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800134e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001352:	2204      	movs	r2, #4
 8001354:	4619      	mov	r1, r3
 8001356:	481a      	ldr	r0, [pc, #104]	@ (80013c0 <MX_TIM1_Init+0x170>)
 8001358:	f004 fa0c 	bl	8005774 <HAL_TIM_PWM_ConfigChannel>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001362:	f000 f9d3 	bl	800170c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800137a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800137e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001384:	2300      	movs	r3, #0
 8001386:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800138c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001390:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001396:	2300      	movs	r3, #0
 8001398:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	4619      	mov	r1, r3
 80013a2:	4807      	ldr	r0, [pc, #28]	@ (80013c0 <MX_TIM1_Init+0x170>)
 80013a4:	f005 f96e 	bl	8006684 <HAL_TIMEx_ConfigBreakDeadTime>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 80013ae:	f000 f9ad 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013b2:	4803      	ldr	r0, [pc, #12]	@ (80013c0 <MX_TIM1_Init+0x170>)
 80013b4:	f000 fadc 	bl	8001970 <HAL_TIM_MspPostInit>

}
 80013b8:	bf00      	nop
 80013ba:	3770      	adds	r7, #112	@ 0x70
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000174 	.word	0x20000174
 80013c4:	40012c00 	.word	0x40012c00

080013c8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ce:	f107 0310 	add.w	r3, r7, #16
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013e6:	4b1d      	ldr	r3, [pc, #116]	@ (800145c <MX_TIM5_Init+0x94>)
 80013e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001460 <MX_TIM5_Init+0x98>)
 80013ea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80013ec:	4b1b      	ldr	r3, [pc, #108]	@ (800145c <MX_TIM5_Init+0x94>)
 80013ee:	22a9      	movs	r2, #169	@ 0xa9
 80013f0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f2:	4b1a      	ldr	r3, [pc, #104]	@ (800145c <MX_TIM5_Init+0x94>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80013f8:	4b18      	ldr	r3, [pc, #96]	@ (800145c <MX_TIM5_Init+0x94>)
 80013fa:	f04f 32ff 	mov.w	r2, #4294967295
 80013fe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001400:	4b16      	ldr	r3, [pc, #88]	@ (800145c <MX_TIM5_Init+0x94>)
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001406:	4b15      	ldr	r3, [pc, #84]	@ (800145c <MX_TIM5_Init+0x94>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800140c:	4813      	ldr	r0, [pc, #76]	@ (800145c <MX_TIM5_Init+0x94>)
 800140e:	f003 fdad 	bl	8004f6c <HAL_TIM_Base_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001418:	f000 f978 	bl	800170c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800141c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001420:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001422:	f107 0310 	add.w	r3, r7, #16
 8001426:	4619      	mov	r1, r3
 8001428:	480c      	ldr	r0, [pc, #48]	@ (800145c <MX_TIM5_Init+0x94>)
 800142a:	f004 fab7 	bl	800599c <HAL_TIM_ConfigClockSource>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001434:	f000 f96a 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001438:	2300      	movs	r3, #0
 800143a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	4619      	mov	r1, r3
 8001444:	4805      	ldr	r0, [pc, #20]	@ (800145c <MX_TIM5_Init+0x94>)
 8001446:	f005 f887 	bl	8006558 <HAL_TIMEx_MasterConfigSynchronization>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001450:	f000 f95c 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	3720      	adds	r7, #32
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	200001c0 	.word	0x200001c0
 8001460:	40000c00 	.word	0x40000c00

08001464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	@ 0x28
 8001468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800147a:	4b2f      	ldr	r3, [pc, #188]	@ (8001538 <MX_GPIO_Init+0xd4>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147e:	4a2e      	ldr	r2, [pc, #184]	@ (8001538 <MX_GPIO_Init+0xd4>)
 8001480:	f043 0304 	orr.w	r3, r3, #4
 8001484:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001486:	4b2c      	ldr	r3, [pc, #176]	@ (8001538 <MX_GPIO_Init+0xd4>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001492:	4b29      	ldr	r3, [pc, #164]	@ (8001538 <MX_GPIO_Init+0xd4>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001496:	4a28      	ldr	r2, [pc, #160]	@ (8001538 <MX_GPIO_Init+0xd4>)
 8001498:	f043 0320 	orr.w	r3, r3, #32
 800149c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800149e:	4b26      	ldr	r3, [pc, #152]	@ (8001538 <MX_GPIO_Init+0xd4>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a2:	f003 0320 	and.w	r3, r3, #32
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	4b23      	ldr	r3, [pc, #140]	@ (8001538 <MX_GPIO_Init+0xd4>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ae:	4a22      	ldr	r2, [pc, #136]	@ (8001538 <MX_GPIO_Init+0xd4>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b6:	4b20      	ldr	r3, [pc, #128]	@ (8001538 <MX_GPIO_Init+0xd4>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001538 <MX_GPIO_Init+0xd4>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001538 <MX_GPIO_Init+0xd4>)
 80014c8:	f043 0302 	orr.w	r3, r3, #2
 80014cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001538 <MX_GPIO_Init+0xd4>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	2120      	movs	r1, #32
 80014de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014e2:	f002 fcd7 	bl	8003e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014ec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4619      	mov	r1, r3
 80014fc:	480f      	ldr	r0, [pc, #60]	@ (800153c <MX_GPIO_Init+0xd8>)
 80014fe:	f002 fb47 	bl	8003b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001502:	2320      	movs	r3, #32
 8001504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001506:	2301      	movs	r3, #1
 8001508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2300      	movs	r3, #0
 8001510:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001512:	f107 0314 	add.w	r3, r7, #20
 8001516:	4619      	mov	r1, r3
 8001518:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800151c:	f002 fb38 	bl	8003b90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001520:	2200      	movs	r2, #0
 8001522:	2100      	movs	r1, #0
 8001524:	2028      	movs	r0, #40	@ 0x28
 8001526:	f002 fa3e 	bl	80039a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800152a:	2028      	movs	r0, #40	@ 0x28
 800152c:	f002 fa55 	bl	80039da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001530:	bf00      	nop
 8001532:	3728      	adds	r7, #40	@ 0x28
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40021000 	.word	0x40021000
 800153c:	48000800 	.word	0x48000800

08001540 <ADC_Read_blocking>:

/* USER CODE BEGIN 4 */
void ADC_Read_blocking()
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
static uint32_t TimeStamp = 0;
if( HAL_GetTick()<TimeStamp) return;
 8001546:	f000 fb37 	bl	8001bb8 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	4b1d      	ldr	r3, [pc, #116]	@ (80015c4 <ADC_Read_blocking+0x84>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d333      	bcc.n	80015bc <ADC_Read_blocking+0x7c>
TimeStamp = HAL_GetTick()+1;
 8001554:	f000 fb30 	bl	8001bb8 <HAL_GetTick>
 8001558:	4603      	mov	r3, r0
 800155a:	3301      	adds	r3, #1
 800155c:	4a19      	ldr	r2, [pc, #100]	@ (80015c4 <ADC_Read_blocking+0x84>)
 800155e:	6013      	str	r3, [r2, #0]
for(int i=0;i<2;i++)
 8001560:	2300      	movs	r3, #0
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	e026      	b.n	80015b4 <ADC_Read_blocking+0x74>
{
HAL_ADC_ConfigChannel(&hadc1, &ADC1_Channel[i].Config);
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	4613      	mov	r3, r2
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	4413      	add	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4a15      	ldr	r2, [pc, #84]	@ (80015c8 <ADC_Read_blocking+0x88>)
 8001572:	4413      	add	r3, r2
 8001574:	4619      	mov	r1, r3
 8001576:	4815      	ldr	r0, [pc, #84]	@ (80015cc <ADC_Read_blocking+0x8c>)
 8001578:	f001 f98c 	bl	8002894 <HAL_ADC_ConfigChannel>
HAL_ADC_Start(&hadc1);
 800157c:	4813      	ldr	r0, [pc, #76]	@ (80015cc <ADC_Read_blocking+0x8c>)
 800157e:	f000 ff5d 	bl	800243c <HAL_ADC_Start>
HAL_ADC_PollForConversion(&hadc1, 100);
 8001582:	2164      	movs	r1, #100	@ 0x64
 8001584:	4811      	ldr	r0, [pc, #68]	@ (80015cc <ADC_Read_blocking+0x8c>)
 8001586:	f001 f871 	bl	800266c <HAL_ADC_PollForConversion>
ADC1_Channel[i].data = HAL_ADC_GetValue(&hadc1);
 800158a:	4810      	ldr	r0, [pc, #64]	@ (80015cc <ADC_Read_blocking+0x8c>)
 800158c:	f001 f974 	bl	8002878 <HAL_ADC_GetValue>
 8001590:	4603      	mov	r3, r0
 8001592:	b298      	uxth	r0, r3
 8001594:	490c      	ldr	r1, [pc, #48]	@ (80015c8 <ADC_Read_blocking+0x88>)
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	4613      	mov	r3, r2
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	4413      	add	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	3320      	adds	r3, #32
 80015a4:	4602      	mov	r2, r0
 80015a6:	801a      	strh	r2, [r3, #0]
HAL_ADC_Stop(&hadc1);
 80015a8:	4808      	ldr	r0, [pc, #32]	@ (80015cc <ADC_Read_blocking+0x8c>)
 80015aa:	f001 f82b 	bl	8002604 <HAL_ADC_Stop>
for(int i=0;i<2;i++)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3301      	adds	r3, #1
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	ddd5      	ble.n	8001566 <ADC_Read_blocking+0x26>
 80015ba:	e000      	b.n	80015be <ADC_Read_blocking+0x7e>
if( HAL_GetTick()<TimeStamp) return;
 80015bc:	bf00      	nop
}
}
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000258 	.word	0x20000258
 80015c8:	20000000 	.word	0x20000000
 80015cc:	20000074 	.word	0x20000074

080015d0 <avg>:

void avg()
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0

         setposition =((poten2/20.0)/4095.0)*360.0;
 80015d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001640 <avg+0x70>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ff6f 	bl	80004bc <__aeabi_i2d>
 80015de:	f04f 0200 	mov.w	r2, #0
 80015e2:	4b18      	ldr	r3, [pc, #96]	@ (8001644 <avg+0x74>)
 80015e4:	f7ff f8fe 	bl	80007e4 <__aeabi_ddiv>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	a311      	add	r3, pc, #68	@ (adr r3, 8001638 <avg+0x68>)
 80015f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f6:	f7ff f8f5 	bl	80007e4 <__aeabi_ddiv>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4610      	mov	r0, r2
 8001600:	4619      	mov	r1, r3
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <avg+0x78>)
 8001608:	f7fe ffc2 	bl	8000590 <__aeabi_dmul>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4610      	mov	r0, r2
 8001612:	4619      	mov	r1, r3
 8001614:	f7ff f9f6 	bl	8000a04 <__aeabi_d2f>
 8001618:	4603      	mov	r3, r0
 800161a:	4a0c      	ldr	r2, [pc, #48]	@ (800164c <avg+0x7c>)
 800161c:	6013      	str	r3, [r2, #0]
         position= ADC1_Channel[0].data;
 800161e:	4b0c      	ldr	r3, [pc, #48]	@ (8001650 <avg+0x80>)
 8001620:	8c1b      	ldrh	r3, [r3, #32]
 8001622:	ee07 3a90 	vmov	s15, r3
 8001626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800162a:	4b0a      	ldr	r3, [pc, #40]	@ (8001654 <avg+0x84>)
 800162c:	edc3 7a00 	vstr	s15, [r3]

}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	f3af 8000 	nop.w
 8001638:	00000000 	.word	0x00000000
 800163c:	40affe00 	.word	0x40affe00
 8001640:	2000023c 	.word	0x2000023c
 8001644:	40340000 	.word	0x40340000
 8001648:	40768000 	.word	0x40768000
 800164c:	20000238 	.word	0x20000238
 8001650:	20000000 	.word	0x20000000
 8001654:	20000240 	.word	0x20000240

08001658 <UARTInterruptConfig>:
void UARTInterruptConfig()
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&hlpuart1, Recieve_PWM, 4);
 800165c:	2204      	movs	r2, #4
 800165e:	4903      	ldr	r1, [pc, #12]	@ (800166c <UARTInterruptConfig+0x14>)
 8001660:	4803      	ldr	r0, [pc, #12]	@ (8001670 <UARTInterruptConfig+0x18>)
 8001662:	f005 f9c7 	bl	80069f4 <HAL_UART_Receive_IT>
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000220 	.word	0x20000220
 8001670:	200000e0 	.word	0x200000e0

08001674 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	if(huart == &hlpuart1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a07      	ldr	r2, [pc, #28]	@ (800169c <HAL_UART_RxCpltCallback+0x28>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d107      	bne.n	8001694 <HAL_UART_RxCpltCallback+0x20>
	{
		Recieve_PWM[4] = '\0';
 8001684:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <HAL_UART_RxCpltCallback+0x2c>)
 8001686:	2200      	movs	r2, #0
 8001688:	711a      	strb	r2, [r3, #4]
		HAL_UART_Receive_IT(&hlpuart1, Recieve_PWM, 4);
 800168a:	2204      	movs	r2, #4
 800168c:	4904      	ldr	r1, [pc, #16]	@ (80016a0 <HAL_UART_RxCpltCallback+0x2c>)
 800168e:	4803      	ldr	r0, [pc, #12]	@ (800169c <HAL_UART_RxCpltCallback+0x28>)
 8001690:	f005 f9b0 	bl	80069f4 <HAL_UART_Receive_IT>
	}
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200000e0 	.word	0x200000e0
 80016a0:	20000220 	.word	0x20000220

080016a4 <HAL_TIM_PeriodElapsedCallback>:
//MicroSecondTimer Implement
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016a4:	b4b0      	push	{r4, r5, r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a08      	ldr	r2, [pc, #32]	@ (80016d0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d108      	bne.n	80016c6 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		_micros += UINT32_MAX;
 80016b4:	4b07      	ldr	r3, [pc, #28]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80016b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ba:	1e54      	subs	r4, r2, #1
 80016bc:	f143 0500 	adc.w	r5, r3, #0
 80016c0:	4b04      	ldr	r3, [pc, #16]	@ (80016d4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80016c2:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bcb0      	pop	{r4, r5, r7}
 80016ce:	4770      	bx	lr
 80016d0:	200001c0 	.word	0x200001c0
 80016d4:	20000230 	.word	0x20000230

080016d8 <micros>:
uint64_t micros()
{
 80016d8:	b4b0      	push	{r4, r5, r7}
 80016da:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 80016dc:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <micros+0x2c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e2:	2200      	movs	r2, #0
 80016e4:	4618      	mov	r0, r3
 80016e6:	4611      	mov	r1, r2
 80016e8:	4b07      	ldr	r3, [pc, #28]	@ (8001708 <micros+0x30>)
 80016ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ee:	1884      	adds	r4, r0, r2
 80016f0:	eb41 0503 	adc.w	r5, r1, r3
 80016f4:	4622      	mov	r2, r4
 80016f6:	462b      	mov	r3, r5
}
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bcb0      	pop	{r4, r5, r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	200001c0 	.word	0x200001c0
 8001708:	20000230 	.word	0x20000230

0800170c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001710:	b672      	cpsid	i
}
 8001712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <Error_Handler+0x8>

08001718 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171e:	4b0f      	ldr	r3, [pc, #60]	@ (800175c <HAL_MspInit+0x44>)
 8001720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001722:	4a0e      	ldr	r2, [pc, #56]	@ (800175c <HAL_MspInit+0x44>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6613      	str	r3, [r2, #96]	@ 0x60
 800172a:	4b0c      	ldr	r3, [pc, #48]	@ (800175c <HAL_MspInit+0x44>)
 800172c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	4b09      	ldr	r3, [pc, #36]	@ (800175c <HAL_MspInit+0x44>)
 8001738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800173a:	4a08      	ldr	r2, [pc, #32]	@ (800175c <HAL_MspInit+0x44>)
 800173c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001740:	6593      	str	r3, [r2, #88]	@ 0x58
 8001742:	4b06      	ldr	r3, [pc, #24]	@ (800175c <HAL_MspInit+0x44>)
 8001744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800174e:	f002 fc81 	bl	8004054 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40021000 	.word	0x40021000

08001760 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b0a0      	sub	sp, #128	@ 0x80
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001778:	f107 0318 	add.w	r3, r7, #24
 800177c:	2254      	movs	r2, #84	@ 0x54
 800177e:	2100      	movs	r1, #0
 8001780:	4618      	mov	r0, r3
 8001782:	f007 f985 	bl	8008a90 <memset>
  if(hadc->Instance==ADC1)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800178e:	d14d      	bne.n	800182c <HAL_ADC_MspInit+0xcc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001790:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001794:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001796:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800179a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800179c:	f107 0318 	add.w	r3, r7, #24
 80017a0:	4618      	mov	r0, r3
 80017a2:	f003 f995 	bl	8004ad0 <HAL_RCCEx_PeriphCLKConfig>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80017ac:	f7ff ffae 	bl	800170c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80017b0:	4b20      	ldr	r3, [pc, #128]	@ (8001834 <HAL_ADC_MspInit+0xd4>)
 80017b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b4:	4a1f      	ldr	r2, [pc, #124]	@ (8001834 <HAL_ADC_MspInit+0xd4>)
 80017b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001834 <HAL_ADC_MspInit+0xd4>)
 80017be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001834 <HAL_ADC_MspInit+0xd4>)
 80017ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017cc:	4a19      	ldr	r2, [pc, #100]	@ (8001834 <HAL_ADC_MspInit+0xd4>)
 80017ce:	f043 0301 	orr.w	r3, r3, #1
 80017d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017d4:	4b17      	ldr	r3, [pc, #92]	@ (8001834 <HAL_ADC_MspInit+0xd4>)
 80017d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e0:	4b14      	ldr	r3, [pc, #80]	@ (8001834 <HAL_ADC_MspInit+0xd4>)
 80017e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e4:	4a13      	ldr	r2, [pc, #76]	@ (8001834 <HAL_ADC_MspInit+0xd4>)
 80017e6:	f043 0302 	orr.w	r3, r3, #2
 80017ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ec:	4b11      	ldr	r3, [pc, #68]	@ (8001834 <HAL_ADC_MspInit+0xd4>)
 80017ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017f8:	2301      	movs	r3, #1
 80017fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017fc:	2303      	movs	r3, #3
 80017fe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001808:	4619      	mov	r1, r3
 800180a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800180e:	f002 f9bf 	bl	8003b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001812:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001816:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001818:	2303      	movs	r3, #3
 800181a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001820:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001824:	4619      	mov	r1, r3
 8001826:	4804      	ldr	r0, [pc, #16]	@ (8001838 <HAL_ADC_MspInit+0xd8>)
 8001828:	f002 f9b2 	bl	8003b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800182c:	bf00      	nop
 800182e:	3780      	adds	r7, #128	@ 0x80
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40021000 	.word	0x40021000
 8001838:	48000400 	.word	0x48000400

0800183c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b09e      	sub	sp, #120	@ 0x78
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001854:	f107 0310 	add.w	r3, r7, #16
 8001858:	2254      	movs	r2, #84	@ 0x54
 800185a:	2100      	movs	r1, #0
 800185c:	4618      	mov	r0, r3
 800185e:	f007 f917 	bl	8008a90 <memset>
  if(huart->Instance==LPUART1)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a23      	ldr	r2, [pc, #140]	@ (80018f4 <HAL_UART_MspInit+0xb8>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d13e      	bne.n	80018ea <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800186c:	2320      	movs	r3, #32
 800186e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001870:	2300      	movs	r3, #0
 8001872:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001874:	f107 0310 	add.w	r3, r7, #16
 8001878:	4618      	mov	r0, r3
 800187a:	f003 f929 	bl	8004ad0 <HAL_RCCEx_PeriphCLKConfig>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001884:	f7ff ff42 	bl	800170c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001888:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <HAL_UART_MspInit+0xbc>)
 800188a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800188c:	4a1a      	ldr	r2, [pc, #104]	@ (80018f8 <HAL_UART_MspInit+0xbc>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001894:	4b18      	ldr	r3, [pc, #96]	@ (80018f8 <HAL_UART_MspInit+0xbc>)
 8001896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a0:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <HAL_UART_MspInit+0xbc>)
 80018a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a4:	4a14      	ldr	r2, [pc, #80]	@ (80018f8 <HAL_UART_MspInit+0xbc>)
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ac:	4b12      	ldr	r3, [pc, #72]	@ (80018f8 <HAL_UART_MspInit+0xbc>)
 80018ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80018b8:	230c      	movs	r3, #12
 80018ba:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2302      	movs	r3, #2
 80018be:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	2300      	movs	r3, #0
 80018c6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80018c8:	230c      	movs	r3, #12
 80018ca:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018cc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018d0:	4619      	mov	r1, r3
 80018d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018d6:	f002 f95b 	bl	8003b90 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	205b      	movs	r0, #91	@ 0x5b
 80018e0:	f002 f861 	bl	80039a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80018e4:	205b      	movs	r0, #91	@ 0x5b
 80018e6:	f002 f878 	bl	80039da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80018ea:	bf00      	nop
 80018ec:	3778      	adds	r7, #120	@ 0x78
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40008000 	.word	0x40008000
 80018f8:	40021000 	.word	0x40021000

080018fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a16      	ldr	r2, [pc, #88]	@ (8001964 <HAL_TIM_Base_MspInit+0x68>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d10c      	bne.n	8001928 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800190e:	4b16      	ldr	r3, [pc, #88]	@ (8001968 <HAL_TIM_Base_MspInit+0x6c>)
 8001910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001912:	4a15      	ldr	r2, [pc, #84]	@ (8001968 <HAL_TIM_Base_MspInit+0x6c>)
 8001914:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001918:	6613      	str	r3, [r2, #96]	@ 0x60
 800191a:	4b13      	ldr	r3, [pc, #76]	@ (8001968 <HAL_TIM_Base_MspInit+0x6c>)
 800191c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800191e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001926:	e018      	b.n	800195a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM5)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0f      	ldr	r2, [pc, #60]	@ (800196c <HAL_TIM_Base_MspInit+0x70>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d113      	bne.n	800195a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001932:	4b0d      	ldr	r3, [pc, #52]	@ (8001968 <HAL_TIM_Base_MspInit+0x6c>)
 8001934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001936:	4a0c      	ldr	r2, [pc, #48]	@ (8001968 <HAL_TIM_Base_MspInit+0x6c>)
 8001938:	f043 0308 	orr.w	r3, r3, #8
 800193c:	6593      	str	r3, [r2, #88]	@ 0x58
 800193e:	4b0a      	ldr	r3, [pc, #40]	@ (8001968 <HAL_TIM_Base_MspInit+0x6c>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	2100      	movs	r1, #0
 800194e:	2032      	movs	r0, #50	@ 0x32
 8001950:	f002 f829 	bl	80039a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001954:	2032      	movs	r0, #50	@ 0x32
 8001956:	f002 f840 	bl	80039da <HAL_NVIC_EnableIRQ>
}
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40012c00 	.word	0x40012c00
 8001968:	40021000 	.word	0x40021000
 800196c:	40000c00 	.word	0x40000c00

08001970 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 030c 	add.w	r3, r7, #12
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a11      	ldr	r2, [pc, #68]	@ (80019d4 <HAL_TIM_MspPostInit+0x64>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d11b      	bne.n	80019ca <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001992:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <HAL_TIM_MspPostInit+0x68>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001996:	4a10      	ldr	r2, [pc, #64]	@ (80019d8 <HAL_TIM_MspPostInit+0x68>)
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800199e:	4b0e      	ldr	r3, [pc, #56]	@ (80019d8 <HAL_TIM_MspPostInit+0x68>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019aa:	2303      	movs	r3, #3
 80019ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80019ba:	2302      	movs	r3, #2
 80019bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019be:	f107 030c 	add.w	r3, r7, #12
 80019c2:	4619      	mov	r1, r3
 80019c4:	4805      	ldr	r0, [pc, #20]	@ (80019dc <HAL_TIM_MspPostInit+0x6c>)
 80019c6:	f002 f8e3 	bl	8003b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80019ca:	bf00      	nop
 80019cc:	3720      	adds	r7, #32
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40012c00 	.word	0x40012c00
 80019d8:	40021000 	.word	0x40021000
 80019dc:	48000800 	.word	0x48000800

080019e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <NMI_Handler+0x4>

080019e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <HardFault_Handler+0x4>

080019f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <MemManage_Handler+0x4>

080019f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fc:	bf00      	nop
 80019fe:	e7fd      	b.n	80019fc <BusFault_Handler+0x4>

08001a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a04:	bf00      	nop
 8001a06:	e7fd      	b.n	8001a04 <UsageFault_Handler+0x4>

08001a08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a36:	f000 f8ad 	bl	8001b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001a42:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001a46:	f002 fa3d 	bl	8003ec4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001a54:	4802      	ldr	r0, [pc, #8]	@ (8001a60 <TIM5_IRQHandler+0x10>)
 8001a56:	f003 fd3d 	bl	80054d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200001c0 	.word	0x200001c0

08001a64 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001a68:	4802      	ldr	r0, [pc, #8]	@ (8001a74 <LPUART1_IRQHandler+0x10>)
 8001a6a:	f005 f80f 	bl	8006a8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200000e0 	.word	0x200000e0

08001a78 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a7c:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <SystemInit+0x20>)
 8001a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a82:	4a05      	ldr	r2, [pc, #20]	@ (8001a98 <SystemInit+0x20>)
 8001a84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a9c:	480d      	ldr	r0, [pc, #52]	@ (8001ad4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a9e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001aa0:	f7ff ffea 	bl	8001a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa4:	480c      	ldr	r0, [pc, #48]	@ (8001ad8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001aa6:	490d      	ldr	r1, [pc, #52]	@ (8001adc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae0 <LoopForever+0xe>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001aac:	e002      	b.n	8001ab4 <LoopCopyDataInit>

08001aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab2:	3304      	adds	r3, #4

08001ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab8:	d3f9      	bcc.n	8001aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001abc:	4c0a      	ldr	r4, [pc, #40]	@ (8001ae8 <LoopForever+0x16>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac0:	e001      	b.n	8001ac6 <LoopFillZerobss>

08001ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac4:	3204      	adds	r2, #4

08001ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac8:	d3fb      	bcc.n	8001ac2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aca:	f006 ffe9 	bl	8008aa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ace:	f7ff f963 	bl	8000d98 <main>

08001ad2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ad2:	e7fe      	b.n	8001ad2 <LoopForever>
  ldr   r0, =_estack
 8001ad4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001adc:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001ae0:	08008b50 	.word	0x08008b50
  ldr r2, =_sbss
 8001ae4:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001ae8:	20000260 	.word	0x20000260

08001aec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001aec:	e7fe      	b.n	8001aec <ADC1_2_IRQHandler>

08001aee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001af8:	2003      	movs	r0, #3
 8001afa:	f001 ff49 	bl	8003990 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001afe:	2000      	movs	r0, #0
 8001b00:	f000 f80e 	bl	8001b20 <HAL_InitTick>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	71fb      	strb	r3, [r7, #7]
 8001b0e:	e001      	b.n	8001b14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b10:	f7ff fe02 	bl	8001718 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b14:	79fb      	ldrb	r3, [r7, #7]

}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b2c:	4b16      	ldr	r3, [pc, #88]	@ (8001b88 <HAL_InitTick+0x68>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d022      	beq.n	8001b7a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b34:	4b15      	ldr	r3, [pc, #84]	@ (8001b8c <HAL_InitTick+0x6c>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b13      	ldr	r3, [pc, #76]	@ (8001b88 <HAL_InitTick+0x68>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b40:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f001 ff54 	bl	80039f6 <HAL_SYSTICK_Config>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10f      	bne.n	8001b74 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b0f      	cmp	r3, #15
 8001b58:	d809      	bhi.n	8001b6e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8001b62:	f001 ff20 	bl	80039a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b66:	4a0a      	ldr	r2, [pc, #40]	@ (8001b90 <HAL_InitTick+0x70>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	e007      	b.n	8001b7e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	73fb      	strb	r3, [r7, #15]
 8001b72:	e004      	b.n	8001b7e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	e001      	b.n	8001b7e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000050 	.word	0x20000050
 8001b8c:	20000048 	.word	0x20000048
 8001b90:	2000004c 	.word	0x2000004c

08001b94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b98:	4b05      	ldr	r3, [pc, #20]	@ (8001bb0 <HAL_IncTick+0x1c>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4b05      	ldr	r3, [pc, #20]	@ (8001bb4 <HAL_IncTick+0x20>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4a03      	ldr	r2, [pc, #12]	@ (8001bb0 <HAL_IncTick+0x1c>)
 8001ba4:	6013      	str	r3, [r2, #0]
}
 8001ba6:	bf00      	nop
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	2000025c 	.word	0x2000025c
 8001bb4:	20000050 	.word	0x20000050

08001bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return uwTick;
 8001bbc:	4b03      	ldr	r3, [pc, #12]	@ (8001bcc <HAL_GetTick+0x14>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	2000025c 	.word	0x2000025c

08001bd0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	431a      	orrs	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	609a      	str	r2, [r3, #8]
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	3360      	adds	r3, #96	@ 0x60
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b08      	ldr	r3, [pc, #32]	@ (8001c7c <LL_ADC_SetOffset+0x44>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	4313      	orrs	r3, r2
 8001c68:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c70:	bf00      	nop
 8001c72:	371c      	adds	r7, #28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	03fff000 	.word	0x03fff000

08001c80 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	3360      	adds	r3, #96	@ 0x60
 8001c8e:	461a      	mov	r2, r3
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	3360      	adds	r3, #96	@ 0x60
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001cd6:	bf00      	nop
 8001cd8:	371c      	adds	r7, #28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b087      	sub	sp, #28
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3360      	adds	r3, #96	@ 0x60
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	431a      	orrs	r2, r3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001d0c:	bf00      	nop
 8001d0e:	371c      	adds	r7, #28
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b087      	sub	sp, #28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	3360      	adds	r3, #96	@ 0x60
 8001d28:	461a      	mov	r2, r3
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001d42:	bf00      	nop
 8001d44:	371c      	adds	r7, #28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	615a      	str	r2, [r3, #20]
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b087      	sub	sp, #28
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	3330      	adds	r3, #48	@ 0x30
 8001daa:	461a      	mov	r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	4413      	add	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	f003 031f 	and.w	r3, r3, #31
 8001dc4:	211f      	movs	r1, #31
 8001dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	401a      	ands	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	0e9b      	lsrs	r3, r3, #26
 8001dd2:	f003 011f 	and.w	r1, r3, #31
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	f003 031f 	and.w	r3, r3, #31
 8001ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8001de0:	431a      	orrs	r2, r3
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001de6:	bf00      	nop
 8001de8:	371c      	adds	r7, #28
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b087      	sub	sp, #28
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	60f8      	str	r0, [r7, #12]
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	3314      	adds	r3, #20
 8001e02:	461a      	mov	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	0e5b      	lsrs	r3, r3, #25
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	4413      	add	r3, r2
 8001e10:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	0d1b      	lsrs	r3, r3, #20
 8001e1a:	f003 031f 	and.w	r3, r3, #31
 8001e1e:	2107      	movs	r1, #7
 8001e20:	fa01 f303 	lsl.w	r3, r1, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	401a      	ands	r2, r3
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	0d1b      	lsrs	r3, r3, #20
 8001e2c:	f003 031f 	and.w	r3, r3, #31
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	431a      	orrs	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e3c:	bf00      	nop
 8001e3e:	371c      	adds	r7, #28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e60:	43db      	mvns	r3, r3
 8001e62:	401a      	ands	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f003 0318 	and.w	r3, r3, #24
 8001e6a:	4908      	ldr	r1, [pc, #32]	@ (8001e8c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e6c:	40d9      	lsrs	r1, r3
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	400b      	ands	r3, r1
 8001e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e76:	431a      	orrs	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e7e:	bf00      	nop
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	0007ffff 	.word	0x0007ffff

08001e90 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 031f 	and.w	r3, r3, #31
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001ed8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6093      	str	r3, [r2, #8]
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001efc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f00:	d101      	bne.n	8001f06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001f24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f28:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f50:	d101      	bne.n	8001f56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f78:	f043 0201 	orr.w	r2, r3, #1
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fa0:	f043 0202 	orr.w	r2, r3, #2
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <LL_ADC_IsEnabled+0x18>
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e000      	b.n	8001fce <LL_ADC_IsEnabled+0x1a>
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d101      	bne.n	8001ff2 <LL_ADC_IsDisableOngoing+0x18>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <LL_ADC_IsDisableOngoing+0x1a>
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002010:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002014:	f043 0204 	orr.w	r2, r3, #4
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002038:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800203c:	f043 0210 	orr.w	r2, r3, #16
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b04      	cmp	r3, #4
 8002062:	d101      	bne.n	8002068 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002064:	2301      	movs	r3, #1
 8002066:	e000      	b.n	800206a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002086:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800208a:	f043 0220 	orr.w	r2, r3, #32
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d101      	bne.n	80020b6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020b2:	2301      	movs	r3, #1
 80020b4:	e000      	b.n	80020b8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b089      	sub	sp, #36	@ 0x24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020cc:	2300      	movs	r3, #0
 80020ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e1a9      	b.n	8002432 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d109      	bne.n	8002100 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff fb37 	bl	8001760 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fef1 	bl	8001eec <LL_ADC_IsDeepPowerDownEnabled>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d004      	beq.n	800211a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff fed7 	bl	8001ec8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff ff0c 	bl	8001f3c <LL_ADC_IsInternalRegulatorEnabled>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d115      	bne.n	8002156 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff fef0 	bl	8001f14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002134:	4b9c      	ldr	r3, [pc, #624]	@ (80023a8 <HAL_ADC_Init+0x2e4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	099b      	lsrs	r3, r3, #6
 800213a:	4a9c      	ldr	r2, [pc, #624]	@ (80023ac <HAL_ADC_Init+0x2e8>)
 800213c:	fba2 2303 	umull	r2, r3, r2, r3
 8002140:	099b      	lsrs	r3, r3, #6
 8002142:	3301      	adds	r3, #1
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002148:	e002      	b.n	8002150 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	3b01      	subs	r3, #1
 800214e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f9      	bne.n	800214a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff feee 	bl	8001f3c <LL_ADC_IsInternalRegulatorEnabled>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10d      	bne.n	8002182 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800216a:	f043 0210 	orr.w	r2, r3, #16
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002176:	f043 0201 	orr.w	r2, r3, #1
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff ff62 	bl	8002050 <LL_ADC_REG_IsConversionOngoing>
 800218c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	2b00      	cmp	r3, #0
 8002198:	f040 8142 	bne.w	8002420 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f040 813e 	bne.w	8002420 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80021ac:	f043 0202 	orr.w	r2, r3, #2
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff fefb 	bl	8001fb4 <LL_ADC_IsEnabled>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d141      	bne.n	8002248 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021cc:	d004      	beq.n	80021d8 <HAL_ADC_Init+0x114>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a77      	ldr	r2, [pc, #476]	@ (80023b0 <HAL_ADC_Init+0x2ec>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d10f      	bne.n	80021f8 <HAL_ADC_Init+0x134>
 80021d8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80021dc:	f7ff feea 	bl	8001fb4 <LL_ADC_IsEnabled>
 80021e0:	4604      	mov	r4, r0
 80021e2:	4873      	ldr	r0, [pc, #460]	@ (80023b0 <HAL_ADC_Init+0x2ec>)
 80021e4:	f7ff fee6 	bl	8001fb4 <LL_ADC_IsEnabled>
 80021e8:	4603      	mov	r3, r0
 80021ea:	4323      	orrs	r3, r4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf0c      	ite	eq
 80021f0:	2301      	moveq	r3, #1
 80021f2:	2300      	movne	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	e012      	b.n	800221e <HAL_ADC_Init+0x15a>
 80021f8:	486e      	ldr	r0, [pc, #440]	@ (80023b4 <HAL_ADC_Init+0x2f0>)
 80021fa:	f7ff fedb 	bl	8001fb4 <LL_ADC_IsEnabled>
 80021fe:	4604      	mov	r4, r0
 8002200:	486d      	ldr	r0, [pc, #436]	@ (80023b8 <HAL_ADC_Init+0x2f4>)
 8002202:	f7ff fed7 	bl	8001fb4 <LL_ADC_IsEnabled>
 8002206:	4603      	mov	r3, r0
 8002208:	431c      	orrs	r4, r3
 800220a:	486c      	ldr	r0, [pc, #432]	@ (80023bc <HAL_ADC_Init+0x2f8>)
 800220c:	f7ff fed2 	bl	8001fb4 <LL_ADC_IsEnabled>
 8002210:	4603      	mov	r3, r0
 8002212:	4323      	orrs	r3, r4
 8002214:	2b00      	cmp	r3, #0
 8002216:	bf0c      	ite	eq
 8002218:	2301      	moveq	r3, #1
 800221a:	2300      	movne	r3, #0
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d012      	beq.n	8002248 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800222a:	d004      	beq.n	8002236 <HAL_ADC_Init+0x172>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a5f      	ldr	r2, [pc, #380]	@ (80023b0 <HAL_ADC_Init+0x2ec>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d101      	bne.n	800223a <HAL_ADC_Init+0x176>
 8002236:	4a62      	ldr	r2, [pc, #392]	@ (80023c0 <HAL_ADC_Init+0x2fc>)
 8002238:	e000      	b.n	800223c <HAL_ADC_Init+0x178>
 800223a:	4a62      	ldr	r2, [pc, #392]	@ (80023c4 <HAL_ADC_Init+0x300>)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4619      	mov	r1, r3
 8002242:	4610      	mov	r0, r2
 8002244:	f7ff fcc4 	bl	8001bd0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	7f5b      	ldrb	r3, [r3, #29]
 800224c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002252:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002258:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800225e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002266:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002272:	2b01      	cmp	r3, #1
 8002274:	d106      	bne.n	8002284 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227a:	3b01      	subs	r3, #1
 800227c:	045b      	lsls	r3, r3, #17
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002288:	2b00      	cmp	r3, #0
 800228a:	d009      	beq.n	80022a0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002290:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002298:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	4b48      	ldr	r3, [pc, #288]	@ (80023c8 <HAL_ADC_Init+0x304>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	69b9      	ldr	r1, [r7, #24]
 80022b0:	430b      	orrs	r3, r1
 80022b2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff fee5 	bl	800209e <LL_ADC_INJ_IsConversionOngoing>
 80022d4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d17f      	bne.n	80023dc <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d17c      	bne.n	80023dc <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022e6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80022ee:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022fe:	f023 0302 	bic.w	r3, r3, #2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	69b9      	ldr	r1, [r7, #24]
 8002308:	430b      	orrs	r3, r1
 800230a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d017      	beq.n	8002344 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002322:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800232c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002330:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6911      	ldr	r1, [r2, #16]
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	430b      	orrs	r3, r1
 800233e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002342:	e013      	b.n	800236c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691a      	ldr	r2, [r3, #16]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002352:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002364:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002368:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002372:	2b01      	cmp	r3, #1
 8002374:	d12a      	bne.n	80023cc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002380:	f023 0304 	bic.w	r3, r3, #4
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800238c:	4311      	orrs	r1, r2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002392:	4311      	orrs	r1, r2
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002398:	430a      	orrs	r2, r1
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0201 	orr.w	r2, r2, #1
 80023a4:	611a      	str	r2, [r3, #16]
 80023a6:	e019      	b.n	80023dc <HAL_ADC_Init+0x318>
 80023a8:	20000048 	.word	0x20000048
 80023ac:	053e2d63 	.word	0x053e2d63
 80023b0:	50000100 	.word	0x50000100
 80023b4:	50000400 	.word	0x50000400
 80023b8:	50000500 	.word	0x50000500
 80023bc:	50000600 	.word	0x50000600
 80023c0:	50000300 	.word	0x50000300
 80023c4:	50000700 	.word	0x50000700
 80023c8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691a      	ldr	r2, [r3, #16]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0201 	bic.w	r2, r2, #1
 80023da:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d10c      	bne.n	80023fe <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ea:	f023 010f 	bic.w	r1, r3, #15
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	1e5a      	subs	r2, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80023fc:	e007      	b.n	800240e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 020f 	bic.w	r2, r2, #15
 800240c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002412:	f023 0303 	bic.w	r3, r3, #3
 8002416:	f043 0201 	orr.w	r2, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800241e:	e007      	b.n	8002430 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002424:	f043 0210 	orr.w	r2, r3, #16
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002430:	7ffb      	ldrb	r3, [r7, #31]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3724      	adds	r7, #36	@ 0x24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd90      	pop	{r4, r7, pc}
 800243a:	bf00      	nop

0800243c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800244c:	d004      	beq.n	8002458 <HAL_ADC_Start+0x1c>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a67      	ldr	r2, [pc, #412]	@ (80025f0 <HAL_ADC_Start+0x1b4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d101      	bne.n	800245c <HAL_ADC_Start+0x20>
 8002458:	4b66      	ldr	r3, [pc, #408]	@ (80025f4 <HAL_ADC_Start+0x1b8>)
 800245a:	e000      	b.n	800245e <HAL_ADC_Start+0x22>
 800245c:	4b66      	ldr	r3, [pc, #408]	@ (80025f8 <HAL_ADC_Start+0x1bc>)
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fd16 	bl	8001e90 <LL_ADC_GetMultimode>
 8002464:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fdf0 	bl	8002050 <LL_ADC_REG_IsConversionOngoing>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	f040 80b4 	bne.w	80025e0 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_ADC_Start+0x4a>
 8002482:	2302      	movs	r3, #2
 8002484:	e0af      	b.n	80025e6 <HAL_ADC_Start+0x1aa>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fefc 	bl	800328c <ADC_Enable>
 8002494:	4603      	mov	r3, r0
 8002496:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002498:	7dfb      	ldrb	r3, [r7, #23]
 800249a:	2b00      	cmp	r3, #0
 800249c:	f040 809b 	bne.w	80025d6 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80024a8:	f023 0301 	bic.w	r3, r3, #1
 80024ac:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a4d      	ldr	r2, [pc, #308]	@ (80025f0 <HAL_ADC_Start+0x1b4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d009      	beq.n	80024d2 <HAL_ADC_Start+0x96>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a4e      	ldr	r2, [pc, #312]	@ (80025fc <HAL_ADC_Start+0x1c0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d002      	beq.n	80024ce <HAL_ADC_Start+0x92>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	e003      	b.n	80024d6 <HAL_ADC_Start+0x9a>
 80024ce:	4b4c      	ldr	r3, [pc, #304]	@ (8002600 <HAL_ADC_Start+0x1c4>)
 80024d0:	e001      	b.n	80024d6 <HAL_ADC_Start+0x9a>
 80024d2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	4293      	cmp	r3, r2
 80024dc:	d002      	beq.n	80024e4 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d105      	bne.n	80024f0 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024fc:	d106      	bne.n	800250c <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002502:	f023 0206 	bic.w	r2, r3, #6
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	661a      	str	r2, [r3, #96]	@ 0x60
 800250a:	e002      	b.n	8002512 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	221c      	movs	r2, #28
 8002518:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a32      	ldr	r2, [pc, #200]	@ (80025f0 <HAL_ADC_Start+0x1b4>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d009      	beq.n	8002540 <HAL_ADC_Start+0x104>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a32      	ldr	r2, [pc, #200]	@ (80025fc <HAL_ADC_Start+0x1c0>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d002      	beq.n	800253c <HAL_ADC_Start+0x100>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	e003      	b.n	8002544 <HAL_ADC_Start+0x108>
 800253c:	4b30      	ldr	r3, [pc, #192]	@ (8002600 <HAL_ADC_Start+0x1c4>)
 800253e:	e001      	b.n	8002544 <HAL_ADC_Start+0x108>
 8002540:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	4293      	cmp	r3, r2
 800254a:	d008      	beq.n	800255e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d005      	beq.n	800255e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	2b05      	cmp	r3, #5
 8002556:	d002      	beq.n	800255e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	2b09      	cmp	r3, #9
 800255c:	d114      	bne.n	8002588 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d007      	beq.n	800257c <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002570:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002574:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff fd3d 	bl	8002000 <LL_ADC_REG_StartConversion>
 8002586:	e02d      	b.n	80025e4 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800258c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a15      	ldr	r2, [pc, #84]	@ (80025f0 <HAL_ADC_Start+0x1b4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d009      	beq.n	80025b2 <HAL_ADC_Start+0x176>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a16      	ldr	r2, [pc, #88]	@ (80025fc <HAL_ADC_Start+0x1c0>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d002      	beq.n	80025ae <HAL_ADC_Start+0x172>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	e003      	b.n	80025b6 <HAL_ADC_Start+0x17a>
 80025ae:	4b14      	ldr	r3, [pc, #80]	@ (8002600 <HAL_ADC_Start+0x1c4>)
 80025b0:	e001      	b.n	80025b6 <HAL_ADC_Start+0x17a>
 80025b2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80025b6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00f      	beq.n	80025e4 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80025cc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025d4:	e006      	b.n	80025e4 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80025de:	e001      	b.n	80025e4 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025e0:	2302      	movs	r3, #2
 80025e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80025e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	50000100 	.word	0x50000100
 80025f4:	50000300 	.word	0x50000300
 80025f8:	50000700 	.word	0x50000700
 80025fc:	50000500 	.word	0x50000500
 8002600:	50000400 	.word	0x50000400

08002604 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002612:	2b01      	cmp	r3, #1
 8002614:	d101      	bne.n	800261a <HAL_ADC_Stop+0x16>
 8002616:	2302      	movs	r3, #2
 8002618:	e023      	b.n	8002662 <HAL_ADC_Stop+0x5e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002622:	2103      	movs	r1, #3
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fd75 	bl	8003114 <ADC_ConversionStop>
 800262a:	4603      	mov	r3, r0
 800262c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d111      	bne.n	8002658 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 febf 	bl	80033b8 <ADC_Disable>
 800263a:	4603      	mov	r3, r0
 800263c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800263e:	7bfb      	ldrb	r3, [r7, #15]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d109      	bne.n	8002658 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002648:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800264c:	f023 0301 	bic.w	r3, r3, #1
 8002650:	f043 0201 	orr.w	r2, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002660:	7bfb      	ldrb	r3, [r7, #15]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b088      	sub	sp, #32
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800267e:	d004      	beq.n	800268a <HAL_ADC_PollForConversion+0x1e>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a77      	ldr	r2, [pc, #476]	@ (8002864 <HAL_ADC_PollForConversion+0x1f8>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d101      	bne.n	800268e <HAL_ADC_PollForConversion+0x22>
 800268a:	4b77      	ldr	r3, [pc, #476]	@ (8002868 <HAL_ADC_PollForConversion+0x1fc>)
 800268c:	e000      	b.n	8002690 <HAL_ADC_PollForConversion+0x24>
 800268e:	4b77      	ldr	r3, [pc, #476]	@ (800286c <HAL_ADC_PollForConversion+0x200>)
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fbfd 	bl	8001e90 <LL_ADC_GetMultimode>
 8002696:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	2b08      	cmp	r3, #8
 800269e:	d102      	bne.n	80026a6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80026a0:	2308      	movs	r3, #8
 80026a2:	61fb      	str	r3, [r7, #28]
 80026a4:	e037      	b.n	8002716 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2b05      	cmp	r3, #5
 80026b0:	d002      	beq.n	80026b8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b09      	cmp	r3, #9
 80026b6:	d111      	bne.n	80026dc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d007      	beq.n	80026d6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ca:	f043 0220 	orr.w	r2, r3, #32
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e0c1      	b.n	800285a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80026d6:	2304      	movs	r3, #4
 80026d8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80026da:	e01c      	b.n	8002716 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026e4:	d004      	beq.n	80026f0 <HAL_ADC_PollForConversion+0x84>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a5e      	ldr	r2, [pc, #376]	@ (8002864 <HAL_ADC_PollForConversion+0x1f8>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d101      	bne.n	80026f4 <HAL_ADC_PollForConversion+0x88>
 80026f0:	4b5d      	ldr	r3, [pc, #372]	@ (8002868 <HAL_ADC_PollForConversion+0x1fc>)
 80026f2:	e000      	b.n	80026f6 <HAL_ADC_PollForConversion+0x8a>
 80026f4:	4b5d      	ldr	r3, [pc, #372]	@ (800286c <HAL_ADC_PollForConversion+0x200>)
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fbd8 	bl	8001eac <LL_ADC_GetMultiDMATransfer>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d007      	beq.n	8002712 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002706:	f043 0220 	orr.w	r2, r3, #32
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e0a3      	b.n	800285a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002712:	2304      	movs	r3, #4
 8002714:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002716:	f7ff fa4f 	bl	8001bb8 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800271c:	e021      	b.n	8002762 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002724:	d01d      	beq.n	8002762 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002726:	f7ff fa47 	bl	8001bb8 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d302      	bcc.n	800273c <HAL_ADC_PollForConversion+0xd0>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d112      	bne.n	8002762 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	4013      	ands	r3, r2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10b      	bne.n	8002762 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274e:	f043 0204 	orr.w	r2, r3, #4
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e07b      	b.n	800285a <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	4013      	ands	r3, r2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0d6      	beq.n	800271e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002774:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff faf7 	bl	8001d74 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d01c      	beq.n	80027c6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	7f5b      	ldrb	r3, [r3, #29]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d118      	bne.n	80027c6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d111      	bne.n	80027c6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d105      	bne.n	80027c6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027be:	f043 0201 	orr.w	r2, r3, #1
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a26      	ldr	r2, [pc, #152]	@ (8002864 <HAL_ADC_PollForConversion+0x1f8>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d009      	beq.n	80027e4 <HAL_ADC_PollForConversion+0x178>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a26      	ldr	r2, [pc, #152]	@ (8002870 <HAL_ADC_PollForConversion+0x204>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d002      	beq.n	80027e0 <HAL_ADC_PollForConversion+0x174>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	e003      	b.n	80027e8 <HAL_ADC_PollForConversion+0x17c>
 80027e0:	4b24      	ldr	r3, [pc, #144]	@ (8002874 <HAL_ADC_PollForConversion+0x208>)
 80027e2:	e001      	b.n	80027e8 <HAL_ADC_PollForConversion+0x17c>
 80027e4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d008      	beq.n	8002802 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d005      	beq.n	8002802 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2b05      	cmp	r3, #5
 80027fa:	d002      	beq.n	8002802 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	2b09      	cmp	r3, #9
 8002800:	d104      	bne.n	800280c <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	61bb      	str	r3, [r7, #24]
 800280a:	e014      	b.n	8002836 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a14      	ldr	r2, [pc, #80]	@ (8002864 <HAL_ADC_PollForConversion+0x1f8>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d009      	beq.n	800282a <HAL_ADC_PollForConversion+0x1be>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a15      	ldr	r2, [pc, #84]	@ (8002870 <HAL_ADC_PollForConversion+0x204>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d002      	beq.n	8002826 <HAL_ADC_PollForConversion+0x1ba>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	e003      	b.n	800282e <HAL_ADC_PollForConversion+0x1c2>
 8002826:	4b13      	ldr	r3, [pc, #76]	@ (8002874 <HAL_ADC_PollForConversion+0x208>)
 8002828:	e001      	b.n	800282e <HAL_ADC_PollForConversion+0x1c2>
 800282a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800282e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	2b08      	cmp	r3, #8
 800283a:	d104      	bne.n	8002846 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2208      	movs	r2, #8
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	e008      	b.n	8002858 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d103      	bne.n	8002858 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	220c      	movs	r2, #12
 8002856:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3720      	adds	r7, #32
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	50000100 	.word	0x50000100
 8002868:	50000300 	.word	0x50000300
 800286c:	50000700 	.word	0x50000700
 8002870:	50000500 	.word	0x50000500
 8002874:	50000400 	.word	0x50000400

08002878 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b0b6      	sub	sp, #216	@ 0xd8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d102      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x24>
 80028b2:	2302      	movs	r3, #2
 80028b4:	f000 bc13 	b.w	80030de <HAL_ADC_ConfigChannel+0x84a>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff fbc3 	bl	8002050 <LL_ADC_REG_IsConversionOngoing>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f040 83f3 	bne.w	80030b8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6818      	ldr	r0, [r3, #0]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	6859      	ldr	r1, [r3, #4]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	461a      	mov	r2, r3
 80028e0:	f7ff fa5b 	bl	8001d9a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff fbb1 	bl	8002050 <LL_ADC_REG_IsConversionOngoing>
 80028ee:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7ff fbd1 	bl	800209e <LL_ADC_INJ_IsConversionOngoing>
 80028fc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002900:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002904:	2b00      	cmp	r3, #0
 8002906:	f040 81d9 	bne.w	8002cbc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800290a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800290e:	2b00      	cmp	r3, #0
 8002910:	f040 81d4 	bne.w	8002cbc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800291c:	d10f      	bne.n	800293e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2200      	movs	r2, #0
 8002928:	4619      	mov	r1, r3
 800292a:	f7ff fa62 	bl	8001df2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff fa09 	bl	8001d4e <LL_ADC_SetSamplingTimeCommonConfig>
 800293c:	e00e      	b.n	800295c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	6819      	ldr	r1, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	461a      	mov	r2, r3
 800294c:	f7ff fa51 	bl	8001df2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2100      	movs	r1, #0
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff f9f9 	bl	8001d4e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	695a      	ldr	r2, [r3, #20]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	08db      	lsrs	r3, r3, #3
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	2b04      	cmp	r3, #4
 800297c:	d022      	beq.n	80029c4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6919      	ldr	r1, [r3, #16]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800298e:	f7ff f953 	bl	8001c38 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6818      	ldr	r0, [r3, #0]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	6919      	ldr	r1, [r3, #16]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	461a      	mov	r2, r3
 80029a0:	f7ff f99f 	bl	8001ce2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6818      	ldr	r0, [r3, #0]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d102      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x126>
 80029b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029b8:	e000      	b.n	80029bc <HAL_ADC_ConfigChannel+0x128>
 80029ba:	2300      	movs	r3, #0
 80029bc:	461a      	mov	r2, r3
 80029be:	f7ff f9ab 	bl	8001d18 <LL_ADC_SetOffsetSaturation>
 80029c2:	e17b      	b.n	8002cbc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2100      	movs	r1, #0
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff f958 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 80029d0:	4603      	mov	r3, r0
 80029d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10a      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x15c>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2100      	movs	r1, #0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff f94d 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 80029e6:	4603      	mov	r3, r0
 80029e8:	0e9b      	lsrs	r3, r3, #26
 80029ea:	f003 021f 	and.w	r2, r3, #31
 80029ee:	e01e      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x19a>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2100      	movs	r1, #0
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff f942 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a06:	fa93 f3a3 	rbit	r3, r3
 8002a0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a12:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002a1e:	2320      	movs	r3, #32
 8002a20:	e004      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002a22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a26:	fab3 f383 	clz	r3, r3
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d105      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x1b2>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	0e9b      	lsrs	r3, r3, #26
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	e018      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x1e4>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a52:	fa93 f3a3 	rbit	r3, r3
 8002a56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002a5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002a62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002a6a:	2320      	movs	r3, #32
 8002a6c:	e004      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002a6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a72:	fab3 f383 	clz	r3, r3
 8002a76:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d106      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2200      	movs	r2, #0
 8002a82:	2100      	movs	r1, #0
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff f911 	bl	8001cac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2101      	movs	r1, #1
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff f8f5 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002a96:	4603      	mov	r3, r0
 8002a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10a      	bne.n	8002ab6 <HAL_ADC_ConfigChannel+0x222>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff f8ea 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002aac:	4603      	mov	r3, r0
 8002aae:	0e9b      	lsrs	r3, r3, #26
 8002ab0:	f003 021f 	and.w	r2, r3, #31
 8002ab4:	e01e      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x260>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2101      	movs	r1, #1
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff f8df 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002acc:	fa93 f3a3 	rbit	r3, r3
 8002ad0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002ad4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ad8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002adc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002ae4:	2320      	movs	r3, #32
 8002ae6:	e004      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002ae8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002aec:	fab3 f383 	clz	r3, r3
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d105      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x278>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	0e9b      	lsrs	r3, r3, #26
 8002b06:	f003 031f 	and.w	r3, r3, #31
 8002b0a:	e018      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x2aa>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b18:	fa93 f3a3 	rbit	r3, r3
 8002b1c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002b20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002b28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002b30:	2320      	movs	r3, #32
 8002b32:	e004      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002b34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b38:	fab3 f383 	clz	r3, r3
 8002b3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d106      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2200      	movs	r2, #0
 8002b48:	2101      	movs	r1, #1
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff f8ae 	bl	8001cac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2102      	movs	r1, #2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff f892 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10a      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x2e8>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2102      	movs	r1, #2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff f887 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002b72:	4603      	mov	r3, r0
 8002b74:	0e9b      	lsrs	r3, r3, #26
 8002b76:	f003 021f 	and.w	r2, r3, #31
 8002b7a:	e01e      	b.n	8002bba <HAL_ADC_ConfigChannel+0x326>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2102      	movs	r1, #2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff f87c 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002b9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002ba2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002baa:	2320      	movs	r3, #32
 8002bac:	e004      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002bae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002bb2:	fab3 f383 	clz	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d105      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x33e>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	0e9b      	lsrs	r3, r3, #26
 8002bcc:	f003 031f 	and.w	r3, r3, #31
 8002bd0:	e016      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x36c>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002be4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002be6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002bea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002bf2:	2320      	movs	r3, #32
 8002bf4:	e004      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002bf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002bfa:	fab3 f383 	clz	r3, r3
 8002bfe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d106      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	2102      	movs	r1, #2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff f84d 	bl	8001cac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2103      	movs	r1, #3
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff f831 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10a      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x3aa>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2103      	movs	r1, #3
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff f826 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002c34:	4603      	mov	r3, r0
 8002c36:	0e9b      	lsrs	r3, r3, #26
 8002c38:	f003 021f 	and.w	r2, r3, #31
 8002c3c:	e017      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x3da>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2103      	movs	r1, #3
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff f81b 	bl	8001c80 <LL_ADC_GetOffsetChannel>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c50:	fa93 f3a3 	rbit	r3, r3
 8002c54:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002c56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c58:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002c5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002c60:	2320      	movs	r3, #32
 8002c62:	e003      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002c64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c66:	fab3 f383 	clz	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d105      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x3f2>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	0e9b      	lsrs	r3, r3, #26
 8002c80:	f003 031f 	and.w	r3, r3, #31
 8002c84:	e011      	b.n	8002caa <HAL_ADC_ConfigChannel+0x416>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c8e:	fa93 f3a3 	rbit	r3, r3
 8002c92:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002c94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c96:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002c98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002c9e:	2320      	movs	r3, #32
 8002ca0:	e003      	b.n	8002caa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002ca2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ca4:	fab3 f383 	clz	r3, r3
 8002ca8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d106      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2103      	movs	r1, #3
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fe fff8 	bl	8001cac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff f977 	bl	8001fb4 <LL_ADC_IsEnabled>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f040 813d 	bne.w	8002f48 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6818      	ldr	r0, [r3, #0]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	6819      	ldr	r1, [r3, #0]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	f7ff f8b4 	bl	8001e48 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	4aa2      	ldr	r2, [pc, #648]	@ (8002f70 <HAL_ADC_ConfigChannel+0x6dc>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	f040 812e 	bne.w	8002f48 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10b      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x480>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	0e9b      	lsrs	r3, r3, #26
 8002d02:	3301      	adds	r3, #1
 8002d04:	f003 031f 	and.w	r3, r3, #31
 8002d08:	2b09      	cmp	r3, #9
 8002d0a:	bf94      	ite	ls
 8002d0c:	2301      	movls	r3, #1
 8002d0e:	2300      	movhi	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	e019      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x4b4>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d1c:	fa93 f3a3 	rbit	r3, r3
 8002d20:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002d22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d24:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002d26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002d2c:	2320      	movs	r3, #32
 8002d2e:	e003      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002d30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d32:	fab3 f383 	clz	r3, r3
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	3301      	adds	r3, #1
 8002d3a:	f003 031f 	and.w	r3, r3, #31
 8002d3e:	2b09      	cmp	r3, #9
 8002d40:	bf94      	ite	ls
 8002d42:	2301      	movls	r3, #1
 8002d44:	2300      	movhi	r3, #0
 8002d46:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d079      	beq.n	8002e40 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d107      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x4d4>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	0e9b      	lsrs	r3, r3, #26
 8002d5e:	3301      	adds	r3, #1
 8002d60:	069b      	lsls	r3, r3, #26
 8002d62:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d66:	e015      	b.n	8002d94 <HAL_ADC_ConfigChannel+0x500>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d70:	fa93 f3a3 	rbit	r3, r3
 8002d74:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002d76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d78:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002d80:	2320      	movs	r3, #32
 8002d82:	e003      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002d84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d86:	fab3 f383 	clz	r3, r3
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	069b      	lsls	r3, r3, #26
 8002d90:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d109      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x520>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	0e9b      	lsrs	r3, r3, #26
 8002da6:	3301      	adds	r3, #1
 8002da8:	f003 031f 	and.w	r3, r3, #31
 8002dac:	2101      	movs	r1, #1
 8002dae:	fa01 f303 	lsl.w	r3, r1, r3
 8002db2:	e017      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x550>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002dbc:	fa93 f3a3 	rbit	r3, r3
 8002dc0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002dc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002dc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002dcc:	2320      	movs	r3, #32
 8002dce:	e003      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002dd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dd2:	fab3 f383 	clz	r3, r3
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	3301      	adds	r3, #1
 8002dda:	f003 031f 	and.w	r3, r3, #31
 8002dde:	2101      	movs	r1, #1
 8002de0:	fa01 f303 	lsl.w	r3, r1, r3
 8002de4:	ea42 0103 	orr.w	r1, r2, r3
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10a      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x576>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	0e9b      	lsrs	r3, r3, #26
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	f003 021f 	and.w	r2, r3, #31
 8002e00:	4613      	mov	r3, r2
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	4413      	add	r3, r2
 8002e06:	051b      	lsls	r3, r3, #20
 8002e08:	e018      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x5a8>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e12:	fa93 f3a3 	rbit	r3, r3
 8002e16:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002e1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002e22:	2320      	movs	r3, #32
 8002e24:	e003      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002e26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e28:	fab3 f383 	clz	r3, r3
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	3301      	adds	r3, #1
 8002e30:	f003 021f 	and.w	r2, r3, #31
 8002e34:	4613      	mov	r3, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4413      	add	r3, r2
 8002e3a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e3c:	430b      	orrs	r3, r1
 8002e3e:	e07e      	b.n	8002f3e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d107      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x5c8>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	0e9b      	lsrs	r3, r3, #26
 8002e52:	3301      	adds	r3, #1
 8002e54:	069b      	lsls	r3, r3, #26
 8002e56:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e5a:	e015      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x5f4>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e64:	fa93 f3a3 	rbit	r3, r3
 8002e68:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e6c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002e74:	2320      	movs	r3, #32
 8002e76:	e003      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e7a:	fab3 f383 	clz	r3, r3
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	3301      	adds	r3, #1
 8002e82:	069b      	lsls	r3, r3, #26
 8002e84:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d109      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x614>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	0e9b      	lsrs	r3, r3, #26
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	f003 031f 	and.w	r3, r3, #31
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea6:	e017      	b.n	8002ed8 <HAL_ADC_ConfigChannel+0x644>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	fa93 f3a3 	rbit	r3, r3
 8002eb4:	61fb      	str	r3, [r7, #28]
  return result;
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002ec0:	2320      	movs	r3, #32
 8002ec2:	e003      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec6:	fab3 f383 	clz	r3, r3
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	3301      	adds	r3, #1
 8002ece:	f003 031f 	and.w	r3, r3, #31
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed8:	ea42 0103 	orr.w	r1, r2, r3
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10d      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x670>
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	0e9b      	lsrs	r3, r3, #26
 8002eee:	3301      	adds	r3, #1
 8002ef0:	f003 021f 	and.w	r2, r3, #31
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	4413      	add	r3, r2
 8002efa:	3b1e      	subs	r3, #30
 8002efc:	051b      	lsls	r3, r3, #20
 8002efe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f02:	e01b      	b.n	8002f3c <HAL_ADC_ConfigChannel+0x6a8>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	fa93 f3a3 	rbit	r3, r3
 8002f10:	613b      	str	r3, [r7, #16]
  return result;
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002f1c:	2320      	movs	r3, #32
 8002f1e:	e003      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	fab3 f383 	clz	r3, r3
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	3301      	adds	r3, #1
 8002f2a:	f003 021f 	and.w	r2, r3, #31
 8002f2e:	4613      	mov	r3, r2
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4413      	add	r3, r2
 8002f34:	3b1e      	subs	r3, #30
 8002f36:	051b      	lsls	r3, r3, #20
 8002f38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f3c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f42:	4619      	mov	r1, r3
 8002f44:	f7fe ff55 	bl	8001df2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	4b09      	ldr	r3, [pc, #36]	@ (8002f74 <HAL_ADC_ConfigChannel+0x6e0>)
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 80be 	beq.w	80030d2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f5e:	d004      	beq.n	8002f6a <HAL_ADC_ConfigChannel+0x6d6>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a04      	ldr	r2, [pc, #16]	@ (8002f78 <HAL_ADC_ConfigChannel+0x6e4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d10a      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x6ec>
 8002f6a:	4b04      	ldr	r3, [pc, #16]	@ (8002f7c <HAL_ADC_ConfigChannel+0x6e8>)
 8002f6c:	e009      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x6ee>
 8002f6e:	bf00      	nop
 8002f70:	407f0000 	.word	0x407f0000
 8002f74:	80080000 	.word	0x80080000
 8002f78:	50000100 	.word	0x50000100
 8002f7c:	50000300 	.word	0x50000300
 8002f80:	4b59      	ldr	r3, [pc, #356]	@ (80030e8 <HAL_ADC_ConfigChannel+0x854>)
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fe fe4a 	bl	8001c1c <LL_ADC_GetCommonPathInternalCh>
 8002f88:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a56      	ldr	r2, [pc, #344]	@ (80030ec <HAL_ADC_ConfigChannel+0x858>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d004      	beq.n	8002fa0 <HAL_ADC_ConfigChannel+0x70c>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a55      	ldr	r2, [pc, #340]	@ (80030f0 <HAL_ADC_ConfigChannel+0x85c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d13a      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fa0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fa4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d134      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fb4:	d005      	beq.n	8002fc2 <HAL_ADC_ConfigChannel+0x72e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a4e      	ldr	r2, [pc, #312]	@ (80030f4 <HAL_ADC_ConfigChannel+0x860>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	f040 8085 	bne.w	80030cc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fca:	d004      	beq.n	8002fd6 <HAL_ADC_ConfigChannel+0x742>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a49      	ldr	r2, [pc, #292]	@ (80030f8 <HAL_ADC_ConfigChannel+0x864>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d101      	bne.n	8002fda <HAL_ADC_ConfigChannel+0x746>
 8002fd6:	4a49      	ldr	r2, [pc, #292]	@ (80030fc <HAL_ADC_ConfigChannel+0x868>)
 8002fd8:	e000      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x748>
 8002fda:	4a43      	ldr	r2, [pc, #268]	@ (80030e8 <HAL_ADC_ConfigChannel+0x854>)
 8002fdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002fe0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	f7fe fe05 	bl	8001bf6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fec:	4b44      	ldr	r3, [pc, #272]	@ (8003100 <HAL_ADC_ConfigChannel+0x86c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	099b      	lsrs	r3, r3, #6
 8002ff2:	4a44      	ldr	r2, [pc, #272]	@ (8003104 <HAL_ADC_ConfigChannel+0x870>)
 8002ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff8:	099b      	lsrs	r3, r3, #6
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003006:	e002      	b.n	800300e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	3b01      	subs	r3, #1
 800300c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1f9      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003014:	e05a      	b.n	80030cc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a3b      	ldr	r2, [pc, #236]	@ (8003108 <HAL_ADC_ConfigChannel+0x874>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d125      	bne.n	800306c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003020:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003024:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d11f      	bne.n	800306c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a31      	ldr	r2, [pc, #196]	@ (80030f8 <HAL_ADC_ConfigChannel+0x864>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d104      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x7ac>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a34      	ldr	r2, [pc, #208]	@ (800310c <HAL_ADC_ConfigChannel+0x878>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d047      	beq.n	80030d0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003048:	d004      	beq.n	8003054 <HAL_ADC_ConfigChannel+0x7c0>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a2a      	ldr	r2, [pc, #168]	@ (80030f8 <HAL_ADC_ConfigChannel+0x864>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d101      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x7c4>
 8003054:	4a29      	ldr	r2, [pc, #164]	@ (80030fc <HAL_ADC_ConfigChannel+0x868>)
 8003056:	e000      	b.n	800305a <HAL_ADC_ConfigChannel+0x7c6>
 8003058:	4a23      	ldr	r2, [pc, #140]	@ (80030e8 <HAL_ADC_ConfigChannel+0x854>)
 800305a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800305e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003062:	4619      	mov	r1, r3
 8003064:	4610      	mov	r0, r2
 8003066:	f7fe fdc6 	bl	8001bf6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800306a:	e031      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a27      	ldr	r2, [pc, #156]	@ (8003110 <HAL_ADC_ConfigChannel+0x87c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d12d      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003076:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800307a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d127      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a1c      	ldr	r2, [pc, #112]	@ (80030f8 <HAL_ADC_ConfigChannel+0x864>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d022      	beq.n	80030d2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003094:	d004      	beq.n	80030a0 <HAL_ADC_ConfigChannel+0x80c>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a17      	ldr	r2, [pc, #92]	@ (80030f8 <HAL_ADC_ConfigChannel+0x864>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d101      	bne.n	80030a4 <HAL_ADC_ConfigChannel+0x810>
 80030a0:	4a16      	ldr	r2, [pc, #88]	@ (80030fc <HAL_ADC_ConfigChannel+0x868>)
 80030a2:	e000      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x812>
 80030a4:	4a10      	ldr	r2, [pc, #64]	@ (80030e8 <HAL_ADC_ConfigChannel+0x854>)
 80030a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030ae:	4619      	mov	r1, r3
 80030b0:	4610      	mov	r0, r2
 80030b2:	f7fe fda0 	bl	8001bf6 <LL_ADC_SetCommonPathInternalCh>
 80030b6:	e00c      	b.n	80030d2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030bc:	f043 0220 	orr.w	r2, r3, #32
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80030ca:	e002      	b.n	80030d2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030cc:	bf00      	nop
 80030ce:	e000      	b.n	80030d2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80030da:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80030de:	4618      	mov	r0, r3
 80030e0:	37d8      	adds	r7, #216	@ 0xd8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	50000700 	.word	0x50000700
 80030ec:	c3210000 	.word	0xc3210000
 80030f0:	90c00010 	.word	0x90c00010
 80030f4:	50000600 	.word	0x50000600
 80030f8:	50000100 	.word	0x50000100
 80030fc:	50000300 	.word	0x50000300
 8003100:	20000048 	.word	0x20000048
 8003104:	053e2d63 	.word	0x053e2d63
 8003108:	c7520000 	.word	0xc7520000
 800310c:	50000500 	.word	0x50000500
 8003110:	cb840000 	.word	0xcb840000

08003114 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800311e:	2300      	movs	r3, #0
 8003120:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f7fe ff90 	bl	8002050 <LL_ADC_REG_IsConversionOngoing>
 8003130:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f7fe ffb1 	bl	800209e <LL_ADC_INJ_IsConversionOngoing>
 800313c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d103      	bne.n	800314c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 8098 	beq.w	800327c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d02a      	beq.n	80031b0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	7f5b      	ldrb	r3, [r3, #29]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d126      	bne.n	80031b0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	7f1b      	ldrb	r3, [r3, #28]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d122      	bne.n	80031b0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800316a:	2301      	movs	r3, #1
 800316c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800316e:	e014      	b.n	800319a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	4a45      	ldr	r2, [pc, #276]	@ (8003288 <ADC_ConversionStop+0x174>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d90d      	bls.n	8003194 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800317c:	f043 0210 	orr.w	r2, r3, #16
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003188:	f043 0201 	orr.w	r2, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e074      	b.n	800327e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	3301      	adds	r3, #1
 8003198:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a4:	2b40      	cmp	r3, #64	@ 0x40
 80031a6:	d1e3      	bne.n	8003170 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2240      	movs	r2, #64	@ 0x40
 80031ae:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d014      	beq.n	80031e0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fe ff48 	bl	8002050 <LL_ADC_REG_IsConversionOngoing>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00c      	beq.n	80031e0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fe ff05 	bl	8001fda <LL_ADC_IsDisableOngoing>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d104      	bne.n	80031e0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fe ff24 	bl	8002028 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d014      	beq.n	8003210 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fe ff57 	bl	800209e <LL_ADC_INJ_IsConversionOngoing>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00c      	beq.n	8003210 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fe feed 	bl	8001fda <LL_ADC_IsDisableOngoing>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d104      	bne.n	8003210 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7fe ff33 	bl	8002076 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d005      	beq.n	8003222 <ADC_ConversionStop+0x10e>
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	2b03      	cmp	r3, #3
 800321a:	d105      	bne.n	8003228 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800321c:	230c      	movs	r3, #12
 800321e:	617b      	str	r3, [r7, #20]
        break;
 8003220:	e005      	b.n	800322e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003222:	2308      	movs	r3, #8
 8003224:	617b      	str	r3, [r7, #20]
        break;
 8003226:	e002      	b.n	800322e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003228:	2304      	movs	r3, #4
 800322a:	617b      	str	r3, [r7, #20]
        break;
 800322c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800322e:	f7fe fcc3 	bl	8001bb8 <HAL_GetTick>
 8003232:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003234:	e01b      	b.n	800326e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003236:	f7fe fcbf 	bl	8001bb8 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b05      	cmp	r3, #5
 8003242:	d914      	bls.n	800326e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	4013      	ands	r3, r2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00d      	beq.n	800326e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003256:	f043 0210 	orr.w	r2, r3, #16
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003262:	f043 0201 	orr.w	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e007      	b.n	800327e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	4013      	ands	r3, r2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1dc      	bne.n	8003236 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3720      	adds	r7, #32
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	a33fffff 	.word	0xa33fffff

0800328c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003294:	2300      	movs	r3, #0
 8003296:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7fe fe89 	bl	8001fb4 <LL_ADC_IsEnabled>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d176      	bne.n	8003396 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	4b3c      	ldr	r3, [pc, #240]	@ (80033a0 <ADC_Enable+0x114>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00d      	beq.n	80032d2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ba:	f043 0210 	orr.w	r2, r3, #16
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032c6:	f043 0201 	orr.w	r2, r3, #1
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e062      	b.n	8003398 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fe fe44 	bl	8001f64 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032e4:	d004      	beq.n	80032f0 <ADC_Enable+0x64>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a2e      	ldr	r2, [pc, #184]	@ (80033a4 <ADC_Enable+0x118>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d101      	bne.n	80032f4 <ADC_Enable+0x68>
 80032f0:	4b2d      	ldr	r3, [pc, #180]	@ (80033a8 <ADC_Enable+0x11c>)
 80032f2:	e000      	b.n	80032f6 <ADC_Enable+0x6a>
 80032f4:	4b2d      	ldr	r3, [pc, #180]	@ (80033ac <ADC_Enable+0x120>)
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fe fc90 	bl	8001c1c <LL_ADC_GetCommonPathInternalCh>
 80032fc:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80032fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003302:	2b00      	cmp	r3, #0
 8003304:	d013      	beq.n	800332e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003306:	4b2a      	ldr	r3, [pc, #168]	@ (80033b0 <ADC_Enable+0x124>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	099b      	lsrs	r3, r3, #6
 800330c:	4a29      	ldr	r2, [pc, #164]	@ (80033b4 <ADC_Enable+0x128>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	099b      	lsrs	r3, r3, #6
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	4613      	mov	r3, r2
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003320:	e002      	b.n	8003328 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	3b01      	subs	r3, #1
 8003326:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f9      	bne.n	8003322 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800332e:	f7fe fc43 	bl	8001bb8 <HAL_GetTick>
 8003332:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003334:	e028      	b.n	8003388 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7fe fe3a 	bl	8001fb4 <LL_ADC_IsEnabled>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d104      	bne.n	8003350 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f7fe fe0a 	bl	8001f64 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003350:	f7fe fc32 	bl	8001bb8 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d914      	bls.n	8003388 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b01      	cmp	r3, #1
 800336a:	d00d      	beq.n	8003388 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003370:	f043 0210 	orr.w	r2, r3, #16
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800337c:	f043 0201 	orr.w	r2, r3, #1
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e007      	b.n	8003398 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b01      	cmp	r3, #1
 8003394:	d1cf      	bne.n	8003336 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	8000003f 	.word	0x8000003f
 80033a4:	50000100 	.word	0x50000100
 80033a8:	50000300 	.word	0x50000300
 80033ac:	50000700 	.word	0x50000700
 80033b0:	20000048 	.word	0x20000048
 80033b4:	053e2d63 	.word	0x053e2d63

080033b8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fe fe08 	bl	8001fda <LL_ADC_IsDisableOngoing>
 80033ca:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fe fdef 	bl	8001fb4 <LL_ADC_IsEnabled>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d047      	beq.n	800346c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d144      	bne.n	800346c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f003 030d 	and.w	r3, r3, #13
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d10c      	bne.n	800340a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fe fdc9 	bl	8001f8c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2203      	movs	r2, #3
 8003400:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003402:	f7fe fbd9 	bl	8001bb8 <HAL_GetTick>
 8003406:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003408:	e029      	b.n	800345e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340e:	f043 0210 	orr.w	r2, r3, #16
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800341a:	f043 0201 	orr.w	r2, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e023      	b.n	800346e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003426:	f7fe fbc7 	bl	8001bb8 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d914      	bls.n	800345e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00d      	beq.n	800345e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003446:	f043 0210 	orr.w	r2, r3, #16
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003452:	f043 0201 	orr.w	r2, r3, #1
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e007      	b.n	800346e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1dc      	bne.n	8003426 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <LL_ADC_IsEnabled>:
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b01      	cmp	r3, #1
 8003488:	d101      	bne.n	800348e <LL_ADC_IsEnabled+0x18>
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <LL_ADC_IsEnabled+0x1a>
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <LL_ADC_StartCalibration>:
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80034ae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	609a      	str	r2, [r3, #8]
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <LL_ADC_IsCalibrationOnGoing>:
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80034de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80034e2:	d101      	bne.n	80034e8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <LL_ADC_IsCalibrationOnGoing+0x1c>
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <LL_ADC_REG_IsConversionOngoing>:
{
 80034f6:	b480      	push	{r7}
 80034f8:	b083      	sub	sp, #12
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 0304 	and.w	r3, r3, #4
 8003506:	2b04      	cmp	r3, #4
 8003508:	d101      	bne.n	800350e <LL_ADC_REG_IsConversionOngoing+0x18>
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003526:	2300      	movs	r3, #0
 8003528:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003530:	2b01      	cmp	r3, #1
 8003532:	d101      	bne.n	8003538 <HAL_ADCEx_Calibration_Start+0x1c>
 8003534:	2302      	movs	r3, #2
 8003536:	e04d      	b.n	80035d4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff ff39 	bl	80033b8 <ADC_Disable>
 8003546:	4603      	mov	r3, r0
 8003548:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800354a:	7bfb      	ldrb	r3, [r7, #15]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d136      	bne.n	80035be <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003554:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003558:	f023 0302 	bic.w	r3, r3, #2
 800355c:	f043 0202 	orr.w	r2, r3, #2
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6839      	ldr	r1, [r7, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff ff96 	bl	800349c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003570:	e014      	b.n	800359c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	3301      	adds	r3, #1
 8003576:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	4a18      	ldr	r2, [pc, #96]	@ (80035dc <HAL_ADCEx_Calibration_Start+0xc0>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d90d      	bls.n	800359c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003584:	f023 0312 	bic.w	r3, r3, #18
 8003588:	f043 0210 	orr.w	r2, r3, #16
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e01b      	b.n	80035d4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff ff94 	bl	80034ce <LL_ADC_IsCalibrationOnGoing>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1e2      	bne.n	8003572 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b0:	f023 0303 	bic.w	r3, r3, #3
 80035b4:	f043 0201 	orr.w	r2, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80035bc:	e005      	b.n	80035ca <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c2:	f043 0210 	orr.w	r2, r3, #16
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	0004de01 	.word	0x0004de01

080035e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80035e0:	b590      	push	{r4, r7, lr}
 80035e2:	b0a1      	sub	sp, #132	@ 0x84
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d101      	bne.n	80035fe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035fa:	2302      	movs	r3, #2
 80035fc:	e0e7      	b.n	80037ce <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003606:	2300      	movs	r3, #0
 8003608:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800360a:	2300      	movs	r3, #0
 800360c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003616:	d102      	bne.n	800361e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003618:	4b6f      	ldr	r3, [pc, #444]	@ (80037d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	e009      	b.n	8003632 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a6e      	ldr	r2, [pc, #440]	@ (80037dc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d102      	bne.n	800362e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003628:	4b6d      	ldr	r3, [pc, #436]	@ (80037e0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800362a:	60bb      	str	r3, [r7, #8]
 800362c:	e001      	b.n	8003632 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800362e:	2300      	movs	r3, #0
 8003630:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10b      	bne.n	8003650 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363c:	f043 0220 	orr.w	r2, r3, #32
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e0be      	b.n	80037ce <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff ff4f 	bl	80034f6 <LL_ADC_REG_IsConversionOngoing>
 8003658:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff ff49 	bl	80034f6 <LL_ADC_REG_IsConversionOngoing>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	f040 80a0 	bne.w	80037ac <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800366c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800366e:	2b00      	cmp	r3, #0
 8003670:	f040 809c 	bne.w	80037ac <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800367c:	d004      	beq.n	8003688 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a55      	ldr	r2, [pc, #340]	@ (80037d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d101      	bne.n	800368c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003688:	4b56      	ldr	r3, [pc, #344]	@ (80037e4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800368a:	e000      	b.n	800368e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800368c:	4b56      	ldr	r3, [pc, #344]	@ (80037e8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800368e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d04b      	beq.n	8003730 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003698:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	6859      	ldr	r1, [r3, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80036aa:	035b      	lsls	r3, r3, #13
 80036ac:	430b      	orrs	r3, r1
 80036ae:	431a      	orrs	r2, r3
 80036b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036b2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036bc:	d004      	beq.n	80036c8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a45      	ldr	r2, [pc, #276]	@ (80037d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d10f      	bne.n	80036e8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80036c8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80036cc:	f7ff fed3 	bl	8003476 <LL_ADC_IsEnabled>
 80036d0:	4604      	mov	r4, r0
 80036d2:	4841      	ldr	r0, [pc, #260]	@ (80037d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80036d4:	f7ff fecf 	bl	8003476 <LL_ADC_IsEnabled>
 80036d8:	4603      	mov	r3, r0
 80036da:	4323      	orrs	r3, r4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	bf0c      	ite	eq
 80036e0:	2301      	moveq	r3, #1
 80036e2:	2300      	movne	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	e012      	b.n	800370e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80036e8:	483c      	ldr	r0, [pc, #240]	@ (80037dc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80036ea:	f7ff fec4 	bl	8003476 <LL_ADC_IsEnabled>
 80036ee:	4604      	mov	r4, r0
 80036f0:	483b      	ldr	r0, [pc, #236]	@ (80037e0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80036f2:	f7ff fec0 	bl	8003476 <LL_ADC_IsEnabled>
 80036f6:	4603      	mov	r3, r0
 80036f8:	431c      	orrs	r4, r3
 80036fa:	483c      	ldr	r0, [pc, #240]	@ (80037ec <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80036fc:	f7ff febb 	bl	8003476 <LL_ADC_IsEnabled>
 8003700:	4603      	mov	r3, r0
 8003702:	4323      	orrs	r3, r4
 8003704:	2b00      	cmp	r3, #0
 8003706:	bf0c      	ite	eq
 8003708:	2301      	moveq	r3, #1
 800370a:	2300      	movne	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d056      	beq.n	80037c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003712:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800371a:	f023 030f 	bic.w	r3, r3, #15
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	6811      	ldr	r1, [r2, #0]
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	6892      	ldr	r2, [r2, #8]
 8003726:	430a      	orrs	r2, r1
 8003728:	431a      	orrs	r2, r3
 800372a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800372c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800372e:	e047      	b.n	80037c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003730:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003738:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800373a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003744:	d004      	beq.n	8003750 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a23      	ldr	r2, [pc, #140]	@ (80037d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d10f      	bne.n	8003770 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003750:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003754:	f7ff fe8f 	bl	8003476 <LL_ADC_IsEnabled>
 8003758:	4604      	mov	r4, r0
 800375a:	481f      	ldr	r0, [pc, #124]	@ (80037d8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800375c:	f7ff fe8b 	bl	8003476 <LL_ADC_IsEnabled>
 8003760:	4603      	mov	r3, r0
 8003762:	4323      	orrs	r3, r4
 8003764:	2b00      	cmp	r3, #0
 8003766:	bf0c      	ite	eq
 8003768:	2301      	moveq	r3, #1
 800376a:	2300      	movne	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	e012      	b.n	8003796 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003770:	481a      	ldr	r0, [pc, #104]	@ (80037dc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003772:	f7ff fe80 	bl	8003476 <LL_ADC_IsEnabled>
 8003776:	4604      	mov	r4, r0
 8003778:	4819      	ldr	r0, [pc, #100]	@ (80037e0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800377a:	f7ff fe7c 	bl	8003476 <LL_ADC_IsEnabled>
 800377e:	4603      	mov	r3, r0
 8003780:	431c      	orrs	r4, r3
 8003782:	481a      	ldr	r0, [pc, #104]	@ (80037ec <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003784:	f7ff fe77 	bl	8003476 <LL_ADC_IsEnabled>
 8003788:	4603      	mov	r3, r0
 800378a:	4323      	orrs	r3, r4
 800378c:	2b00      	cmp	r3, #0
 800378e:	bf0c      	ite	eq
 8003790:	2301      	moveq	r3, #1
 8003792:	2300      	movne	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d012      	beq.n	80037c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800379a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80037a2:	f023 030f 	bic.w	r3, r3, #15
 80037a6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80037a8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037aa:	e009      	b.n	80037c0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b0:	f043 0220 	orr.w	r2, r3, #32
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80037be:	e000      	b.n	80037c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80037ca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3784      	adds	r7, #132	@ 0x84
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd90      	pop	{r4, r7, pc}
 80037d6:	bf00      	nop
 80037d8:	50000100 	.word	0x50000100
 80037dc:	50000400 	.word	0x50000400
 80037e0:	50000500 	.word	0x50000500
 80037e4:	50000300 	.word	0x50000300
 80037e8:	50000700 	.word	0x50000700
 80037ec:	50000600 	.word	0x50000600

080037f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003800:	4b0c      	ldr	r3, [pc, #48]	@ (8003834 <__NVIC_SetPriorityGrouping+0x44>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800380c:	4013      	ands	r3, r2
 800380e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003818:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800381c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003822:	4a04      	ldr	r2, [pc, #16]	@ (8003834 <__NVIC_SetPriorityGrouping+0x44>)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	60d3      	str	r3, [r2, #12]
}
 8003828:	bf00      	nop
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	e000ed00 	.word	0xe000ed00

08003838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800383c:	4b04      	ldr	r3, [pc, #16]	@ (8003850 <__NVIC_GetPriorityGrouping+0x18>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	0a1b      	lsrs	r3, r3, #8
 8003842:	f003 0307 	and.w	r3, r3, #7
}
 8003846:	4618      	mov	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	e000ed00 	.word	0xe000ed00

08003854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800385e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003862:	2b00      	cmp	r3, #0
 8003864:	db0b      	blt.n	800387e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	f003 021f 	and.w	r2, r3, #31
 800386c:	4907      	ldr	r1, [pc, #28]	@ (800388c <__NVIC_EnableIRQ+0x38>)
 800386e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003872:	095b      	lsrs	r3, r3, #5
 8003874:	2001      	movs	r0, #1
 8003876:	fa00 f202 	lsl.w	r2, r0, r2
 800387a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	e000e100 	.word	0xe000e100

08003890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	6039      	str	r1, [r7, #0]
 800389a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800389c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	db0a      	blt.n	80038ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	490c      	ldr	r1, [pc, #48]	@ (80038dc <__NVIC_SetPriority+0x4c>)
 80038aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ae:	0112      	lsls	r2, r2, #4
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	440b      	add	r3, r1
 80038b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038b8:	e00a      	b.n	80038d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	4908      	ldr	r1, [pc, #32]	@ (80038e0 <__NVIC_SetPriority+0x50>)
 80038c0:	79fb      	ldrb	r3, [r7, #7]
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	3b04      	subs	r3, #4
 80038c8:	0112      	lsls	r2, r2, #4
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	440b      	add	r3, r1
 80038ce:	761a      	strb	r2, [r3, #24]
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	e000e100 	.word	0xe000e100
 80038e0:	e000ed00 	.word	0xe000ed00

080038e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b089      	sub	sp, #36	@ 0x24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f1c3 0307 	rsb	r3, r3, #7
 80038fe:	2b04      	cmp	r3, #4
 8003900:	bf28      	it	cs
 8003902:	2304      	movcs	r3, #4
 8003904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	3304      	adds	r3, #4
 800390a:	2b06      	cmp	r3, #6
 800390c:	d902      	bls.n	8003914 <NVIC_EncodePriority+0x30>
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	3b03      	subs	r3, #3
 8003912:	e000      	b.n	8003916 <NVIC_EncodePriority+0x32>
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003918:	f04f 32ff 	mov.w	r2, #4294967295
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	43da      	mvns	r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	401a      	ands	r2, r3
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800392c:	f04f 31ff 	mov.w	r1, #4294967295
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	fa01 f303 	lsl.w	r3, r1, r3
 8003936:	43d9      	mvns	r1, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800393c:	4313      	orrs	r3, r2
         );
}
 800393e:	4618      	mov	r0, r3
 8003940:	3724      	adds	r7, #36	@ 0x24
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
	...

0800394c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3b01      	subs	r3, #1
 8003958:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800395c:	d301      	bcc.n	8003962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800395e:	2301      	movs	r3, #1
 8003960:	e00f      	b.n	8003982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003962:	4a0a      	ldr	r2, [pc, #40]	@ (800398c <SysTick_Config+0x40>)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3b01      	subs	r3, #1
 8003968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800396a:	210f      	movs	r1, #15
 800396c:	f04f 30ff 	mov.w	r0, #4294967295
 8003970:	f7ff ff8e 	bl	8003890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003974:	4b05      	ldr	r3, [pc, #20]	@ (800398c <SysTick_Config+0x40>)
 8003976:	2200      	movs	r2, #0
 8003978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800397a:	4b04      	ldr	r3, [pc, #16]	@ (800398c <SysTick_Config+0x40>)
 800397c:	2207      	movs	r2, #7
 800397e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	e000e010 	.word	0xe000e010

08003990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7ff ff29 	bl	80037f0 <__NVIC_SetPriorityGrouping>
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b086      	sub	sp, #24
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	4603      	mov	r3, r0
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	607a      	str	r2, [r7, #4]
 80039b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039b4:	f7ff ff40 	bl	8003838 <__NVIC_GetPriorityGrouping>
 80039b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	68b9      	ldr	r1, [r7, #8]
 80039be:	6978      	ldr	r0, [r7, #20]
 80039c0:	f7ff ff90 	bl	80038e4 <NVIC_EncodePriority>
 80039c4:	4602      	mov	r2, r0
 80039c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ca:	4611      	mov	r1, r2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff ff5f 	bl	8003890 <__NVIC_SetPriority>
}
 80039d2:	bf00      	nop
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b082      	sub	sp, #8
 80039de:	af00      	add	r7, sp, #0
 80039e0:	4603      	mov	r3, r0
 80039e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff ff33 	bl	8003854 <__NVIC_EnableIRQ>
}
 80039ee:	bf00      	nop
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b082      	sub	sp, #8
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7ff ffa4 	bl	800394c <SysTick_Config>
 8003a04:	4603      	mov	r3, r0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b085      	sub	sp, #20
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d005      	beq.n	8003a32 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2204      	movs	r2, #4
 8003a2a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	73fb      	strb	r3, [r7, #15]
 8003a30:	e037      	b.n	8003aa2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 020e 	bic.w	r2, r2, #14
 8003a40:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a50:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0201 	bic.w	r2, r2, #1
 8003a60:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a66:	f003 021f 	and.w	r2, r3, #31
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6e:	2101      	movs	r1, #1
 8003a70:	fa01 f202 	lsl.w	r2, r1, r2
 8003a74:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a7e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00c      	beq.n	8003aa2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a92:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a96:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003aa0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d00d      	beq.n	8003af4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2204      	movs	r2, #4
 8003adc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	73fb      	strb	r3, [r7, #15]
 8003af2:	e047      	b.n	8003b84 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 020e 	bic.w	r2, r2, #14
 8003b02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0201 	bic.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b1e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b28:	f003 021f 	and.w	r2, r3, #31
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b30:	2101      	movs	r1, #1
 8003b32:	fa01 f202 	lsl.w	r2, r1, r2
 8003b36:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b40:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00c      	beq.n	8003b64 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b58:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003b62:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d003      	beq.n	8003b84 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	4798      	blx	r3
    }
  }
  return status;
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
	...

08003b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b9e:	e15a      	b.n	8003e56 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bac:	4013      	ands	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 814c 	beq.w	8003e50 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f003 0303 	and.w	r3, r3, #3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d005      	beq.n	8003bd0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d130      	bne.n	8003c32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	2203      	movs	r2, #3
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	43db      	mvns	r3, r3
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4013      	ands	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c06:	2201      	movs	r2, #1
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	43db      	mvns	r3, r3
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4013      	ands	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	091b      	lsrs	r3, r3, #4
 8003c1c:	f003 0201 	and.w	r2, r3, #1
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	2b03      	cmp	r3, #3
 8003c3c:	d017      	beq.n	8003c6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	2203      	movs	r2, #3
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4013      	ands	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d123      	bne.n	8003cc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	08da      	lsrs	r2, r3, #3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3208      	adds	r2, #8
 8003c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f003 0307 	and.w	r3, r3, #7
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	220f      	movs	r2, #15
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	43db      	mvns	r3, r3
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	691a      	ldr	r2, [r3, #16]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	08da      	lsrs	r2, r3, #3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3208      	adds	r2, #8
 8003cbc:	6939      	ldr	r1, [r7, #16]
 8003cbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	2203      	movs	r2, #3
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f003 0203 	and.w	r2, r3, #3
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f000 80a6 	beq.w	8003e50 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d04:	4b5b      	ldr	r3, [pc, #364]	@ (8003e74 <HAL_GPIO_Init+0x2e4>)
 8003d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d08:	4a5a      	ldr	r2, [pc, #360]	@ (8003e74 <HAL_GPIO_Init+0x2e4>)
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d10:	4b58      	ldr	r3, [pc, #352]	@ (8003e74 <HAL_GPIO_Init+0x2e4>)
 8003d12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	60bb      	str	r3, [r7, #8]
 8003d1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d1c:	4a56      	ldr	r2, [pc, #344]	@ (8003e78 <HAL_GPIO_Init+0x2e8>)
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	089b      	lsrs	r3, r3, #2
 8003d22:	3302      	adds	r3, #2
 8003d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f003 0303 	and.w	r3, r3, #3
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	220f      	movs	r2, #15
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d46:	d01f      	beq.n	8003d88 <HAL_GPIO_Init+0x1f8>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a4c      	ldr	r2, [pc, #304]	@ (8003e7c <HAL_GPIO_Init+0x2ec>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d019      	beq.n	8003d84 <HAL_GPIO_Init+0x1f4>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a4b      	ldr	r2, [pc, #300]	@ (8003e80 <HAL_GPIO_Init+0x2f0>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d013      	beq.n	8003d80 <HAL_GPIO_Init+0x1f0>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a4a      	ldr	r2, [pc, #296]	@ (8003e84 <HAL_GPIO_Init+0x2f4>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00d      	beq.n	8003d7c <HAL_GPIO_Init+0x1ec>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a49      	ldr	r2, [pc, #292]	@ (8003e88 <HAL_GPIO_Init+0x2f8>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d007      	beq.n	8003d78 <HAL_GPIO_Init+0x1e8>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a48      	ldr	r2, [pc, #288]	@ (8003e8c <HAL_GPIO_Init+0x2fc>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d101      	bne.n	8003d74 <HAL_GPIO_Init+0x1e4>
 8003d70:	2305      	movs	r3, #5
 8003d72:	e00a      	b.n	8003d8a <HAL_GPIO_Init+0x1fa>
 8003d74:	2306      	movs	r3, #6
 8003d76:	e008      	b.n	8003d8a <HAL_GPIO_Init+0x1fa>
 8003d78:	2304      	movs	r3, #4
 8003d7a:	e006      	b.n	8003d8a <HAL_GPIO_Init+0x1fa>
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e004      	b.n	8003d8a <HAL_GPIO_Init+0x1fa>
 8003d80:	2302      	movs	r3, #2
 8003d82:	e002      	b.n	8003d8a <HAL_GPIO_Init+0x1fa>
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <HAL_GPIO_Init+0x1fa>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	f002 0203 	and.w	r2, r2, #3
 8003d90:	0092      	lsls	r2, r2, #2
 8003d92:	4093      	lsls	r3, r2
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d9a:	4937      	ldr	r1, [pc, #220]	@ (8003e78 <HAL_GPIO_Init+0x2e8>)
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	089b      	lsrs	r3, r3, #2
 8003da0:	3302      	adds	r3, #2
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003da8:	4b39      	ldr	r3, [pc, #228]	@ (8003e90 <HAL_GPIO_Init+0x300>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	43db      	mvns	r3, r3
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4013      	ands	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003dcc:	4a30      	ldr	r2, [pc, #192]	@ (8003e90 <HAL_GPIO_Init+0x300>)
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8003e90 <HAL_GPIO_Init+0x300>)
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	4013      	ands	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003df6:	4a26      	ldr	r2, [pc, #152]	@ (8003e90 <HAL_GPIO_Init+0x300>)
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003dfc:	4b24      	ldr	r3, [pc, #144]	@ (8003e90 <HAL_GPIO_Init+0x300>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	43db      	mvns	r3, r3
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e20:	4a1b      	ldr	r2, [pc, #108]	@ (8003e90 <HAL_GPIO_Init+0x300>)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e26:	4b1a      	ldr	r3, [pc, #104]	@ (8003e90 <HAL_GPIO_Init+0x300>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	4013      	ands	r3, r2
 8003e34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e4a:	4a11      	ldr	r2, [pc, #68]	@ (8003e90 <HAL_GPIO_Init+0x300>)
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	3301      	adds	r3, #1
 8003e54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f47f ae9d 	bne.w	8003ba0 <HAL_GPIO_Init+0x10>
  }
}
 8003e66:	bf00      	nop
 8003e68:	bf00      	nop
 8003e6a:	371c      	adds	r7, #28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	40021000 	.word	0x40021000
 8003e78:	40010000 	.word	0x40010000
 8003e7c:	48000400 	.word	0x48000400
 8003e80:	48000800 	.word	0x48000800
 8003e84:	48000c00 	.word	0x48000c00
 8003e88:	48001000 	.word	0x48001000
 8003e8c:	48001400 	.word	0x48001400
 8003e90:	40010400 	.word	0x40010400

08003e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	807b      	strh	r3, [r7, #2]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ea4:	787b      	ldrb	r3, [r7, #1]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003eaa:	887a      	ldrh	r2, [r7, #2]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003eb0:	e002      	b.n	8003eb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003eb2:	887a      	ldrh	r2, [r7, #2]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	4603      	mov	r3, r0
 8003ecc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ece:	4b08      	ldr	r3, [pc, #32]	@ (8003ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ed0:	695a      	ldr	r2, [r3, #20]
 8003ed2:	88fb      	ldrh	r3, [r7, #6]
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d006      	beq.n	8003ee8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003eda:	4a05      	ldr	r2, [pc, #20]	@ (8003ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003edc:	88fb      	ldrh	r3, [r7, #6]
 8003ede:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ee0:	88fb      	ldrh	r3, [r7, #6]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 f806 	bl	8003ef4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ee8:	bf00      	nop
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40010400 	.word	0x40010400

08003ef4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	4603      	mov	r3, r0
 8003efc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
	...

08003f0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d141      	bne.n	8003f9e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f1a:	4b4b      	ldr	r3, [pc, #300]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f26:	d131      	bne.n	8003f8c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f28:	4b47      	ldr	r3, [pc, #284]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f2e:	4a46      	ldr	r2, [pc, #280]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f38:	4b43      	ldr	r3, [pc, #268]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f40:	4a41      	ldr	r2, [pc, #260]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f48:	4b40      	ldr	r3, [pc, #256]	@ (800404c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2232      	movs	r2, #50	@ 0x32
 8003f4e:	fb02 f303 	mul.w	r3, r2, r3
 8003f52:	4a3f      	ldr	r2, [pc, #252]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f54:	fba2 2303 	umull	r2, r3, r2, r3
 8003f58:	0c9b      	lsrs	r3, r3, #18
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f5e:	e002      	b.n	8003f66 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	3b01      	subs	r3, #1
 8003f64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f66:	4b38      	ldr	r3, [pc, #224]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f72:	d102      	bne.n	8003f7a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f2      	bne.n	8003f60 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f7a:	4b33      	ldr	r3, [pc, #204]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f86:	d158      	bne.n	800403a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e057      	b.n	800403c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f8c:	4b2e      	ldr	r3, [pc, #184]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f92:	4a2d      	ldr	r2, [pc, #180]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003f9c:	e04d      	b.n	800403a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fa4:	d141      	bne.n	800402a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fa6:	4b28      	ldr	r3, [pc, #160]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003fae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fb2:	d131      	bne.n	8004018 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fb4:	4b24      	ldr	r3, [pc, #144]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fba:	4a23      	ldr	r2, [pc, #140]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fc4:	4b20      	ldr	r3, [pc, #128]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003fcc:	4a1e      	ldr	r2, [pc, #120]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fd2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800404c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2232      	movs	r2, #50	@ 0x32
 8003fda:	fb02 f303 	mul.w	r3, r2, r3
 8003fde:	4a1c      	ldr	r2, [pc, #112]	@ (8004050 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe4:	0c9b      	lsrs	r3, r3, #18
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fea:	e002      	b.n	8003ff2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ff2:	4b15      	ldr	r3, [pc, #84]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ffe:	d102      	bne.n	8004006 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f2      	bne.n	8003fec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004006:	4b10      	ldr	r3, [pc, #64]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800400e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004012:	d112      	bne.n	800403a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e011      	b.n	800403c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004018:	4b0b      	ldr	r3, [pc, #44]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800401a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800401e:	4a0a      	ldr	r2, [pc, #40]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004020:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004024:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004028:	e007      	b.n	800403a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800402a:	4b07      	ldr	r3, [pc, #28]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004032:	4a05      	ldr	r2, [pc, #20]	@ (8004048 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004034:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004038:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	40007000 	.word	0x40007000
 800404c:	20000048 	.word	0x20000048
 8004050:	431bde83 	.word	0x431bde83

08004054 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004058:	4b05      	ldr	r3, [pc, #20]	@ (8004070 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	4a04      	ldr	r2, [pc, #16]	@ (8004070 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800405e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004062:	6093      	str	r3, [r2, #8]
}
 8004064:	bf00      	nop
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	40007000 	.word	0x40007000

08004074 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e2fe      	b.n	8004684 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d075      	beq.n	800417e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004092:	4b97      	ldr	r3, [pc, #604]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 030c 	and.w	r3, r3, #12
 800409a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800409c:	4b94      	ldr	r3, [pc, #592]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	f003 0303 	and.w	r3, r3, #3
 80040a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	2b0c      	cmp	r3, #12
 80040aa:	d102      	bne.n	80040b2 <HAL_RCC_OscConfig+0x3e>
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	d002      	beq.n	80040b8 <HAL_RCC_OscConfig+0x44>
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d10b      	bne.n	80040d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b8:	4b8d      	ldr	r3, [pc, #564]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d05b      	beq.n	800417c <HAL_RCC_OscConfig+0x108>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d157      	bne.n	800417c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e2d9      	b.n	8004684 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040d8:	d106      	bne.n	80040e8 <HAL_RCC_OscConfig+0x74>
 80040da:	4b85      	ldr	r3, [pc, #532]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a84      	ldr	r2, [pc, #528]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 80040e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	e01d      	b.n	8004124 <HAL_RCC_OscConfig+0xb0>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040f0:	d10c      	bne.n	800410c <HAL_RCC_OscConfig+0x98>
 80040f2:	4b7f      	ldr	r3, [pc, #508]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a7e      	ldr	r2, [pc, #504]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 80040f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	4b7c      	ldr	r3, [pc, #496]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a7b      	ldr	r2, [pc, #492]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 8004104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	e00b      	b.n	8004124 <HAL_RCC_OscConfig+0xb0>
 800410c:	4b78      	ldr	r3, [pc, #480]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a77      	ldr	r2, [pc, #476]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 8004112:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	4b75      	ldr	r3, [pc, #468]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a74      	ldr	r2, [pc, #464]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 800411e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004122:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d013      	beq.n	8004154 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412c:	f7fd fd44 	bl	8001bb8 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004134:	f7fd fd40 	bl	8001bb8 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b64      	cmp	r3, #100	@ 0x64
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e29e      	b.n	8004684 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004146:	4b6a      	ldr	r3, [pc, #424]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0f0      	beq.n	8004134 <HAL_RCC_OscConfig+0xc0>
 8004152:	e014      	b.n	800417e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004154:	f7fd fd30 	bl	8001bb8 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800415a:	e008      	b.n	800416e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800415c:	f7fd fd2c 	bl	8001bb8 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b64      	cmp	r3, #100	@ 0x64
 8004168:	d901      	bls.n	800416e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e28a      	b.n	8004684 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800416e:	4b60      	ldr	r3, [pc, #384]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1f0      	bne.n	800415c <HAL_RCC_OscConfig+0xe8>
 800417a:	e000      	b.n	800417e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800417c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d075      	beq.n	8004276 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800418a:	4b59      	ldr	r3, [pc, #356]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 030c 	and.w	r3, r3, #12
 8004192:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004194:	4b56      	ldr	r3, [pc, #344]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0303 	and.w	r3, r3, #3
 800419c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	2b0c      	cmp	r3, #12
 80041a2:	d102      	bne.n	80041aa <HAL_RCC_OscConfig+0x136>
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d002      	beq.n	80041b0 <HAL_RCC_OscConfig+0x13c>
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d11f      	bne.n	80041f0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041b0:	4b4f      	ldr	r3, [pc, #316]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d005      	beq.n	80041c8 <HAL_RCC_OscConfig+0x154>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e25d      	b.n	8004684 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041c8:	4b49      	ldr	r3, [pc, #292]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	061b      	lsls	r3, r3, #24
 80041d6:	4946      	ldr	r1, [pc, #280]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80041dc:	4b45      	ldr	r3, [pc, #276]	@ (80042f4 <HAL_RCC_OscConfig+0x280>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7fd fc9d 	bl	8001b20 <HAL_InitTick>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d043      	beq.n	8004274 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e249      	b.n	8004684 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d023      	beq.n	8004240 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041f8:	4b3d      	ldr	r3, [pc, #244]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a3c      	ldr	r2, [pc, #240]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 80041fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004204:	f7fd fcd8 	bl	8001bb8 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800420c:	f7fd fcd4 	bl	8001bb8 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b02      	cmp	r3, #2
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e232      	b.n	8004684 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800421e:	4b34      	ldr	r3, [pc, #208]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0f0      	beq.n	800420c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800422a:	4b31      	ldr	r3, [pc, #196]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	061b      	lsls	r3, r3, #24
 8004238:	492d      	ldr	r1, [pc, #180]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 800423a:	4313      	orrs	r3, r2
 800423c:	604b      	str	r3, [r1, #4]
 800423e:	e01a      	b.n	8004276 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004240:	4b2b      	ldr	r3, [pc, #172]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a2a      	ldr	r2, [pc, #168]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 8004246:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800424a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7fd fcb4 	bl	8001bb8 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004254:	f7fd fcb0 	bl	8001bb8 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e20e      	b.n	8004684 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004266:	4b22      	ldr	r3, [pc, #136]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1f0      	bne.n	8004254 <HAL_RCC_OscConfig+0x1e0>
 8004272:	e000      	b.n	8004276 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004274:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	2b00      	cmp	r3, #0
 8004280:	d041      	beq.n	8004306 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d01c      	beq.n	80042c4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800428a:	4b19      	ldr	r3, [pc, #100]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 800428c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004290:	4a17      	ldr	r2, [pc, #92]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 8004292:	f043 0301 	orr.w	r3, r3, #1
 8004296:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429a:	f7fd fc8d 	bl	8001bb8 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042a2:	f7fd fc89 	bl	8001bb8 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e1e7      	b.n	8004684 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042b4:	4b0e      	ldr	r3, [pc, #56]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 80042b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0ef      	beq.n	80042a2 <HAL_RCC_OscConfig+0x22e>
 80042c2:	e020      	b.n	8004306 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042c4:	4b0a      	ldr	r3, [pc, #40]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 80042c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042ca:	4a09      	ldr	r2, [pc, #36]	@ (80042f0 <HAL_RCC_OscConfig+0x27c>)
 80042cc:	f023 0301 	bic.w	r3, r3, #1
 80042d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d4:	f7fd fc70 	bl	8001bb8 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042da:	e00d      	b.n	80042f8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042dc:	f7fd fc6c 	bl	8001bb8 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d906      	bls.n	80042f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e1ca      	b.n	8004684 <HAL_RCC_OscConfig+0x610>
 80042ee:	bf00      	nop
 80042f0:	40021000 	.word	0x40021000
 80042f4:	2000004c 	.word	0x2000004c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042f8:	4b8c      	ldr	r3, [pc, #560]	@ (800452c <HAL_RCC_OscConfig+0x4b8>)
 80042fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1ea      	bne.n	80042dc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0304 	and.w	r3, r3, #4
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 80a6 	beq.w	8004460 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004314:	2300      	movs	r3, #0
 8004316:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004318:	4b84      	ldr	r3, [pc, #528]	@ (800452c <HAL_RCC_OscConfig+0x4b8>)
 800431a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800431c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_RCC_OscConfig+0x2b4>
 8004324:	2301      	movs	r3, #1
 8004326:	e000      	b.n	800432a <HAL_RCC_OscConfig+0x2b6>
 8004328:	2300      	movs	r3, #0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00d      	beq.n	800434a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800432e:	4b7f      	ldr	r3, [pc, #508]	@ (800452c <HAL_RCC_OscConfig+0x4b8>)
 8004330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004332:	4a7e      	ldr	r2, [pc, #504]	@ (800452c <HAL_RCC_OscConfig+0x4b8>)
 8004334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004338:	6593      	str	r3, [r2, #88]	@ 0x58
 800433a:	4b7c      	ldr	r3, [pc, #496]	@ (800452c <HAL_RCC_OscConfig+0x4b8>)
 800433c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800433e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004346:	2301      	movs	r3, #1
 8004348:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800434a:	4b79      	ldr	r3, [pc, #484]	@ (8004530 <HAL_RCC_OscConfig+0x4bc>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004352:	2b00      	cmp	r3, #0
 8004354:	d118      	bne.n	8004388 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004356:	4b76      	ldr	r3, [pc, #472]	@ (8004530 <HAL_RCC_OscConfig+0x4bc>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a75      	ldr	r2, [pc, #468]	@ (8004530 <HAL_RCC_OscConfig+0x4bc>)
 800435c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004362:	f7fd fc29 	bl	8001bb8 <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004368:	e008      	b.n	800437c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800436a:	f7fd fc25 	bl	8001bb8 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e183      	b.n	8004684 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800437c:	4b6c      	ldr	r3, [pc, #432]	@ (8004530 <HAL_RCC_OscConfig+0x4bc>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0f0      	beq.n	800436a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d108      	bne.n	80043a2 <HAL_RCC_OscConfig+0x32e>
 8004390:	4b66      	ldr	r3, [pc, #408]	@ (800452c <HAL_RCC_OscConfig+0x4b8>)
 8004392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004396:	4a65      	ldr	r2, [pc, #404]	@ (800452c <HAL_RCC_OscConfig+0x4b8>)
 8004398:	f043 0301 	orr.w	r3, r3, #1
 800439c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043a0:	e024      	b.n	80043ec <HAL_RCC_OscConfig+0x378>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	2b05      	cmp	r3, #5
 80043a8:	d110      	bne.n	80043cc <HAL_RCC_OscConfig+0x358>
 80043aa:	4b60      	ldr	r3, [pc, #384]	@ (800452c <HAL_RCC_OscConfig+0x4b8>)
 80043ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b0:	4a5e      	ldr	r2, [pc, #376]	@ (800452c <HAL_RCC_OscConfig+0x4b8>)
 80043b2:	f043 0304 	orr.w	r3, r3, #4
 80043b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043ba:	4b5c      	ldr	r3, [pc, #368]	@ (800452c <HAL_RCC_OscConfig+0x4b8>)
 80043bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043c0:	4a5a      	ldr	r2, [pc, #360]	@ (800452c <HAL_RCC_OscConfig+0x4b8>)
 80043c2:	f043 0301 	orr.w	r3, r3, #1
 80043c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043ca:	e00f      	b.n	80043ec <HAL_RCC_OscConfig+0x378>
 80043cc:	4b57      	ldr	r3, [pc, #348]	@ (800452c <HAL_RCC_OscConfig+0x4b8>)
 80043ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043d2:	4a56      	ldr	r2, [pc, #344]	@ (800452c <HAL_RCC_OscConfig+0x4b8>)
 80043d4:	f023 0301 	bic.w	r3, r3, #1
 80043d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043dc:	4b53      	ldr	r3, [pc, #332]	@ (800452c <HAL_RCC_OscConfig+0x4b8>)
 80043de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043e2:	4a52      	ldr	r2, [pc, #328]	@ (800452c <HAL_RCC_OscConfig+0x4b8>)
 80043e4:	f023 0304 	bic.w	r3, r3, #4
 80043e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d016      	beq.n	8004422 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f4:	f7fd fbe0 	bl	8001bb8 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043fa:	e00a      	b.n	8004412 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043fc:	f7fd fbdc 	bl	8001bb8 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800440a:	4293      	cmp	r3, r2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e138      	b.n	8004684 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004412:	4b46      	ldr	r3, [pc, #280]	@ (800452c <HAL_RCC_OscConfig+0x4b8>)
 8004414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0ed      	beq.n	80043fc <HAL_RCC_OscConfig+0x388>
 8004420:	e015      	b.n	800444e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004422:	f7fd fbc9 	bl	8001bb8 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004428:	e00a      	b.n	8004440 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800442a:	f7fd fbc5 	bl	8001bb8 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004438:	4293      	cmp	r3, r2
 800443a:	d901      	bls.n	8004440 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e121      	b.n	8004684 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004440:	4b3a      	ldr	r3, [pc, #232]	@ (800452c <HAL_RCC_OscConfig+0x4b8>)
 8004442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1ed      	bne.n	800442a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800444e:	7ffb      	ldrb	r3, [r7, #31]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d105      	bne.n	8004460 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004454:	4b35      	ldr	r3, [pc, #212]	@ (800452c <HAL_RCC_OscConfig+0x4b8>)
 8004456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004458:	4a34      	ldr	r2, [pc, #208]	@ (800452c <HAL_RCC_OscConfig+0x4b8>)
 800445a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800445e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0320 	and.w	r3, r3, #32
 8004468:	2b00      	cmp	r3, #0
 800446a:	d03c      	beq.n	80044e6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d01c      	beq.n	80044ae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004474:	4b2d      	ldr	r3, [pc, #180]	@ (800452c <HAL_RCC_OscConfig+0x4b8>)
 8004476:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800447a:	4a2c      	ldr	r2, [pc, #176]	@ (800452c <HAL_RCC_OscConfig+0x4b8>)
 800447c:	f043 0301 	orr.w	r3, r3, #1
 8004480:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004484:	f7fd fb98 	bl	8001bb8 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800448c:	f7fd fb94 	bl	8001bb8 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e0f2      	b.n	8004684 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800449e:	4b23      	ldr	r3, [pc, #140]	@ (800452c <HAL_RCC_OscConfig+0x4b8>)
 80044a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0ef      	beq.n	800448c <HAL_RCC_OscConfig+0x418>
 80044ac:	e01b      	b.n	80044e6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80044ae:	4b1f      	ldr	r3, [pc, #124]	@ (800452c <HAL_RCC_OscConfig+0x4b8>)
 80044b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044b4:	4a1d      	ldr	r2, [pc, #116]	@ (800452c <HAL_RCC_OscConfig+0x4b8>)
 80044b6:	f023 0301 	bic.w	r3, r3, #1
 80044ba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044be:	f7fd fb7b 	bl	8001bb8 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044c6:	f7fd fb77 	bl	8001bb8 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e0d5      	b.n	8004684 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044d8:	4b14      	ldr	r3, [pc, #80]	@ (800452c <HAL_RCC_OscConfig+0x4b8>)
 80044da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1ef      	bne.n	80044c6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 80c9 	beq.w	8004682 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044f0:	4b0e      	ldr	r3, [pc, #56]	@ (800452c <HAL_RCC_OscConfig+0x4b8>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f003 030c 	and.w	r3, r3, #12
 80044f8:	2b0c      	cmp	r3, #12
 80044fa:	f000 8083 	beq.w	8004604 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	2b02      	cmp	r3, #2
 8004504:	d15e      	bne.n	80045c4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004506:	4b09      	ldr	r3, [pc, #36]	@ (800452c <HAL_RCC_OscConfig+0x4b8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a08      	ldr	r2, [pc, #32]	@ (800452c <HAL_RCC_OscConfig+0x4b8>)
 800450c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004512:	f7fd fb51 	bl	8001bb8 <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004518:	e00c      	b.n	8004534 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800451a:	f7fd fb4d 	bl	8001bb8 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d905      	bls.n	8004534 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e0ab      	b.n	8004684 <HAL_RCC_OscConfig+0x610>
 800452c:	40021000 	.word	0x40021000
 8004530:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004534:	4b55      	ldr	r3, [pc, #340]	@ (800468c <HAL_RCC_OscConfig+0x618>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1ec      	bne.n	800451a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004540:	4b52      	ldr	r3, [pc, #328]	@ (800468c <HAL_RCC_OscConfig+0x618>)
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	4b52      	ldr	r3, [pc, #328]	@ (8004690 <HAL_RCC_OscConfig+0x61c>)
 8004546:	4013      	ands	r3, r2
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6a11      	ldr	r1, [r2, #32]
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004550:	3a01      	subs	r2, #1
 8004552:	0112      	lsls	r2, r2, #4
 8004554:	4311      	orrs	r1, r2
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800455a:	0212      	lsls	r2, r2, #8
 800455c:	4311      	orrs	r1, r2
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004562:	0852      	lsrs	r2, r2, #1
 8004564:	3a01      	subs	r2, #1
 8004566:	0552      	lsls	r2, r2, #21
 8004568:	4311      	orrs	r1, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800456e:	0852      	lsrs	r2, r2, #1
 8004570:	3a01      	subs	r2, #1
 8004572:	0652      	lsls	r2, r2, #25
 8004574:	4311      	orrs	r1, r2
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800457a:	06d2      	lsls	r2, r2, #27
 800457c:	430a      	orrs	r2, r1
 800457e:	4943      	ldr	r1, [pc, #268]	@ (800468c <HAL_RCC_OscConfig+0x618>)
 8004580:	4313      	orrs	r3, r2
 8004582:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004584:	4b41      	ldr	r3, [pc, #260]	@ (800468c <HAL_RCC_OscConfig+0x618>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a40      	ldr	r2, [pc, #256]	@ (800468c <HAL_RCC_OscConfig+0x618>)
 800458a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800458e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004590:	4b3e      	ldr	r3, [pc, #248]	@ (800468c <HAL_RCC_OscConfig+0x618>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	4a3d      	ldr	r2, [pc, #244]	@ (800468c <HAL_RCC_OscConfig+0x618>)
 8004596:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800459a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fd fb0c 	bl	8001bb8 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a4:	f7fd fb08 	bl	8001bb8 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e066      	b.n	8004684 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045b6:	4b35      	ldr	r3, [pc, #212]	@ (800468c <HAL_RCC_OscConfig+0x618>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f0      	beq.n	80045a4 <HAL_RCC_OscConfig+0x530>
 80045c2:	e05e      	b.n	8004682 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045c4:	4b31      	ldr	r3, [pc, #196]	@ (800468c <HAL_RCC_OscConfig+0x618>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a30      	ldr	r2, [pc, #192]	@ (800468c <HAL_RCC_OscConfig+0x618>)
 80045ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d0:	f7fd faf2 	bl	8001bb8 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d8:	f7fd faee 	bl	8001bb8 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e04c      	b.n	8004684 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045ea:	4b28      	ldr	r3, [pc, #160]	@ (800468c <HAL_RCC_OscConfig+0x618>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f0      	bne.n	80045d8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80045f6:	4b25      	ldr	r3, [pc, #148]	@ (800468c <HAL_RCC_OscConfig+0x618>)
 80045f8:	68da      	ldr	r2, [r3, #12]
 80045fa:	4924      	ldr	r1, [pc, #144]	@ (800468c <HAL_RCC_OscConfig+0x618>)
 80045fc:	4b25      	ldr	r3, [pc, #148]	@ (8004694 <HAL_RCC_OscConfig+0x620>)
 80045fe:	4013      	ands	r3, r2
 8004600:	60cb      	str	r3, [r1, #12]
 8004602:	e03e      	b.n	8004682 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d101      	bne.n	8004610 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e039      	b.n	8004684 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004610:	4b1e      	ldr	r3, [pc, #120]	@ (800468c <HAL_RCC_OscConfig+0x618>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f003 0203 	and.w	r2, r3, #3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	429a      	cmp	r2, r3
 8004622:	d12c      	bne.n	800467e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462e:	3b01      	subs	r3, #1
 8004630:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004632:	429a      	cmp	r2, r3
 8004634:	d123      	bne.n	800467e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004640:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004642:	429a      	cmp	r2, r3
 8004644:	d11b      	bne.n	800467e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004650:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004652:	429a      	cmp	r2, r3
 8004654:	d113      	bne.n	800467e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004660:	085b      	lsrs	r3, r3, #1
 8004662:	3b01      	subs	r3, #1
 8004664:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004666:	429a      	cmp	r2, r3
 8004668:	d109      	bne.n	800467e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004674:	085b      	lsrs	r3, r3, #1
 8004676:	3b01      	subs	r3, #1
 8004678:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800467a:	429a      	cmp	r2, r3
 800467c:	d001      	beq.n	8004682 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e000      	b.n	8004684 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3720      	adds	r7, #32
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	40021000 	.word	0x40021000
 8004690:	019f800c 	.word	0x019f800c
 8004694:	feeefffc 	.word	0xfeeefffc

08004698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80046a2:	2300      	movs	r3, #0
 80046a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e11e      	b.n	80048ee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046b0:	4b91      	ldr	r3, [pc, #580]	@ (80048f8 <HAL_RCC_ClockConfig+0x260>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 030f 	and.w	r3, r3, #15
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d910      	bls.n	80046e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046be:	4b8e      	ldr	r3, [pc, #568]	@ (80048f8 <HAL_RCC_ClockConfig+0x260>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f023 020f 	bic.w	r2, r3, #15
 80046c6:	498c      	ldr	r1, [pc, #560]	@ (80048f8 <HAL_RCC_ClockConfig+0x260>)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ce:	4b8a      	ldr	r3, [pc, #552]	@ (80048f8 <HAL_RCC_ClockConfig+0x260>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d001      	beq.n	80046e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e106      	b.n	80048ee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d073      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b03      	cmp	r3, #3
 80046f2:	d129      	bne.n	8004748 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046f4:	4b81      	ldr	r3, [pc, #516]	@ (80048fc <HAL_RCC_ClockConfig+0x264>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d101      	bne.n	8004704 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e0f4      	b.n	80048ee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004704:	f000 f99e 	bl	8004a44 <RCC_GetSysClockFreqFromPLLSource>
 8004708:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	4a7c      	ldr	r2, [pc, #496]	@ (8004900 <HAL_RCC_ClockConfig+0x268>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d93f      	bls.n	8004792 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004712:	4b7a      	ldr	r3, [pc, #488]	@ (80048fc <HAL_RCC_ClockConfig+0x264>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d009      	beq.n	8004732 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004726:	2b00      	cmp	r3, #0
 8004728:	d033      	beq.n	8004792 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800472e:	2b00      	cmp	r3, #0
 8004730:	d12f      	bne.n	8004792 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004732:	4b72      	ldr	r3, [pc, #456]	@ (80048fc <HAL_RCC_ClockConfig+0x264>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800473a:	4a70      	ldr	r2, [pc, #448]	@ (80048fc <HAL_RCC_ClockConfig+0x264>)
 800473c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004740:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004742:	2380      	movs	r3, #128	@ 0x80
 8004744:	617b      	str	r3, [r7, #20]
 8004746:	e024      	b.n	8004792 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2b02      	cmp	r3, #2
 800474e:	d107      	bne.n	8004760 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004750:	4b6a      	ldr	r3, [pc, #424]	@ (80048fc <HAL_RCC_ClockConfig+0x264>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d109      	bne.n	8004770 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e0c6      	b.n	80048ee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004760:	4b66      	ldr	r3, [pc, #408]	@ (80048fc <HAL_RCC_ClockConfig+0x264>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e0be      	b.n	80048ee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004770:	f000 f8ce 	bl	8004910 <HAL_RCC_GetSysClockFreq>
 8004774:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	4a61      	ldr	r2, [pc, #388]	@ (8004900 <HAL_RCC_ClockConfig+0x268>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d909      	bls.n	8004792 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800477e:	4b5f      	ldr	r3, [pc, #380]	@ (80048fc <HAL_RCC_ClockConfig+0x264>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004786:	4a5d      	ldr	r2, [pc, #372]	@ (80048fc <HAL_RCC_ClockConfig+0x264>)
 8004788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800478c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800478e:	2380      	movs	r3, #128	@ 0x80
 8004790:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004792:	4b5a      	ldr	r3, [pc, #360]	@ (80048fc <HAL_RCC_ClockConfig+0x264>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f023 0203 	bic.w	r2, r3, #3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	4957      	ldr	r1, [pc, #348]	@ (80048fc <HAL_RCC_ClockConfig+0x264>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047a4:	f7fd fa08 	bl	8001bb8 <HAL_GetTick>
 80047a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047aa:	e00a      	b.n	80047c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ac:	f7fd fa04 	bl	8001bb8 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e095      	b.n	80048ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c2:	4b4e      	ldr	r3, [pc, #312]	@ (80048fc <HAL_RCC_ClockConfig+0x264>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f003 020c 	and.w	r2, r3, #12
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d1eb      	bne.n	80047ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d023      	beq.n	8004828 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047ec:	4b43      	ldr	r3, [pc, #268]	@ (80048fc <HAL_RCC_ClockConfig+0x264>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	4a42      	ldr	r2, [pc, #264]	@ (80048fc <HAL_RCC_ClockConfig+0x264>)
 80047f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80047f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0308 	and.w	r3, r3, #8
 8004800:	2b00      	cmp	r3, #0
 8004802:	d007      	beq.n	8004814 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004804:	4b3d      	ldr	r3, [pc, #244]	@ (80048fc <HAL_RCC_ClockConfig+0x264>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800480c:	4a3b      	ldr	r2, [pc, #236]	@ (80048fc <HAL_RCC_ClockConfig+0x264>)
 800480e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004812:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004814:	4b39      	ldr	r3, [pc, #228]	@ (80048fc <HAL_RCC_ClockConfig+0x264>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	4936      	ldr	r1, [pc, #216]	@ (80048fc <HAL_RCC_ClockConfig+0x264>)
 8004822:	4313      	orrs	r3, r2
 8004824:	608b      	str	r3, [r1, #8]
 8004826:	e008      	b.n	800483a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	2b80      	cmp	r3, #128	@ 0x80
 800482c:	d105      	bne.n	800483a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800482e:	4b33      	ldr	r3, [pc, #204]	@ (80048fc <HAL_RCC_ClockConfig+0x264>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	4a32      	ldr	r2, [pc, #200]	@ (80048fc <HAL_RCC_ClockConfig+0x264>)
 8004834:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004838:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800483a:	4b2f      	ldr	r3, [pc, #188]	@ (80048f8 <HAL_RCC_ClockConfig+0x260>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d21d      	bcs.n	8004884 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004848:	4b2b      	ldr	r3, [pc, #172]	@ (80048f8 <HAL_RCC_ClockConfig+0x260>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f023 020f 	bic.w	r2, r3, #15
 8004850:	4929      	ldr	r1, [pc, #164]	@ (80048f8 <HAL_RCC_ClockConfig+0x260>)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	4313      	orrs	r3, r2
 8004856:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004858:	f7fd f9ae 	bl	8001bb8 <HAL_GetTick>
 800485c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800485e:	e00a      	b.n	8004876 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004860:	f7fd f9aa 	bl	8001bb8 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800486e:	4293      	cmp	r3, r2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e03b      	b.n	80048ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004876:	4b20      	ldr	r3, [pc, #128]	@ (80048f8 <HAL_RCC_ClockConfig+0x260>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 030f 	and.w	r3, r3, #15
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	429a      	cmp	r2, r3
 8004882:	d1ed      	bne.n	8004860 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b00      	cmp	r3, #0
 800488e:	d008      	beq.n	80048a2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004890:	4b1a      	ldr	r3, [pc, #104]	@ (80048fc <HAL_RCC_ClockConfig+0x264>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	4917      	ldr	r1, [pc, #92]	@ (80048fc <HAL_RCC_ClockConfig+0x264>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d009      	beq.n	80048c2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048ae:	4b13      	ldr	r3, [pc, #76]	@ (80048fc <HAL_RCC_ClockConfig+0x264>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	490f      	ldr	r1, [pc, #60]	@ (80048fc <HAL_RCC_ClockConfig+0x264>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048c2:	f000 f825 	bl	8004910 <HAL_RCC_GetSysClockFreq>
 80048c6:	4602      	mov	r2, r0
 80048c8:	4b0c      	ldr	r3, [pc, #48]	@ (80048fc <HAL_RCC_ClockConfig+0x264>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	091b      	lsrs	r3, r3, #4
 80048ce:	f003 030f 	and.w	r3, r3, #15
 80048d2:	490c      	ldr	r1, [pc, #48]	@ (8004904 <HAL_RCC_ClockConfig+0x26c>)
 80048d4:	5ccb      	ldrb	r3, [r1, r3]
 80048d6:	f003 031f 	and.w	r3, r3, #31
 80048da:	fa22 f303 	lsr.w	r3, r2, r3
 80048de:	4a0a      	ldr	r2, [pc, #40]	@ (8004908 <HAL_RCC_ClockConfig+0x270>)
 80048e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80048e2:	4b0a      	ldr	r3, [pc, #40]	@ (800490c <HAL_RCC_ClockConfig+0x274>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fd f91a 	bl	8001b20 <HAL_InitTick>
 80048ec:	4603      	mov	r3, r0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3718      	adds	r7, #24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	40022000 	.word	0x40022000
 80048fc:	40021000 	.word	0x40021000
 8004900:	04c4b400 	.word	0x04c4b400
 8004904:	08008b00 	.word	0x08008b00
 8004908:	20000048 	.word	0x20000048
 800490c:	2000004c 	.word	0x2000004c

08004910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004910:	b480      	push	{r7}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004916:	4b2c      	ldr	r3, [pc, #176]	@ (80049c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 030c 	and.w	r3, r3, #12
 800491e:	2b04      	cmp	r3, #4
 8004920:	d102      	bne.n	8004928 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004922:	4b2a      	ldr	r3, [pc, #168]	@ (80049cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004924:	613b      	str	r3, [r7, #16]
 8004926:	e047      	b.n	80049b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004928:	4b27      	ldr	r3, [pc, #156]	@ (80049c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 030c 	and.w	r3, r3, #12
 8004930:	2b08      	cmp	r3, #8
 8004932:	d102      	bne.n	800493a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004934:	4b26      	ldr	r3, [pc, #152]	@ (80049d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004936:	613b      	str	r3, [r7, #16]
 8004938:	e03e      	b.n	80049b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800493a:	4b23      	ldr	r3, [pc, #140]	@ (80049c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f003 030c 	and.w	r3, r3, #12
 8004942:	2b0c      	cmp	r3, #12
 8004944:	d136      	bne.n	80049b4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004946:	4b20      	ldr	r3, [pc, #128]	@ (80049c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004950:	4b1d      	ldr	r3, [pc, #116]	@ (80049c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	091b      	lsrs	r3, r3, #4
 8004956:	f003 030f 	and.w	r3, r3, #15
 800495a:	3301      	adds	r3, #1
 800495c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2b03      	cmp	r3, #3
 8004962:	d10c      	bne.n	800497e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004964:	4a1a      	ldr	r2, [pc, #104]	@ (80049d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	fbb2 f3f3 	udiv	r3, r2, r3
 800496c:	4a16      	ldr	r2, [pc, #88]	@ (80049c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800496e:	68d2      	ldr	r2, [r2, #12]
 8004970:	0a12      	lsrs	r2, r2, #8
 8004972:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004976:	fb02 f303 	mul.w	r3, r2, r3
 800497a:	617b      	str	r3, [r7, #20]
      break;
 800497c:	e00c      	b.n	8004998 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800497e:	4a13      	ldr	r2, [pc, #76]	@ (80049cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	fbb2 f3f3 	udiv	r3, r2, r3
 8004986:	4a10      	ldr	r2, [pc, #64]	@ (80049c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004988:	68d2      	ldr	r2, [r2, #12]
 800498a:	0a12      	lsrs	r2, r2, #8
 800498c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004990:	fb02 f303 	mul.w	r3, r2, r3
 8004994:	617b      	str	r3, [r7, #20]
      break;
 8004996:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004998:	4b0b      	ldr	r3, [pc, #44]	@ (80049c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	0e5b      	lsrs	r3, r3, #25
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	3301      	adds	r3, #1
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b0:	613b      	str	r3, [r7, #16]
 80049b2:	e001      	b.n	80049b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80049b8:	693b      	ldr	r3, [r7, #16]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	371c      	adds	r7, #28
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	40021000 	.word	0x40021000
 80049cc:	00f42400 	.word	0x00f42400
 80049d0:	016e3600 	.word	0x016e3600

080049d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049d8:	4b03      	ldr	r3, [pc, #12]	@ (80049e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80049da:	681b      	ldr	r3, [r3, #0]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	20000048 	.word	0x20000048

080049ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049f0:	f7ff fff0 	bl	80049d4 <HAL_RCC_GetHCLKFreq>
 80049f4:	4602      	mov	r2, r0
 80049f6:	4b06      	ldr	r3, [pc, #24]	@ (8004a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	0a1b      	lsrs	r3, r3, #8
 80049fc:	f003 0307 	and.w	r3, r3, #7
 8004a00:	4904      	ldr	r1, [pc, #16]	@ (8004a14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a02:	5ccb      	ldrb	r3, [r1, r3]
 8004a04:	f003 031f 	and.w	r3, r3, #31
 8004a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	40021000 	.word	0x40021000
 8004a14:	08008b10 	.word	0x08008b10

08004a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a1c:	f7ff ffda 	bl	80049d4 <HAL_RCC_GetHCLKFreq>
 8004a20:	4602      	mov	r2, r0
 8004a22:	4b06      	ldr	r3, [pc, #24]	@ (8004a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	0adb      	lsrs	r3, r3, #11
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	4904      	ldr	r1, [pc, #16]	@ (8004a40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a2e:	5ccb      	ldrb	r3, [r1, r3]
 8004a30:	f003 031f 	and.w	r3, r3, #31
 8004a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	08008b10 	.word	0x08008b10

08004a44 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ac4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a54:	4b1b      	ldr	r3, [pc, #108]	@ (8004ac4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	091b      	lsrs	r3, r3, #4
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	3301      	adds	r3, #1
 8004a60:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	2b03      	cmp	r3, #3
 8004a66:	d10c      	bne.n	8004a82 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a68:	4a17      	ldr	r2, [pc, #92]	@ (8004ac8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a70:	4a14      	ldr	r2, [pc, #80]	@ (8004ac4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a72:	68d2      	ldr	r2, [r2, #12]
 8004a74:	0a12      	lsrs	r2, r2, #8
 8004a76:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a7a:	fb02 f303 	mul.w	r3, r2, r3
 8004a7e:	617b      	str	r3, [r7, #20]
    break;
 8004a80:	e00c      	b.n	8004a9c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a82:	4a12      	ldr	r2, [pc, #72]	@ (8004acc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8a:	4a0e      	ldr	r2, [pc, #56]	@ (8004ac4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a8c:	68d2      	ldr	r2, [r2, #12]
 8004a8e:	0a12      	lsrs	r2, r2, #8
 8004a90:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a94:	fb02 f303 	mul.w	r3, r2, r3
 8004a98:	617b      	str	r3, [r7, #20]
    break;
 8004a9a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a9c:	4b09      	ldr	r3, [pc, #36]	@ (8004ac4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	0e5b      	lsrs	r3, r3, #25
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004ab6:	687b      	ldr	r3, [r7, #4]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	371c      	adds	r7, #28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	40021000 	.word	0x40021000
 8004ac8:	016e3600 	.word	0x016e3600
 8004acc:	00f42400 	.word	0x00f42400

08004ad0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ad8:	2300      	movs	r3, #0
 8004ada:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004adc:	2300      	movs	r3, #0
 8004ade:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 8098 	beq.w	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aee:	2300      	movs	r3, #0
 8004af0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004af2:	4b43      	ldr	r3, [pc, #268]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10d      	bne.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004afe:	4b40      	ldr	r3, [pc, #256]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b02:	4a3f      	ldr	r2, [pc, #252]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b08:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b0a:	4b3d      	ldr	r3, [pc, #244]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b12:	60bb      	str	r3, [r7, #8]
 8004b14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b16:	2301      	movs	r3, #1
 8004b18:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b1a:	4b3a      	ldr	r3, [pc, #232]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a39      	ldr	r2, [pc, #228]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b26:	f7fd f847 	bl	8001bb8 <HAL_GetTick>
 8004b2a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b2c:	e009      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b2e:	f7fd f843 	bl	8001bb8 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d902      	bls.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	74fb      	strb	r3, [r7, #19]
        break;
 8004b40:	e005      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b42:	4b30      	ldr	r3, [pc, #192]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d0ef      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004b4e:	7cfb      	ldrb	r3, [r7, #19]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d159      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b54:	4b2a      	ldr	r3, [pc, #168]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b5e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d01e      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d019      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b70:	4b23      	ldr	r3, [pc, #140]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b7c:	4b20      	ldr	r3, [pc, #128]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b82:	4a1f      	ldr	r2, [pc, #124]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b8c:	4b1c      	ldr	r3, [pc, #112]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b92:	4a1b      	ldr	r2, [pc, #108]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b9c:	4a18      	ldr	r2, [pc, #96]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d016      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bae:	f7fd f803 	bl	8001bb8 <HAL_GetTick>
 8004bb2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bb4:	e00b      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bb6:	f7fc ffff 	bl	8001bb8 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d902      	bls.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	74fb      	strb	r3, [r7, #19]
            break;
 8004bcc:	e006      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bce:	4b0c      	ldr	r3, [pc, #48]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0ec      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004bdc:	7cfb      	ldrb	r3, [r7, #19]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10b      	bne.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004be2:	4b07      	ldr	r3, [pc, #28]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004be8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bf0:	4903      	ldr	r1, [pc, #12]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004bf8:	e008      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bfa:	7cfb      	ldrb	r3, [r7, #19]
 8004bfc:	74bb      	strb	r3, [r7, #18]
 8004bfe:	e005      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004c00:	40021000 	.word	0x40021000
 8004c04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c08:	7cfb      	ldrb	r3, [r7, #19]
 8004c0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c0c:	7c7b      	ldrb	r3, [r7, #17]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d105      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c12:	4ba7      	ldr	r3, [pc, #668]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c16:	4aa6      	ldr	r2, [pc, #664]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c1c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00a      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c2a:	4ba1      	ldr	r3, [pc, #644]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c30:	f023 0203 	bic.w	r2, r3, #3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	499d      	ldr	r1, [pc, #628]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00a      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c4c:	4b98      	ldr	r3, [pc, #608]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c52:	f023 020c 	bic.w	r2, r3, #12
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	4995      	ldr	r1, [pc, #596]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0304 	and.w	r3, r3, #4
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00a      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c6e:	4b90      	ldr	r3, [pc, #576]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c74:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	498c      	ldr	r1, [pc, #560]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0308 	and.w	r3, r3, #8
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00a      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c90:	4b87      	ldr	r3, [pc, #540]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c96:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	4984      	ldr	r1, [pc, #528]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0310 	and.w	r3, r3, #16
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cb2:	4b7f      	ldr	r3, [pc, #508]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	497b      	ldr	r1, [pc, #492]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0320 	and.w	r3, r3, #32
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00a      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cd4:	4b76      	ldr	r3, [pc, #472]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cda:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	4973      	ldr	r1, [pc, #460]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00a      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cf6:	4b6e      	ldr	r3, [pc, #440]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cfc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	496a      	ldr	r1, [pc, #424]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00a      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d18:	4b65      	ldr	r3, [pc, #404]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d1e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	4962      	ldr	r1, [pc, #392]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d3a:	4b5d      	ldr	r3, [pc, #372]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d40:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d48:	4959      	ldr	r1, [pc, #356]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00a      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d5c:	4b54      	ldr	r3, [pc, #336]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d62:	f023 0203 	bic.w	r2, r3, #3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6a:	4951      	ldr	r1, [pc, #324]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d7e:	4b4c      	ldr	r3, [pc, #304]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d84:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8c:	4948      	ldr	r1, [pc, #288]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d015      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004da0:	4b43      	ldr	r3, [pc, #268]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004da6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dae:	4940      	ldr	r1, [pc, #256]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dbe:	d105      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dc0:	4b3b      	ldr	r3, [pc, #236]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	4a3a      	ldr	r2, [pc, #232]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d015      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004dd8:	4b35      	ldr	r3, [pc, #212]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dde:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004de6:	4932      	ldr	r1, [pc, #200]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004df2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004df6:	d105      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004df8:	4b2d      	ldr	r3, [pc, #180]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	4a2c      	ldr	r2, [pc, #176]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e02:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d015      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e10:	4b27      	ldr	r3, [pc, #156]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e16:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1e:	4924      	ldr	r1, [pc, #144]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e2e:	d105      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e30:	4b1f      	ldr	r3, [pc, #124]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	4a1e      	ldr	r2, [pc, #120]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e3a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d015      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e48:	4b19      	ldr	r3, [pc, #100]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e56:	4916      	ldr	r1, [pc, #88]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e66:	d105      	bne.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e68:	4b11      	ldr	r3, [pc, #68]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	4a10      	ldr	r2, [pc, #64]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e72:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d019      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e80:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e86:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8e:	4908      	ldr	r1, [pc, #32]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e9e:	d109      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ea0:	4b03      	ldr	r3, [pc, #12]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	4a02      	ldr	r2, [pc, #8]	@ (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ea6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004eaa:	60d3      	str	r3, [r2, #12]
 8004eac:	e002      	b.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004eae:	bf00      	nop
 8004eb0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d015      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ec0:	4b29      	ldr	r3, [pc, #164]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ece:	4926      	ldr	r1, [pc, #152]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ede:	d105      	bne.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ee0:	4b21      	ldr	r3, [pc, #132]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	4a20      	ldr	r2, [pc, #128]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ee6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eea:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d015      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004efe:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f06:	4918      	ldr	r1, [pc, #96]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f16:	d105      	bne.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f18:	4b13      	ldr	r3, [pc, #76]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	4a12      	ldr	r2, [pc, #72]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f22:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d015      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004f30:	4b0d      	ldr	r3, [pc, #52]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f3e:	490a      	ldr	r1, [pc, #40]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f4a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f4e:	d105      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f50:	4b05      	ldr	r3, [pc, #20]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	4a04      	ldr	r2, [pc, #16]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f5a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004f5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3718      	adds	r7, #24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	40021000 	.word	0x40021000

08004f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e049      	b.n	8005012 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7fc fcb2 	bl	80018fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4610      	mov	r0, r2
 8004fac:	f000 fe34 	bl	8005c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
	...

0800501c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b01      	cmp	r3, #1
 800502e:	d001      	beq.n	8005034 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e04c      	b.n	80050ce <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a26      	ldr	r2, [pc, #152]	@ (80050dc <HAL_TIM_Base_Start+0xc0>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d022      	beq.n	800508c <HAL_TIM_Base_Start+0x70>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800504e:	d01d      	beq.n	800508c <HAL_TIM_Base_Start+0x70>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a22      	ldr	r2, [pc, #136]	@ (80050e0 <HAL_TIM_Base_Start+0xc4>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d018      	beq.n	800508c <HAL_TIM_Base_Start+0x70>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a21      	ldr	r2, [pc, #132]	@ (80050e4 <HAL_TIM_Base_Start+0xc8>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d013      	beq.n	800508c <HAL_TIM_Base_Start+0x70>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a1f      	ldr	r2, [pc, #124]	@ (80050e8 <HAL_TIM_Base_Start+0xcc>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d00e      	beq.n	800508c <HAL_TIM_Base_Start+0x70>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a1e      	ldr	r2, [pc, #120]	@ (80050ec <HAL_TIM_Base_Start+0xd0>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d009      	beq.n	800508c <HAL_TIM_Base_Start+0x70>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a1c      	ldr	r2, [pc, #112]	@ (80050f0 <HAL_TIM_Base_Start+0xd4>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d004      	beq.n	800508c <HAL_TIM_Base_Start+0x70>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a1b      	ldr	r2, [pc, #108]	@ (80050f4 <HAL_TIM_Base_Start+0xd8>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d115      	bne.n	80050b8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689a      	ldr	r2, [r3, #8]
 8005092:	4b19      	ldr	r3, [pc, #100]	@ (80050f8 <HAL_TIM_Base_Start+0xdc>)
 8005094:	4013      	ands	r3, r2
 8005096:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2b06      	cmp	r3, #6
 800509c:	d015      	beq.n	80050ca <HAL_TIM_Base_Start+0xae>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050a4:	d011      	beq.n	80050ca <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f042 0201 	orr.w	r2, r2, #1
 80050b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b6:	e008      	b.n	80050ca <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0201 	orr.w	r2, r2, #1
 80050c6:	601a      	str	r2, [r3, #0]
 80050c8:	e000      	b.n	80050cc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	40012c00 	.word	0x40012c00
 80050e0:	40000400 	.word	0x40000400
 80050e4:	40000800 	.word	0x40000800
 80050e8:	40000c00 	.word	0x40000c00
 80050ec:	40013400 	.word	0x40013400
 80050f0:	40014000 	.word	0x40014000
 80050f4:	40015000 	.word	0x40015000
 80050f8:	00010007 	.word	0x00010007

080050fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b01      	cmp	r3, #1
 800510e:	d001      	beq.n	8005114 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e054      	b.n	80051be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68da      	ldr	r2, [r3, #12]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0201 	orr.w	r2, r2, #1
 800512a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a26      	ldr	r2, [pc, #152]	@ (80051cc <HAL_TIM_Base_Start_IT+0xd0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d022      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x80>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800513e:	d01d      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x80>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a22      	ldr	r2, [pc, #136]	@ (80051d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d018      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x80>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a21      	ldr	r2, [pc, #132]	@ (80051d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d013      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x80>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a1f      	ldr	r2, [pc, #124]	@ (80051d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00e      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x80>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a1e      	ldr	r2, [pc, #120]	@ (80051dc <HAL_TIM_Base_Start_IT+0xe0>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d009      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x80>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a1c      	ldr	r2, [pc, #112]	@ (80051e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d004      	beq.n	800517c <HAL_TIM_Base_Start_IT+0x80>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a1b      	ldr	r2, [pc, #108]	@ (80051e4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d115      	bne.n	80051a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689a      	ldr	r2, [r3, #8]
 8005182:	4b19      	ldr	r3, [pc, #100]	@ (80051e8 <HAL_TIM_Base_Start_IT+0xec>)
 8005184:	4013      	ands	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2b06      	cmp	r3, #6
 800518c:	d015      	beq.n	80051ba <HAL_TIM_Base_Start_IT+0xbe>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005194:	d011      	beq.n	80051ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f042 0201 	orr.w	r2, r2, #1
 80051a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a6:	e008      	b.n	80051ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0201 	orr.w	r2, r2, #1
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	e000      	b.n	80051bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40012c00 	.word	0x40012c00
 80051d0:	40000400 	.word	0x40000400
 80051d4:	40000800 	.word	0x40000800
 80051d8:	40000c00 	.word	0x40000c00
 80051dc:	40013400 	.word	0x40013400
 80051e0:	40014000 	.word	0x40014000
 80051e4:	40015000 	.word	0x40015000
 80051e8:	00010007 	.word	0x00010007

080051ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e049      	b.n	8005292 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005204:	b2db      	uxtb	r3, r3
 8005206:	2b00      	cmp	r3, #0
 8005208:	d106      	bne.n	8005218 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f841 	bl	800529a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3304      	adds	r3, #4
 8005228:	4619      	mov	r1, r3
 800522a:	4610      	mov	r0, r2
 800522c:	f000 fcf4 	bl	8005c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
	...

080052b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d109      	bne.n	80052d4 <HAL_TIM_PWM_Start+0x24>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	bf14      	ite	ne
 80052cc:	2301      	movne	r3, #1
 80052ce:	2300      	moveq	r3, #0
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	e03c      	b.n	800534e <HAL_TIM_PWM_Start+0x9e>
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	d109      	bne.n	80052ee <HAL_TIM_PWM_Start+0x3e>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	bf14      	ite	ne
 80052e6:	2301      	movne	r3, #1
 80052e8:	2300      	moveq	r3, #0
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	e02f      	b.n	800534e <HAL_TIM_PWM_Start+0x9e>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d109      	bne.n	8005308 <HAL_TIM_PWM_Start+0x58>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	bf14      	ite	ne
 8005300:	2301      	movne	r3, #1
 8005302:	2300      	moveq	r3, #0
 8005304:	b2db      	uxtb	r3, r3
 8005306:	e022      	b.n	800534e <HAL_TIM_PWM_Start+0x9e>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2b0c      	cmp	r3, #12
 800530c:	d109      	bne.n	8005322 <HAL_TIM_PWM_Start+0x72>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b01      	cmp	r3, #1
 8005318:	bf14      	ite	ne
 800531a:	2301      	movne	r3, #1
 800531c:	2300      	moveq	r3, #0
 800531e:	b2db      	uxtb	r3, r3
 8005320:	e015      	b.n	800534e <HAL_TIM_PWM_Start+0x9e>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b10      	cmp	r3, #16
 8005326:	d109      	bne.n	800533c <HAL_TIM_PWM_Start+0x8c>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b01      	cmp	r3, #1
 8005332:	bf14      	ite	ne
 8005334:	2301      	movne	r3, #1
 8005336:	2300      	moveq	r3, #0
 8005338:	b2db      	uxtb	r3, r3
 800533a:	e008      	b.n	800534e <HAL_TIM_PWM_Start+0x9e>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b01      	cmp	r3, #1
 8005346:	bf14      	ite	ne
 8005348:	2301      	movne	r3, #1
 800534a:	2300      	moveq	r3, #0
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e0a6      	b.n	80054a4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d104      	bne.n	8005366 <HAL_TIM_PWM_Start+0xb6>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005364:	e023      	b.n	80053ae <HAL_TIM_PWM_Start+0xfe>
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	2b04      	cmp	r3, #4
 800536a:	d104      	bne.n	8005376 <HAL_TIM_PWM_Start+0xc6>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005374:	e01b      	b.n	80053ae <HAL_TIM_PWM_Start+0xfe>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	2b08      	cmp	r3, #8
 800537a:	d104      	bne.n	8005386 <HAL_TIM_PWM_Start+0xd6>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005384:	e013      	b.n	80053ae <HAL_TIM_PWM_Start+0xfe>
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b0c      	cmp	r3, #12
 800538a:	d104      	bne.n	8005396 <HAL_TIM_PWM_Start+0xe6>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005394:	e00b      	b.n	80053ae <HAL_TIM_PWM_Start+0xfe>
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b10      	cmp	r3, #16
 800539a:	d104      	bne.n	80053a6 <HAL_TIM_PWM_Start+0xf6>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053a4:	e003      	b.n	80053ae <HAL_TIM_PWM_Start+0xfe>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2202      	movs	r2, #2
 80053aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2201      	movs	r2, #1
 80053b4:	6839      	ldr	r1, [r7, #0]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f001 f8a8 	bl	800650c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a3a      	ldr	r2, [pc, #232]	@ (80054ac <HAL_TIM_PWM_Start+0x1fc>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d018      	beq.n	80053f8 <HAL_TIM_PWM_Start+0x148>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a39      	ldr	r2, [pc, #228]	@ (80054b0 <HAL_TIM_PWM_Start+0x200>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d013      	beq.n	80053f8 <HAL_TIM_PWM_Start+0x148>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a37      	ldr	r2, [pc, #220]	@ (80054b4 <HAL_TIM_PWM_Start+0x204>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d00e      	beq.n	80053f8 <HAL_TIM_PWM_Start+0x148>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a36      	ldr	r2, [pc, #216]	@ (80054b8 <HAL_TIM_PWM_Start+0x208>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d009      	beq.n	80053f8 <HAL_TIM_PWM_Start+0x148>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a34      	ldr	r2, [pc, #208]	@ (80054bc <HAL_TIM_PWM_Start+0x20c>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d004      	beq.n	80053f8 <HAL_TIM_PWM_Start+0x148>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a33      	ldr	r2, [pc, #204]	@ (80054c0 <HAL_TIM_PWM_Start+0x210>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d101      	bne.n	80053fc <HAL_TIM_PWM_Start+0x14c>
 80053f8:	2301      	movs	r3, #1
 80053fa:	e000      	b.n	80053fe <HAL_TIM_PWM_Start+0x14e>
 80053fc:	2300      	movs	r3, #0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d007      	beq.n	8005412 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005410:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a25      	ldr	r2, [pc, #148]	@ (80054ac <HAL_TIM_PWM_Start+0x1fc>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d022      	beq.n	8005462 <HAL_TIM_PWM_Start+0x1b2>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005424:	d01d      	beq.n	8005462 <HAL_TIM_PWM_Start+0x1b2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a26      	ldr	r2, [pc, #152]	@ (80054c4 <HAL_TIM_PWM_Start+0x214>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d018      	beq.n	8005462 <HAL_TIM_PWM_Start+0x1b2>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a24      	ldr	r2, [pc, #144]	@ (80054c8 <HAL_TIM_PWM_Start+0x218>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d013      	beq.n	8005462 <HAL_TIM_PWM_Start+0x1b2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a23      	ldr	r2, [pc, #140]	@ (80054cc <HAL_TIM_PWM_Start+0x21c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d00e      	beq.n	8005462 <HAL_TIM_PWM_Start+0x1b2>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a19      	ldr	r2, [pc, #100]	@ (80054b0 <HAL_TIM_PWM_Start+0x200>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d009      	beq.n	8005462 <HAL_TIM_PWM_Start+0x1b2>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a18      	ldr	r2, [pc, #96]	@ (80054b4 <HAL_TIM_PWM_Start+0x204>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d004      	beq.n	8005462 <HAL_TIM_PWM_Start+0x1b2>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a18      	ldr	r2, [pc, #96]	@ (80054c0 <HAL_TIM_PWM_Start+0x210>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d115      	bne.n	800548e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	689a      	ldr	r2, [r3, #8]
 8005468:	4b19      	ldr	r3, [pc, #100]	@ (80054d0 <HAL_TIM_PWM_Start+0x220>)
 800546a:	4013      	ands	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b06      	cmp	r3, #6
 8005472:	d015      	beq.n	80054a0 <HAL_TIM_PWM_Start+0x1f0>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800547a:	d011      	beq.n	80054a0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f042 0201 	orr.w	r2, r2, #1
 800548a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800548c:	e008      	b.n	80054a0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f042 0201 	orr.w	r2, r2, #1
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	e000      	b.n	80054a2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	40012c00 	.word	0x40012c00
 80054b0:	40013400 	.word	0x40013400
 80054b4:	40014000 	.word	0x40014000
 80054b8:	40014400 	.word	0x40014400
 80054bc:	40014800 	.word	0x40014800
 80054c0:	40015000 	.word	0x40015000
 80054c4:	40000400 	.word	0x40000400
 80054c8:	40000800 	.word	0x40000800
 80054cc:	40000c00 	.word	0x40000c00
 80054d0:	00010007 	.word	0x00010007

080054d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d020      	beq.n	8005538 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d01b      	beq.n	8005538 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f06f 0202 	mvn.w	r2, #2
 8005508:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	f003 0303 	and.w	r3, r3, #3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d003      	beq.n	8005526 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fb5c 	bl	8005bdc <HAL_TIM_IC_CaptureCallback>
 8005524:	e005      	b.n	8005532 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fb4e 	bl	8005bc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 fb5f 	bl	8005bf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f003 0304 	and.w	r3, r3, #4
 800553e:	2b00      	cmp	r3, #0
 8005540:	d020      	beq.n	8005584 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b00      	cmp	r3, #0
 800554a:	d01b      	beq.n	8005584 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f06f 0204 	mvn.w	r2, #4
 8005554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2202      	movs	r2, #2
 800555a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fb36 	bl	8005bdc <HAL_TIM_IC_CaptureCallback>
 8005570:	e005      	b.n	800557e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fb28 	bl	8005bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fb39 	bl	8005bf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	f003 0308 	and.w	r3, r3, #8
 800558a:	2b00      	cmp	r3, #0
 800558c:	d020      	beq.n	80055d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f003 0308 	and.w	r3, r3, #8
 8005594:	2b00      	cmp	r3, #0
 8005596:	d01b      	beq.n	80055d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f06f 0208 	mvn.w	r2, #8
 80055a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2204      	movs	r2, #4
 80055a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	f003 0303 	and.w	r3, r3, #3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fb10 	bl	8005bdc <HAL_TIM_IC_CaptureCallback>
 80055bc:	e005      	b.n	80055ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 fb02 	bl	8005bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 fb13 	bl	8005bf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f003 0310 	and.w	r3, r3, #16
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d020      	beq.n	800561c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f003 0310 	and.w	r3, r3, #16
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d01b      	beq.n	800561c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f06f 0210 	mvn.w	r2, #16
 80055ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2208      	movs	r2, #8
 80055f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 faea 	bl	8005bdc <HAL_TIM_IC_CaptureCallback>
 8005608:	e005      	b.n	8005616 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 fadc 	bl	8005bc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 faed 	bl	8005bf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00c      	beq.n	8005640 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	d007      	beq.n	8005640 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f06f 0201 	mvn.w	r2, #1
 8005638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7fc f832 	bl	80016a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005646:	2b00      	cmp	r3, #0
 8005648:	d104      	bne.n	8005654 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00c      	beq.n	800566e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800565a:	2b00      	cmp	r3, #0
 800565c:	d007      	beq.n	800566e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f001 f8a9 	bl	80067c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00c      	beq.n	8005692 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800567e:	2b00      	cmp	r3, #0
 8005680:	d007      	beq.n	8005692 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800568a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f001 f8a1 	bl	80067d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00c      	beq.n	80056b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d007      	beq.n	80056b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80056ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 faa7 	bl	8005c04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	f003 0320 	and.w	r3, r3, #32
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00c      	beq.n	80056da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d007      	beq.n	80056da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f06f 0220 	mvn.w	r2, #32
 80056d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f001 f869 	bl	80067ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00c      	beq.n	80056fe <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d007      	beq.n	80056fe <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80056f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f001 f875 	bl	80067e8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00c      	beq.n	8005722 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d007      	beq.n	8005722 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800571a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f001 f86d 	bl	80067fc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00c      	beq.n	8005746 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d007      	beq.n	8005746 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800573e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f001 f865 	bl	8006810 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00c      	beq.n	800576a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d007      	beq.n	800576a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f001 f85d 	bl	8006824 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800576a:	bf00      	nop
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
	...

08005774 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005780:	2300      	movs	r3, #0
 8005782:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800578a:	2b01      	cmp	r3, #1
 800578c:	d101      	bne.n	8005792 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800578e:	2302      	movs	r3, #2
 8005790:	e0ff      	b.n	8005992 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2b14      	cmp	r3, #20
 800579e:	f200 80f0 	bhi.w	8005982 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80057a2:	a201      	add	r2, pc, #4	@ (adr r2, 80057a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a8:	080057fd 	.word	0x080057fd
 80057ac:	08005983 	.word	0x08005983
 80057b0:	08005983 	.word	0x08005983
 80057b4:	08005983 	.word	0x08005983
 80057b8:	0800583d 	.word	0x0800583d
 80057bc:	08005983 	.word	0x08005983
 80057c0:	08005983 	.word	0x08005983
 80057c4:	08005983 	.word	0x08005983
 80057c8:	0800587f 	.word	0x0800587f
 80057cc:	08005983 	.word	0x08005983
 80057d0:	08005983 	.word	0x08005983
 80057d4:	08005983 	.word	0x08005983
 80057d8:	080058bf 	.word	0x080058bf
 80057dc:	08005983 	.word	0x08005983
 80057e0:	08005983 	.word	0x08005983
 80057e4:	08005983 	.word	0x08005983
 80057e8:	08005901 	.word	0x08005901
 80057ec:	08005983 	.word	0x08005983
 80057f0:	08005983 	.word	0x08005983
 80057f4:	08005983 	.word	0x08005983
 80057f8:	08005941 	.word	0x08005941
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68b9      	ldr	r1, [r7, #8]
 8005802:	4618      	mov	r0, r3
 8005804:	f000 fabc 	bl	8005d80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	699a      	ldr	r2, [r3, #24]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f042 0208 	orr.w	r2, r2, #8
 8005816:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699a      	ldr	r2, [r3, #24]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 0204 	bic.w	r2, r2, #4
 8005826:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6999      	ldr	r1, [r3, #24]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	691a      	ldr	r2, [r3, #16]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	619a      	str	r2, [r3, #24]
      break;
 800583a:	e0a5      	b.n	8005988 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68b9      	ldr	r1, [r7, #8]
 8005842:	4618      	mov	r0, r3
 8005844:	f000 fb36 	bl	8005eb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699a      	ldr	r2, [r3, #24]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005856:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699a      	ldr	r2, [r3, #24]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005866:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6999      	ldr	r1, [r3, #24]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	021a      	lsls	r2, r3, #8
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	430a      	orrs	r2, r1
 800587a:	619a      	str	r2, [r3, #24]
      break;
 800587c:	e084      	b.n	8005988 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68b9      	ldr	r1, [r7, #8]
 8005884:	4618      	mov	r0, r3
 8005886:	f000 fba9 	bl	8005fdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69da      	ldr	r2, [r3, #28]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f042 0208 	orr.w	r2, r2, #8
 8005898:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69da      	ldr	r2, [r3, #28]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 0204 	bic.w	r2, r2, #4
 80058a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69d9      	ldr	r1, [r3, #28]
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	691a      	ldr	r2, [r3, #16]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	61da      	str	r2, [r3, #28]
      break;
 80058bc:	e064      	b.n	8005988 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68b9      	ldr	r1, [r7, #8]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f000 fc1b 	bl	8006100 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69da      	ldr	r2, [r3, #28]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69da      	ldr	r2, [r3, #28]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69d9      	ldr	r1, [r3, #28]
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	021a      	lsls	r2, r3, #8
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	61da      	str	r2, [r3, #28]
      break;
 80058fe:	e043      	b.n	8005988 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68b9      	ldr	r1, [r7, #8]
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fc8e 	bl	8006228 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f042 0208 	orr.w	r2, r2, #8
 800591a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0204 	bic.w	r2, r2, #4
 800592a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	691a      	ldr	r2, [r3, #16]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800593e:	e023      	b.n	8005988 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68b9      	ldr	r1, [r7, #8]
 8005946:	4618      	mov	r0, r3
 8005948:	f000 fcd8 	bl	80062fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800595a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800596a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	021a      	lsls	r2, r3, #8
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005980:	e002      	b.n	8005988 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	75fb      	strb	r3, [r7, #23]
      break;
 8005986:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005990:	7dfb      	ldrb	r3, [r7, #23]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3718      	adds	r7, #24
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop

0800599c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059a6:	2300      	movs	r3, #0
 80059a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d101      	bne.n	80059b8 <HAL_TIM_ConfigClockSource+0x1c>
 80059b4:	2302      	movs	r3, #2
 80059b6:	e0f6      	b.n	8005ba6 <HAL_TIM_ConfigClockSource+0x20a>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80059d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80059da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a6f      	ldr	r2, [pc, #444]	@ (8005bb0 <HAL_TIM_ConfigClockSource+0x214>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	f000 80c1 	beq.w	8005b7a <HAL_TIM_ConfigClockSource+0x1de>
 80059f8:	4a6d      	ldr	r2, [pc, #436]	@ (8005bb0 <HAL_TIM_ConfigClockSource+0x214>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	f200 80c6 	bhi.w	8005b8c <HAL_TIM_ConfigClockSource+0x1f0>
 8005a00:	4a6c      	ldr	r2, [pc, #432]	@ (8005bb4 <HAL_TIM_ConfigClockSource+0x218>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	f000 80b9 	beq.w	8005b7a <HAL_TIM_ConfigClockSource+0x1de>
 8005a08:	4a6a      	ldr	r2, [pc, #424]	@ (8005bb4 <HAL_TIM_ConfigClockSource+0x218>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	f200 80be 	bhi.w	8005b8c <HAL_TIM_ConfigClockSource+0x1f0>
 8005a10:	4a69      	ldr	r2, [pc, #420]	@ (8005bb8 <HAL_TIM_ConfigClockSource+0x21c>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	f000 80b1 	beq.w	8005b7a <HAL_TIM_ConfigClockSource+0x1de>
 8005a18:	4a67      	ldr	r2, [pc, #412]	@ (8005bb8 <HAL_TIM_ConfigClockSource+0x21c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	f200 80b6 	bhi.w	8005b8c <HAL_TIM_ConfigClockSource+0x1f0>
 8005a20:	4a66      	ldr	r2, [pc, #408]	@ (8005bbc <HAL_TIM_ConfigClockSource+0x220>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	f000 80a9 	beq.w	8005b7a <HAL_TIM_ConfigClockSource+0x1de>
 8005a28:	4a64      	ldr	r2, [pc, #400]	@ (8005bbc <HAL_TIM_ConfigClockSource+0x220>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	f200 80ae 	bhi.w	8005b8c <HAL_TIM_ConfigClockSource+0x1f0>
 8005a30:	4a63      	ldr	r2, [pc, #396]	@ (8005bc0 <HAL_TIM_ConfigClockSource+0x224>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	f000 80a1 	beq.w	8005b7a <HAL_TIM_ConfigClockSource+0x1de>
 8005a38:	4a61      	ldr	r2, [pc, #388]	@ (8005bc0 <HAL_TIM_ConfigClockSource+0x224>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	f200 80a6 	bhi.w	8005b8c <HAL_TIM_ConfigClockSource+0x1f0>
 8005a40:	4a60      	ldr	r2, [pc, #384]	@ (8005bc4 <HAL_TIM_ConfigClockSource+0x228>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	f000 8099 	beq.w	8005b7a <HAL_TIM_ConfigClockSource+0x1de>
 8005a48:	4a5e      	ldr	r2, [pc, #376]	@ (8005bc4 <HAL_TIM_ConfigClockSource+0x228>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	f200 809e 	bhi.w	8005b8c <HAL_TIM_ConfigClockSource+0x1f0>
 8005a50:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005a54:	f000 8091 	beq.w	8005b7a <HAL_TIM_ConfigClockSource+0x1de>
 8005a58:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005a5c:	f200 8096 	bhi.w	8005b8c <HAL_TIM_ConfigClockSource+0x1f0>
 8005a60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a64:	f000 8089 	beq.w	8005b7a <HAL_TIM_ConfigClockSource+0x1de>
 8005a68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a6c:	f200 808e 	bhi.w	8005b8c <HAL_TIM_ConfigClockSource+0x1f0>
 8005a70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a74:	d03e      	beq.n	8005af4 <HAL_TIM_ConfigClockSource+0x158>
 8005a76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a7a:	f200 8087 	bhi.w	8005b8c <HAL_TIM_ConfigClockSource+0x1f0>
 8005a7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a82:	f000 8086 	beq.w	8005b92 <HAL_TIM_ConfigClockSource+0x1f6>
 8005a86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a8a:	d87f      	bhi.n	8005b8c <HAL_TIM_ConfigClockSource+0x1f0>
 8005a8c:	2b70      	cmp	r3, #112	@ 0x70
 8005a8e:	d01a      	beq.n	8005ac6 <HAL_TIM_ConfigClockSource+0x12a>
 8005a90:	2b70      	cmp	r3, #112	@ 0x70
 8005a92:	d87b      	bhi.n	8005b8c <HAL_TIM_ConfigClockSource+0x1f0>
 8005a94:	2b60      	cmp	r3, #96	@ 0x60
 8005a96:	d050      	beq.n	8005b3a <HAL_TIM_ConfigClockSource+0x19e>
 8005a98:	2b60      	cmp	r3, #96	@ 0x60
 8005a9a:	d877      	bhi.n	8005b8c <HAL_TIM_ConfigClockSource+0x1f0>
 8005a9c:	2b50      	cmp	r3, #80	@ 0x50
 8005a9e:	d03c      	beq.n	8005b1a <HAL_TIM_ConfigClockSource+0x17e>
 8005aa0:	2b50      	cmp	r3, #80	@ 0x50
 8005aa2:	d873      	bhi.n	8005b8c <HAL_TIM_ConfigClockSource+0x1f0>
 8005aa4:	2b40      	cmp	r3, #64	@ 0x40
 8005aa6:	d058      	beq.n	8005b5a <HAL_TIM_ConfigClockSource+0x1be>
 8005aa8:	2b40      	cmp	r3, #64	@ 0x40
 8005aaa:	d86f      	bhi.n	8005b8c <HAL_TIM_ConfigClockSource+0x1f0>
 8005aac:	2b30      	cmp	r3, #48	@ 0x30
 8005aae:	d064      	beq.n	8005b7a <HAL_TIM_ConfigClockSource+0x1de>
 8005ab0:	2b30      	cmp	r3, #48	@ 0x30
 8005ab2:	d86b      	bhi.n	8005b8c <HAL_TIM_ConfigClockSource+0x1f0>
 8005ab4:	2b20      	cmp	r3, #32
 8005ab6:	d060      	beq.n	8005b7a <HAL_TIM_ConfigClockSource+0x1de>
 8005ab8:	2b20      	cmp	r3, #32
 8005aba:	d867      	bhi.n	8005b8c <HAL_TIM_ConfigClockSource+0x1f0>
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d05c      	beq.n	8005b7a <HAL_TIM_ConfigClockSource+0x1de>
 8005ac0:	2b10      	cmp	r3, #16
 8005ac2:	d05a      	beq.n	8005b7a <HAL_TIM_ConfigClockSource+0x1de>
 8005ac4:	e062      	b.n	8005b8c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ad6:	f000 fcf9 	bl	80064cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ae8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	609a      	str	r2, [r3, #8]
      break;
 8005af2:	e04f      	b.n	8005b94 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b04:	f000 fce2 	bl	80064cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689a      	ldr	r2, [r3, #8]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b16:	609a      	str	r2, [r3, #8]
      break;
 8005b18:	e03c      	b.n	8005b94 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b26:	461a      	mov	r2, r3
 8005b28:	f000 fc54 	bl	80063d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2150      	movs	r1, #80	@ 0x50
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 fcad 	bl	8006492 <TIM_ITRx_SetConfig>
      break;
 8005b38:	e02c      	b.n	8005b94 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b46:	461a      	mov	r2, r3
 8005b48:	f000 fc73 	bl	8006432 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2160      	movs	r1, #96	@ 0x60
 8005b52:	4618      	mov	r0, r3
 8005b54:	f000 fc9d 	bl	8006492 <TIM_ITRx_SetConfig>
      break;
 8005b58:	e01c      	b.n	8005b94 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b66:	461a      	mov	r2, r3
 8005b68:	f000 fc34 	bl	80063d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2140      	movs	r1, #64	@ 0x40
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 fc8d 	bl	8006492 <TIM_ITRx_SetConfig>
      break;
 8005b78:	e00c      	b.n	8005b94 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4619      	mov	r1, r3
 8005b84:	4610      	mov	r0, r2
 8005b86:	f000 fc84 	bl	8006492 <TIM_ITRx_SetConfig>
      break;
 8005b8a:	e003      	b.n	8005b94 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b90:	e000      	b.n	8005b94 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005b92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	00100070 	.word	0x00100070
 8005bb4:	00100060 	.word	0x00100060
 8005bb8:	00100050 	.word	0x00100050
 8005bbc:	00100040 	.word	0x00100040
 8005bc0:	00100030 	.word	0x00100030
 8005bc4:	00100020 	.word	0x00100020

08005bc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a4c      	ldr	r2, [pc, #304]	@ (8005d5c <TIM_Base_SetConfig+0x144>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d017      	beq.n	8005c60 <TIM_Base_SetConfig+0x48>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c36:	d013      	beq.n	8005c60 <TIM_Base_SetConfig+0x48>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a49      	ldr	r2, [pc, #292]	@ (8005d60 <TIM_Base_SetConfig+0x148>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d00f      	beq.n	8005c60 <TIM_Base_SetConfig+0x48>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a48      	ldr	r2, [pc, #288]	@ (8005d64 <TIM_Base_SetConfig+0x14c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d00b      	beq.n	8005c60 <TIM_Base_SetConfig+0x48>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a47      	ldr	r2, [pc, #284]	@ (8005d68 <TIM_Base_SetConfig+0x150>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d007      	beq.n	8005c60 <TIM_Base_SetConfig+0x48>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a46      	ldr	r2, [pc, #280]	@ (8005d6c <TIM_Base_SetConfig+0x154>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d003      	beq.n	8005c60 <TIM_Base_SetConfig+0x48>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a45      	ldr	r2, [pc, #276]	@ (8005d70 <TIM_Base_SetConfig+0x158>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d108      	bne.n	8005c72 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a39      	ldr	r2, [pc, #228]	@ (8005d5c <TIM_Base_SetConfig+0x144>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d023      	beq.n	8005cc2 <TIM_Base_SetConfig+0xaa>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c80:	d01f      	beq.n	8005cc2 <TIM_Base_SetConfig+0xaa>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a36      	ldr	r2, [pc, #216]	@ (8005d60 <TIM_Base_SetConfig+0x148>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d01b      	beq.n	8005cc2 <TIM_Base_SetConfig+0xaa>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a35      	ldr	r2, [pc, #212]	@ (8005d64 <TIM_Base_SetConfig+0x14c>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d017      	beq.n	8005cc2 <TIM_Base_SetConfig+0xaa>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a34      	ldr	r2, [pc, #208]	@ (8005d68 <TIM_Base_SetConfig+0x150>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d013      	beq.n	8005cc2 <TIM_Base_SetConfig+0xaa>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a33      	ldr	r2, [pc, #204]	@ (8005d6c <TIM_Base_SetConfig+0x154>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d00f      	beq.n	8005cc2 <TIM_Base_SetConfig+0xaa>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a33      	ldr	r2, [pc, #204]	@ (8005d74 <TIM_Base_SetConfig+0x15c>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d00b      	beq.n	8005cc2 <TIM_Base_SetConfig+0xaa>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a32      	ldr	r2, [pc, #200]	@ (8005d78 <TIM_Base_SetConfig+0x160>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d007      	beq.n	8005cc2 <TIM_Base_SetConfig+0xaa>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a31      	ldr	r2, [pc, #196]	@ (8005d7c <TIM_Base_SetConfig+0x164>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d003      	beq.n	8005cc2 <TIM_Base_SetConfig+0xaa>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a2c      	ldr	r2, [pc, #176]	@ (8005d70 <TIM_Base_SetConfig+0x158>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d108      	bne.n	8005cd4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a18      	ldr	r2, [pc, #96]	@ (8005d5c <TIM_Base_SetConfig+0x144>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d013      	beq.n	8005d28 <TIM_Base_SetConfig+0x110>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a1a      	ldr	r2, [pc, #104]	@ (8005d6c <TIM_Base_SetConfig+0x154>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d00f      	beq.n	8005d28 <TIM_Base_SetConfig+0x110>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a1a      	ldr	r2, [pc, #104]	@ (8005d74 <TIM_Base_SetConfig+0x15c>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d00b      	beq.n	8005d28 <TIM_Base_SetConfig+0x110>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a19      	ldr	r2, [pc, #100]	@ (8005d78 <TIM_Base_SetConfig+0x160>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d007      	beq.n	8005d28 <TIM_Base_SetConfig+0x110>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a18      	ldr	r2, [pc, #96]	@ (8005d7c <TIM_Base_SetConfig+0x164>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d003      	beq.n	8005d28 <TIM_Base_SetConfig+0x110>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a13      	ldr	r2, [pc, #76]	@ (8005d70 <TIM_Base_SetConfig+0x158>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d103      	bne.n	8005d30 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	691a      	ldr	r2, [r3, #16]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d105      	bne.n	8005d4e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	f023 0201 	bic.w	r2, r3, #1
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	611a      	str	r2, [r3, #16]
  }
}
 8005d4e:	bf00      	nop
 8005d50:	3714      	adds	r7, #20
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	40012c00 	.word	0x40012c00
 8005d60:	40000400 	.word	0x40000400
 8005d64:	40000800 	.word	0x40000800
 8005d68:	40000c00 	.word	0x40000c00
 8005d6c:	40013400 	.word	0x40013400
 8005d70:	40015000 	.word	0x40015000
 8005d74:	40014000 	.word	0x40014000
 8005d78:	40014400 	.word	0x40014400
 8005d7c:	40014800 	.word	0x40014800

08005d80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a1b      	ldr	r3, [r3, #32]
 8005d94:	f023 0201 	bic.w	r2, r3, #1
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0303 	bic.w	r3, r3, #3
 8005dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f023 0302 	bic.w	r3, r3, #2
 8005dcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a30      	ldr	r2, [pc, #192]	@ (8005e9c <TIM_OC1_SetConfig+0x11c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d013      	beq.n	8005e08 <TIM_OC1_SetConfig+0x88>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a2f      	ldr	r2, [pc, #188]	@ (8005ea0 <TIM_OC1_SetConfig+0x120>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d00f      	beq.n	8005e08 <TIM_OC1_SetConfig+0x88>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a2e      	ldr	r2, [pc, #184]	@ (8005ea4 <TIM_OC1_SetConfig+0x124>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d00b      	beq.n	8005e08 <TIM_OC1_SetConfig+0x88>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a2d      	ldr	r2, [pc, #180]	@ (8005ea8 <TIM_OC1_SetConfig+0x128>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d007      	beq.n	8005e08 <TIM_OC1_SetConfig+0x88>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a2c      	ldr	r2, [pc, #176]	@ (8005eac <TIM_OC1_SetConfig+0x12c>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d003      	beq.n	8005e08 <TIM_OC1_SetConfig+0x88>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a2b      	ldr	r2, [pc, #172]	@ (8005eb0 <TIM_OC1_SetConfig+0x130>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d10c      	bne.n	8005e22 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f023 0308 	bic.w	r3, r3, #8
 8005e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f023 0304 	bic.w	r3, r3, #4
 8005e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a1d      	ldr	r2, [pc, #116]	@ (8005e9c <TIM_OC1_SetConfig+0x11c>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d013      	beq.n	8005e52 <TIM_OC1_SetConfig+0xd2>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ea0 <TIM_OC1_SetConfig+0x120>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d00f      	beq.n	8005e52 <TIM_OC1_SetConfig+0xd2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a1b      	ldr	r2, [pc, #108]	@ (8005ea4 <TIM_OC1_SetConfig+0x124>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d00b      	beq.n	8005e52 <TIM_OC1_SetConfig+0xd2>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a1a      	ldr	r2, [pc, #104]	@ (8005ea8 <TIM_OC1_SetConfig+0x128>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d007      	beq.n	8005e52 <TIM_OC1_SetConfig+0xd2>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a19      	ldr	r2, [pc, #100]	@ (8005eac <TIM_OC1_SetConfig+0x12c>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d003      	beq.n	8005e52 <TIM_OC1_SetConfig+0xd2>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a18      	ldr	r2, [pc, #96]	@ (8005eb0 <TIM_OC1_SetConfig+0x130>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d111      	bne.n	8005e76 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	621a      	str	r2, [r3, #32]
}
 8005e90:	bf00      	nop
 8005e92:	371c      	adds	r7, #28
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr
 8005e9c:	40012c00 	.word	0x40012c00
 8005ea0:	40013400 	.word	0x40013400
 8005ea4:	40014000 	.word	0x40014000
 8005ea8:	40014400 	.word	0x40014400
 8005eac:	40014800 	.word	0x40014800
 8005eb0:	40015000 	.word	0x40015000

08005eb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
 8005ec8:	f023 0210 	bic.w	r2, r3, #16
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ee2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	021b      	lsls	r3, r3, #8
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f023 0320 	bic.w	r3, r3, #32
 8005f02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	011b      	lsls	r3, r3, #4
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a2c      	ldr	r2, [pc, #176]	@ (8005fc4 <TIM_OC2_SetConfig+0x110>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d007      	beq.n	8005f28 <TIM_OC2_SetConfig+0x74>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a2b      	ldr	r2, [pc, #172]	@ (8005fc8 <TIM_OC2_SetConfig+0x114>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d003      	beq.n	8005f28 <TIM_OC2_SetConfig+0x74>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a2a      	ldr	r2, [pc, #168]	@ (8005fcc <TIM_OC2_SetConfig+0x118>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d10d      	bne.n	8005f44 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	011b      	lsls	r3, r3, #4
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a1f      	ldr	r2, [pc, #124]	@ (8005fc4 <TIM_OC2_SetConfig+0x110>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d013      	beq.n	8005f74 <TIM_OC2_SetConfig+0xc0>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a1e      	ldr	r2, [pc, #120]	@ (8005fc8 <TIM_OC2_SetConfig+0x114>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d00f      	beq.n	8005f74 <TIM_OC2_SetConfig+0xc0>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a1e      	ldr	r2, [pc, #120]	@ (8005fd0 <TIM_OC2_SetConfig+0x11c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d00b      	beq.n	8005f74 <TIM_OC2_SetConfig+0xc0>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a1d      	ldr	r2, [pc, #116]	@ (8005fd4 <TIM_OC2_SetConfig+0x120>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d007      	beq.n	8005f74 <TIM_OC2_SetConfig+0xc0>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a1c      	ldr	r2, [pc, #112]	@ (8005fd8 <TIM_OC2_SetConfig+0x124>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d003      	beq.n	8005f74 <TIM_OC2_SetConfig+0xc0>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a17      	ldr	r2, [pc, #92]	@ (8005fcc <TIM_OC2_SetConfig+0x118>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d113      	bne.n	8005f9c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	621a      	str	r2, [r3, #32]
}
 8005fb6:	bf00      	nop
 8005fb8:	371c      	adds	r7, #28
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	40012c00 	.word	0x40012c00
 8005fc8:	40013400 	.word	0x40013400
 8005fcc:	40015000 	.word	0x40015000
 8005fd0:	40014000 	.word	0x40014000
 8005fd4:	40014400 	.word	0x40014400
 8005fd8:	40014800 	.word	0x40014800

08005fdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b087      	sub	sp, #28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800600a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800600e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f023 0303 	bic.w	r3, r3, #3
 8006016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	021b      	lsls	r3, r3, #8
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	4313      	orrs	r3, r2
 8006034:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a2b      	ldr	r2, [pc, #172]	@ (80060e8 <TIM_OC3_SetConfig+0x10c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d007      	beq.n	800604e <TIM_OC3_SetConfig+0x72>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a2a      	ldr	r2, [pc, #168]	@ (80060ec <TIM_OC3_SetConfig+0x110>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d003      	beq.n	800604e <TIM_OC3_SetConfig+0x72>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a29      	ldr	r2, [pc, #164]	@ (80060f0 <TIM_OC3_SetConfig+0x114>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d10d      	bne.n	800606a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006054:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	021b      	lsls	r3, r3, #8
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	4313      	orrs	r3, r2
 8006060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a1e      	ldr	r2, [pc, #120]	@ (80060e8 <TIM_OC3_SetConfig+0x10c>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d013      	beq.n	800609a <TIM_OC3_SetConfig+0xbe>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a1d      	ldr	r2, [pc, #116]	@ (80060ec <TIM_OC3_SetConfig+0x110>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d00f      	beq.n	800609a <TIM_OC3_SetConfig+0xbe>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a1d      	ldr	r2, [pc, #116]	@ (80060f4 <TIM_OC3_SetConfig+0x118>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d00b      	beq.n	800609a <TIM_OC3_SetConfig+0xbe>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a1c      	ldr	r2, [pc, #112]	@ (80060f8 <TIM_OC3_SetConfig+0x11c>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d007      	beq.n	800609a <TIM_OC3_SetConfig+0xbe>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a1b      	ldr	r2, [pc, #108]	@ (80060fc <TIM_OC3_SetConfig+0x120>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d003      	beq.n	800609a <TIM_OC3_SetConfig+0xbe>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a16      	ldr	r2, [pc, #88]	@ (80060f0 <TIM_OC3_SetConfig+0x114>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d113      	bne.n	80060c2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80060a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80060a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	011b      	lsls	r3, r3, #4
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	011b      	lsls	r3, r3, #4
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	4313      	orrs	r3, r2
 80060c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	621a      	str	r2, [r3, #32]
}
 80060dc:	bf00      	nop
 80060de:	371c      	adds	r7, #28
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	40012c00 	.word	0x40012c00
 80060ec:	40013400 	.word	0x40013400
 80060f0:	40015000 	.word	0x40015000
 80060f4:	40014000 	.word	0x40014000
 80060f8:	40014400 	.word	0x40014400
 80060fc:	40014800 	.word	0x40014800

08006100 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800612e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800613a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	021b      	lsls	r3, r3, #8
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	4313      	orrs	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800614e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	031b      	lsls	r3, r3, #12
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	4313      	orrs	r3, r2
 800615a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a2c      	ldr	r2, [pc, #176]	@ (8006210 <TIM_OC4_SetConfig+0x110>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d007      	beq.n	8006174 <TIM_OC4_SetConfig+0x74>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a2b      	ldr	r2, [pc, #172]	@ (8006214 <TIM_OC4_SetConfig+0x114>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d003      	beq.n	8006174 <TIM_OC4_SetConfig+0x74>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a2a      	ldr	r2, [pc, #168]	@ (8006218 <TIM_OC4_SetConfig+0x118>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d10d      	bne.n	8006190 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800617a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	031b      	lsls	r3, r3, #12
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	4313      	orrs	r3, r2
 8006186:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800618e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a1f      	ldr	r2, [pc, #124]	@ (8006210 <TIM_OC4_SetConfig+0x110>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d013      	beq.n	80061c0 <TIM_OC4_SetConfig+0xc0>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a1e      	ldr	r2, [pc, #120]	@ (8006214 <TIM_OC4_SetConfig+0x114>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d00f      	beq.n	80061c0 <TIM_OC4_SetConfig+0xc0>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a1e      	ldr	r2, [pc, #120]	@ (800621c <TIM_OC4_SetConfig+0x11c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d00b      	beq.n	80061c0 <TIM_OC4_SetConfig+0xc0>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a1d      	ldr	r2, [pc, #116]	@ (8006220 <TIM_OC4_SetConfig+0x120>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d007      	beq.n	80061c0 <TIM_OC4_SetConfig+0xc0>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a1c      	ldr	r2, [pc, #112]	@ (8006224 <TIM_OC4_SetConfig+0x124>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d003      	beq.n	80061c0 <TIM_OC4_SetConfig+0xc0>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a17      	ldr	r2, [pc, #92]	@ (8006218 <TIM_OC4_SetConfig+0x118>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d113      	bne.n	80061e8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061c6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80061ce:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	019b      	lsls	r3, r3, #6
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	4313      	orrs	r3, r2
 80061da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	019b      	lsls	r3, r3, #6
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685a      	ldr	r2, [r3, #4]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	621a      	str	r2, [r3, #32]
}
 8006202:	bf00      	nop
 8006204:	371c      	adds	r7, #28
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	40012c00 	.word	0x40012c00
 8006214:	40013400 	.word	0x40013400
 8006218:	40015000 	.word	0x40015000
 800621c:	40014000 	.word	0x40014000
 8006220:	40014400 	.word	0x40014400
 8006224:	40014800 	.word	0x40014800

08006228 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006228:	b480      	push	{r7}
 800622a:	b087      	sub	sp, #28
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a1b      	ldr	r3, [r3, #32]
 800623c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800624e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006256:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800625a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4313      	orrs	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800626c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	041b      	lsls	r3, r3, #16
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	4313      	orrs	r3, r2
 8006278:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a19      	ldr	r2, [pc, #100]	@ (80062e4 <TIM_OC5_SetConfig+0xbc>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d013      	beq.n	80062aa <TIM_OC5_SetConfig+0x82>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a18      	ldr	r2, [pc, #96]	@ (80062e8 <TIM_OC5_SetConfig+0xc0>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d00f      	beq.n	80062aa <TIM_OC5_SetConfig+0x82>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a17      	ldr	r2, [pc, #92]	@ (80062ec <TIM_OC5_SetConfig+0xc4>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d00b      	beq.n	80062aa <TIM_OC5_SetConfig+0x82>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a16      	ldr	r2, [pc, #88]	@ (80062f0 <TIM_OC5_SetConfig+0xc8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d007      	beq.n	80062aa <TIM_OC5_SetConfig+0x82>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a15      	ldr	r2, [pc, #84]	@ (80062f4 <TIM_OC5_SetConfig+0xcc>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d003      	beq.n	80062aa <TIM_OC5_SetConfig+0x82>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a14      	ldr	r2, [pc, #80]	@ (80062f8 <TIM_OC5_SetConfig+0xd0>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d109      	bne.n	80062be <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	021b      	lsls	r3, r3, #8
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	621a      	str	r2, [r3, #32]
}
 80062d8:	bf00      	nop
 80062da:	371c      	adds	r7, #28
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	40012c00 	.word	0x40012c00
 80062e8:	40013400 	.word	0x40013400
 80062ec:	40014000 	.word	0x40014000
 80062f0:	40014400 	.word	0x40014400
 80062f4:	40014800 	.word	0x40014800
 80062f8:	40015000 	.word	0x40015000

080062fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800632a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800632e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	021b      	lsls	r3, r3, #8
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	4313      	orrs	r3, r2
 800633a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	051b      	lsls	r3, r3, #20
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	4313      	orrs	r3, r2
 800634e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a1a      	ldr	r2, [pc, #104]	@ (80063bc <TIM_OC6_SetConfig+0xc0>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d013      	beq.n	8006380 <TIM_OC6_SetConfig+0x84>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a19      	ldr	r2, [pc, #100]	@ (80063c0 <TIM_OC6_SetConfig+0xc4>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d00f      	beq.n	8006380 <TIM_OC6_SetConfig+0x84>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a18      	ldr	r2, [pc, #96]	@ (80063c4 <TIM_OC6_SetConfig+0xc8>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d00b      	beq.n	8006380 <TIM_OC6_SetConfig+0x84>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a17      	ldr	r2, [pc, #92]	@ (80063c8 <TIM_OC6_SetConfig+0xcc>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d007      	beq.n	8006380 <TIM_OC6_SetConfig+0x84>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a16      	ldr	r2, [pc, #88]	@ (80063cc <TIM_OC6_SetConfig+0xd0>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d003      	beq.n	8006380 <TIM_OC6_SetConfig+0x84>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a15      	ldr	r2, [pc, #84]	@ (80063d0 <TIM_OC6_SetConfig+0xd4>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d109      	bne.n	8006394 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006386:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	029b      	lsls	r3, r3, #10
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	4313      	orrs	r3, r2
 8006392:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	621a      	str	r2, [r3, #32]
}
 80063ae:	bf00      	nop
 80063b0:	371c      	adds	r7, #28
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	40012c00 	.word	0x40012c00
 80063c0:	40013400 	.word	0x40013400
 80063c4:	40014000 	.word	0x40014000
 80063c8:	40014400 	.word	0x40014400
 80063cc:	40014800 	.word	0x40014800
 80063d0:	40015000 	.word	0x40015000

080063d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b087      	sub	sp, #28
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	f023 0201 	bic.w	r2, r3, #1
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	011b      	lsls	r3, r3, #4
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	4313      	orrs	r3, r2
 8006408:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f023 030a 	bic.w	r3, r3, #10
 8006410:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	4313      	orrs	r3, r2
 8006418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	621a      	str	r2, [r3, #32]
}
 8006426:	bf00      	nop
 8006428:	371c      	adds	r7, #28
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006432:	b480      	push	{r7}
 8006434:	b087      	sub	sp, #28
 8006436:	af00      	add	r7, sp, #0
 8006438:	60f8      	str	r0, [r7, #12]
 800643a:	60b9      	str	r1, [r7, #8]
 800643c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6a1b      	ldr	r3, [r3, #32]
 8006448:	f023 0210 	bic.w	r2, r3, #16
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	699b      	ldr	r3, [r3, #24]
 8006454:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800645c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	031b      	lsls	r3, r3, #12
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	4313      	orrs	r3, r2
 8006466:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800646e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	011b      	lsls	r3, r3, #4
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	4313      	orrs	r3, r2
 8006478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	621a      	str	r2, [r3, #32]
}
 8006486:	bf00      	nop
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006492:	b480      	push	{r7}
 8006494:	b085      	sub	sp, #20
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80064a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	f043 0307 	orr.w	r3, r3, #7
 80064b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	609a      	str	r2, [r3, #8]
}
 80064c0:	bf00      	nop
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
 80064d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	021a      	lsls	r2, r3, #8
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	431a      	orrs	r2, r3
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	609a      	str	r2, [r3, #8]
}
 8006500:	bf00      	nop
 8006502:	371c      	adds	r7, #28
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	f003 031f 	and.w	r3, r3, #31
 800651e:	2201      	movs	r2, #1
 8006520:	fa02 f303 	lsl.w	r3, r2, r3
 8006524:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6a1a      	ldr	r2, [r3, #32]
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	43db      	mvns	r3, r3
 800652e:	401a      	ands	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6a1a      	ldr	r2, [r3, #32]
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f003 031f 	and.w	r3, r3, #31
 800653e:	6879      	ldr	r1, [r7, #4]
 8006540:	fa01 f303 	lsl.w	r3, r1, r3
 8006544:	431a      	orrs	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	621a      	str	r2, [r3, #32]
}
 800654a:	bf00      	nop
 800654c:	371c      	adds	r7, #28
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
	...

08006558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006568:	2b01      	cmp	r3, #1
 800656a:	d101      	bne.n	8006570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800656c:	2302      	movs	r3, #2
 800656e:	e074      	b.n	800665a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a34      	ldr	r2, [pc, #208]	@ (8006668 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d009      	beq.n	80065ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a33      	ldr	r2, [pc, #204]	@ (800666c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d004      	beq.n	80065ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a31      	ldr	r2, [pc, #196]	@ (8006670 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d108      	bne.n	80065c0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80065b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	4313      	orrs	r3, r2
 80065be:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80065c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a21      	ldr	r2, [pc, #132]	@ (8006668 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d022      	beq.n	800662e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065f0:	d01d      	beq.n	800662e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a1f      	ldr	r2, [pc, #124]	@ (8006674 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d018      	beq.n	800662e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a1d      	ldr	r2, [pc, #116]	@ (8006678 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d013      	beq.n	800662e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a1c      	ldr	r2, [pc, #112]	@ (800667c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d00e      	beq.n	800662e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a15      	ldr	r2, [pc, #84]	@ (800666c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d009      	beq.n	800662e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a18      	ldr	r2, [pc, #96]	@ (8006680 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d004      	beq.n	800662e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a11      	ldr	r2, [pc, #68]	@ (8006670 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d10c      	bne.n	8006648 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006634:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	4313      	orrs	r3, r2
 800663e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	40012c00 	.word	0x40012c00
 800666c:	40013400 	.word	0x40013400
 8006670:	40015000 	.word	0x40015000
 8006674:	40000400 	.word	0x40000400
 8006678:	40000800 	.word	0x40000800
 800667c:	40000c00 	.word	0x40000c00
 8006680:	40014000 	.word	0x40014000

08006684 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006698:	2b01      	cmp	r3, #1
 800669a:	d101      	bne.n	80066a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800669c:	2302      	movs	r3, #2
 800669e:	e078      	b.n	8006792 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4313      	orrs	r3, r2
 80066de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006706:	4313      	orrs	r3, r2
 8006708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	041b      	lsls	r3, r3, #16
 8006716:	4313      	orrs	r3, r2
 8006718:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	69db      	ldr	r3, [r3, #28]
 8006724:	4313      	orrs	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a1c      	ldr	r2, [pc, #112]	@ (80067a0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d009      	beq.n	8006746 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a1b      	ldr	r2, [pc, #108]	@ (80067a4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d004      	beq.n	8006746 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a19      	ldr	r2, [pc, #100]	@ (80067a8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d11c      	bne.n	8006780 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006750:	051b      	lsls	r3, r3, #20
 8006752:	4313      	orrs	r3, r2
 8006754:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	4313      	orrs	r3, r2
 8006762:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800676e:	4313      	orrs	r3, r2
 8006770:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800677c:	4313      	orrs	r3, r2
 800677e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	40012c00 	.word	0x40012c00
 80067a4:	40013400 	.word	0x40013400
 80067a8:	40015000 	.word	0x40015000

080067ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e042      	b.n	80068d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006850:	2b00      	cmp	r3, #0
 8006852:	d106      	bne.n	8006862 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7fa ffed 	bl	800183c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2224      	movs	r2, #36	@ 0x24
 8006866:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f022 0201 	bic.w	r2, r2, #1
 8006878:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800687e:	2b00      	cmp	r3, #0
 8006880:	d002      	beq.n	8006888 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 ff42 	bl	800770c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 fc43 	bl	8007114 <UART_SetConfig>
 800688e:	4603      	mov	r3, r0
 8006890:	2b01      	cmp	r3, #1
 8006892:	d101      	bne.n	8006898 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e01b      	b.n	80068d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	685a      	ldr	r2, [r3, #4]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80068a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689a      	ldr	r2, [r3, #8]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80068b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f042 0201 	orr.w	r2, r2, #1
 80068c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 ffc1 	bl	8007850 <UART_CheckIdleState>
 80068ce:	4603      	mov	r3, r0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b08a      	sub	sp, #40	@ 0x28
 80068dc:	af02      	add	r7, sp, #8
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	603b      	str	r3, [r7, #0]
 80068e4:	4613      	mov	r3, r2
 80068e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068ee:	2b20      	cmp	r3, #32
 80068f0:	d17b      	bne.n	80069ea <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <HAL_UART_Transmit+0x26>
 80068f8:	88fb      	ldrh	r3, [r7, #6]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d101      	bne.n	8006902 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e074      	b.n	80069ec <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2221      	movs	r2, #33	@ 0x21
 800690e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006912:	f7fb f951 	bl	8001bb8 <HAL_GetTick>
 8006916:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	88fa      	ldrh	r2, [r7, #6]
 800691c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	88fa      	ldrh	r2, [r7, #6]
 8006924:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006930:	d108      	bne.n	8006944 <HAL_UART_Transmit+0x6c>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d104      	bne.n	8006944 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800693a:	2300      	movs	r3, #0
 800693c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	61bb      	str	r3, [r7, #24]
 8006942:	e003      	b.n	800694c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006948:	2300      	movs	r3, #0
 800694a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800694c:	e030      	b.n	80069b0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	2200      	movs	r2, #0
 8006956:	2180      	movs	r1, #128	@ 0x80
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f001 f823 	bl	80079a4 <UART_WaitOnFlagUntilTimeout>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d005      	beq.n	8006970 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2220      	movs	r2, #32
 8006968:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e03d      	b.n	80069ec <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10b      	bne.n	800698e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	461a      	mov	r2, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006984:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	3302      	adds	r3, #2
 800698a:	61bb      	str	r3, [r7, #24]
 800698c:	e007      	b.n	800699e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	781a      	ldrb	r2, [r3, #0]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	3301      	adds	r3, #1
 800699c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	3b01      	subs	r3, #1
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1c8      	bne.n	800694e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	2200      	movs	r2, #0
 80069c4:	2140      	movs	r1, #64	@ 0x40
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 ffec 	bl	80079a4 <UART_WaitOnFlagUntilTimeout>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d005      	beq.n	80069de <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2220      	movs	r2, #32
 80069d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e006      	b.n	80069ec <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2220      	movs	r2, #32
 80069e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80069e6:	2300      	movs	r3, #0
 80069e8:	e000      	b.n	80069ec <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80069ea:	2302      	movs	r3, #2
  }
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3720      	adds	r7, #32
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b08a      	sub	sp, #40	@ 0x28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	4613      	mov	r3, r2
 8006a00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a08:	2b20      	cmp	r3, #32
 8006a0a:	d137      	bne.n	8006a7c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d002      	beq.n	8006a18 <HAL_UART_Receive_IT+0x24>
 8006a12:	88fb      	ldrh	r3, [r7, #6]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e030      	b.n	8006a7e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a18      	ldr	r2, [pc, #96]	@ (8006a88 <HAL_UART_Receive_IT+0x94>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d01f      	beq.n	8006a6c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d018      	beq.n	8006a6c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	e853 3f00 	ldrex	r3, [r3]
 8006a46:	613b      	str	r3, [r7, #16]
   return(result);
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	461a      	mov	r2, r3
 8006a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a58:	623b      	str	r3, [r7, #32]
 8006a5a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5c:	69f9      	ldr	r1, [r7, #28]
 8006a5e:	6a3a      	ldr	r2, [r7, #32]
 8006a60:	e841 2300 	strex	r3, r2, [r1]
 8006a64:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1e6      	bne.n	8006a3a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a6c:	88fb      	ldrh	r3, [r7, #6]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	68b9      	ldr	r1, [r7, #8]
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f001 f804 	bl	8007a80 <UART_Start_Receive_IT>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	e000      	b.n	8006a7e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006a7c:	2302      	movs	r3, #2
  }
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3728      	adds	r7, #40	@ 0x28
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	40008000 	.word	0x40008000

08006a8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b0ba      	sub	sp, #232	@ 0xe8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	69db      	ldr	r3, [r3, #28]
 8006a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ab2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006ab6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006aba:	4013      	ands	r3, r2
 8006abc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006ac0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d11b      	bne.n	8006b00 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006acc:	f003 0320 	and.w	r3, r3, #32
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d015      	beq.n	8006b00 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ad8:	f003 0320 	and.w	r3, r3, #32
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d105      	bne.n	8006aec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ae4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d009      	beq.n	8006b00 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 82e3 	beq.w	80070bc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	4798      	blx	r3
      }
      return;
 8006afe:	e2dd      	b.n	80070bc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f000 8123 	beq.w	8006d50 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006b0a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006b0e:	4b8d      	ldr	r3, [pc, #564]	@ (8006d44 <HAL_UART_IRQHandler+0x2b8>)
 8006b10:	4013      	ands	r3, r2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d106      	bne.n	8006b24 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006b16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006b1a:	4b8b      	ldr	r3, [pc, #556]	@ (8006d48 <HAL_UART_IRQHandler+0x2bc>)
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 8116 	beq.w	8006d50 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b28:	f003 0301 	and.w	r3, r3, #1
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d011      	beq.n	8006b54 <HAL_UART_IRQHandler+0xc8>
 8006b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00b      	beq.n	8006b54 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2201      	movs	r2, #1
 8006b42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b4a:	f043 0201 	orr.w	r2, r3, #1
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b58:	f003 0302 	and.w	r3, r3, #2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d011      	beq.n	8006b84 <HAL_UART_IRQHandler+0xf8>
 8006b60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00b      	beq.n	8006b84 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2202      	movs	r2, #2
 8006b72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b7a:	f043 0204 	orr.w	r2, r3, #4
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b88:	f003 0304 	and.w	r3, r3, #4
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d011      	beq.n	8006bb4 <HAL_UART_IRQHandler+0x128>
 8006b90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00b      	beq.n	8006bb4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2204      	movs	r2, #4
 8006ba2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006baa:	f043 0202 	orr.w	r2, r3, #2
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bb8:	f003 0308 	and.w	r3, r3, #8
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d017      	beq.n	8006bf0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bc4:	f003 0320 	and.w	r3, r3, #32
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d105      	bne.n	8006bd8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006bcc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006bd0:	4b5c      	ldr	r3, [pc, #368]	@ (8006d44 <HAL_UART_IRQHandler+0x2b8>)
 8006bd2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00b      	beq.n	8006bf0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2208      	movs	r2, #8
 8006bde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006be6:	f043 0208 	orr.w	r2, r3, #8
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d012      	beq.n	8006c22 <HAL_UART_IRQHandler+0x196>
 8006bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00c      	beq.n	8006c22 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c18:	f043 0220 	orr.w	r2, r3, #32
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 8249 	beq.w	80070c0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c32:	f003 0320 	and.w	r3, r3, #32
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d013      	beq.n	8006c62 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c3e:	f003 0320 	and.w	r3, r3, #32
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d105      	bne.n	8006c52 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d007      	beq.n	8006c62 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d003      	beq.n	8006c62 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c68:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c76:	2b40      	cmp	r3, #64	@ 0x40
 8006c78:	d005      	beq.n	8006c86 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c7e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d054      	beq.n	8006d30 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f001 f81c 	bl	8007cc4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c96:	2b40      	cmp	r3, #64	@ 0x40
 8006c98:	d146      	bne.n	8006d28 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	3308      	adds	r3, #8
 8006ca0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ca8:	e853 3f00 	ldrex	r3, [r3]
 8006cac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006cb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006cb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3308      	adds	r3, #8
 8006cc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006cc6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006cca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006cd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006cd6:	e841 2300 	strex	r3, r2, [r1]
 8006cda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006cde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1d9      	bne.n	8006c9a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d017      	beq.n	8006d20 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cf6:	4a15      	ldr	r2, [pc, #84]	@ (8006d4c <HAL_UART_IRQHandler+0x2c0>)
 8006cf8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7fc fedd 	bl	8003ac0 <HAL_DMA_Abort_IT>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d019      	beq.n	8006d40 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006d1a:	4610      	mov	r0, r2
 8006d1c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d1e:	e00f      	b.n	8006d40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f9e1 	bl	80070e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d26:	e00b      	b.n	8006d40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f9dd 	bl	80070e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d2e:	e007      	b.n	8006d40 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f9d9 	bl	80070e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006d3e:	e1bf      	b.n	80070c0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d40:	bf00      	nop
    return;
 8006d42:	e1bd      	b.n	80070c0 <HAL_UART_IRQHandler+0x634>
 8006d44:	10000001 	.word	0x10000001
 8006d48:	04000120 	.word	0x04000120
 8006d4c:	08007d91 	.word	0x08007d91

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	f040 8153 	bne.w	8007000 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d5e:	f003 0310 	and.w	r3, r3, #16
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f000 814c 	beq.w	8007000 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d6c:	f003 0310 	and.w	r3, r3, #16
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 8145 	beq.w	8007000 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2210      	movs	r2, #16
 8006d7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d88:	2b40      	cmp	r3, #64	@ 0x40
 8006d8a:	f040 80bb 	bne.w	8006f04 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 818f 	beq.w	80070c4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006dac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006db0:	429a      	cmp	r2, r3
 8006db2:	f080 8187 	bcs.w	80070c4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006dbc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0320 	and.w	r3, r3, #32
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f040 8087 	bne.w	8006ee2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ddc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006de0:	e853 3f00 	ldrex	r3, [r3]
 8006de4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006de8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006dec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006df0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	461a      	mov	r2, r3
 8006dfa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006dfe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006e02:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e06:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006e0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006e0e:	e841 2300 	strex	r3, r2, [r1]
 8006e12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006e16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1da      	bne.n	8006dd4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	3308      	adds	r3, #8
 8006e24:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e28:	e853 3f00 	ldrex	r3, [r3]
 8006e2c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006e2e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e30:	f023 0301 	bic.w	r3, r3, #1
 8006e34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3308      	adds	r3, #8
 8006e3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006e42:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006e46:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e48:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006e4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006e4e:	e841 2300 	strex	r3, r2, [r1]
 8006e52:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006e54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1e1      	bne.n	8006e1e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3308      	adds	r3, #8
 8006e60:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e64:	e853 3f00 	ldrex	r3, [r3]
 8006e68:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006e6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	3308      	adds	r3, #8
 8006e7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006e7e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006e80:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e82:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006e84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006e86:	e841 2300 	strex	r3, r2, [r1]
 8006e8a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006e8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1e3      	bne.n	8006e5a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2220      	movs	r2, #32
 8006e96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ea8:	e853 3f00 	ldrex	r3, [r3]
 8006eac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006eae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006eb0:	f023 0310 	bic.w	r3, r3, #16
 8006eb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ec2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ec4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ec8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006eca:	e841 2300 	strex	r3, r2, [r1]
 8006ece:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ed0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1e4      	bne.n	8006ea0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7fc fd96 	bl	8003a0e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2202      	movs	r2, #2
 8006ee6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	4619      	mov	r1, r3
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 f8fd 	bl	80070fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f02:	e0df      	b.n	80070c4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f000 80d1 	beq.w	80070c8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006f26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f000 80cc 	beq.w	80070c8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f38:	e853 3f00 	ldrex	r3, [r3]
 8006f3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006f52:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f54:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f5a:	e841 2300 	strex	r3, r2, [r1]
 8006f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1e4      	bne.n	8006f30 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	3308      	adds	r3, #8
 8006f6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f70:	e853 3f00 	ldrex	r3, [r3]
 8006f74:	623b      	str	r3, [r7, #32]
   return(result);
 8006f76:	6a3b      	ldr	r3, [r7, #32]
 8006f78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f7c:	f023 0301 	bic.w	r3, r3, #1
 8006f80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3308      	adds	r3, #8
 8006f8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006f8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f96:	e841 2300 	strex	r3, r2, [r1]
 8006f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1e1      	bne.n	8006f66 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	e853 3f00 	ldrex	r3, [r3]
 8006fc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f023 0310 	bic.w	r3, r3, #16
 8006fca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006fd8:	61fb      	str	r3, [r7, #28]
 8006fda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fdc:	69b9      	ldr	r1, [r7, #24]
 8006fde:	69fa      	ldr	r2, [r7, #28]
 8006fe0:	e841 2300 	strex	r3, r2, [r1]
 8006fe4:	617b      	str	r3, [r7, #20]
   return(result);
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1e4      	bne.n	8006fb6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ff2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f87f 	bl	80070fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ffe:	e063      	b.n	80070c8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007004:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00e      	beq.n	800702a <HAL_UART_IRQHandler+0x59e>
 800700c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007010:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d008      	beq.n	800702a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007020:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f001 fc12 	bl	800884c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007028:	e051      	b.n	80070ce <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800702a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800702e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007032:	2b00      	cmp	r3, #0
 8007034:	d014      	beq.n	8007060 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800703a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800703e:	2b00      	cmp	r3, #0
 8007040:	d105      	bne.n	800704e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007046:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d008      	beq.n	8007060 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007052:	2b00      	cmp	r3, #0
 8007054:	d03a      	beq.n	80070cc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	4798      	blx	r3
    }
    return;
 800705e:	e035      	b.n	80070cc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007068:	2b00      	cmp	r3, #0
 800706a:	d009      	beq.n	8007080 <HAL_UART_IRQHandler+0x5f4>
 800706c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007074:	2b00      	cmp	r3, #0
 8007076:	d003      	beq.n	8007080 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 fe9f 	bl	8007dbc <UART_EndTransmit_IT>
    return;
 800707e:	e026      	b.n	80070ce <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007084:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d009      	beq.n	80070a0 <HAL_UART_IRQHandler+0x614>
 800708c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007090:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d003      	beq.n	80070a0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f001 fbeb 	bl	8008874 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800709e:	e016      	b.n	80070ce <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80070a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d010      	beq.n	80070ce <HAL_UART_IRQHandler+0x642>
 80070ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	da0c      	bge.n	80070ce <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f001 fbd3 	bl	8008860 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070ba:	e008      	b.n	80070ce <HAL_UART_IRQHandler+0x642>
      return;
 80070bc:	bf00      	nop
 80070be:	e006      	b.n	80070ce <HAL_UART_IRQHandler+0x642>
    return;
 80070c0:	bf00      	nop
 80070c2:	e004      	b.n	80070ce <HAL_UART_IRQHandler+0x642>
      return;
 80070c4:	bf00      	nop
 80070c6:	e002      	b.n	80070ce <HAL_UART_IRQHandler+0x642>
      return;
 80070c8:	bf00      	nop
 80070ca:	e000      	b.n	80070ce <HAL_UART_IRQHandler+0x642>
    return;
 80070cc:	bf00      	nop
  }
}
 80070ce:	37e8      	adds	r7, #232	@ 0xe8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	460b      	mov	r3, r1
 8007106:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007118:	b08c      	sub	sp, #48	@ 0x30
 800711a:	af00      	add	r7, sp, #0
 800711c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800711e:	2300      	movs	r3, #0
 8007120:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	689a      	ldr	r2, [r3, #8]
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	431a      	orrs	r2, r3
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	431a      	orrs	r2, r3
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	69db      	ldr	r3, [r3, #28]
 8007138:	4313      	orrs	r3, r2
 800713a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	4baa      	ldr	r3, [pc, #680]	@ (80073ec <UART_SetConfig+0x2d8>)
 8007144:	4013      	ands	r3, r2
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	6812      	ldr	r2, [r2, #0]
 800714a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800714c:	430b      	orrs	r3, r1
 800714e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	68da      	ldr	r2, [r3, #12]
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	430a      	orrs	r2, r1
 8007164:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a9f      	ldr	r2, [pc, #636]	@ (80073f0 <UART_SetConfig+0x2dc>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d004      	beq.n	8007180 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800717c:	4313      	orrs	r3, r2
 800717e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800718a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	6812      	ldr	r2, [r2, #0]
 8007192:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007194:	430b      	orrs	r3, r1
 8007196:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800719e:	f023 010f 	bic.w	r1, r3, #15
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a90      	ldr	r2, [pc, #576]	@ (80073f4 <UART_SetConfig+0x2e0>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d125      	bne.n	8007204 <UART_SetConfig+0xf0>
 80071b8:	4b8f      	ldr	r3, [pc, #572]	@ (80073f8 <UART_SetConfig+0x2e4>)
 80071ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071be:	f003 0303 	and.w	r3, r3, #3
 80071c2:	2b03      	cmp	r3, #3
 80071c4:	d81a      	bhi.n	80071fc <UART_SetConfig+0xe8>
 80071c6:	a201      	add	r2, pc, #4	@ (adr r2, 80071cc <UART_SetConfig+0xb8>)
 80071c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071cc:	080071dd 	.word	0x080071dd
 80071d0:	080071ed 	.word	0x080071ed
 80071d4:	080071e5 	.word	0x080071e5
 80071d8:	080071f5 	.word	0x080071f5
 80071dc:	2301      	movs	r3, #1
 80071de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071e2:	e116      	b.n	8007412 <UART_SetConfig+0x2fe>
 80071e4:	2302      	movs	r3, #2
 80071e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ea:	e112      	b.n	8007412 <UART_SetConfig+0x2fe>
 80071ec:	2304      	movs	r3, #4
 80071ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071f2:	e10e      	b.n	8007412 <UART_SetConfig+0x2fe>
 80071f4:	2308      	movs	r3, #8
 80071f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071fa:	e10a      	b.n	8007412 <UART_SetConfig+0x2fe>
 80071fc:	2310      	movs	r3, #16
 80071fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007202:	e106      	b.n	8007412 <UART_SetConfig+0x2fe>
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a7c      	ldr	r2, [pc, #496]	@ (80073fc <UART_SetConfig+0x2e8>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d138      	bne.n	8007280 <UART_SetConfig+0x16c>
 800720e:	4b7a      	ldr	r3, [pc, #488]	@ (80073f8 <UART_SetConfig+0x2e4>)
 8007210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007214:	f003 030c 	and.w	r3, r3, #12
 8007218:	2b0c      	cmp	r3, #12
 800721a:	d82d      	bhi.n	8007278 <UART_SetConfig+0x164>
 800721c:	a201      	add	r2, pc, #4	@ (adr r2, 8007224 <UART_SetConfig+0x110>)
 800721e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007222:	bf00      	nop
 8007224:	08007259 	.word	0x08007259
 8007228:	08007279 	.word	0x08007279
 800722c:	08007279 	.word	0x08007279
 8007230:	08007279 	.word	0x08007279
 8007234:	08007269 	.word	0x08007269
 8007238:	08007279 	.word	0x08007279
 800723c:	08007279 	.word	0x08007279
 8007240:	08007279 	.word	0x08007279
 8007244:	08007261 	.word	0x08007261
 8007248:	08007279 	.word	0x08007279
 800724c:	08007279 	.word	0x08007279
 8007250:	08007279 	.word	0x08007279
 8007254:	08007271 	.word	0x08007271
 8007258:	2300      	movs	r3, #0
 800725a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800725e:	e0d8      	b.n	8007412 <UART_SetConfig+0x2fe>
 8007260:	2302      	movs	r3, #2
 8007262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007266:	e0d4      	b.n	8007412 <UART_SetConfig+0x2fe>
 8007268:	2304      	movs	r3, #4
 800726a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800726e:	e0d0      	b.n	8007412 <UART_SetConfig+0x2fe>
 8007270:	2308      	movs	r3, #8
 8007272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007276:	e0cc      	b.n	8007412 <UART_SetConfig+0x2fe>
 8007278:	2310      	movs	r3, #16
 800727a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800727e:	e0c8      	b.n	8007412 <UART_SetConfig+0x2fe>
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a5e      	ldr	r2, [pc, #376]	@ (8007400 <UART_SetConfig+0x2ec>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d125      	bne.n	80072d6 <UART_SetConfig+0x1c2>
 800728a:	4b5b      	ldr	r3, [pc, #364]	@ (80073f8 <UART_SetConfig+0x2e4>)
 800728c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007290:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007294:	2b30      	cmp	r3, #48	@ 0x30
 8007296:	d016      	beq.n	80072c6 <UART_SetConfig+0x1b2>
 8007298:	2b30      	cmp	r3, #48	@ 0x30
 800729a:	d818      	bhi.n	80072ce <UART_SetConfig+0x1ba>
 800729c:	2b20      	cmp	r3, #32
 800729e:	d00a      	beq.n	80072b6 <UART_SetConfig+0x1a2>
 80072a0:	2b20      	cmp	r3, #32
 80072a2:	d814      	bhi.n	80072ce <UART_SetConfig+0x1ba>
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d002      	beq.n	80072ae <UART_SetConfig+0x19a>
 80072a8:	2b10      	cmp	r3, #16
 80072aa:	d008      	beq.n	80072be <UART_SetConfig+0x1aa>
 80072ac:	e00f      	b.n	80072ce <UART_SetConfig+0x1ba>
 80072ae:	2300      	movs	r3, #0
 80072b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072b4:	e0ad      	b.n	8007412 <UART_SetConfig+0x2fe>
 80072b6:	2302      	movs	r3, #2
 80072b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072bc:	e0a9      	b.n	8007412 <UART_SetConfig+0x2fe>
 80072be:	2304      	movs	r3, #4
 80072c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072c4:	e0a5      	b.n	8007412 <UART_SetConfig+0x2fe>
 80072c6:	2308      	movs	r3, #8
 80072c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072cc:	e0a1      	b.n	8007412 <UART_SetConfig+0x2fe>
 80072ce:	2310      	movs	r3, #16
 80072d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072d4:	e09d      	b.n	8007412 <UART_SetConfig+0x2fe>
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a4a      	ldr	r2, [pc, #296]	@ (8007404 <UART_SetConfig+0x2f0>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d125      	bne.n	800732c <UART_SetConfig+0x218>
 80072e0:	4b45      	ldr	r3, [pc, #276]	@ (80073f8 <UART_SetConfig+0x2e4>)
 80072e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80072ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80072ec:	d016      	beq.n	800731c <UART_SetConfig+0x208>
 80072ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80072f0:	d818      	bhi.n	8007324 <UART_SetConfig+0x210>
 80072f2:	2b80      	cmp	r3, #128	@ 0x80
 80072f4:	d00a      	beq.n	800730c <UART_SetConfig+0x1f8>
 80072f6:	2b80      	cmp	r3, #128	@ 0x80
 80072f8:	d814      	bhi.n	8007324 <UART_SetConfig+0x210>
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d002      	beq.n	8007304 <UART_SetConfig+0x1f0>
 80072fe:	2b40      	cmp	r3, #64	@ 0x40
 8007300:	d008      	beq.n	8007314 <UART_SetConfig+0x200>
 8007302:	e00f      	b.n	8007324 <UART_SetConfig+0x210>
 8007304:	2300      	movs	r3, #0
 8007306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800730a:	e082      	b.n	8007412 <UART_SetConfig+0x2fe>
 800730c:	2302      	movs	r3, #2
 800730e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007312:	e07e      	b.n	8007412 <UART_SetConfig+0x2fe>
 8007314:	2304      	movs	r3, #4
 8007316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800731a:	e07a      	b.n	8007412 <UART_SetConfig+0x2fe>
 800731c:	2308      	movs	r3, #8
 800731e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007322:	e076      	b.n	8007412 <UART_SetConfig+0x2fe>
 8007324:	2310      	movs	r3, #16
 8007326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800732a:	e072      	b.n	8007412 <UART_SetConfig+0x2fe>
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a35      	ldr	r2, [pc, #212]	@ (8007408 <UART_SetConfig+0x2f4>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d12a      	bne.n	800738c <UART_SetConfig+0x278>
 8007336:	4b30      	ldr	r3, [pc, #192]	@ (80073f8 <UART_SetConfig+0x2e4>)
 8007338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800733c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007340:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007344:	d01a      	beq.n	800737c <UART_SetConfig+0x268>
 8007346:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800734a:	d81b      	bhi.n	8007384 <UART_SetConfig+0x270>
 800734c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007350:	d00c      	beq.n	800736c <UART_SetConfig+0x258>
 8007352:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007356:	d815      	bhi.n	8007384 <UART_SetConfig+0x270>
 8007358:	2b00      	cmp	r3, #0
 800735a:	d003      	beq.n	8007364 <UART_SetConfig+0x250>
 800735c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007360:	d008      	beq.n	8007374 <UART_SetConfig+0x260>
 8007362:	e00f      	b.n	8007384 <UART_SetConfig+0x270>
 8007364:	2300      	movs	r3, #0
 8007366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800736a:	e052      	b.n	8007412 <UART_SetConfig+0x2fe>
 800736c:	2302      	movs	r3, #2
 800736e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007372:	e04e      	b.n	8007412 <UART_SetConfig+0x2fe>
 8007374:	2304      	movs	r3, #4
 8007376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800737a:	e04a      	b.n	8007412 <UART_SetConfig+0x2fe>
 800737c:	2308      	movs	r3, #8
 800737e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007382:	e046      	b.n	8007412 <UART_SetConfig+0x2fe>
 8007384:	2310      	movs	r3, #16
 8007386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800738a:	e042      	b.n	8007412 <UART_SetConfig+0x2fe>
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a17      	ldr	r2, [pc, #92]	@ (80073f0 <UART_SetConfig+0x2dc>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d13a      	bne.n	800740c <UART_SetConfig+0x2f8>
 8007396:	4b18      	ldr	r3, [pc, #96]	@ (80073f8 <UART_SetConfig+0x2e4>)
 8007398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800739c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80073a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80073a4:	d01a      	beq.n	80073dc <UART_SetConfig+0x2c8>
 80073a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80073aa:	d81b      	bhi.n	80073e4 <UART_SetConfig+0x2d0>
 80073ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073b0:	d00c      	beq.n	80073cc <UART_SetConfig+0x2b8>
 80073b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073b6:	d815      	bhi.n	80073e4 <UART_SetConfig+0x2d0>
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d003      	beq.n	80073c4 <UART_SetConfig+0x2b0>
 80073bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073c0:	d008      	beq.n	80073d4 <UART_SetConfig+0x2c0>
 80073c2:	e00f      	b.n	80073e4 <UART_SetConfig+0x2d0>
 80073c4:	2300      	movs	r3, #0
 80073c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073ca:	e022      	b.n	8007412 <UART_SetConfig+0x2fe>
 80073cc:	2302      	movs	r3, #2
 80073ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073d2:	e01e      	b.n	8007412 <UART_SetConfig+0x2fe>
 80073d4:	2304      	movs	r3, #4
 80073d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073da:	e01a      	b.n	8007412 <UART_SetConfig+0x2fe>
 80073dc:	2308      	movs	r3, #8
 80073de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073e2:	e016      	b.n	8007412 <UART_SetConfig+0x2fe>
 80073e4:	2310      	movs	r3, #16
 80073e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073ea:	e012      	b.n	8007412 <UART_SetConfig+0x2fe>
 80073ec:	cfff69f3 	.word	0xcfff69f3
 80073f0:	40008000 	.word	0x40008000
 80073f4:	40013800 	.word	0x40013800
 80073f8:	40021000 	.word	0x40021000
 80073fc:	40004400 	.word	0x40004400
 8007400:	40004800 	.word	0x40004800
 8007404:	40004c00 	.word	0x40004c00
 8007408:	40005000 	.word	0x40005000
 800740c:	2310      	movs	r3, #16
 800740e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4aae      	ldr	r2, [pc, #696]	@ (80076d0 <UART_SetConfig+0x5bc>)
 8007418:	4293      	cmp	r3, r2
 800741a:	f040 8097 	bne.w	800754c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800741e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007422:	2b08      	cmp	r3, #8
 8007424:	d823      	bhi.n	800746e <UART_SetConfig+0x35a>
 8007426:	a201      	add	r2, pc, #4	@ (adr r2, 800742c <UART_SetConfig+0x318>)
 8007428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742c:	08007451 	.word	0x08007451
 8007430:	0800746f 	.word	0x0800746f
 8007434:	08007459 	.word	0x08007459
 8007438:	0800746f 	.word	0x0800746f
 800743c:	0800745f 	.word	0x0800745f
 8007440:	0800746f 	.word	0x0800746f
 8007444:	0800746f 	.word	0x0800746f
 8007448:	0800746f 	.word	0x0800746f
 800744c:	08007467 	.word	0x08007467
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007450:	f7fd facc 	bl	80049ec <HAL_RCC_GetPCLK1Freq>
 8007454:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007456:	e010      	b.n	800747a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007458:	4b9e      	ldr	r3, [pc, #632]	@ (80076d4 <UART_SetConfig+0x5c0>)
 800745a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800745c:	e00d      	b.n	800747a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800745e:	f7fd fa57 	bl	8004910 <HAL_RCC_GetSysClockFreq>
 8007462:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007464:	e009      	b.n	800747a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007466:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800746a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800746c:	e005      	b.n	800747a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800746e:	2300      	movs	r3, #0
 8007470:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007478:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800747a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 8130 	beq.w	80076e2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007486:	4a94      	ldr	r2, [pc, #592]	@ (80076d8 <UART_SetConfig+0x5c4>)
 8007488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800748c:	461a      	mov	r2, r3
 800748e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007490:	fbb3 f3f2 	udiv	r3, r3, r2
 8007494:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	685a      	ldr	r2, [r3, #4]
 800749a:	4613      	mov	r3, r2
 800749c:	005b      	lsls	r3, r3, #1
 800749e:	4413      	add	r3, r2
 80074a0:	69ba      	ldr	r2, [r7, #24]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d305      	bcc.n	80074b2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074ac:	69ba      	ldr	r2, [r7, #24]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d903      	bls.n	80074ba <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80074b8:	e113      	b.n	80076e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074bc:	2200      	movs	r2, #0
 80074be:	60bb      	str	r3, [r7, #8]
 80074c0:	60fa      	str	r2, [r7, #12]
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074c6:	4a84      	ldr	r2, [pc, #528]	@ (80076d8 <UART_SetConfig+0x5c4>)
 80074c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	2200      	movs	r2, #0
 80074d0:	603b      	str	r3, [r7, #0]
 80074d2:	607a      	str	r2, [r7, #4]
 80074d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80074dc:	f7f9 fae2 	bl	8000aa4 <__aeabi_uldivmod>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	4610      	mov	r0, r2
 80074e6:	4619      	mov	r1, r3
 80074e8:	f04f 0200 	mov.w	r2, #0
 80074ec:	f04f 0300 	mov.w	r3, #0
 80074f0:	020b      	lsls	r3, r1, #8
 80074f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80074f6:	0202      	lsls	r2, r0, #8
 80074f8:	6979      	ldr	r1, [r7, #20]
 80074fa:	6849      	ldr	r1, [r1, #4]
 80074fc:	0849      	lsrs	r1, r1, #1
 80074fe:	2000      	movs	r0, #0
 8007500:	460c      	mov	r4, r1
 8007502:	4605      	mov	r5, r0
 8007504:	eb12 0804 	adds.w	r8, r2, r4
 8007508:	eb43 0905 	adc.w	r9, r3, r5
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	469a      	mov	sl, r3
 8007514:	4693      	mov	fp, r2
 8007516:	4652      	mov	r2, sl
 8007518:	465b      	mov	r3, fp
 800751a:	4640      	mov	r0, r8
 800751c:	4649      	mov	r1, r9
 800751e:	f7f9 fac1 	bl	8000aa4 <__aeabi_uldivmod>
 8007522:	4602      	mov	r2, r0
 8007524:	460b      	mov	r3, r1
 8007526:	4613      	mov	r3, r2
 8007528:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800752a:	6a3b      	ldr	r3, [r7, #32]
 800752c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007530:	d308      	bcc.n	8007544 <UART_SetConfig+0x430>
 8007532:	6a3b      	ldr	r3, [r7, #32]
 8007534:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007538:	d204      	bcs.n	8007544 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	6a3a      	ldr	r2, [r7, #32]
 8007540:	60da      	str	r2, [r3, #12]
 8007542:	e0ce      	b.n	80076e2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800754a:	e0ca      	b.n	80076e2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	69db      	ldr	r3, [r3, #28]
 8007550:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007554:	d166      	bne.n	8007624 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007556:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800755a:	2b08      	cmp	r3, #8
 800755c:	d827      	bhi.n	80075ae <UART_SetConfig+0x49a>
 800755e:	a201      	add	r2, pc, #4	@ (adr r2, 8007564 <UART_SetConfig+0x450>)
 8007560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007564:	08007589 	.word	0x08007589
 8007568:	08007591 	.word	0x08007591
 800756c:	08007599 	.word	0x08007599
 8007570:	080075af 	.word	0x080075af
 8007574:	0800759f 	.word	0x0800759f
 8007578:	080075af 	.word	0x080075af
 800757c:	080075af 	.word	0x080075af
 8007580:	080075af 	.word	0x080075af
 8007584:	080075a7 	.word	0x080075a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007588:	f7fd fa30 	bl	80049ec <HAL_RCC_GetPCLK1Freq>
 800758c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800758e:	e014      	b.n	80075ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007590:	f7fd fa42 	bl	8004a18 <HAL_RCC_GetPCLK2Freq>
 8007594:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007596:	e010      	b.n	80075ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007598:	4b4e      	ldr	r3, [pc, #312]	@ (80076d4 <UART_SetConfig+0x5c0>)
 800759a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800759c:	e00d      	b.n	80075ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800759e:	f7fd f9b7 	bl	8004910 <HAL_RCC_GetSysClockFreq>
 80075a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80075a4:	e009      	b.n	80075ba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80075ac:	e005      	b.n	80075ba <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80075b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f000 8090 	beq.w	80076e2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c6:	4a44      	ldr	r2, [pc, #272]	@ (80076d8 <UART_SetConfig+0x5c4>)
 80075c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075cc:	461a      	mov	r2, r3
 80075ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80075d4:	005a      	lsls	r2, r3, #1
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	085b      	lsrs	r3, r3, #1
 80075dc:	441a      	add	r2, r3
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80075e6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075e8:	6a3b      	ldr	r3, [r7, #32]
 80075ea:	2b0f      	cmp	r3, #15
 80075ec:	d916      	bls.n	800761c <UART_SetConfig+0x508>
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075f4:	d212      	bcs.n	800761c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075f6:	6a3b      	ldr	r3, [r7, #32]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	f023 030f 	bic.w	r3, r3, #15
 80075fe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007600:	6a3b      	ldr	r3, [r7, #32]
 8007602:	085b      	lsrs	r3, r3, #1
 8007604:	b29b      	uxth	r3, r3
 8007606:	f003 0307 	and.w	r3, r3, #7
 800760a:	b29a      	uxth	r2, r3
 800760c:	8bfb      	ldrh	r3, [r7, #30]
 800760e:	4313      	orrs	r3, r2
 8007610:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	8bfa      	ldrh	r2, [r7, #30]
 8007618:	60da      	str	r2, [r3, #12]
 800761a:	e062      	b.n	80076e2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007622:	e05e      	b.n	80076e2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007624:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007628:	2b08      	cmp	r3, #8
 800762a:	d828      	bhi.n	800767e <UART_SetConfig+0x56a>
 800762c:	a201      	add	r2, pc, #4	@ (adr r2, 8007634 <UART_SetConfig+0x520>)
 800762e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007632:	bf00      	nop
 8007634:	08007659 	.word	0x08007659
 8007638:	08007661 	.word	0x08007661
 800763c:	08007669 	.word	0x08007669
 8007640:	0800767f 	.word	0x0800767f
 8007644:	0800766f 	.word	0x0800766f
 8007648:	0800767f 	.word	0x0800767f
 800764c:	0800767f 	.word	0x0800767f
 8007650:	0800767f 	.word	0x0800767f
 8007654:	08007677 	.word	0x08007677
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007658:	f7fd f9c8 	bl	80049ec <HAL_RCC_GetPCLK1Freq>
 800765c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800765e:	e014      	b.n	800768a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007660:	f7fd f9da 	bl	8004a18 <HAL_RCC_GetPCLK2Freq>
 8007664:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007666:	e010      	b.n	800768a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007668:	4b1a      	ldr	r3, [pc, #104]	@ (80076d4 <UART_SetConfig+0x5c0>)
 800766a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800766c:	e00d      	b.n	800768a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800766e:	f7fd f94f 	bl	8004910 <HAL_RCC_GetSysClockFreq>
 8007672:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007674:	e009      	b.n	800768a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007676:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800767a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800767c:	e005      	b.n	800768a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800767e:	2300      	movs	r3, #0
 8007680:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007688:	bf00      	nop
    }

    if (pclk != 0U)
 800768a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768c:	2b00      	cmp	r3, #0
 800768e:	d028      	beq.n	80076e2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007694:	4a10      	ldr	r2, [pc, #64]	@ (80076d8 <UART_SetConfig+0x5c4>)
 8007696:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800769a:	461a      	mov	r2, r3
 800769c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800769e:	fbb3 f2f2 	udiv	r2, r3, r2
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	085b      	lsrs	r3, r3, #1
 80076a8:	441a      	add	r2, r3
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80076b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076b4:	6a3b      	ldr	r3, [r7, #32]
 80076b6:	2b0f      	cmp	r3, #15
 80076b8:	d910      	bls.n	80076dc <UART_SetConfig+0x5c8>
 80076ba:	6a3b      	ldr	r3, [r7, #32]
 80076bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076c0:	d20c      	bcs.n	80076dc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076c2:	6a3b      	ldr	r3, [r7, #32]
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	60da      	str	r2, [r3, #12]
 80076cc:	e009      	b.n	80076e2 <UART_SetConfig+0x5ce>
 80076ce:	bf00      	nop
 80076d0:	40008000 	.word	0x40008000
 80076d4:	00f42400 	.word	0x00f42400
 80076d8:	08008b18 	.word	0x08008b18
      }
      else
      {
        ret = HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	2200      	movs	r2, #0
 80076f6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	2200      	movs	r2, #0
 80076fc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80076fe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007702:	4618      	mov	r0, r3
 8007704:	3730      	adds	r7, #48	@ 0x30
 8007706:	46bd      	mov	sp, r7
 8007708:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800770c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007718:	f003 0308 	and.w	r3, r3, #8
 800771c:	2b00      	cmp	r3, #0
 800771e:	d00a      	beq.n	8007736 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	430a      	orrs	r2, r1
 8007734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800773a:	f003 0301 	and.w	r3, r3, #1
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00a      	beq.n	8007758 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	430a      	orrs	r2, r1
 8007756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800775c:	f003 0302 	and.w	r3, r3, #2
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00a      	beq.n	800777a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	430a      	orrs	r2, r1
 8007778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800777e:	f003 0304 	and.w	r3, r3, #4
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00a      	beq.n	800779c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	430a      	orrs	r2, r1
 800779a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077a0:	f003 0310 	and.w	r3, r3, #16
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00a      	beq.n	80077be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	430a      	orrs	r2, r1
 80077bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077c2:	f003 0320 	and.w	r3, r3, #32
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00a      	beq.n	80077e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	430a      	orrs	r2, r1
 80077de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d01a      	beq.n	8007822 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	430a      	orrs	r2, r1
 8007800:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007806:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800780a:	d10a      	bne.n	8007822 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	430a      	orrs	r2, r1
 8007820:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00a      	beq.n	8007844 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	430a      	orrs	r2, r1
 8007842:	605a      	str	r2, [r3, #4]
  }
}
 8007844:	bf00      	nop
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b098      	sub	sp, #96	@ 0x60
 8007854:	af02      	add	r7, sp, #8
 8007856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007860:	f7fa f9aa 	bl	8001bb8 <HAL_GetTick>
 8007864:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0308 	and.w	r3, r3, #8
 8007870:	2b08      	cmp	r3, #8
 8007872:	d12f      	bne.n	80078d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007874:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800787c:	2200      	movs	r2, #0
 800787e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f88e 	bl	80079a4 <UART_WaitOnFlagUntilTimeout>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d022      	beq.n	80078d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007896:	e853 3f00 	ldrex	r3, [r3]
 800789a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800789c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800789e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	461a      	mov	r2, r3
 80078aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80078ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80078b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078b4:	e841 2300 	strex	r3, r2, [r1]
 80078b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80078ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1e6      	bne.n	800788e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2220      	movs	r2, #32
 80078c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078d0:	2303      	movs	r3, #3
 80078d2:	e063      	b.n	800799c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 0304 	and.w	r3, r3, #4
 80078de:	2b04      	cmp	r3, #4
 80078e0:	d149      	bne.n	8007976 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80078e6:	9300      	str	r3, [sp, #0]
 80078e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078ea:	2200      	movs	r2, #0
 80078ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f857 	bl	80079a4 <UART_WaitOnFlagUntilTimeout>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d03c      	beq.n	8007976 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007904:	e853 3f00 	ldrex	r3, [r3]
 8007908:	623b      	str	r3, [r7, #32]
   return(result);
 800790a:	6a3b      	ldr	r3, [r7, #32]
 800790c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007910:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	461a      	mov	r2, r3
 8007918:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800791a:	633b      	str	r3, [r7, #48]	@ 0x30
 800791c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007920:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007922:	e841 2300 	strex	r3, r2, [r1]
 8007926:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1e6      	bne.n	80078fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	3308      	adds	r3, #8
 8007934:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	e853 3f00 	ldrex	r3, [r3]
 800793c:	60fb      	str	r3, [r7, #12]
   return(result);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f023 0301 	bic.w	r3, r3, #1
 8007944:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	3308      	adds	r3, #8
 800794c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800794e:	61fa      	str	r2, [r7, #28]
 8007950:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007952:	69b9      	ldr	r1, [r7, #24]
 8007954:	69fa      	ldr	r2, [r7, #28]
 8007956:	e841 2300 	strex	r3, r2, [r1]
 800795a:	617b      	str	r3, [r7, #20]
   return(result);
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1e5      	bne.n	800792e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2220      	movs	r2, #32
 8007966:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	e012      	b.n	800799c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2220      	movs	r2, #32
 800797a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2220      	movs	r2, #32
 8007982:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3758      	adds	r7, #88	@ 0x58
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	603b      	str	r3, [r7, #0]
 80079b0:	4613      	mov	r3, r2
 80079b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079b4:	e04f      	b.n	8007a56 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079bc:	d04b      	beq.n	8007a56 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079be:	f7fa f8fb 	bl	8001bb8 <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	69ba      	ldr	r2, [r7, #24]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d302      	bcc.n	80079d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d101      	bne.n	80079d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e04e      	b.n	8007a76 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 0304 	and.w	r3, r3, #4
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d037      	beq.n	8007a56 <UART_WaitOnFlagUntilTimeout+0xb2>
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	2b80      	cmp	r3, #128	@ 0x80
 80079ea:	d034      	beq.n	8007a56 <UART_WaitOnFlagUntilTimeout+0xb2>
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	2b40      	cmp	r3, #64	@ 0x40
 80079f0:	d031      	beq.n	8007a56 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	69db      	ldr	r3, [r3, #28]
 80079f8:	f003 0308 	and.w	r3, r3, #8
 80079fc:	2b08      	cmp	r3, #8
 80079fe:	d110      	bne.n	8007a22 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2208      	movs	r2, #8
 8007a06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f000 f95b 	bl	8007cc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2208      	movs	r2, #8
 8007a12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e029      	b.n	8007a76 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	69db      	ldr	r3, [r3, #28]
 8007a28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a30:	d111      	bne.n	8007a56 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f000 f941 	bl	8007cc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2220      	movs	r2, #32
 8007a46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007a52:	2303      	movs	r3, #3
 8007a54:	e00f      	b.n	8007a76 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	69da      	ldr	r2, [r3, #28]
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	4013      	ands	r3, r2
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	bf0c      	ite	eq
 8007a66:	2301      	moveq	r3, #1
 8007a68:	2300      	movne	r3, #0
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	79fb      	ldrb	r3, [r7, #7]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d0a0      	beq.n	80079b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
	...

08007a80 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b0a3      	sub	sp, #140	@ 0x8c
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	68ba      	ldr	r2, [r7, #8]
 8007a92:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	88fa      	ldrh	r2, [r7, #6]
 8007a98:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	88fa      	ldrh	r2, [r7, #6]
 8007aa0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ab2:	d10e      	bne.n	8007ad2 <UART_Start_Receive_IT+0x52>
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d105      	bne.n	8007ac8 <UART_Start_Receive_IT+0x48>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007ac2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007ac6:	e02d      	b.n	8007b24 <UART_Start_Receive_IT+0xa4>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	22ff      	movs	r2, #255	@ 0xff
 8007acc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007ad0:	e028      	b.n	8007b24 <UART_Start_Receive_IT+0xa4>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10d      	bne.n	8007af6 <UART_Start_Receive_IT+0x76>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d104      	bne.n	8007aec <UART_Start_Receive_IT+0x6c>
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	22ff      	movs	r2, #255	@ 0xff
 8007ae6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007aea:	e01b      	b.n	8007b24 <UART_Start_Receive_IT+0xa4>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	227f      	movs	r2, #127	@ 0x7f
 8007af0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007af4:	e016      	b.n	8007b24 <UART_Start_Receive_IT+0xa4>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007afe:	d10d      	bne.n	8007b1c <UART_Start_Receive_IT+0x9c>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	691b      	ldr	r3, [r3, #16]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d104      	bne.n	8007b12 <UART_Start_Receive_IT+0x92>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	227f      	movs	r2, #127	@ 0x7f
 8007b0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007b10:	e008      	b.n	8007b24 <UART_Start_Receive_IT+0xa4>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	223f      	movs	r2, #63	@ 0x3f
 8007b16:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007b1a:	e003      	b.n	8007b24 <UART_Start_Receive_IT+0xa4>
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2222      	movs	r2, #34	@ 0x22
 8007b30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3308      	adds	r3, #8
 8007b3a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b3e:	e853 3f00 	ldrex	r3, [r3]
 8007b42:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007b44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b46:	f043 0301 	orr.w	r3, r3, #1
 8007b4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	3308      	adds	r3, #8
 8007b54:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007b58:	673a      	str	r2, [r7, #112]	@ 0x70
 8007b5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007b5e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007b60:	e841 2300 	strex	r3, r2, [r1]
 8007b64:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007b66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d1e3      	bne.n	8007b34 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b74:	d14f      	bne.n	8007c16 <UART_Start_Receive_IT+0x196>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007b7c:	88fa      	ldrh	r2, [r7, #6]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d349      	bcc.n	8007c16 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b8a:	d107      	bne.n	8007b9c <UART_Start_Receive_IT+0x11c>
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d103      	bne.n	8007b9c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	4a47      	ldr	r2, [pc, #284]	@ (8007cb4 <UART_Start_Receive_IT+0x234>)
 8007b98:	675a      	str	r2, [r3, #116]	@ 0x74
 8007b9a:	e002      	b.n	8007ba2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	4a46      	ldr	r2, [pc, #280]	@ (8007cb8 <UART_Start_Receive_IT+0x238>)
 8007ba0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d01a      	beq.n	8007be0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bb2:	e853 3f00 	ldrex	r3, [r3]
 8007bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007bb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bbe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007bcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007bce:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007bd2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007bd4:	e841 2300 	strex	r3, r2, [r1]
 8007bd8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1e4      	bne.n	8007baa <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	3308      	adds	r3, #8
 8007be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bea:	e853 3f00 	ldrex	r3, [r3]
 8007bee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	3308      	adds	r3, #8
 8007bfe:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007c00:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007c02:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c04:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007c06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c08:	e841 2300 	strex	r3, r2, [r1]
 8007c0c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007c0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1e5      	bne.n	8007be0 <UART_Start_Receive_IT+0x160>
 8007c14:	e046      	b.n	8007ca4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c1e:	d107      	bne.n	8007c30 <UART_Start_Receive_IT+0x1b0>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d103      	bne.n	8007c30 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	4a24      	ldr	r2, [pc, #144]	@ (8007cbc <UART_Start_Receive_IT+0x23c>)
 8007c2c:	675a      	str	r2, [r3, #116]	@ 0x74
 8007c2e:	e002      	b.n	8007c36 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	4a23      	ldr	r2, [pc, #140]	@ (8007cc0 <UART_Start_Receive_IT+0x240>)
 8007c34:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	691b      	ldr	r3, [r3, #16]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d019      	beq.n	8007c72 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c46:	e853 3f00 	ldrex	r3, [r3]
 8007c4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c4e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007c52:	677b      	str	r3, [r7, #116]	@ 0x74
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c5e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c60:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007c62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c64:	e841 2300 	strex	r3, r2, [r1]
 8007c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1e6      	bne.n	8007c3e <UART_Start_Receive_IT+0x1be>
 8007c70:	e018      	b.n	8007ca4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	e853 3f00 	ldrex	r3, [r3]
 8007c7e:	613b      	str	r3, [r7, #16]
   return(result);
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	f043 0320 	orr.w	r3, r3, #32
 8007c86:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c90:	623b      	str	r3, [r7, #32]
 8007c92:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c94:	69f9      	ldr	r1, [r7, #28]
 8007c96:	6a3a      	ldr	r2, [r7, #32]
 8007c98:	e841 2300 	strex	r3, r2, [r1]
 8007c9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1e6      	bne.n	8007c72 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	378c      	adds	r7, #140	@ 0x8c
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	080084e5 	.word	0x080084e5
 8007cb8:	08008185 	.word	0x08008185
 8007cbc:	08007fcd 	.word	0x08007fcd
 8007cc0:	08007e15 	.word	0x08007e15

08007cc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b095      	sub	sp, #84	@ 0x54
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cd4:	e853 3f00 	ldrex	r3, [r3]
 8007cd8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ce0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cea:	643b      	str	r3, [r7, #64]	@ 0x40
 8007cec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007cf0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007cf2:	e841 2300 	strex	r3, r2, [r1]
 8007cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1e6      	bne.n	8007ccc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	3308      	adds	r3, #8
 8007d04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d06:	6a3b      	ldr	r3, [r7, #32]
 8007d08:	e853 3f00 	ldrex	r3, [r3]
 8007d0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d14:	f023 0301 	bic.w	r3, r3, #1
 8007d18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	3308      	adds	r3, #8
 8007d20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007d24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d2a:	e841 2300 	strex	r3, r2, [r1]
 8007d2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1e3      	bne.n	8007cfe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d118      	bne.n	8007d70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	e853 3f00 	ldrex	r3, [r3]
 8007d4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	f023 0310 	bic.w	r3, r3, #16
 8007d52:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	461a      	mov	r2, r3
 8007d5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d5c:	61bb      	str	r3, [r7, #24]
 8007d5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d60:	6979      	ldr	r1, [r7, #20]
 8007d62:	69ba      	ldr	r2, [r7, #24]
 8007d64:	e841 2300 	strex	r3, r2, [r1]
 8007d68:	613b      	str	r3, [r7, #16]
   return(result);
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1e6      	bne.n	8007d3e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2220      	movs	r2, #32
 8007d74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007d84:	bf00      	nop
 8007d86:	3754      	adds	r7, #84	@ 0x54
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f7ff f99a 	bl	80070e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007db4:	bf00      	nop
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b088      	sub	sp, #32
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	e853 3f00 	ldrex	r3, [r3]
 8007dd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dd8:	61fb      	str	r3, [r7, #28]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	61bb      	str	r3, [r7, #24]
 8007de4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de6:	6979      	ldr	r1, [r7, #20]
 8007de8:	69ba      	ldr	r2, [r7, #24]
 8007dea:	e841 2300 	strex	r3, r2, [r1]
 8007dee:	613b      	str	r3, [r7, #16]
   return(result);
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1e6      	bne.n	8007dc4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f7ff f965 	bl	80070d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e0a:	bf00      	nop
 8007e0c:	3720      	adds	r7, #32
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
	...

08007e14 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b09c      	sub	sp, #112	@ 0x70
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007e22:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e2c:	2b22      	cmp	r3, #34	@ 0x22
 8007e2e:	f040 80be 	bne.w	8007fae <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e38:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007e3c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007e40:	b2d9      	uxtb	r1, r3
 8007e42:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007e46:	b2da      	uxtb	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e4c:	400a      	ands	r2, r1
 8007e4e:	b2d2      	uxtb	r2, r2
 8007e50:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e56:	1c5a      	adds	r2, r3, #1
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	3b01      	subs	r3, #1
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f040 80a1 	bne.w	8007fbe <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e84:	e853 3f00 	ldrex	r3, [r3]
 8007e88:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007e8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	461a      	mov	r2, r3
 8007e98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e9c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ea0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ea2:	e841 2300 	strex	r3, r2, [r1]
 8007ea6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ea8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1e6      	bne.n	8007e7c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3308      	adds	r3, #8
 8007eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb8:	e853 3f00 	ldrex	r3, [r3]
 8007ebc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ec0:	f023 0301 	bic.w	r3, r3, #1
 8007ec4:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	3308      	adds	r3, #8
 8007ecc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007ece:	647a      	str	r2, [r7, #68]	@ 0x44
 8007ed0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ed4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ed6:	e841 2300 	strex	r3, r2, [r1]
 8007eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1e5      	bne.n	8007eae <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2220      	movs	r2, #32
 8007ee6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a33      	ldr	r2, [pc, #204]	@ (8007fc8 <UART_RxISR_8BIT+0x1b4>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d01f      	beq.n	8007f40 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d018      	beq.n	8007f40 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f16:	e853 3f00 	ldrex	r3, [r3]
 8007f1a:	623b      	str	r3, [r7, #32]
   return(result);
 8007f1c:	6a3b      	ldr	r3, [r7, #32]
 8007f1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007f22:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f34:	e841 2300 	strex	r3, r2, [r1]
 8007f38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d1e6      	bne.n	8007f0e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d12e      	bne.n	8007fa6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	e853 3f00 	ldrex	r3, [r3]
 8007f5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f023 0310 	bic.w	r3, r3, #16
 8007f62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	461a      	mov	r2, r3
 8007f6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f6c:	61fb      	str	r3, [r7, #28]
 8007f6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f70:	69b9      	ldr	r1, [r7, #24]
 8007f72:	69fa      	ldr	r2, [r7, #28]
 8007f74:	e841 2300 	strex	r3, r2, [r1]
 8007f78:	617b      	str	r3, [r7, #20]
   return(result);
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1e6      	bne.n	8007f4e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	69db      	ldr	r3, [r3, #28]
 8007f86:	f003 0310 	and.w	r3, r3, #16
 8007f8a:	2b10      	cmp	r3, #16
 8007f8c:	d103      	bne.n	8007f96 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2210      	movs	r2, #16
 8007f94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f7ff f8ac 	bl	80070fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007fa4:	e00b      	b.n	8007fbe <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f7f9 fb64 	bl	8001674 <HAL_UART_RxCpltCallback>
}
 8007fac:	e007      	b.n	8007fbe <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	699a      	ldr	r2, [r3, #24]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f042 0208 	orr.w	r2, r2, #8
 8007fbc:	619a      	str	r2, [r3, #24]
}
 8007fbe:	bf00      	nop
 8007fc0:	3770      	adds	r7, #112	@ 0x70
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	40008000 	.word	0x40008000

08007fcc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b09c      	sub	sp, #112	@ 0x70
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007fda:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fe4:	2b22      	cmp	r3, #34	@ 0x22
 8007fe6:	f040 80be 	bne.w	8008166 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ff0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ff8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007ffa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007ffe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008002:	4013      	ands	r3, r2
 8008004:	b29a      	uxth	r2, r3
 8008006:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008008:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800800e:	1c9a      	adds	r2, r3, #2
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800801a:	b29b      	uxth	r3, r3
 800801c:	3b01      	subs	r3, #1
 800801e:	b29a      	uxth	r2, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800802c:	b29b      	uxth	r3, r3
 800802e:	2b00      	cmp	r3, #0
 8008030:	f040 80a1 	bne.w	8008176 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800803c:	e853 3f00 	ldrex	r3, [r3]
 8008040:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008042:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008044:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008048:	667b      	str	r3, [r7, #100]	@ 0x64
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	461a      	mov	r2, r3
 8008050:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008052:	657b      	str	r3, [r7, #84]	@ 0x54
 8008054:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008056:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008058:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800805a:	e841 2300 	strex	r3, r2, [r1]
 800805e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008060:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1e6      	bne.n	8008034 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	3308      	adds	r3, #8
 800806c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008070:	e853 3f00 	ldrex	r3, [r3]
 8008074:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008078:	f023 0301 	bic.w	r3, r3, #1
 800807c:	663b      	str	r3, [r7, #96]	@ 0x60
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	3308      	adds	r3, #8
 8008084:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008086:	643a      	str	r2, [r7, #64]	@ 0x40
 8008088:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800808c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800808e:	e841 2300 	strex	r3, r2, [r1]
 8008092:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1e5      	bne.n	8008066 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2220      	movs	r2, #32
 800809e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a33      	ldr	r2, [pc, #204]	@ (8008180 <UART_RxISR_16BIT+0x1b4>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d01f      	beq.n	80080f8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d018      	beq.n	80080f8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080cc:	6a3b      	ldr	r3, [r7, #32]
 80080ce:	e853 3f00 	ldrex	r3, [r3]
 80080d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80080da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	461a      	mov	r2, r3
 80080e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080e6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080ec:	e841 2300 	strex	r3, r2, [r1]
 80080f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80080f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1e6      	bne.n	80080c6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d12e      	bne.n	800815e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	e853 3f00 	ldrex	r3, [r3]
 8008112:	60bb      	str	r3, [r7, #8]
   return(result);
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	f023 0310 	bic.w	r3, r3, #16
 800811a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	461a      	mov	r2, r3
 8008122:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008124:	61bb      	str	r3, [r7, #24]
 8008126:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008128:	6979      	ldr	r1, [r7, #20]
 800812a:	69ba      	ldr	r2, [r7, #24]
 800812c:	e841 2300 	strex	r3, r2, [r1]
 8008130:	613b      	str	r3, [r7, #16]
   return(result);
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1e6      	bne.n	8008106 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	69db      	ldr	r3, [r3, #28]
 800813e:	f003 0310 	and.w	r3, r3, #16
 8008142:	2b10      	cmp	r3, #16
 8008144:	d103      	bne.n	800814e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2210      	movs	r2, #16
 800814c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008154:	4619      	mov	r1, r3
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f7fe ffd0 	bl	80070fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800815c:	e00b      	b.n	8008176 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f7f9 fa88 	bl	8001674 <HAL_UART_RxCpltCallback>
}
 8008164:	e007      	b.n	8008176 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	699a      	ldr	r2, [r3, #24]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f042 0208 	orr.w	r2, r2, #8
 8008174:	619a      	str	r2, [r3, #24]
}
 8008176:	bf00      	nop
 8008178:	3770      	adds	r7, #112	@ 0x70
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	40008000 	.word	0x40008000

08008184 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b0ac      	sub	sp, #176	@ 0xb0
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008192:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	69db      	ldr	r3, [r3, #28]
 800819c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081ba:	2b22      	cmp	r3, #34	@ 0x22
 80081bc:	f040 8182 	bne.w	80084c4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80081c6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80081ca:	e125      	b.n	8008418 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081d2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80081d6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80081da:	b2d9      	uxtb	r1, r3
 80081dc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80081e0:	b2da      	uxtb	r2, r3
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081e6:	400a      	ands	r2, r1
 80081e8:	b2d2      	uxtb	r2, r2
 80081ea:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081f0:	1c5a      	adds	r2, r3, #1
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	3b01      	subs	r3, #1
 8008200:	b29a      	uxth	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	69db      	ldr	r3, [r3, #28]
 800820e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008212:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008216:	f003 0307 	and.w	r3, r3, #7
 800821a:	2b00      	cmp	r3, #0
 800821c:	d053      	beq.n	80082c6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800821e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008222:	f003 0301 	and.w	r3, r3, #1
 8008226:	2b00      	cmp	r3, #0
 8008228:	d011      	beq.n	800824e <UART_RxISR_8BIT_FIFOEN+0xca>
 800822a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800822e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00b      	beq.n	800824e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2201      	movs	r2, #1
 800823c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008244:	f043 0201 	orr.w	r2, r3, #1
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800824e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008252:	f003 0302 	and.w	r3, r3, #2
 8008256:	2b00      	cmp	r3, #0
 8008258:	d011      	beq.n	800827e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800825a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800825e:	f003 0301 	and.w	r3, r3, #1
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00b      	beq.n	800827e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2202      	movs	r2, #2
 800826c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008274:	f043 0204 	orr.w	r2, r3, #4
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800827e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008282:	f003 0304 	and.w	r3, r3, #4
 8008286:	2b00      	cmp	r3, #0
 8008288:	d011      	beq.n	80082ae <UART_RxISR_8BIT_FIFOEN+0x12a>
 800828a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800828e:	f003 0301 	and.w	r3, r3, #1
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00b      	beq.n	80082ae <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2204      	movs	r2, #4
 800829c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082a4:	f043 0202 	orr.w	r2, r3, #2
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d006      	beq.n	80082c6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f7fe ff15 	bl	80070e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f040 80a2 	bne.w	8008418 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80082dc:	e853 3f00 	ldrex	r3, [r3]
 80082e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80082e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	461a      	mov	r2, r3
 80082f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80082f8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fa:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80082fc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80082fe:	e841 2300 	strex	r3, r2, [r1]
 8008302:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008304:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1e4      	bne.n	80082d4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	3308      	adds	r3, #8
 8008310:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008312:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008314:	e853 3f00 	ldrex	r3, [r3]
 8008318:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800831a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800831c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008320:	f023 0301 	bic.w	r3, r3, #1
 8008324:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	3308      	adds	r3, #8
 800832e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008332:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008334:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008336:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008338:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800833a:	e841 2300 	strex	r3, r2, [r1]
 800833e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008340:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1e1      	bne.n	800830a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2220      	movs	r2, #32
 800834a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a5f      	ldr	r2, [pc, #380]	@ (80084dc <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d021      	beq.n	80083a8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800836e:	2b00      	cmp	r3, #0
 8008370:	d01a      	beq.n	80083a8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008378:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800837a:	e853 3f00 	ldrex	r3, [r3]
 800837e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008380:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008382:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008386:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	461a      	mov	r2, r3
 8008390:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008394:	657b      	str	r3, [r7, #84]	@ 0x54
 8008396:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008398:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800839a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800839c:	e841 2300 	strex	r3, r2, [r1]
 80083a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80083a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d1e4      	bne.n	8008372 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d130      	bne.n	8008412 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083be:	e853 3f00 	ldrex	r3, [r3]
 80083c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80083c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c6:	f023 0310 	bic.w	r3, r3, #16
 80083ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	461a      	mov	r2, r3
 80083d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80083da:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80083de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80083e0:	e841 2300 	strex	r3, r2, [r1]
 80083e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80083e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1e4      	bne.n	80083b6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	69db      	ldr	r3, [r3, #28]
 80083f2:	f003 0310 	and.w	r3, r3, #16
 80083f6:	2b10      	cmp	r3, #16
 80083f8:	d103      	bne.n	8008402 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2210      	movs	r2, #16
 8008400:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008408:	4619      	mov	r1, r3
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f7fe fe76 	bl	80070fc <HAL_UARTEx_RxEventCallback>
 8008410:	e002      	b.n	8008418 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f7f9 f92e 	bl	8001674 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008418:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800841c:	2b00      	cmp	r3, #0
 800841e:	d006      	beq.n	800842e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008420:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008424:	f003 0320 	and.w	r3, r3, #32
 8008428:	2b00      	cmp	r3, #0
 800842a:	f47f aecf 	bne.w	80081cc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008434:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008438:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800843c:	2b00      	cmp	r3, #0
 800843e:	d049      	beq.n	80084d4 <UART_RxISR_8BIT_FIFOEN+0x350>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008446:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800844a:	429a      	cmp	r2, r3
 800844c:	d242      	bcs.n	80084d4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	3308      	adds	r3, #8
 8008454:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008456:	6a3b      	ldr	r3, [r7, #32]
 8008458:	e853 3f00 	ldrex	r3, [r3]
 800845c:	61fb      	str	r3, [r7, #28]
   return(result);
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008464:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	3308      	adds	r3, #8
 800846e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008472:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008474:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008476:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008478:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800847a:	e841 2300 	strex	r3, r2, [r1]
 800847e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1e3      	bne.n	800844e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a15      	ldr	r2, [pc, #84]	@ (80084e0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800848a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	e853 3f00 	ldrex	r3, [r3]
 8008498:	60bb      	str	r3, [r7, #8]
   return(result);
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	f043 0320 	orr.w	r3, r3, #32
 80084a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	461a      	mov	r2, r3
 80084aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80084ae:	61bb      	str	r3, [r7, #24]
 80084b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b2:	6979      	ldr	r1, [r7, #20]
 80084b4:	69ba      	ldr	r2, [r7, #24]
 80084b6:	e841 2300 	strex	r3, r2, [r1]
 80084ba:	613b      	str	r3, [r7, #16]
   return(result);
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1e4      	bne.n	800848c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80084c2:	e007      	b.n	80084d4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	699a      	ldr	r2, [r3, #24]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f042 0208 	orr.w	r2, r2, #8
 80084d2:	619a      	str	r2, [r3, #24]
}
 80084d4:	bf00      	nop
 80084d6:	37b0      	adds	r7, #176	@ 0xb0
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	40008000 	.word	0x40008000
 80084e0:	08007e15 	.word	0x08007e15

080084e4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b0ae      	sub	sp, #184	@ 0xb8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80084f2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	69db      	ldr	r3, [r3, #28]
 80084fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800851a:	2b22      	cmp	r3, #34	@ 0x22
 800851c:	f040 8186 	bne.w	800882c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008526:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800852a:	e129      	b.n	8008780 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008532:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800853a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800853e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8008542:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008546:	4013      	ands	r3, r2
 8008548:	b29a      	uxth	r2, r3
 800854a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800854e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008554:	1c9a      	adds	r2, r3, #2
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008560:	b29b      	uxth	r3, r3
 8008562:	3b01      	subs	r3, #1
 8008564:	b29a      	uxth	r2, r3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	69db      	ldr	r3, [r3, #28]
 8008572:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008576:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800857a:	f003 0307 	and.w	r3, r3, #7
 800857e:	2b00      	cmp	r3, #0
 8008580:	d053      	beq.n	800862a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008582:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008586:	f003 0301 	and.w	r3, r3, #1
 800858a:	2b00      	cmp	r3, #0
 800858c:	d011      	beq.n	80085b2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800858e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00b      	beq.n	80085b2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2201      	movs	r2, #1
 80085a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085a8:	f043 0201 	orr.w	r2, r3, #1
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80085b6:	f003 0302 	and.w	r3, r3, #2
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d011      	beq.n	80085e2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80085be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00b      	beq.n	80085e2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2202      	movs	r2, #2
 80085d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085d8:	f043 0204 	orr.w	r2, r3, #4
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80085e6:	f003 0304 	and.w	r3, r3, #4
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d011      	beq.n	8008612 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80085ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80085f2:	f003 0301 	and.w	r3, r3, #1
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00b      	beq.n	8008612 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2204      	movs	r2, #4
 8008600:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008608:	f043 0202 	orr.w	r2, r3, #2
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008618:	2b00      	cmp	r3, #0
 800861a:	d006      	beq.n	800862a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f7fe fd63 	bl	80070e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008630:	b29b      	uxth	r3, r3
 8008632:	2b00      	cmp	r3, #0
 8008634:	f040 80a4 	bne.w	8008780 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008640:	e853 3f00 	ldrex	r3, [r3]
 8008644:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008646:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008648:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800864c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	461a      	mov	r2, r3
 8008656:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800865a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800865e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008660:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008662:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008666:	e841 2300 	strex	r3, r2, [r1]
 800866a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800866c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1e2      	bne.n	8008638 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	3308      	adds	r3, #8
 8008678:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800867c:	e853 3f00 	ldrex	r3, [r3]
 8008680:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008682:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008684:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008688:	f023 0301 	bic.w	r3, r3, #1
 800868c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	3308      	adds	r3, #8
 8008696:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800869a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800869c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80086a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80086a2:	e841 2300 	strex	r3, r2, [r1]
 80086a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80086a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1e1      	bne.n	8008672 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2220      	movs	r2, #32
 80086b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a5f      	ldr	r2, [pc, #380]	@ (8008844 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d021      	beq.n	8008710 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d01a      	beq.n	8008710 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086e2:	e853 3f00 	ldrex	r3, [r3]
 80086e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80086e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80086ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	461a      	mov	r2, r3
 80086f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80086fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80086fe:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008700:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008702:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008704:	e841 2300 	strex	r3, r2, [r1]
 8008708:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800870a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800870c:	2b00      	cmp	r3, #0
 800870e:	d1e4      	bne.n	80086da <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008714:	2b01      	cmp	r3, #1
 8008716:	d130      	bne.n	800877a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008726:	e853 3f00 	ldrex	r3, [r3]
 800872a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800872c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800872e:	f023 0310 	bic.w	r3, r3, #16
 8008732:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	461a      	mov	r2, r3
 800873c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008740:	647b      	str	r3, [r7, #68]	@ 0x44
 8008742:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008744:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008746:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008748:	e841 2300 	strex	r3, r2, [r1]
 800874c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800874e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1e4      	bne.n	800871e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	69db      	ldr	r3, [r3, #28]
 800875a:	f003 0310 	and.w	r3, r3, #16
 800875e:	2b10      	cmp	r3, #16
 8008760:	d103      	bne.n	800876a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2210      	movs	r2, #16
 8008768:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008770:	4619      	mov	r1, r3
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7fe fcc2 	bl	80070fc <HAL_UARTEx_RxEventCallback>
 8008778:	e002      	b.n	8008780 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f7f8 ff7a 	bl	8001674 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008780:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8008784:	2b00      	cmp	r3, #0
 8008786:	d006      	beq.n	8008796 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8008788:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800878c:	f003 0320 	and.w	r3, r3, #32
 8008790:	2b00      	cmp	r3, #0
 8008792:	f47f aecb 	bne.w	800852c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800879c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80087a0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d049      	beq.n	800883c <UART_RxISR_16BIT_FIFOEN+0x358>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80087ae:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d242      	bcs.n	800883c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	3308      	adds	r3, #8
 80087bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c0:	e853 3f00 	ldrex	r3, [r3]
 80087c4:	623b      	str	r3, [r7, #32]
   return(result);
 80087c6:	6a3b      	ldr	r3, [r7, #32]
 80087c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80087cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3308      	adds	r3, #8
 80087d6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80087da:	633a      	str	r2, [r7, #48]	@ 0x30
 80087dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087e2:	e841 2300 	strex	r3, r2, [r1]
 80087e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80087e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1e3      	bne.n	80087b6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a15      	ldr	r2, [pc, #84]	@ (8008848 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80087f2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	e853 3f00 	ldrex	r3, [r3]
 8008800:	60fb      	str	r3, [r7, #12]
   return(result);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f043 0320 	orr.w	r3, r3, #32
 8008808:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	461a      	mov	r2, r3
 8008812:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008816:	61fb      	str	r3, [r7, #28]
 8008818:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881a:	69b9      	ldr	r1, [r7, #24]
 800881c:	69fa      	ldr	r2, [r7, #28]
 800881e:	e841 2300 	strex	r3, r2, [r1]
 8008822:	617b      	str	r3, [r7, #20]
   return(result);
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1e4      	bne.n	80087f4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800882a:	e007      	b.n	800883c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	699a      	ldr	r2, [r3, #24]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f042 0208 	orr.w	r2, r2, #8
 800883a:	619a      	str	r2, [r3, #24]
}
 800883c:	bf00      	nop
 800883e:	37b8      	adds	r7, #184	@ 0xb8
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	40008000 	.word	0x40008000
 8008848:	08007fcd 	.word	0x08007fcd

0800884c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008854:	bf00      	nop
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008868:	bf00      	nop
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800887c:	bf00      	nop
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008896:	2b01      	cmp	r3, #1
 8008898:	d101      	bne.n	800889e <HAL_UARTEx_DisableFifoMode+0x16>
 800889a:	2302      	movs	r3, #2
 800889c:	e027      	b.n	80088ee <HAL_UARTEx_DisableFifoMode+0x66>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2201      	movs	r2, #1
 80088a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2224      	movs	r2, #36	@ 0x24
 80088aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f022 0201 	bic.w	r2, r2, #1
 80088c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80088cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2220      	movs	r2, #32
 80088e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3714      	adds	r7, #20
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b084      	sub	sp, #16
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
 8008902:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800890a:	2b01      	cmp	r3, #1
 800890c:	d101      	bne.n	8008912 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800890e:	2302      	movs	r3, #2
 8008910:	e02d      	b.n	800896e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2201      	movs	r2, #1
 8008916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2224      	movs	r2, #36	@ 0x24
 800891e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f022 0201 	bic.w	r2, r2, #1
 8008938:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	683a      	ldr	r2, [r7, #0]
 800894a:	430a      	orrs	r2, r1
 800894c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f850 	bl	80089f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2220      	movs	r2, #32
 8008960:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b084      	sub	sp, #16
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008986:	2b01      	cmp	r3, #1
 8008988:	d101      	bne.n	800898e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800898a:	2302      	movs	r3, #2
 800898c:	e02d      	b.n	80089ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2201      	movs	r2, #1
 8008992:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2224      	movs	r2, #36	@ 0x24
 800899a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f022 0201 	bic.w	r2, r2, #1
 80089b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	683a      	ldr	r2, [r7, #0]
 80089c6:	430a      	orrs	r2, r1
 80089c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f812 	bl	80089f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2220      	movs	r2, #32
 80089dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
	...

080089f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d108      	bne.n	8008a16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008a14:	e031      	b.n	8008a7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008a16:	2308      	movs	r3, #8
 8008a18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008a1a:	2308      	movs	r3, #8
 8008a1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	0e5b      	lsrs	r3, r3, #25
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	f003 0307 	and.w	r3, r3, #7
 8008a2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	0f5b      	lsrs	r3, r3, #29
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	f003 0307 	and.w	r3, r3, #7
 8008a3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a3e:	7bbb      	ldrb	r3, [r7, #14]
 8008a40:	7b3a      	ldrb	r2, [r7, #12]
 8008a42:	4911      	ldr	r1, [pc, #68]	@ (8008a88 <UARTEx_SetNbDataToProcess+0x94>)
 8008a44:	5c8a      	ldrb	r2, [r1, r2]
 8008a46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008a4a:	7b3a      	ldrb	r2, [r7, #12]
 8008a4c:	490f      	ldr	r1, [pc, #60]	@ (8008a8c <UARTEx_SetNbDataToProcess+0x98>)
 8008a4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a50:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a54:	b29a      	uxth	r2, r3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a5c:	7bfb      	ldrb	r3, [r7, #15]
 8008a5e:	7b7a      	ldrb	r2, [r7, #13]
 8008a60:	4909      	ldr	r1, [pc, #36]	@ (8008a88 <UARTEx_SetNbDataToProcess+0x94>)
 8008a62:	5c8a      	ldrb	r2, [r1, r2]
 8008a64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008a68:	7b7a      	ldrb	r2, [r7, #13]
 8008a6a:	4908      	ldr	r1, [pc, #32]	@ (8008a8c <UARTEx_SetNbDataToProcess+0x98>)
 8008a6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008a7a:	bf00      	nop
 8008a7c:	3714      	adds	r7, #20
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	08008b30 	.word	0x08008b30
 8008a8c:	08008b38 	.word	0x08008b38

08008a90 <memset>:
 8008a90:	4402      	add	r2, r0
 8008a92:	4603      	mov	r3, r0
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d100      	bne.n	8008a9a <memset+0xa>
 8008a98:	4770      	bx	lr
 8008a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a9e:	e7f9      	b.n	8008a94 <memset+0x4>

08008aa0 <__libc_init_array>:
 8008aa0:	b570      	push	{r4, r5, r6, lr}
 8008aa2:	4d0d      	ldr	r5, [pc, #52]	@ (8008ad8 <__libc_init_array+0x38>)
 8008aa4:	4c0d      	ldr	r4, [pc, #52]	@ (8008adc <__libc_init_array+0x3c>)
 8008aa6:	1b64      	subs	r4, r4, r5
 8008aa8:	10a4      	asrs	r4, r4, #2
 8008aaa:	2600      	movs	r6, #0
 8008aac:	42a6      	cmp	r6, r4
 8008aae:	d109      	bne.n	8008ac4 <__libc_init_array+0x24>
 8008ab0:	4d0b      	ldr	r5, [pc, #44]	@ (8008ae0 <__libc_init_array+0x40>)
 8008ab2:	4c0c      	ldr	r4, [pc, #48]	@ (8008ae4 <__libc_init_array+0x44>)
 8008ab4:	f000 f818 	bl	8008ae8 <_init>
 8008ab8:	1b64      	subs	r4, r4, r5
 8008aba:	10a4      	asrs	r4, r4, #2
 8008abc:	2600      	movs	r6, #0
 8008abe:	42a6      	cmp	r6, r4
 8008ac0:	d105      	bne.n	8008ace <__libc_init_array+0x2e>
 8008ac2:	bd70      	pop	{r4, r5, r6, pc}
 8008ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ac8:	4798      	blx	r3
 8008aca:	3601      	adds	r6, #1
 8008acc:	e7ee      	b.n	8008aac <__libc_init_array+0xc>
 8008ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ad2:	4798      	blx	r3
 8008ad4:	3601      	adds	r6, #1
 8008ad6:	e7f2      	b.n	8008abe <__libc_init_array+0x1e>
 8008ad8:	08008b48 	.word	0x08008b48
 8008adc:	08008b48 	.word	0x08008b48
 8008ae0:	08008b48 	.word	0x08008b48
 8008ae4:	08008b4c 	.word	0x08008b4c

08008ae8 <_init>:
 8008ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aea:	bf00      	nop
 8008aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aee:	bc08      	pop	{r3}
 8008af0:	469e      	mov	lr, r3
 8008af2:	4770      	bx	lr

08008af4 <_fini>:
 8008af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008af6:	bf00      	nop
 8008af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008afa:	bc08      	pop	{r3}
 8008afc:	469e      	mov	lr, r3
 8008afe:	4770      	bx	lr
